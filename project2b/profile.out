# To display the perf.data header info, please use --header/--header-only options.
#
#
# Total Lost Samples: 0
#
# Samples: 21K of event 'cycles'
# Event count (approx.): 9508675690
#
# Overhead  Command    Shared Object     Symbol                                        
# ........  .........  ................  ..............................................
#
    73.92%  lab2_list  lab2_list         [.] thread_run_list_test
    11.85%  lab2_list  libc.so.6         [.] __strcmp_sse42
     6.15%  lab2_list  lab2_list         [.] SortedList_insert
     3.39%  lab2_list  lab2_list         [.] SortedList_lookup
     0.98%  lab2_list  [vdso]            [.] __vdso_clock_gettime
     0.33%  lab2_list  [kernel.vmlinux]  [k] asm_sysvec_apic_timer_interrupt
     0.31%  lab2_list  lab2_list         [.] strcmp@plt
     0.26%  lab2_list  [kernel.vmlinux]  [k] read_tsc
     0.21%  lab2_list  [kernel.vmlinux]  [k] perf_adjust_freq_unthr_context
     0.14%  lab2_list  [kernel.vmlinux]  [k] native_sched_clock
     0.12%  lab2_list  [kernel.vmlinux]  [k] zen_untrain_ret
     0.12%  lab2_list  [kernel.vmlinux]  [k] __hrtimer_run_queues
     0.09%  lab2_list  [kernel.vmlinux]  [k] trigger_load_balance
     0.09%  lab2_list  [kernel.vmlinux]  [k] native_irq_return_iret
     0.09%  lab2_list  [kernel.vmlinux]  [k] ktime_get_update_offsets_now
     0.08%  lab2_list  [kernel.vmlinux]  [k] perf_ibs_stop
     0.08%  lab2_list  libc.so.6         [.] __GI_____strtoll_l_internal
     0.07%  lab2_list  [kernel.vmlinux]  [k] stackleak_erase
     0.07%  lab2_list  [kernel.vmlinux]  [k] cpuacct_account_field
     0.05%  lab2_list  [kernel.vmlinux]  [k] update_curr
     0.05%  lab2_list  [kernel.vmlinux]  [k] rcu_sched_clock_irq
     0.05%  lab2_list  [kernel.vmlinux]  [k] __x86_indirect_thunk_array
     0.05%  lab2_list  [kernel.vmlinux]  [k] run_posix_cpu_timers
     0.05%  lab2_list  [kernel.vmlinux]  [k] __calc_delta
     0.04%  lab2_list  [kernel.vmlinux]  [k] __update_load_avg_cfs_rq
     0.04%  lab2_list  [kernel.vmlinux]  [k] __update_load_avg_se
     0.04%  lab2_list  [kernel.vmlinux]  [k] _raw_spin_lock
     0.04%  lab2_list  [kernel.vmlinux]  [k] _raw_spin_unlock
     0.03%  lab2_list  [kernel.vmlinux]  [k] irq_entries_start
     0.03%  lab2_list  [kernel.vmlinux]  [k] skb_release_data
     0.03%  lab2_list  libc.so.6         [.] _int_free
     0.03%  lab2_list  [kernel.vmlinux]  [k] swapgs_restore_regs_and_return_to_usermode
     0.03%  lab2_list  [kernel.vmlinux]  [k] arch_scale_freq_tick
     0.03%  lab2_list  [kernel.vmlinux]  [k] native_send_call_func_single_ipi
     0.03%  lab2_list  [kernel.vmlinux]  [k] _raw_spin_lock_irqsave
     0.03%  lab2_list  [kernel.vmlinux]  [k] tick_sched_timer
     0.03%  lab2_list  [kernel.vmlinux]  [k] update_process_times
     0.03%  lab2_list  [kernel.vmlinux]  [k] scheduler_tick
     0.02%  lab2_list  libc.so.6         [.] clock_gettime@@GLIBC_2.17
     0.02%  lab2_list  [kernel.vmlinux]  [k] exit_to_user_mode_prepare
     0.02%  lab2_list  [kernel.vmlinux]  [k] __napi_poll
     0.02%  lab2_list  [kernel.vmlinux]  [k] ktime_get
     0.02%  lab2_list  [kernel.vmlinux]  [k] asm_sysvec_irq_work
     0.02%  lab2_list  [kernel.vmlinux]  [k] psi_task_switch
     0.02%  lab2_list  [kernel.vmlinux]  [k] timekeeping_advance
     0.02%  lab2_list  [nf_conntrack]    [k] __nf_conntrack_find_get.isra.0
     0.02%  lab2_list  [kernel.vmlinux]  [k] __do_softirq
     0.02%  lab2_list  [kernel.vmlinux]  [k] clear_page_rep
     0.02%  lab2_list  [kernel.vmlinux]  [k] unmap_page_range
     0.01%  lab2_list  [kernel.vmlinux]  [k] rb_next
     0.01%  lab2_list  [kernel.vmlinux]  [k] note_gp_changes
     0.01%  lab2_list  [kernel.vmlinux]  [k] irq_exit_rcu
     0.01%  lab2_list  [kernel.vmlinux]  [k] update_load_avg
     0.01%  lab2_list  [kernel.vmlinux]  [k] __queue_work
     0.01%  lab2_list  [kernel.vmlinux]  [k] select_task_rq_fair
     0.01%  lab2_list  libc.so.6         [.] _int_malloc
     0.01%  lab2_list  [kernel.vmlinux]  [k] tcp_event_data_recv
     0.01%  lab2_list  libc.so.6         [.] __printf_buffer
     0.01%  lab2_list  [kernel.vmlinux]  [k] perf_pmu_nop_void
     0.01%  lab2_list  [kernel.vmlinux]  [k] tcp_rack_advance
     0.01%  lab2_list  [kernel.vmlinux]  [k] update_cfs_group
     0.01%  lab2_list  [kernel.vmlinux]  [k] tick_sched_handle
     0.01%  lab2_list  [kernel.vmlinux]  [k] tick_sched_do_timer
     0.01%  lab2_list  [kernel.vmlinux]  [k] native_apic_mem_write
     0.01%  lab2_list  libc.so.6         [.] _itoa_word
     0.01%  lab2_list  [kernel.vmlinux]  [k] timerqueue_add
     0.01%  lab2_list  [kernel.vmlinux]  [k] raise_softirq
     0.01%  lab2_list  [kernel.vmlinux]  [k] perf_ibs_start
     0.01%  lab2_list  [kernel.vmlinux]  [k] irq_work_run_list
     0.01%  lab2_list  [ip_tables]       [k] ipt_do_table
     0.01%  lab2_list  [kernel.vmlinux]  [k] check_preempt_wakeup
     0.01%  lab2_list  libc.so.6         [.] __strndup
     0.01%  lab2_list  [kernel.vmlinux]  [k] try_to_wake_up
     0.01%  lab2_list  [bridge]          [k] br_handle_frame_finish
     0.01%  lab2_list  [kernel.vmlinux]  [k] hrtimer_active
     0.01%  lab2_list  [kernel.vmlinux]  [k] apic_ack_edge
     0.01%  lab2_list  [kernel.vmlinux]  [k] hrtimer_update_next_event
     0.01%  lab2_list  [kernel.vmlinux]  [k] irq_work_single
     0.01%  lab2_list  [kernel.vmlinux]  [k] queued_spin_lock_slowpath
     0.01%  lab2_list  [kernel.vmlinux]  [k] idle_cpu
     0.01%  lab2_list  [kernel.vmlinux]  [k] call_function_single_prep_ipi
     0.01%  lab2_list  [kernel.vmlinux]  [k] sched_clock_cpu
     0.01%  lab2_list  libc.so.6         [.] __snprintf
     0.01%  lab2_list  [kernel.vmlinux]  [k] _raw_spin_unlock_irqrestore
     0.01%  lab2_list  libc.so.6         [.] rand
     0.01%  lab2_list  [kernel.vmlinux]  [k] acct_account_cputime
     0.01%  lab2_list  [kernel.vmlinux]  [k] kmem_cache_free
     0.01%  lab2_list  [kernel.vmlinux]  [k] default_send_IPI_self
     0.01%  lab2_list  [kernel.vmlinux]  [k] cpuacct_charge
     0.01%  lab2_list  [kernel.vmlinux]  [k] task_work_run
     0.01%  lab2_list  [kernel.vmlinux]  [k] sync_regs
     0.01%  lab2_list  [kernel.vmlinux]  [k] __cgroup_account_cputime_field
     0.01%  lab2_list  [kernel.vmlinux]  [k] tcp_wfree
     0.01%  lab2_list  [kernel.vmlinux]  [k] perf_ctx_enable
     0.01%  lab2_list  [kernel.vmlinux]  [k] rebalance_domains
     0.01%  lab2_list  [kernel.vmlinux]  [k] memset_orig
     0.01%  lab2_list  [kernel.vmlinux]  [k] profile_tick
     0.01%  lab2_list  lab2_list         [.] SortedList_length
     0.01%  lab2_list  [kernel.vmlinux]  [k] __smp_call_single_queue
     0.01%  lab2_list  [kernel.vmlinux]  [k] error_return
     0.01%  lab2_list  [kernel.vmlinux]  [k] enqueue_task_fair
     0.01%  lab2_list  [kernel.vmlinux]  [k] irq_work_tick
     0.01%  lab2_list  [kernel.vmlinux]  [k] raw_spin_rq_unlock
     0.01%  lab2_list  [kernel.vmlinux]  [k] ipv4_dst_check
     0.01%  lab2_list  [kernel.vmlinux]  [k] dbs_update_util_handler
     0.01%  lab2_list  [kernel.vmlinux]  [k] stackleak_track_stack
     0.01%  lab2_list  [kernel.vmlinux]  [k] __sysvec_apic_timer_interrupt
     0.01%  lab2_list  [kernel.vmlinux]  [k] task_mm_cid_work
     0.01%  lab2_list  [kernel.vmlinux]  [k] dma_unmap_page_attrs
     0.01%  lab2_list  [kernel.vmlinux]  [k] find_idlest_group
     0.01%  lab2_list  [kernel.vmlinux]  [k] __rcu_read_unlock
     0.01%  lab2_list  [bridge]          [k] fdb_find_rcu
     0.01%  lab2_list  [kernel.vmlinux]  [k] __kfree_skb
     0.01%  lab2_list  [nf_conntrack]    [k] nf_ct_get_tuple
     0.01%  lab2_list  [nf_conntrack]    [k] nf_conntrack_in
     0.01%  lab2_list  [kernel.vmlinux]  [k] __tcp_ack_snd_check
     0.00%  lab2_list  [kernel.vmlinux]  [k] kmem_cache_free_bulk.part.0
     0.00%  lab2_list  [kernel.vmlinux]  [k] alloc_vmap_area
     0.00%  lab2_list  [kernel.vmlinux]  [k] memset
     0.00%  lab2_list  lab2_list         [.] main
     0.00%  lab2_list  [kernel.vmlinux]  [k] smp_call_function_many_cond
     0.00%  lab2_list  [kernel.vmlinux]  [k] deactivate_slab
     0.00%  lab2_list  [kernel.vmlinux]  [k] calc_global_load_tick
     0.00%  lab2_list  [kernel.vmlinux]  [k] perf_event_alloc
     0.00%  lab2_list  [kernel.vmlinux]  [k] tcp_v4_rcv
     0.00%  lab2_list  [kernel.vmlinux]  [k] netif_receive_skb_list_internal
     0.00%  lab2_list  [kernel.vmlinux]  [k] error_entry
     0.00%  lab2_list  [kernel.vmlinux]  [k] ip_rcv_core
     0.00%  lab2_list  libc.so.6         [.] malloc
     0.00%  lab2_list  [kernel.vmlinux]  [k] kthread_is_per_cpu
     0.00%  lab2_list  [kernel.vmlinux]  [k] __rseq_handle_notify_resume
     0.00%  lab2_list  [nf_conntrack]    [k] nf_conntrack_tcp_packet
     0.00%  lab2_list  [kernel.vmlinux]  [k] asm_sysvec_call_function
     0.00%  lab2_list  [kernel.vmlinux]  [k] skb_free_head
     0.00%  lab2_list  [kvm]             [k] pvclock_gtod_notify
     0.00%  lab2_list  [kernel.vmlinux]  [k] _raw_spin_lock_irq
     0.00%  lab2_list  [kernel.vmlinux]  [k] remove_vma
     0.00%  lab2_list  libc.so.6         [.] cfree@GLIBC_2.2.5
     0.00%  lab2_list  [kernel.vmlinux]  [k] tcp_data_ready
     0.00%  lab2_list  [kernel.vmlinux]  [k] igb_poll
     0.00%  lab2_list  libc.so.6         [.] __vsnprintf_internal
     0.00%  lab2_list  [kernel.vmlinux]  [k] native_flush_tlb_one_user
     0.00%  lab2_list  [kernel.vmlinux]  [k] tcp_ack
     0.00%  lab2_list  libc.so.6         [.] atoi
     0.00%  lab2_list  [kernel.vmlinux]  [k] _raw_spin_lock_bh
     0.00%  lab2_list  [kernel.vmlinux]  [k] siphash_4u64
     0.00%  lab2_list  [kernel.vmlinux]  [k] folio_test_hugetlb
     0.00%  lab2_list  libc.so.6         [.] malloc@plt
     0.00%  lab2_list  libc.so.6         [.] __printf_buffer_write
     0.00%  lab2_list  [kernel.vmlinux]  [k] psi_task_change
     0.00%  lab2_list  libc.so.6         [.] __printf_buffer_done
     0.00%  lab2_list  [kernel.vmlinux]  [k] igb_msix_ring
     0.00%  lab2_list  [kernel.vmlinux]  [k] update_sd_lb_stats.constprop.0
     0.00%  lab2_list  [kernel.vmlinux]  [k] percpu_counter_add_batch
     0.00%  lab2_list  lab2_list         [.] _init
     0.00%  lab2_list  [kernel.vmlinux]  [k] task_tick_fair
     0.00%  lab2_list  [kernel.vmlinux]  [k] __hrtimer_next_event_base
     0.00%  lab2_list  [kernel.vmlinux]  [k] perf_ctx_disable
     0.00%  lab2_list  [kernel.vmlinux]  [k] hrtimer_interrupt
     0.00%  lab2_list  [kernel.vmlinux]  [k] account_user_time
     0.00%  lab2_list  [kernel.vmlinux]  [k] lapic_next_event
     0.00%  lab2_list  [kernel.vmlinux]  [k] __perf_event_task_sched_out
     0.00%  lab2_list  libc.so.6         [.] __GI_strtoll
     0.00%  lab2_list  [kernel.vmlinux]  [k] get_mem_cgroup_from_mm
     0.00%  lab2_list  [kernel.vmlinux]  [k] lock_mm_and_find_vma
     0.00%  lab2_list  [kernel.vmlinux]  [k] sigprocmask
     0.00%  lab2_list  [kernel.vmlinux]  [k] __alloc_pages
     0.00%  lab2_list  [kernel.vmlinux]  [k] put_prev_entity
     0.00%  lab2_list  [kernel.vmlinux]  [k] flush_signal_handlers
     0.00%  lab2_list  libc.so.6         [.] start_thread
     0.00%  lab2_list  [kernel.vmlinux]  [k] restore_fpregs_from_fpstate
     0.00%  lab2_list  [kernel.vmlinux]  [k] nmi_restore
     0.00%  lab2_list  [kernel.vmlinux]  [k] calculate_sigpending
     0.00%  lab2_list  [kernel.vmlinux]  [k] finish_task_switch.isra.0
     0.00%  perf-exec  [kernel.vmlinux]  [k] perf_pmu_nop_void
     0.00%  lab2_list  [kernel.vmlinux]  [k] perf_ctx_sched_task_cb
     0.00%  lab2_list  [kernel.vmlinux]  [k] perf_ibs_handle_irq
     0.00%  lab2_list  [kernel.vmlinux]  [k] recalc_sigpending
     0.00%  lab2_list  [kernel.vmlinux]  [k] default_do_nmi
     0.00%  lab2_list  [kernel.vmlinux]  [k] nmi_handle
     0.00%  perf-exec  [kernel.vmlinux]  [k] arch_perf_update_userpage
     0.00%  lab2_list  [kernel.vmlinux]  [k] perf_ibs_nmi_handler
     0.00%  perf-exec  [kernel.vmlinux]  [k] perf_ibs_handle_irq
     0.00%  perf-exec  [kernel.vmlinux]  [k] perf_ibs_start


#
# (Tip: Customize output of perf script with: perf script -F event,ip,sym)
#
 Percent |	Source code & Disassembly of lab2_list for cycles (16105 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    0000000000002334 <thread_run_list_test>:
         : 5    ; thread_run_list_test():
         : 6    ; /home/tlam/cs134/project2b/lab2_list.c:335
         : 7    ; void* thread_run_list_test(void* t_arg) {
    0.00 :   2334:           pushq   %rbp
    0.00 :   2335:           movq    %rsp, %rbp
    0.00 :   2338:           subq    $0x60, %rsp
    0.00 :   233c:           movq    %rdi, -0x58(%rbp)
    0.00 :   2340:           movq    %fs:0x28, %rax
    0.00 :   2349:           movq    %rax, -0x8(%rbp)
    0.00 :   234d:           xorl    %eax, %eax
         : 15   ; /home/tlam/cs134/project2b/lab2_list.c:336
         : 16   ;     int* index = t_arg;
    0.00 :   234f:           movq    -0x58(%rbp), %rax
    0.00 :   2353:           movq    %rax, -0x38(%rbp)
         : 19   ; /home/tlam/cs134/project2b/lab2_list.c:338
         : 20   ;     for (int j = 0; j < iterations; j++) {
    0.00 :   2357:           movl    $0x0, -0x4c(%rbp)
    0.00 :   235e:           jmp     0x251c <thread_run_list_test+0x1e8>
         : 23   ; /home/tlam/cs134/project2b/lab2_list.c:339
         : 24   ;         int which_list = atoi(randomElems[(*index) * iterations + j].key) % list_count;
    0.00 :   2363:           movq    0x3ece(%rip), %rcx      # 0x6238 <randomElems>
    0.00 :   236a:           movq    -0x38(%rbp), %rax
    0.00 :   236e:           movl    (%rax), %edx
    0.00 :   2370:           movl    0x3d9e(%rip), %eax      # 0x6114 <iterations>
    0.00 :   2376:           imull   %eax, %edx
    0.00 :   2379:           movl    -0x4c(%rbp), %eax
    0.00 :   237c:           addl    %edx, %eax
    0.00 :   237e:           movslq  %eax, %rdx
    0.00 :   2381:           movq    %rdx, %rax
    0.00 :   2384:           addq    %rax, %rax
    0.00 :   2387:           addq    %rdx, %rax
    0.00 :   238a:           shlq    $0x3, %rax
    0.00 :   238e:           addq    %rcx, %rax
    0.00 :   2391:           movq    0x10(%rax), %rax
    0.00 :   2395:           movq    %rax, %rdi
    0.00 :   2398:           callq   0x1190 <atoi@plt>
    0.00 :   239d:           movl    0x3d79(%rip), %ecx      # 0x611c <list_count>
    0.00 :   23a3:           cltd
    0.00 :   23a4:           idivl   %ecx
    0.00 :   23a6:           movl    %edx, -0x3c(%rbp)
         : 45   ; /home/tlam/cs134/project2b/lab2_list.c:340
         : 46   ;         if (clock_gettime(CLOCK_MONOTONIC, &start) == -1) {
    0.00 :   23a9:           leaq    -0x30(%rbp), %rax
    0.00 :   23ad:           movq    %rax, %rsi
    0.00 :   23b0:           movl    $0x1, %edi
    0.00 :   23b5:           callq   0x1060 <clock_gettime@plt>
    0.00 :   23ba:           cmpl    $-0x1, %eax
    0.00 :   23bd:           jne     0x23ec <thread_run_list_test+0xb8>
         : 53   ; /home/tlam/cs134/project2b/lab2_list.c:341
         : 54   ;             fprintf(stderr, "clock gettime");
    0.00 :   23bf:           movq    0x3e3a(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   23c6:           movq    %rax, %rcx
    0.00 :   23c9:           movl    $0xd, %edx
    0.00 :   23ce:           movl    $0x1, %esi
    0.00 :   23d3:           leaq    0x1de5(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   23da:           movq    %rax, %rdi
    0.00 :   23dd:           callq   0x11b0 <fwrite@plt>
         : 62   ; /home/tlam/cs134/project2b/lab2_list.c:342
         : 63   ;             exit(1);
    0.00 :   23e2:           movl    $0x1, %edi
    0.00 :   23e7:           callq   0x11a0 <exit@plt>
         : 66   ; /home/tlam/cs134/project2b/lab2_list.c:344
         : 67   ;         while (__sync_lock_test_and_set(&exclusions[which_list], 1)) {
    0.00 :   23ec:           nop
    0.38 :   23ed:           movq    0x3e34(%rip), %rax      # 0x6228 <exclusions>
    0.36 :   23f4:           movl    -0x3c(%rbp), %edx
    0.10 :   23f7:           movslq  %edx, %rdx
    0.10 :   23fa:           shlq    $0x2, %rdx
   30.61 :   23fe:           addq    %rax, %rdx
    0.15 :   2401:           movl    $0x1, %eax
   51.01 :   2406:           xchgl   %eax, (%rdx)
    8.27 :   2408:           testl   %eax, %eax
    0.08 :   240a:           jne     0x23ed <thread_run_list_test+0xb9>
         : 78   ; /home/tlam/cs134/project2b/lab2_list.c:347
         : 79   ;         if (clock_gettime(CLOCK_MONOTONIC, &stop) == -1) {
    0.07 :   240c:           leaq    -0x20(%rbp), %rax
    0.10 :   2410:           movq    %rax, %rsi
    0.05 :   2413:           movl    $0x1, %edi
    0.00 :   2418:           callq   0x1060 <clock_gettime@plt>
    0.00 :   241d:           cmpl    $-0x1, %eax
    0.00 :   2420:           jne     0x244f <thread_run_list_test+0x11b>
         : 86   ; /home/tlam/cs134/project2b/lab2_list.c:348
         : 87   ;             fprintf(stderr, "clock gettime");
    0.00 :   2422:           movq    0x3dd7(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2429:           movq    %rax, %rcx
    0.00 :   242c:           movl    $0xd, %edx
    0.00 :   2431:           movl    $0x1, %esi
    0.00 :   2436:           leaq    0x1d82(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   243d:           movq    %rax, %rdi
    0.00 :   2440:           callq   0x11b0 <fwrite@plt>
         : 95   ; /home/tlam/cs134/project2b/lab2_list.c:349
         : 96   ;             exit(1);
    0.00 :   2445:           movl    $0x1, %edi
    0.00 :   244a:           callq   0x11a0 <exit@plt>
         : 99   ; /home/tlam/cs134/project2b/lab2_list.c:352
         : 100  ;         locking_times[*index] += stop.tv_nsec - start.tv_nsec +
    0.00 :   244f:           movq    0x3dda(%rip), %rdx      # 0x6230 <locking_times>
    0.00 :   2456:           movq    -0x38(%rbp), %rax
    0.00 :   245a:           movl    (%rax), %eax
    0.00 :   245c:           cltq
    0.00 :   245e:           shlq    $0x3, %rax
    0.00 :   2462:           addq    %rdx, %rax
    0.01 :   2465:           movq    (%rax), %rdx
    0.01 :   2468:           movq    -0x18(%rbp), %rcx
    0.00 :   246c:           movq    -0x28(%rbp), %rax
    0.00 :   2470:           movq    %rcx, %rsi
    0.00 :   2473:           subq    %rax, %rsi
         : 112  ; /home/tlam/cs134/project2b/lab2_list.c:353
         : 113  ;                                 (stop.tv_sec - start.tv_sec) * BILLION;
    0.00 :   2476:           movq    -0x20(%rbp), %rcx
    0.00 :   247a:           movq    -0x30(%rbp), %rax
    0.00 :   247e:           subq    %rax, %rcx
    0.00 :   2481:           imulq   $0x3b9aca00, %rcx, %rax # imm = 0x3B9ACA00
         : 118  ; /home/tlam/cs134/project2b/lab2_list.c:352
         : 119  ;         locking_times[*index] += stop.tv_nsec - start.tv_nsec +
    0.00 :   2488:           addq    %rax, %rsi
    0.00 :   248b:           movq    0x3d9e(%rip), %rcx      # 0x6230 <locking_times>
    0.00 :   2492:           movq    -0x38(%rbp), %rax
    0.00 :   2496:           movl    (%rax), %eax
    0.00 :   2498:           cltq
    0.00 :   249a:           shlq    $0x3, %rax
    0.00 :   249e:           addq    %rcx, %rax
    0.00 :   24a1:           addq    %rsi, %rdx
    0.00 :   24a4:           movq    %rdx, (%rax)
         : 129  ; /home/tlam/cs134/project2b/lab2_list.c:355
         : 130  ;         SortedList_insert(&sublists[which_list], &randomElems[(*index) * iterations + j]);
    0.00 :   24a7:           movq    0x3d8a(%rip), %rcx      # 0x6238 <randomElems>
    0.00 :   24ae:           movq    -0x38(%rbp), %rax
    0.00 :   24b2:           movl    (%rax), %edx
    0.00 :   24b4:           movl    0x3c5a(%rip), %eax      # 0x6114 <iterations>
    0.00 :   24ba:           imull   %eax, %edx
    0.00 :   24bd:           movl    -0x4c(%rbp), %eax
    0.00 :   24c0:           addl    %edx, %eax
    0.00 :   24c2:           movslq  %eax, %rdx
    0.00 :   24c5:           movq    %rdx, %rax
    0.00 :   24c8:           addq    %rax, %rax
    0.00 :   24cb:           addq    %rdx, %rax
    0.00 :   24ce:           shlq    $0x3, %rax
    0.00 :   24d2:           addq    %rax, %rcx
    0.00 :   24d5:           movq    0x3d64(%rip), %rsi      # 0x6240 <sublists>
    0.00 :   24dc:           movl    -0x3c(%rbp), %eax
    0.00 :   24df:           movslq  %eax, %rdx
    0.00 :   24e2:           movq    %rdx, %rax
    0.00 :   24e5:           addq    %rax, %rax
    0.00 :   24e8:           addq    %rdx, %rax
    0.00 :   24eb:           shlq    $0x3, %rax
    0.00 :   24ef:           addq    %rsi, %rax
    0.00 :   24f2:           movq    %rcx, %rsi
    0.00 :   24f5:           movq    %rax, %rdi
    0.00 :   24f8:           callq   0x32c7 <SortedList_insert>
         : 155  ; /home/tlam/cs134/project2b/lab2_list.c:356
         : 156  ;         __sync_lock_release(&exclusions[which_list]);
    0.00 :   24fd:           movq    0x3d24(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   2504:           movl    -0x3c(%rbp), %edx
    0.00 :   2507:           movslq  %edx, %rdx
    0.00 :   250a:           shlq    $0x2, %rdx
    0.00 :   250e:           addq    %rdx, %rax
    0.00 :   2511:           movl    $0x0, %edx
    0.00 :   2516:           movl    %edx, (%rax)
         : 164  ; /home/tlam/cs134/project2b/lab2_list.c:338
         : 165  ;     for (int j = 0; j < iterations; j++) {
    0.00 :   2518:           addl    $0x1, -0x4c(%rbp)
    0.00 :   251c:           movl    0x3bf2(%rip), %eax      # 0x6114 <iterations>
    0.00 :   2522:           cmpl    %eax, -0x4c(%rbp)
    0.00 :   2525:           jl      0x2363 <thread_run_list_test+0x2f>
         : 170  ; /home/tlam/cs134/project2b/lab2_list.c:359
         : 171  ;     for (int j = 0; j < list_count; j++) {
    0.00 :   252b:           movl    $0x0, -0x48(%rbp)
    0.00 :   2532:           jmp     0x26d2 <thread_run_list_test+0x39e>
         : 174  ; /home/tlam/cs134/project2b/lab2_list.c:360
         : 175  ;         if (clock_gettime(CLOCK_MONOTONIC, &start) == -1) {
    0.00 :   2537:           leaq    -0x30(%rbp), %rax
    0.00 :   253b:           movq    %rax, %rsi
    0.00 :   253e:           movl    $0x1, %edi
    0.00 :   2543:           callq   0x1060 <clock_gettime@plt>
    0.00 :   2548:           cmpl    $-0x1, %eax
    0.00 :   254b:           jne     0x257a <thread_run_list_test+0x246>
         : 182  ; /home/tlam/cs134/project2b/lab2_list.c:361
         : 183  ;             fprintf(stderr, "clock gettime");
    0.00 :   254d:           movq    0x3cac(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2554:           movq    %rax, %rcx
    0.00 :   2557:           movl    $0xd, %edx
    0.00 :   255c:           movl    $0x1, %esi
    0.00 :   2561:           leaq    0x1c57(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   2568:           movq    %rax, %rdi
    0.00 :   256b:           callq   0x11b0 <fwrite@plt>
         : 191  ; /home/tlam/cs134/project2b/lab2_list.c:362
         : 192  ;             exit(1);
    0.00 :   2570:           movl    $0x1, %edi
    0.00 :   2575:           callq   0x11a0 <exit@plt>
         : 195  ; /home/tlam/cs134/project2b/lab2_list.c:364
         : 196  ;         while (__sync_lock_test_and_set(&exclusions[j], 1)) {
    0.00 :   257a:           nop
    0.00 :   257b:           movq    0x3ca6(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   2582:           movl    -0x48(%rbp), %edx
    0.00 :   2585:           movslq  %edx, %rdx
    0.00 :   2588:           shlq    $0x2, %rdx
    0.00 :   258c:           addq    %rax, %rdx
    0.00 :   258f:           movl    $0x1, %eax
    0.01 :   2594:           xchgl   %eax, (%rdx)
    0.00 :   2596:           testl   %eax, %eax
    0.00 :   2598:           jne     0x257b <thread_run_list_test+0x247>
         : 207  ; /home/tlam/cs134/project2b/lab2_list.c:367
         : 208  ;         if (clock_gettime(CLOCK_MONOTONIC, &stop) == -1) {
    0.00 :   259a:           leaq    -0x20(%rbp), %rax
    0.00 :   259e:           movq    %rax, %rsi
    0.00 :   25a1:           movl    $0x1, %edi
    0.00 :   25a6:           callq   0x1060 <clock_gettime@plt>
    0.00 :   25ab:           cmpl    $-0x1, %eax
    0.00 :   25ae:           jne     0x25dd <thread_run_list_test+0x2a9>
         : 215  ; /home/tlam/cs134/project2b/lab2_list.c:368
         : 216  ;             fprintf(stderr, "clock gettime");
    0.00 :   25b0:           movq    0x3c49(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   25b7:           movq    %rax, %rcx
    0.00 :   25ba:           movl    $0xd, %edx
    0.00 :   25bf:           movl    $0x1, %esi
    0.00 :   25c4:           leaq    0x1bf4(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   25cb:           movq    %rax, %rdi
    0.00 :   25ce:           callq   0x11b0 <fwrite@plt>
         : 224  ; /home/tlam/cs134/project2b/lab2_list.c:369
         : 225  ;             exit(1);
    0.00 :   25d3:           movl    $0x1, %edi
    0.00 :   25d8:           callq   0x11a0 <exit@plt>
         : 228  ; /home/tlam/cs134/project2b/lab2_list.c:372
         : 229  ;         locking_times[*index] +=
    0.00 :   25dd:           movq    0x3c4c(%rip), %rdx      # 0x6230 <locking_times>
    0.00 :   25e4:           movq    -0x38(%rbp), %rax
    0.00 :   25e8:           movl    (%rax), %eax
    0.00 :   25ea:           cltq
    0.00 :   25ec:           shlq    $0x3, %rax
    0.00 :   25f0:           addq    %rdx, %rax
    0.00 :   25f3:           movq    (%rax), %rdx
         : 237  ; /home/tlam/cs134/project2b/lab2_list.c:373
         : 238  ;             stop.tv_nsec - start.tv_nsec + (stop.tv_sec - start.tv_sec) * BILLION;
    0.00 :   25f6:           movq    -0x18(%rbp), %rcx
    0.00 :   25fa:           movq    -0x28(%rbp), %rax
    0.00 :   25fe:           movq    %rcx, %rsi
    0.00 :   2601:           subq    %rax, %rsi
    0.00 :   2604:           movq    -0x20(%rbp), %rcx
    0.00 :   2608:           movq    -0x30(%rbp), %rax
    0.00 :   260c:           subq    %rax, %rcx
    0.00 :   260f:           imulq   $0x3b9aca00, %rcx, %rax # imm = 0x3B9ACA00
    0.00 :   2616:           addq    %rax, %rsi
         : 248  ; /home/tlam/cs134/project2b/lab2_list.c:372
         : 249  ;         locking_times[*index] +=
    0.00 :   2619:           movq    0x3c10(%rip), %rcx      # 0x6230 <locking_times>
    0.00 :   2620:           movq    -0x38(%rbp), %rax
    0.00 :   2624:           movl    (%rax), %eax
    0.00 :   2626:           cltq
    0.00 :   2628:           shlq    $0x3, %rax
    0.00 :   262c:           addq    %rcx, %rax
    0.00 :   262f:           addq    %rsi, %rdx
    0.00 :   2632:           movq    %rdx, (%rax)
         : 258  ; /home/tlam/cs134/project2b/lab2_list.c:375
         : 259  ;         error = SortedList_length(&sublists[j]);
    0.00 :   2635:           movq    0x3c04(%rip), %rcx      # 0x6240 <sublists>
    0.00 :   263c:           movl    -0x48(%rbp), %eax
    0.00 :   263f:           movslq  %eax, %rdx
    0.00 :   2642:           movq    %rdx, %rax
    0.00 :   2645:           addq    %rax, %rax
    0.00 :   2648:           addq    %rdx, %rax
    0.00 :   264b:           shlq    $0x3, %rax
    0.00 :   264f:           addq    %rcx, %rax
    0.00 :   2652:           movq    %rax, %rdi
    0.00 :   2655:           callq   0x345e <SortedList_length>
    0.00 :   265a:           movl    %eax, 0x3bb8(%rip)      # 0x6218 <error>
         : 271  ; /home/tlam/cs134/project2b/lab2_list.c:376
         : 272  ;         if (error == -1) {
    0.00 :   2660:           movl    0x3bb2(%rip), %eax      # 0x6218 <error>
    0.00 :   2666:           cmpl    $-0x1, %eax
    0.00 :   2669:           jne     0x26b3 <thread_run_list_test+0x37f>
         : 276  ; /home/tlam/cs134/project2b/lab2_list.c:377
         : 277  ;             fprintf(stderr, "corruption found in list while finding length\n");
    0.00 :   266b:           movq    0x3b8e(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2672:           movq    %rax, %rcx
    0.00 :   2675:           movl    $0x2e, %edx
    0.00 :   267a:           movl    $0x1, %esi
    0.00 :   267f:           leaq    0x1c5a(%rip), %rax      # 0x42e0 <_IO_stdin_used+0x2e0>
    0.00 :   2686:           movq    %rax, %rdi
    0.00 :   2689:           callq   0x11b0 <fwrite@plt>
         : 285  ; /home/tlam/cs134/project2b/lab2_list.c:378
         : 286  ;             __sync_lock_release(&exclusions[j]);
    0.00 :   268e:           movq    0x3b93(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   2695:           movl    -0x48(%rbp), %edx
    0.00 :   2698:           movslq  %edx, %rdx
    0.00 :   269b:           shlq    $0x2, %rdx
    0.00 :   269f:           addq    %rdx, %rax
    0.00 :   26a2:           movl    $0x0, %edx
    0.00 :   26a7:           movl    %edx, (%rax)
         : 294  ; /home/tlam/cs134/project2b/lab2_list.c:379
         : 295  ;             exit(2);
    0.00 :   26a9:           movl    $0x2, %edi
    0.00 :   26ae:           callq   0x11a0 <exit@plt>
         : 298  ; /home/tlam/cs134/project2b/lab2_list.c:381
         : 299  ;         __sync_lock_release(&exclusions[j]);
    0.00 :   26b3:           movq    0x3b6e(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   26ba:           movl    -0x48(%rbp), %edx
    0.00 :   26bd:           movslq  %edx, %rdx
    0.00 :   26c0:           shlq    $0x2, %rdx
    0.00 :   26c4:           addq    %rdx, %rax
    0.00 :   26c7:           movl    $0x0, %edx
    0.00 :   26cc:           movl    %edx, (%rax)
         : 307  ; /home/tlam/cs134/project2b/lab2_list.c:359
         : 308  ;     for (int j = 0; j < list_count; j++) {
    0.00 :   26ce:           addl    $0x1, -0x48(%rbp)
    0.00 :   26d2:           movl    0x3a44(%rip), %eax      # 0x611c <list_count>
    0.00 :   26d8:           cmpl    %eax, -0x48(%rbp)
    0.00 :   26db:           jl      0x2537 <thread_run_list_test+0x203>
         : 313  ; /home/tlam/cs134/project2b/lab2_list.c:384
         : 314  ;     for (int j = 0; j < iterations; j++) {
    0.00 :   26e1:           movl    $0x0, -0x44(%rbp)
    0.00 :   26e8:           jmp     0x2a92 <thread_run_list_test+0x75e>
         : 317  ; /home/tlam/cs134/project2b/lab2_list.c:385
         : 318  ;         int which_list = atoi(randomElems[(*index) * iterations + j].key) % list_count;
    0.00 :   26ed:           movq    0x3b44(%rip), %rcx      # 0x6238 <randomElems>
    0.00 :   26f4:           movq    -0x38(%rbp), %rax
    0.00 :   26f8:           movl    (%rax), %edx
    0.00 :   26fa:           movl    0x3a14(%rip), %eax      # 0x6114 <iterations>
    0.00 :   2700:           imull   %eax, %edx
    0.00 :   2703:           movl    -0x44(%rbp), %eax
    0.00 :   2706:           addl    %edx, %eax
    0.00 :   2708:           movslq  %eax, %rdx
    0.00 :   270b:           movq    %rdx, %rax
    0.00 :   270e:           addq    %rax, %rax
    0.00 :   2711:           addq    %rdx, %rax
    0.00 :   2714:           shlq    $0x3, %rax
    0.00 :   2718:           addq    %rcx, %rax
    0.00 :   271b:           movq    0x10(%rax), %rax
    0.00 :   271f:           movq    %rax, %rdi
    0.00 :   2722:           callq   0x1190 <atoi@plt>
    0.00 :   2727:           movl    0x39ef(%rip), %ecx      # 0x611c <list_count>
    0.00 :   272d:           cltd
    0.00 :   272e:           idivl   %ecx
    0.00 :   2730:           movl    %edx, -0x40(%rbp)
         : 339  ; /home/tlam/cs134/project2b/lab2_list.c:386
         : 340  ;         if (clock_gettime(CLOCK_MONOTONIC, &start) == -1) {
    0.00 :   2733:           leaq    -0x30(%rbp), %rax
    0.00 :   2737:           movq    %rax, %rsi
    0.00 :   273a:           movl    $0x1, %edi
    0.00 :   273f:           callq   0x1060 <clock_gettime@plt>
    0.00 :   2744:           cmpl    $-0x1, %eax
    0.00 :   2747:           jne     0x2776 <thread_run_list_test+0x442>
         : 347  ; /home/tlam/cs134/project2b/lab2_list.c:387
         : 348  ;             fprintf(stderr, "clock gettime");
    0.00 :   2749:           movq    0x3ab0(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2750:           movq    %rax, %rcx
    0.00 :   2753:           movl    $0xd, %edx
    0.00 :   2758:           movl    $0x1, %esi
    0.00 :   275d:           leaq    0x1a5b(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   2764:           movq    %rax, %rdi
    0.00 :   2767:           callq   0x11b0 <fwrite@plt>
         : 356  ; /home/tlam/cs134/project2b/lab2_list.c:388
         : 357  ;             exit(1);
    0.00 :   276c:           movl    $0x1, %edi
    0.00 :   2771:           callq   0x11a0 <exit@plt>
         : 360  ; /home/tlam/cs134/project2b/lab2_list.c:390
         : 361  ;         while (__sync_lock_test_and_set(&exclusions[which_list], 1)) {
    0.00 :   2776:           nop
    0.03 :   2777:           movq    0x3aaa(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   277e:           movl    -0x40(%rbp), %edx
    0.02 :   2781:           movslq  %edx, %rdx
    0.01 :   2784:           shlq    $0x2, %rdx
    0.00 :   2788:           addq    %rax, %rdx
    1.86 :   278b:           movl    $0x1, %eax
    5.99 :   2790:           xchgl   %eax, (%rdx)
    0.17 :   2792:           testl   %eax, %eax
    0.00 :   2794:           jne     0x2777 <thread_run_list_test+0x443>
         : 372  ; /home/tlam/cs134/project2b/lab2_list.c:393
         : 373  ;         if (clock_gettime(CLOCK_MONOTONIC, &stop) == -1) {
    0.02 :   2796:           leaq    -0x20(%rbp), %rax
    0.05 :   279a:           movq    %rax, %rsi
    0.00 :   279d:           movl    $0x1, %edi
    0.00 :   27a2:           callq   0x1060 <clock_gettime@plt>
    0.00 :   27a7:           cmpl    $-0x1, %eax
    0.00 :   27aa:           jne     0x27d9 <thread_run_list_test+0x4a5>
         : 380  ; /home/tlam/cs134/project2b/lab2_list.c:394
         : 381  ;             fprintf(stderr, "clock gettime");
    0.00 :   27ac:           movq    0x3a4d(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   27b3:           movq    %rax, %rcx
    0.00 :   27b6:           movl    $0xd, %edx
    0.00 :   27bb:           movl    $0x1, %esi
    0.00 :   27c0:           leaq    0x19f8(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   27c7:           movq    %rax, %rdi
    0.00 :   27ca:           callq   0x11b0 <fwrite@plt>
         : 389  ; /home/tlam/cs134/project2b/lab2_list.c:395
         : 390  ;             exit(1);
    0.00 :   27cf:           movl    $0x1, %edi
    0.00 :   27d4:           callq   0x11a0 <exit@plt>
         : 393  ; /home/tlam/cs134/project2b/lab2_list.c:398
         : 394  ;         locking_times[*index] += stop.tv_nsec - start.tv_nsec +
    0.00 :   27d9:           movq    0x3a50(%rip), %rdx      # 0x6230 <locking_times>
    0.00 :   27e0:           movq    -0x38(%rbp), %rax
    0.00 :   27e4:           movl    (%rax), %eax
    0.00 :   27e6:           cltq
    0.00 :   27e8:           shlq    $0x3, %rax
    0.00 :   27ec:           addq    %rdx, %rax
    0.00 :   27ef:           movq    (%rax), %rdx
    0.00 :   27f2:           movq    -0x18(%rbp), %rcx
    0.00 :   27f6:           movq    -0x28(%rbp), %rax
    0.01 :   27fa:           movq    %rcx, %rsi
    0.00 :   27fd:           subq    %rax, %rsi
         : 406  ; /home/tlam/cs134/project2b/lab2_list.c:399
         : 407  ;                                 (stop.tv_sec - start.tv_sec) * BILLION;
    0.00 :   2800:           movq    -0x20(%rbp), %rcx
    0.00 :   2804:           movq    -0x30(%rbp), %rax
    0.00 :   2808:           subq    %rax, %rcx
    0.00 :   280b:           imulq   $0x3b9aca00, %rcx, %rax # imm = 0x3B9ACA00
         : 412  ; /home/tlam/cs134/project2b/lab2_list.c:398
         : 413  ;         locking_times[*index] += stop.tv_nsec - start.tv_nsec +
    0.00 :   2812:           addq    %rax, %rsi
    0.00 :   2815:           movq    0x3a14(%rip), %rcx      # 0x6230 <locking_times>
    0.00 :   281c:           movq    -0x38(%rbp), %rax
    0.00 :   2820:           movl    (%rax), %eax
    0.00 :   2822:           cltq
    0.00 :   2824:           shlq    $0x3, %rax
    0.00 :   2828:           addq    %rcx, %rax
    0.00 :   282b:           addq    %rsi, %rdx
    0.00 :   282e:           movq    %rdx, (%rax)
         : 423  ; /home/tlam/cs134/project2b/lab2_list.c:402
         : 424  ;                 &sublists[which_list], randomElems[(*index) * iterations + j].key) == NULL) {
    0.00 :   2831:           movq    0x3a00(%rip), %rcx      # 0x6238 <randomElems>
    0.00 :   2838:           movq    -0x38(%rbp), %rax
    0.00 :   283c:           movl    (%rax), %edx
    0.00 :   283e:           movl    0x38d0(%rip), %eax      # 0x6114 <iterations>
    0.00 :   2844:           imull   %eax, %edx
    0.00 :   2847:           movl    -0x44(%rbp), %eax
    0.00 :   284a:           addl    %edx, %eax
    0.00 :   284c:           movslq  %eax, %rdx
    0.00 :   284f:           movq    %rdx, %rax
    0.00 :   2852:           addq    %rax, %rax
    0.00 :   2855:           addq    %rdx, %rax
    0.00 :   2858:           shlq    $0x3, %rax
    0.00 :   285c:           addq    %rcx, %rax
         : 438  ; /home/tlam/cs134/project2b/lab2_list.c:401
         : 439  ;         if (SortedList_lookup(
    0.00 :   285f:           movq    0x10(%rax), %rcx
    0.00 :   2863:           movq    0x39d6(%rip), %rsi      # 0x6240 <sublists>
         : 442  ; /home/tlam/cs134/project2b/lab2_list.c:402
         : 443  ;                 &sublists[which_list], randomElems[(*index) * iterations + j].key) == NULL) {
    0.00 :   286a:           movl    -0x40(%rbp), %eax
    0.00 :   286d:           movslq  %eax, %rdx
    0.00 :   2870:           movq    %rdx, %rax
    0.00 :   2873:           addq    %rax, %rax
    0.00 :   2876:           addq    %rdx, %rax
    0.00 :   2879:           shlq    $0x3, %rax
         : 450  ; /home/tlam/cs134/project2b/lab2_list.c:401
         : 451  ;         if (SortedList_lookup(
    0.00 :   287d:           addq    %rsi, %rax
    0.00 :   2880:           movq    %rcx, %rsi
    0.00 :   2883:           movq    %rax, %rdi
    0.01 :   2886:           callq   0x33f0 <SortedList_lookup>
    0.00 :   288b:           testq   %rax, %rax
    0.00 :   288e:           jne     0x28d8 <thread_run_list_test+0x5a4>
         : 458  ; /home/tlam/cs134/project2b/lab2_list.c:403
         : 459  ;             fprintf(stderr, "could not find key in list\n");
    0.00 :   2890:           movq    0x3969(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2897:           movq    %rax, %rcx
    0.00 :   289a:           movl    $0x1b, %edx
    0.00 :   289f:           movl    $0x1, %esi
    0.00 :   28a4:           leaq    0x1a64(%rip), %rax      # 0x430f <_IO_stdin_used+0x30f>
    0.00 :   28ab:           movq    %rax, %rdi
    0.00 :   28ae:           callq   0x11b0 <fwrite@plt>
         : 467  ; /home/tlam/cs134/project2b/lab2_list.c:404
         : 468  ;             __sync_lock_release(&exclusions[which_list]);
    0.00 :   28b3:           movq    0x396e(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   28ba:           movl    -0x40(%rbp), %edx
    0.00 :   28bd:           movslq  %edx, %rdx
    0.00 :   28c0:           shlq    $0x2, %rdx
    0.00 :   28c4:           addq    %rdx, %rax
    0.00 :   28c7:           movl    $0x0, %edx
    0.00 :   28cc:           movl    %edx, (%rax)
         : 476  ; /home/tlam/cs134/project2b/lab2_list.c:405
         : 477  ;             exit(2);
    0.00 :   28ce:           movl    $0x2, %edi
    0.00 :   28d3:           callq   0x11a0 <exit@plt>
         : 480  ; /home/tlam/cs134/project2b/lab2_list.c:407
         : 481  ;         __sync_lock_release(&exclusions[which_list]);
    0.00 :   28d8:           movq    0x3949(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   28df:           movl    -0x40(%rbp), %edx
    0.00 :   28e2:           movslq  %edx, %rdx
    0.00 :   28e5:           shlq    $0x2, %rdx
    0.00 :   28e9:           addq    %rdx, %rax
    0.00 :   28ec:           movl    $0x0, %edx
    0.00 :   28f1:           movl    %edx, (%rax)
         : 489  ; /home/tlam/cs134/project2b/lab2_list.c:409
         : 490  ;         if (clock_gettime(CLOCK_MONOTONIC, &start) == -1) {
    0.00 :   28f3:           leaq    -0x30(%rbp), %rax
    0.00 :   28f7:           movq    %rax, %rsi
    0.00 :   28fa:           movl    $0x1, %edi
    0.00 :   28ff:           callq   0x1060 <clock_gettime@plt>
    0.00 :   2904:           cmpl    $-0x1, %eax
    0.00 :   2907:           jne     0x2936 <thread_run_list_test+0x602>
         : 497  ; /home/tlam/cs134/project2b/lab2_list.c:410
         : 498  ;             fprintf(stderr, "clock gettime");
    0.00 :   2909:           movq    0x38f0(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2910:           movq    %rax, %rcx
    0.00 :   2913:           movl    $0xd, %edx
    0.00 :   2918:           movl    $0x1, %esi
    0.00 :   291d:           leaq    0x189b(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   2924:           movq    %rax, %rdi
    0.00 :   2927:           callq   0x11b0 <fwrite@plt>
         : 506  ; /home/tlam/cs134/project2b/lab2_list.c:411
         : 507  ;             exit(1);
    0.00 :   292c:           movl    $0x1, %edi
    0.00 :   2931:           callq   0x11a0 <exit@plt>
         : 510  ; /home/tlam/cs134/project2b/lab2_list.c:413
         : 511  ;         while (__sync_lock_test_and_set(&exclusions[which_list], 1)) {
    0.00 :   2936:           nop
    0.00 :   2937:           movq    0x38ea(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   293e:           movl    -0x40(%rbp), %edx
    0.00 :   2941:           movslq  %edx, %rdx
    0.00 :   2944:           shlq    $0x2, %rdx
    0.00 :   2948:           addq    %rax, %rdx
    0.08 :   294b:           movl    $0x1, %eax
    0.43 :   2950:           xchgl   %eax, (%rdx)
    0.02 :   2952:           testl   %eax, %eax
    0.00 :   2954:           jne     0x2937 <thread_run_list_test+0x603>
         : 522  ; /home/tlam/cs134/project2b/lab2_list.c:416
         : 523  ;         if (clock_gettime(CLOCK_MONOTONIC, &stop) == -1) {
    0.00 :   2956:           leaq    -0x20(%rbp), %rax
    0.00 :   295a:           movq    %rax, %rsi
    0.00 :   295d:           movl    $0x1, %edi
    0.00 :   2962:           callq   0x1060 <clock_gettime@plt>
    0.00 :   2967:           cmpl    $-0x1, %eax
    0.00 :   296a:           jne     0x2999 <thread_run_list_test+0x665>
         : 530  ; /home/tlam/cs134/project2b/lab2_list.c:417
         : 531  ;             fprintf(stderr, "clock gettime");
    0.00 :   296c:           movq    0x388d(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2973:           movq    %rax, %rcx
    0.00 :   2976:           movl    $0xd, %edx
    0.00 :   297b:           movl    $0x1, %esi
    0.00 :   2980:           leaq    0x1838(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   2987:           movq    %rax, %rdi
    0.00 :   298a:           callq   0x11b0 <fwrite@plt>
         : 539  ; /home/tlam/cs134/project2b/lab2_list.c:418
         : 540  ;             exit(1);
    0.00 :   298f:           movl    $0x1, %edi
    0.00 :   2994:           callq   0x11a0 <exit@plt>
         : 543  ; /home/tlam/cs134/project2b/lab2_list.c:421
         : 544  ;         locking_times[*index] += stop.tv_nsec - start.tv_nsec +
    0.00 :   2999:           movq    0x3890(%rip), %rdx      # 0x6230 <locking_times>
    0.00 :   29a0:           movq    -0x38(%rbp), %rax
    0.00 :   29a4:           movl    (%rax), %eax
    0.00 :   29a6:           cltq
    0.00 :   29a8:           shlq    $0x3, %rax
    0.00 :   29ac:           addq    %rdx, %rax
    0.00 :   29af:           movq    (%rax), %rdx
    0.00 :   29b2:           movq    -0x18(%rbp), %rcx
    0.00 :   29b6:           movq    -0x28(%rbp), %rax
    0.00 :   29ba:           movq    %rcx, %rsi
    0.00 :   29bd:           subq    %rax, %rsi
         : 556  ; /home/tlam/cs134/project2b/lab2_list.c:422
         : 557  ;                                 (stop.tv_sec - start.tv_sec) * BILLION;
    0.00 :   29c0:           movq    -0x20(%rbp), %rcx
    0.00 :   29c4:           movq    -0x30(%rbp), %rax
    0.00 :   29c8:           subq    %rax, %rcx
    0.00 :   29cb:           imulq   $0x3b9aca00, %rcx, %rax # imm = 0x3B9ACA00
         : 562  ; /home/tlam/cs134/project2b/lab2_list.c:421
         : 563  ;         locking_times[*index] += stop.tv_nsec - start.tv_nsec +
    0.00 :   29d2:           addq    %rax, %rsi
    0.00 :   29d5:           movq    0x3854(%rip), %rcx      # 0x6230 <locking_times>
    0.00 :   29dc:           movq    -0x38(%rbp), %rax
    0.00 :   29e0:           movl    (%rax), %eax
    0.00 :   29e2:           cltq
    0.00 :   29e4:           shlq    $0x3, %rax
    0.00 :   29e8:           addq    %rcx, %rax
    0.00 :   29eb:           addq    %rsi, %rdx
    0.00 :   29ee:           movq    %rdx, (%rax)
         : 573  ; /home/tlam/cs134/project2b/lab2_list.c:423
         : 574  ;         if (SortedList_delete(&randomElems[(*index) * iterations + j])) {
    0.00 :   29f1:           movq    0x3840(%rip), %rcx      # 0x6238 <randomElems>
    0.00 :   29f8:           movq    -0x38(%rbp), %rax
    0.00 :   29fc:           movl    (%rax), %edx
    0.00 :   29fe:           movl    0x3710(%rip), %eax      # 0x6114 <iterations>
    0.00 :   2a04:           imull   %eax, %edx
    0.00 :   2a07:           movl    -0x44(%rbp), %eax
    0.00 :   2a0a:           addl    %edx, %eax
    0.00 :   2a0c:           movslq  %eax, %rdx
    0.00 :   2a0f:           movq    %rdx, %rax
    0.00 :   2a12:           addq    %rax, %rax
    0.00 :   2a15:           addq    %rdx, %rax
    0.00 :   2a18:           shlq    $0x3, %rax
    0.00 :   2a1c:           addq    %rcx, %rax
    0.00 :   2a1f:           movq    %rax, %rdi
    0.00 :   2a22:           callq   0x3366 <SortedList_delete>
    0.00 :   2a27:           testl   %eax, %eax
    0.00 :   2a29:           je      0x2a73 <thread_run_list_test+0x73f>
         : 592  ; /home/tlam/cs134/project2b/lab2_list.c:424
         : 593  ;             fprintf(stderr, "could not delete key in list, found corruption\n");
    0.00 :   2a2b:           movq    0x37ce(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2a32:           movq    %rax, %rcx
    0.00 :   2a35:           movl    $0x2f, %edx
    0.00 :   2a3a:           movl    $0x1, %esi
    0.00 :   2a3f:           leaq    0x18ea(%rip), %rax      # 0x4330 <_IO_stdin_used+0x330>
    0.00 :   2a46:           movq    %rax, %rdi
    0.00 :   2a49:           callq   0x11b0 <fwrite@plt>
         : 601  ; /home/tlam/cs134/project2b/lab2_list.c:425
         : 602  ;             __sync_lock_release(&exclusions[which_list]);
    0.00 :   2a4e:           movq    0x37d3(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   2a55:           movl    -0x40(%rbp), %edx
    0.00 :   2a58:           movslq  %edx, %rdx
    0.00 :   2a5b:           shlq    $0x2, %rdx
    0.00 :   2a5f:           addq    %rdx, %rax
    0.00 :   2a62:           movl    $0x0, %edx
    0.00 :   2a67:           movl    %edx, (%rax)
         : 610  ; /home/tlam/cs134/project2b/lab2_list.c:426
         : 611  ;             exit(2);
    0.00 :   2a69:           movl    $0x2, %edi
    0.00 :   2a6e:           callq   0x11a0 <exit@plt>
         : 614  ; /home/tlam/cs134/project2b/lab2_list.c:428
         : 615  ;         __sync_lock_release(&exclusions[which_list]);
    0.00 :   2a73:           movq    0x37ae(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   2a7a:           movl    -0x40(%rbp), %edx
    0.00 :   2a7d:           movslq  %edx, %rdx
    0.00 :   2a80:           shlq    $0x2, %rdx
    0.00 :   2a84:           addq    %rdx, %rax
    0.00 :   2a87:           movl    $0x0, %edx
    0.00 :   2a8c:           movl    %edx, (%rax)
         : 623  ; /home/tlam/cs134/project2b/lab2_list.c:384
         : 624  ;     for (int j = 0; j < iterations; j++) {
    0.01 :   2a8e:           addl    $0x1, -0x44(%rbp)
    0.00 :   2a92:           movl    0x367c(%rip), %eax      # 0x6114 <iterations>
    0.00 :   2a98:           cmpl    %eax, -0x44(%rbp)
    0.00 :   2a9b:           jl      0x26ed <thread_run_list_test+0x3b9>
         : 629  ; /home/tlam/cs134/project2b/lab2_list.c:431
         : 630  ;     pthread_exit(NULL);
    0.00 :   2aa1:           movl    $0x0, %edi
    0.00 :   2aa6:           callq   0x1150 <pthread_exit@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (2242 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         : 2      Disassembly of section .text:
         :
         : 4      0000000000149750 <__nss_database_lookup>:
    2.40 :   168500:         movl    %esi, %ecx
    3.08 :   168502:         movl    %edi, %eax
   13.59 :   168504:         andq    $0x3f, %rcx
   13.76 :   168508:         andq    $0x3f, %rax
    5.28 :   16850c:         cmpl    $0x30, %ecx
    0.00 :   16850f:         ja      0x168550 <__nss_database_lookup+0x1ee00>
    2.50 :   168511:         cmpl    $0x30, %eax
    1.74 :   168514:         ja      0x168550 <__nss_database_lookup+0x1ee00>
    7.22 :   168516:         movdqu  (%rdi), %xmm1
    4.91 :   16851a:         movdqu  (%rsi), %xmm2
    4.39 :   16851e:         pxor    %xmm0, %xmm0
    4.09 :   168522:         pcmpeqb %xmm1, %xmm0
    0.66 :   168526:         pcmpeqb %xmm2, %xmm1
    0.62 :   16852a:         psubb   %xmm0, %xmm1
    2.27 :   16852e:         pmovmskb        %xmm1, %edx
    1.16 :   168532:         subl    $0xffff, %edx           # imm = 0xFFFF
    1.23 :   168538:         jne     0x169280 <__nss_database_lookup+0x1fb30>
    0.00 :   16853e:         addq    $0x10, %rsi
    0.00 :   168542:         addq    $0x10, %rdi
    0.00 :   168546:         nopw    %cs:(%rax,%rax)
    0.00 :   168550:         andq    $-0x10, %rsi
    0.00 :   168554:         andq    $-0x10, %rdi
    0.00 :   168558:         movl    $0xffff, %edx           # imm = 0xFFFF
    0.00 :   16855d:         xorl    %r8d, %r8d
    0.00 :   168560:         andl    $0xf, %ecx
    0.00 :   168563:         andl    $0xf, %eax
    0.00 :   168566:         pxor    %xmm0, %xmm0
    0.00 :   16856a:         cmpl    %eax, %ecx
    0.00 :   16856c:         je      0x1685a0 <__nss_database_lookup+0x1ee50>
    0.00 :   16856e:         ja      0x168577 <__nss_database_lookup+0x1ee27>
    0.00 :   168570:         movl    %edx, %r8d
    0.00 :   168573:         xchgl   %ecx, %eax
    0.00 :   168574:         xchgq   %rdi, %rsi
    0.00 :   168577:         movdqa  (%rdi), %xmm2
    0.00 :   16857b:         movdqa  (%rsi), %xmm1
    0.00 :   16857f:         leaq    0xf(%rax), %r9
    0.00 :   168583:         subq    %rcx, %r9
    0.00 :   168586:         leaq    0x2f753(%rip), %r10     # 0x197ce0 <h_nerr+0xd4>
    0.00 :   16858d:         movslq  (%r10,%r9,4), %r9
    0.00 :   168591:         pcmpeqb %xmm1, %xmm0
    0.00 :   168595:         leaq    (%r10,%r9), %r10
    0.00 :   168599:         jmpq    *%r10
    0.00 :   16859c:         nopl    (%rax)
    0.00 :   1685a0:         movdqa  (%rsi), %xmm1
    0.00 :   1685a4:         pcmpeqb %xmm1, %xmm0
    0.00 :   1685a8:         pcmpeqb (%rdi), %xmm1
    0.00 :   1685ac:         psubb   %xmm0, %xmm1
    0.00 :   1685b0:         pmovmskb        %xmm1, %r9d
    0.00 :   1685b5:         shrl    %cl, %edx
    0.00 :   1685b7:         shrl    %cl, %r9d
    0.00 :   1685ba:         subl    %r9d, %edx
    0.00 :   1685bd:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   1685c3:         movq    $0x10, %rcx
    0.00 :   1685ca:         movq    $0x10, %r9
    0.00 :   1685d1:         movq    %rcx, %rdx
    0.00 :   1685d4:         nopw    %cs:(%rax,%rax)
    0.00 :   1685df:         nop
    0.00 :   1685e0:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1685e5:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   1685ec:         leaq    0x10(%rdx), %rdx
    0.00 :   1685f0:         jbe     0x168610 <__nss_database_lookup+0x1eec0>
    0.00 :   1685f2:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1685f7:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   1685fe:         leaq    0x10(%rdx), %rdx
    0.00 :   168602:         jbe     0x168610 <__nss_database_lookup+0x1eec0>
    0.00 :   168604:         jmp     0x1685e0 <__nss_database_lookup+0x1ee90>
    0.00 :   168606:         nopw    %cs:(%rax,%rax)
    0.00 :   168610:         jae     0x16928f <__nss_database_lookup+0x1fb3f>
    0.00 :   168616:         leaq    -0x10(%rdx,%rcx), %rcx
    0.00 :   16861b:         movzbl  (%rdi,%rcx), %eax
    0.00 :   16861f:         movzbl  (%rsi,%rcx), %edx
    0.00 :   168623:         subl    %edx, %eax
    0.00 :   168625:         retq
    0.00 :   168626:         nopw    %cs:(%rax,%rax)
    0.00 :   168630:         pslldq  $0xf, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0]
    0.00 :   168635:         pcmpeqb %xmm1, %xmm2
    0.00 :   168639:         psubb   %xmm0, %xmm2
    0.00 :   16863d:         pmovmskb        %xmm2, %r9d
    0.00 :   168642:         shrl    %cl, %edx
    0.00 :   168644:         shrl    %cl, %r9d
    0.00 :   168647:         subl    %r9d, %edx
    0.00 :   16864a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168650:         movdqa  (%rdi), %xmm3
    0.00 :   168654:         movq    $0x10, %rcx
    0.00 :   16865b:         movl    $0x1, %r9d
    0.00 :   168661:         leaq    0x1(%rdi), %r10
    0.00 :   168665:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   16866c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168673:         movq    %rcx, %rdx
    0.00 :   168676:         nopw    %cs:(%rax,%rax)
    0.00 :   168680:         addq    $0x10, %r10
    0.00 :   168684:         jg      0x1686d0 <__nss_database_lookup+0x1ef80>
    0.00 :   168686:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16868b:         palignr $0x1, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0]
    0.00 :   168693:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16869a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   1686a0:         addq    $0x10, %rdx
    0.00 :   1686a4:         addq    $0x10, %r10
    0.00 :   1686a8:         jg      0x1686d0 <__nss_database_lookup+0x1ef80>
    0.00 :   1686aa:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1686af:         palignr $0x1, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0]
    0.00 :   1686b7:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   1686be:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   1686c4:         addq    $0x10, %rdx
    0.00 :   1686c8:         jmp     0x168680 <__nss_database_lookup+0x1ef30>
    0.00 :   1686ca:         nopw    (%rax,%rax)
    0.00 :   1686d0:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   1686d7:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   1686dd:         psrldq  $0x1, %xmm0             # xmm0 = xmm0[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],zero
    0.00 :   1686e2:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   1686e8:         cmpl    $0xe, %ecx
    0.00 :   1686eb:         ja      0x168686 <__nss_database_lookup+0x1ef36>
    0.00 :   1686ed:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   1686f2:         nopw    %cs:(%rax,%rax)
    0.00 :   1686fd:         nopl    (%rax)
    0.00 :   168700:         pslldq  $0xe, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1]
    0.00 :   168705:         pcmpeqb %xmm1, %xmm2
    0.00 :   168709:         psubb   %xmm0, %xmm2
    0.00 :   16870d:         pmovmskb        %xmm2, %r9d
    0.00 :   168712:         shrl    %cl, %edx
    0.00 :   168714:         shrl    %cl, %r9d
    0.00 :   168717:         subl    %r9d, %edx
    0.00 :   16871a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168720:         movdqa  (%rdi), %xmm3
    0.00 :   168724:         movq    $0x10, %rcx
    0.00 :   16872b:         movl    $0x2, %r9d
    0.00 :   168731:         leaq    0x2(%rdi), %r10
    0.00 :   168735:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   16873c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168743:         movq    %rcx, %rdx
    0.00 :   168746:         nopw    %cs:(%rax,%rax)
    0.00 :   168750:         addq    $0x10, %r10
    0.00 :   168754:         jg      0x1687a0 <__nss_database_lookup+0x1f050>
    0.00 :   168756:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16875b:         palignr $0x2, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[2,3,4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1]
    0.00 :   168763:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16876a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168770:         addq    $0x10, %rdx
    0.00 :   168774:         addq    $0x10, %r10
    0.00 :   168778:         jg      0x1687a0 <__nss_database_lookup+0x1f050>
    0.00 :   16877a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16877f:         palignr $0x2, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[2,3,4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1]
    0.00 :   168787:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16878e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168794:         addq    $0x10, %rdx
    0.00 :   168798:         jmp     0x168750 <__nss_database_lookup+0x1f000>
    0.00 :   16879a:         nopw    (%rax,%rax)
    0.00 :   1687a0:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   1687a7:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   1687ad:         psrldq  $0x2, %xmm0             # xmm0 = xmm0[2,3,4,5,6,7,8,9,10,11,12,13,14,15],zero,zero
    0.00 :   1687b2:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   1687b8:         cmpl    $0xd, %ecx
    0.00 :   1687bb:         ja      0x168756 <__nss_database_lookup+0x1f006>
    0.00 :   1687bd:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   1687c2:         nopw    %cs:(%rax,%rax)
    0.00 :   1687cd:         nopl    (%rax)
    0.00 :   1687d0:         pslldq  $0xd, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2]
    0.00 :   1687d5:         pcmpeqb %xmm1, %xmm2
    0.00 :   1687d9:         psubb   %xmm0, %xmm2
    0.00 :   1687dd:         pmovmskb        %xmm2, %r9d
    0.00 :   1687e2:         shrl    %cl, %edx
    0.00 :   1687e4:         shrl    %cl, %r9d
    0.00 :   1687e7:         subl    %r9d, %edx
    0.00 :   1687ea:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   1687f0:         movdqa  (%rdi), %xmm3
    0.00 :   1687f4:         movq    $0x10, %rcx
    0.00 :   1687fb:         movl    $0x3, %r9d
    0.00 :   168801:         leaq    0x3(%rdi), %r10
    0.00 :   168805:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   16880c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168813:         movq    %rcx, %rdx
    0.00 :   168816:         addq    $0x10, %r10
    0.00 :   16881a:         jg      0x168860 <__nss_database_lookup+0x1f110>
    0.00 :   16881c:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168821:         palignr $0x3, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[3,4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2]
    0.00 :   168829:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168830:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168836:         addq    $0x10, %rdx
    0.00 :   16883a:         addq    $0x10, %r10
    0.00 :   16883e:         jg      0x168860 <__nss_database_lookup+0x1f110>
    0.00 :   168840:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168845:         palignr $0x3, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[3,4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2]
    0.00 :   16884d:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168854:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   16885a:         addq    $0x10, %rdx
    0.00 :   16885e:         jmp     0x168816 <__nss_database_lookup+0x1f0c6>
    0.00 :   168860:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168867:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   16886d:         psrldq  $0x3, %xmm0             # xmm0 = xmm0[3,4,5,6,7,8,9,10,11,12,13,14,15],zero,zero,zero
    0.00 :   168872:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168878:         cmpl    $0xc, %ecx
    0.00 :   16887b:         ja      0x16881c <__nss_database_lookup+0x1f0cc>
    0.00 :   16887d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168882:         nopw    %cs:(%rax,%rax)
    0.00 :   16888d:         nopl    (%rax)
    0.00 :   168890:         pslldq  $0xc, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3]
    0.00 :   168895:         pcmpeqb %xmm1, %xmm2
    0.00 :   168899:         psubb   %xmm0, %xmm2
    0.00 :   16889d:         pmovmskb        %xmm2, %r9d
    0.00 :   1688a2:         shrl    %cl, %edx
    0.00 :   1688a4:         shrl    %cl, %r9d
    0.00 :   1688a7:         subl    %r9d, %edx
    0.00 :   1688aa:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   1688b0:         movdqa  (%rdi), %xmm3
    0.00 :   1688b4:         movq    $0x10, %rcx
    0.00 :   1688bb:         movl    $0x4, %r9d
    0.00 :   1688c1:         leaq    0x4(%rdi), %r10
    0.00 :   1688c5:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   1688cc:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   1688d3:         movq    %rcx, %rdx
    0.00 :   1688d6:         nopw    %cs:(%rax,%rax)
    0.00 :   1688e0:         addq    $0x10, %r10
    0.00 :   1688e4:         jg      0x168930 <__nss_database_lookup+0x1f1e0>
    0.00 :   1688e6:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1688eb:         palignr $0x4, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3]
    0.00 :   1688f3:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   1688fa:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168900:         addq    $0x10, %rdx
    0.00 :   168904:         addq    $0x10, %r10
    0.00 :   168908:         jg      0x168930 <__nss_database_lookup+0x1f1e0>
    0.00 :   16890a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16890f:         palignr $0x4, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[4,5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3]
    0.00 :   168917:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16891e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168924:         addq    $0x10, %rdx
    0.00 :   168928:         jmp     0x1688e0 <__nss_database_lookup+0x1f190>
    0.00 :   16892a:         nopw    (%rax,%rax)
    0.00 :   168930:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168937:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   16893d:         psrldq  $0x4, %xmm0             # xmm0 = xmm0[4,5,6,7,8,9,10,11,12,13,14,15],zero,zero,zero,zero
    0.00 :   168942:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168948:         cmpl    $0xb, %ecx
    0.00 :   16894b:         ja      0x1688e6 <__nss_database_lookup+0x1f196>
    0.00 :   16894d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168952:         nopw    %cs:(%rax,%rax)
    0.00 :   16895d:         nopl    (%rax)
    0.00 :   168960:         pslldq  $0xb, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3,4]
    0.00 :   168965:         pcmpeqb %xmm1, %xmm2
    0.00 :   168969:         psubb   %xmm0, %xmm2
    0.00 :   16896d:         pmovmskb        %xmm2, %r9d
    0.00 :   168972:         shrl    %cl, %edx
    0.00 :   168974:         shrl    %cl, %r9d
    0.00 :   168977:         subl    %r9d, %edx
    0.00 :   16897a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168980:         movdqa  (%rdi), %xmm3
    0.00 :   168984:         movq    $0x10, %rcx
    0.00 :   16898b:         movl    $0x5, %r9d
    0.00 :   168991:         leaq    0x5(%rdi), %r10
    0.00 :   168995:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   16899c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   1689a3:         movq    %rcx, %rdx
    0.00 :   1689a6:         nopw    %cs:(%rax,%rax)
    0.00 :   1689b0:         addq    $0x10, %r10
    0.00 :   1689b4:         jg      0x168a00 <__nss_database_lookup+0x1f2b0>
    0.00 :   1689b6:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1689bb:         palignr $0x5, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4]
    0.00 :   1689c3:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   1689ca:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   1689d0:         addq    $0x10, %rdx
    0.00 :   1689d4:         addq    $0x10, %r10
    0.00 :   1689d8:         jg      0x168a00 <__nss_database_lookup+0x1f2b0>
    0.00 :   1689da:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1689df:         palignr $0x5, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4]
    0.00 :   1689e7:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   1689ee:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   1689f4:         addq    $0x10, %rdx
    0.00 :   1689f8:         jmp     0x1689b0 <__nss_database_lookup+0x1f260>
    0.00 :   1689fa:         nopw    (%rax,%rax)
    0.00 :   168a00:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168a07:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168a0d:         psrldq  $0x5, %xmm0             # xmm0 = xmm0[5,6,7,8,9,10,11,12,13,14,15],zero,zero,zero,zero,zero
    0.00 :   168a12:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168a18:         cmpl    $0xa, %ecx
    0.00 :   168a1b:         ja      0x1689b6 <__nss_database_lookup+0x1f266>
    0.00 :   168a1d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168a22:         nopw    %cs:(%rax,%rax)
    0.00 :   168a2d:         nopl    (%rax)
    0.00 :   168a30:         pslldq  $0xa, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3,4,5]
    0.00 :   168a35:         pcmpeqb %xmm1, %xmm2
    0.00 :   168a39:         psubb   %xmm0, %xmm2
    0.00 :   168a3d:         pmovmskb        %xmm2, %r9d
    0.00 :   168a42:         shrl    %cl, %edx
    0.00 :   168a44:         shrl    %cl, %r9d
    0.00 :   168a47:         subl    %r9d, %edx
    0.00 :   168a4a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168a50:         movdqa  (%rdi), %xmm3
    0.00 :   168a54:         movq    $0x10, %rcx
    0.00 :   168a5b:         movl    $0x6, %r9d
    0.00 :   168a61:         leaq    0x6(%rdi), %r10
    0.00 :   168a65:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   168a6c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168a73:         movq    %rcx, %rdx
    0.00 :   168a76:         nopw    %cs:(%rax,%rax)
    0.00 :   168a80:         addq    $0x10, %r10
    0.00 :   168a84:         jg      0x168ad0 <__nss_database_lookup+0x1f380>
    0.00 :   168a86:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168a8b:         palignr $0x6, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5]
    0.00 :   168a93:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168a9a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168aa0:         addq    $0x10, %rdx
    0.00 :   168aa4:         addq    $0x10, %r10
    0.00 :   168aa8:         jg      0x168ad0 <__nss_database_lookup+0x1f380>
    0.00 :   168aaa:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168aaf:         palignr $0x6, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5]
    0.00 :   168ab7:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168abe:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168ac4:         addq    $0x10, %rdx
    0.00 :   168ac8:         jmp     0x168a80 <__nss_database_lookup+0x1f330>
    0.00 :   168aca:         nopw    (%rax,%rax)
    0.00 :   168ad0:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168ad7:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168add:         psrldq  $0x6, %xmm0             # xmm0 = xmm0[6,7,8,9,10,11,12,13,14,15],zero,zero,zero,zero,zero,zero
    0.00 :   168ae2:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168ae8:         cmpl    $0x9, %ecx
    0.00 :   168aeb:         ja      0x168a86 <__nss_database_lookup+0x1f336>
    0.00 :   168aed:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168af2:         nopw    %cs:(%rax,%rax)
    0.00 :   168afd:         nopl    (%rax)
    0.00 :   168b00:         pslldq  $0x9, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3,4,5,6]
    0.00 :   168b05:         pcmpeqb %xmm1, %xmm2
    0.00 :   168b09:         psubb   %xmm0, %xmm2
    0.00 :   168b0d:         pmovmskb        %xmm2, %r9d
    0.00 :   168b12:         shrl    %cl, %edx
    0.00 :   168b14:         shrl    %cl, %r9d
    0.00 :   168b17:         subl    %r9d, %edx
    0.00 :   168b1a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168b20:         movdqa  (%rdi), %xmm3
    0.00 :   168b24:         movq    $0x10, %rcx
    0.00 :   168b2b:         movl    $0x7, %r9d
    0.00 :   168b31:         leaq    0x7(%rdi), %r10
    0.00 :   168b35:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   168b3c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168b43:         movq    %rcx, %rdx
    0.00 :   168b46:         nopw    %cs:(%rax,%rax)
    0.00 :   168b50:         addq    $0x10, %r10
    0.00 :   168b54:         jg      0x168ba0 <__nss_database_lookup+0x1f450>
    0.00 :   168b56:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168b5b:         palignr $0x7, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6]
    0.00 :   168b63:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168b6a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168b70:         addq    $0x10, %rdx
    0.00 :   168b74:         addq    $0x10, %r10
    0.00 :   168b78:         jg      0x168ba0 <__nss_database_lookup+0x1f450>
    0.00 :   168b7a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168b7f:         palignr $0x7, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6]
    0.00 :   168b87:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168b8e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168b94:         addq    $0x10, %rdx
    0.00 :   168b98:         jmp     0x168b50 <__nss_database_lookup+0x1f400>
    0.00 :   168b9a:         nopw    (%rax,%rax)
    0.00 :   168ba0:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168ba7:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168bad:         psrldq  $0x7, %xmm0             # xmm0 = xmm0[7,8,9,10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero
    0.00 :   168bb2:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168bb8:         cmpl    $0x8, %ecx
    0.00 :   168bbb:         ja      0x168b56 <__nss_database_lookup+0x1f406>
    0.00 :   168bbd:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168bc2:         nopw    %cs:(%rax,%rax)
    0.00 :   168bcd:         nopl    (%rax)
    0.00 :   168bd0:         pslldq  $0x8, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3,4,5,6,7]
    0.00 :   168bd5:         pcmpeqb %xmm1, %xmm2
    0.00 :   168bd9:         psubb   %xmm0, %xmm2
    0.00 :   168bdd:         pmovmskb        %xmm2, %r9d
    0.00 :   168be2:         shrl    %cl, %edx
    0.00 :   168be4:         shrl    %cl, %r9d
    0.00 :   168be7:         subl    %r9d, %edx
    0.00 :   168bea:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168bf0:         movdqa  (%rdi), %xmm3
    0.00 :   168bf4:         movq    $0x10, %rcx
    0.00 :   168bfb:         movl    $0x8, %r9d
    0.00 :   168c01:         leaq    0x8(%rdi), %r10
    0.00 :   168c05:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   168c0c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168c13:         movq    %rcx, %rdx
    0.00 :   168c16:         nopw    %cs:(%rax,%rax)
    0.00 :   168c20:         addq    $0x10, %r10
    0.00 :   168c24:         jg      0x168c70 <__nss_database_lookup+0x1f520>
    0.00 :   168c26:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168c2b:         palignr $0x8, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7]
    0.00 :   168c33:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168c3a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168c40:         addq    $0x10, %rdx
    0.00 :   168c44:         addq    $0x10, %r10
    0.00 :   168c48:         jg      0x168c70 <__nss_database_lookup+0x1f520>
    0.00 :   168c4a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168c4f:         palignr $0x8, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7]
    0.00 :   168c57:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168c5e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168c64:         addq    $0x10, %rdx
    0.00 :   168c68:         jmp     0x168c20 <__nss_database_lookup+0x1f4d0>
    0.00 :   168c6a:         nopw    (%rax,%rax)
    0.00 :   168c70:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168c77:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168c7d:         psrldq  $0x8, %xmm0             # xmm0 = xmm0[8,9,10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   168c82:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168c88:         cmpl    $0x7, %ecx
    0.00 :   168c8b:         ja      0x168c26 <__nss_database_lookup+0x1f4d6>
    0.00 :   168c8d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168c92:         nopw    %cs:(%rax,%rax)
    0.00 :   168c9d:         nopl    (%rax)
    0.00 :   168ca0:         pslldq  $0x7, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3,4,5,6,7,8]
    0.00 :   168ca5:         pcmpeqb %xmm1, %xmm2
    0.00 :   168ca9:         psubb   %xmm0, %xmm2
    0.00 :   168cad:         pmovmskb        %xmm2, %r9d
    0.00 :   168cb2:         shrl    %cl, %edx
    0.00 :   168cb4:         shrl    %cl, %r9d
    0.00 :   168cb7:         subl    %r9d, %edx
    0.00 :   168cba:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168cc0:         movdqa  (%rdi), %xmm3
    0.00 :   168cc4:         movq    $0x10, %rcx
    0.00 :   168ccb:         movl    $0x9, %r9d
    0.00 :   168cd1:         leaq    0x9(%rdi), %r10
    0.00 :   168cd5:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   168cdc:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168ce3:         movq    %rcx, %rdx
    0.00 :   168ce6:         nopw    %cs:(%rax,%rax)
    0.00 :   168cf0:         addq    $0x10, %r10
    0.00 :   168cf4:         jg      0x168d40 <__nss_database_lookup+0x1f5f0>
    0.00 :   168cf6:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168cfb:         palignr $0x9, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8]
    0.00 :   168d03:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168d0a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168d10:         addq    $0x10, %rdx
    0.00 :   168d14:         addq    $0x10, %r10
    0.00 :   168d18:         jg      0x168d40 <__nss_database_lookup+0x1f5f0>
    0.00 :   168d1a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168d1f:         palignr $0x9, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[9,10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8]
    0.00 :   168d27:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168d2e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168d34:         addq    $0x10, %rdx
    0.00 :   168d38:         jmp     0x168cf0 <__nss_database_lookup+0x1f5a0>
    0.00 :   168d3a:         nopw    (%rax,%rax)
    0.00 :   168d40:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168d47:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168d4d:         psrldq  $0x9, %xmm0             # xmm0 = xmm0[9,10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   168d52:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168d58:         cmpl    $0x6, %ecx
    0.00 :   168d5b:         ja      0x168cf6 <__nss_database_lookup+0x1f5a6>
    0.00 :   168d5d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168d62:         nopw    %cs:(%rax,%rax)
    0.00 :   168d6d:         nopl    (%rax)
    0.00 :   168d70:         pslldq  $0x6, %xmm2             # xmm2 = zero,zero,zero,zero,zero,zero,xmm2[0,1,2,3,4,5,6,7,8,9]
    0.00 :   168d75:         pcmpeqb %xmm1, %xmm2
    0.00 :   168d79:         psubb   %xmm0, %xmm2
    0.00 :   168d7d:         pmovmskb        %xmm2, %r9d
    0.00 :   168d82:         shrl    %cl, %edx
    0.00 :   168d84:         shrl    %cl, %r9d
    0.00 :   168d87:         subl    %r9d, %edx
    0.00 :   168d8a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168d90:         movdqa  (%rdi), %xmm3
    0.00 :   168d94:         movq    $0x10, %rcx
    0.00 :   168d9b:         movl    $0xa, %r9d
    0.00 :   168da1:         leaq    0xa(%rdi), %r10
    0.00 :   168da5:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   168dac:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168db3:         movq    %rcx, %rdx
    0.00 :   168db6:         nopw    %cs:(%rax,%rax)
    0.00 :   168dc0:         addq    $0x10, %r10
    0.00 :   168dc4:         jg      0x168e10 <__nss_database_lookup+0x1f6c0>
    0.00 :   168dc6:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168dcb:         palignr $0xa, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9]
    0.00 :   168dd3:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168dda:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168de0:         addq    $0x10, %rdx
    0.00 :   168de4:         addq    $0x10, %r10
    0.00 :   168de8:         jg      0x168e10 <__nss_database_lookup+0x1f6c0>
    0.00 :   168dea:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168def:         palignr $0xa, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[10,11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9]
    0.00 :   168df7:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168dfe:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168e04:         addq    $0x10, %rdx
    0.00 :   168e08:         jmp     0x168dc0 <__nss_database_lookup+0x1f670>
    0.00 :   168e0a:         nopw    (%rax,%rax)
    0.00 :   168e10:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168e17:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168e1d:         psrldq  $0xa, %xmm0             # xmm0 = xmm0[10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   168e22:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168e28:         cmpl    $0x5, %ecx
    0.00 :   168e2b:         ja      0x168dc6 <__nss_database_lookup+0x1f676>
    0.00 :   168e2d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168e32:         nopw    %cs:(%rax,%rax)
    0.00 :   168e3d:         nopl    (%rax)
    0.00 :   168e40:         pslldq  $0x5, %xmm2             # xmm2 = zero,zero,zero,zero,zero,xmm2[0,1,2,3,4,5,6,7,8,9,10]
    0.00 :   168e45:         pcmpeqb %xmm1, %xmm2
    0.00 :   168e49:         psubb   %xmm0, %xmm2
    0.00 :   168e4d:         pmovmskb        %xmm2, %r9d
    0.00 :   168e52:         shrl    %cl, %edx
    0.00 :   168e54:         shrl    %cl, %r9d
    0.00 :   168e57:         subl    %r9d, %edx
    0.00 :   168e5a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168e60:         movdqa  (%rdi), %xmm3
    0.00 :   168e64:         movq    $0x10, %rcx
    0.00 :   168e6b:         movl    $0xb, %r9d
    0.00 :   168e71:         leaq    0xb(%rdi), %r10
    0.00 :   168e75:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   168e7c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168e83:         movq    %rcx, %rdx
    0.00 :   168e86:         nopw    %cs:(%rax,%rax)
    0.00 :   168e90:         addq    $0x10, %r10
    0.00 :   168e94:         jg      0x168ee0 <__nss_database_lookup+0x1f790>
    0.00 :   168e96:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168e9b:         palignr $0xb, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10]
    0.00 :   168ea3:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168eaa:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168eb0:         addq    $0x10, %rdx
    0.00 :   168eb4:         addq    $0x10, %r10
    0.00 :   168eb8:         jg      0x168ee0 <__nss_database_lookup+0x1f790>
    0.00 :   168eba:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168ebf:         palignr $0xb, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10]
    0.00 :   168ec7:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168ece:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168ed4:         addq    $0x10, %rdx
    0.00 :   168ed8:         jmp     0x168e90 <__nss_database_lookup+0x1f740>
    0.00 :   168eda:         nopw    (%rax,%rax)
    0.00 :   168ee0:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168ee7:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168eed:         psrldq  $0xb, %xmm0             # xmm0 = xmm0[11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   168ef2:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168ef8:         cmpl    $0x4, %ecx
    0.00 :   168efb:         ja      0x168e96 <__nss_database_lookup+0x1f746>
    0.00 :   168efd:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168f02:         nopw    %cs:(%rax,%rax)
    0.00 :   168f0d:         nopl    (%rax)
    0.00 :   168f10:         pslldq  $0x4, %xmm2             # xmm2 = zero,zero,zero,zero,xmm2[0,1,2,3,4,5,6,7,8,9,10,11]
    0.00 :   168f15:         pcmpeqb %xmm1, %xmm2
    0.00 :   168f19:         psubb   %xmm0, %xmm2
    0.00 :   168f1d:         pmovmskb        %xmm2, %r9d
    0.00 :   168f22:         shrl    %cl, %edx
    0.00 :   168f24:         shrl    %cl, %r9d
    0.00 :   168f27:         subl    %r9d, %edx
    0.00 :   168f2a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   168f30:         movdqa  (%rdi), %xmm3
    0.00 :   168f34:         movq    $0x10, %rcx
    0.00 :   168f3b:         movl    $0xc, %r9d
    0.00 :   168f41:         leaq    0xc(%rdi), %r10
    0.00 :   168f45:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   168f4c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168f53:         movq    %rcx, %rdx
    0.00 :   168f56:         nopw    %cs:(%rax,%rax)
    0.00 :   168f60:         addq    $0x10, %r10
    0.00 :   168f64:         jg      0x168fb0 <__nss_database_lookup+0x1f860>
    0.00 :   168f66:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168f6b:         palignr $0xc, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11]
    0.00 :   168f73:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168f7a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168f80:         addq    $0x10, %rdx
    0.00 :   168f84:         addq    $0x10, %r10
    0.00 :   168f88:         jg      0x168fb0 <__nss_database_lookup+0x1f860>
    0.00 :   168f8a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   168f8f:         palignr $0xc, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11]
    0.00 :   168f97:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   168f9e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   168fa4:         addq    $0x10, %rdx
    0.00 :   168fa8:         jmp     0x168f60 <__nss_database_lookup+0x1f810>
    0.00 :   168faa:         nopw    (%rax,%rax)
    0.00 :   168fb0:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   168fb7:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   168fbd:         psrldq  $0xc, %xmm0             # xmm0 = xmm0[12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   168fc2:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   168fc8:         cmpl    $0x3, %ecx
    0.00 :   168fcb:         ja      0x168f66 <__nss_database_lookup+0x1f816>
    0.00 :   168fcd:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   168fd2:         nopw    %cs:(%rax,%rax)
    0.00 :   168fdd:         nopl    (%rax)
    0.00 :   168fe0:         pslldq  $0x3, %xmm2             # xmm2 = zero,zero,zero,xmm2[0,1,2,3,4,5,6,7,8,9,10,11,12]
    0.00 :   168fe5:         pcmpeqb %xmm1, %xmm2
    0.00 :   168fe9:         psubb   %xmm0, %xmm2
    0.00 :   168fed:         pmovmskb        %xmm2, %r9d
    0.00 :   168ff2:         shrl    %cl, %edx
    0.00 :   168ff4:         shrl    %cl, %r9d
    0.00 :   168ff7:         subl    %r9d, %edx
    0.00 :   168ffa:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   169000:         movdqa  (%rdi), %xmm3
    0.00 :   169004:         movq    $0x10, %rcx
    0.00 :   16900b:         movl    $0xd, %r9d
    0.00 :   169011:         leaq    0xd(%rdi), %r10
    0.00 :   169015:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   16901c:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   169023:         movq    %rcx, %rdx
    0.00 :   169026:         nopw    %cs:(%rax,%rax)
    0.00 :   169030:         addq    $0x10, %r10
    0.00 :   169034:         jg      0x169080 <__nss_database_lookup+0x1f930>
    0.00 :   169036:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16903b:         palignr $0xd, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11,12]
    0.00 :   169043:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16904a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   169050:         addq    $0x10, %rdx
    0.00 :   169054:         addq    $0x10, %r10
    0.00 :   169058:         jg      0x169080 <__nss_database_lookup+0x1f930>
    0.00 :   16905a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16905f:         palignr $0xd, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11,12]
    0.00 :   169067:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16906e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   169074:         addq    $0x10, %rdx
    0.00 :   169078:         jmp     0x169030 <__nss_database_lookup+0x1f8e0>
    0.00 :   16907a:         nopw    (%rax,%rax)
    0.00 :   169080:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   169087:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   16908d:         psrldq  $0xd, %xmm0             # xmm0 = xmm0[13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   169092:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   169098:         cmpl    $0x2, %ecx
    0.00 :   16909b:         ja      0x169036 <__nss_database_lookup+0x1f8e6>
    0.00 :   16909d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   1690a2:         nopw    %cs:(%rax,%rax)
    0.00 :   1690ad:         nopl    (%rax)
    0.00 :   1690b0:         pslldq  $0x2, %xmm2             # xmm2 = zero,zero,xmm2[0,1,2,3,4,5,6,7,8,9,10,11,12,13]
    0.00 :   1690b5:         pcmpeqb %xmm1, %xmm2
    0.00 :   1690b9:         psubb   %xmm0, %xmm2
    0.00 :   1690bd:         pmovmskb        %xmm2, %r9d
    0.00 :   1690c2:         shrl    %cl, %edx
    0.00 :   1690c4:         shrl    %cl, %r9d
    0.00 :   1690c7:         subl    %r9d, %edx
    0.00 :   1690ca:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   1690d0:         movdqa  (%rdi), %xmm3
    0.00 :   1690d4:         movq    $0x10, %rcx
    0.00 :   1690db:         movl    $0xe, %r9d
    0.00 :   1690e1:         leaq    0xe(%rdi), %r10
    0.00 :   1690e5:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   1690ec:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   1690f3:         movq    %rcx, %rdx
    0.00 :   1690f6:         nopw    %cs:(%rax,%rax)
    0.00 :   169100:         addq    $0x10, %r10
    0.00 :   169104:         jg      0x169150 <__nss_database_lookup+0x1fa00>
    0.00 :   169106:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16910b:         palignr $0xe, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11,12,13]
    0.00 :   169113:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16911a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   169120:         addq    $0x10, %rdx
    0.00 :   169124:         addq    $0x10, %r10
    0.00 :   169128:         jg      0x169150 <__nss_database_lookup+0x1fa00>
    0.00 :   16912a:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   16912f:         palignr $0xe, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11,12,13]
    0.00 :   169137:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16913e:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   169144:         addq    $0x10, %rdx
    0.00 :   169148:         jmp     0x169100 <__nss_database_lookup+0x1f9b0>
    0.00 :   16914a:         nopw    (%rax,%rax)
    0.00 :   169150:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   169157:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   16915d:         psrldq  $0xe, %xmm0             # xmm0 = xmm0[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   169162:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   169168:         cmpl    $0x1, %ecx
    0.00 :   16916b:         ja      0x169106 <__nss_database_lookup+0x1f9b6>
    0.00 :   16916d:         jmp     0x16923d <__nss_database_lookup+0x1faed>
    0.00 :   169172:         nopw    %cs:(%rax,%rax)
    0.00 :   16917d:         nopl    (%rax)
    0.00 :   169180:         pslldq  $0x1, %xmm2             # xmm2 = zero,xmm2[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]
    0.00 :   169185:         pcmpeqb %xmm1, %xmm2
    0.00 :   169189:         psubb   %xmm0, %xmm2
    0.00 :   16918d:         pmovmskb        %xmm2, %r9d
    0.00 :   169192:         shrl    %cl, %edx
    0.00 :   169194:         shrl    %cl, %r9d
    0.00 :   169197:         subl    %r9d, %edx
    0.00 :   16919a:         jne     0x16926b <__nss_database_lookup+0x1fb1b>
    0.00 :   1691a0:         movdqa  (%rdi), %xmm3
    0.00 :   1691a4:         movq    $0x10, %rcx
    0.00 :   1691ab:         movl    $0xf, %r9d
    0.00 :   1691b1:         leaq    0xf(%rdi), %r10
    0.00 :   1691b5:         andq    $0xfff, %r10            # imm = 0xFFF
    0.00 :   1691bc:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   1691c3:         movq    %rcx, %rdx
    0.00 :   1691c6:         nopw    %cs:(%rax,%rax)
    0.00 :   1691d0:         addq    $0x10, %r10
    0.00 :   1691d4:         jg      0x169220 <__nss_database_lookup+0x1fad0>
    0.00 :   1691d6:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1691db:         palignr $0xf, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]
    0.00 :   1691e3:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   1691ea:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   1691ec:         addq    $0x10, %rdx
    0.00 :   1691f0:         addq    $0x10, %r10
    0.00 :   1691f4:         jg      0x169220 <__nss_database_lookup+0x1fad0>
    0.00 :   1691f6:         movdqa  (%rdi,%rdx), %xmm0
    0.00 :   1691fb:         palignr $0xf, -0x10(%rdi,%rdx), %xmm0 # xmm0 = mem[15],xmm0[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]
    0.00 :   169203:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   16920a:         jbe     0x169250 <__nss_database_lookup+0x1fb00>
    0.00 :   16920c:         addq    $0x10, %rdx
    0.00 :   169210:         jmp     0x1691d0 <__nss_database_lookup+0x1fa80>
    0.00 :   169212:         nopw    %cs:(%rax,%rax)
    0.00 :   16921d:         nopl    (%rax)
    0.00 :   169220:         subq    $0x1000, %r10           # imm = 0x1000
    0.00 :   169227:         movdqa  -0x10(%rdi,%rdx), %xmm0
    0.00 :   16922d:         psrldq  $0xf, %xmm0             # xmm0 = xmm0[15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
    0.00 :   169232:         pcmpistri       $0x3a, %xmm0, %xmm0
    0.00 :   169238:         cmpl    $0x0, %ecx
    0.00 :   16923b:         ja      0x1691d6 <__nss_database_lookup+0x1fa86>
    0.00 :   16923d:         pcmpistri       $0x1a, (%rsi,%rdx), %xmm0
    0.00 :   169244:         nopw    %cs:(%rax,%rax)
    0.00 :   16924f:         nop
    0.00 :   169250:         jae     0x16928f <__nss_database_lookup+0x1fb3f>
    0.00 :   169252:         addq    %rcx, %rdx
    0.00 :   169255:         leaq    -0x10(%rdi,%r9), %rdi
    0.00 :   16925a:         movzbl  (%rdi,%rdx), %eax
    0.00 :   16925e:         movzbl  (%rsi,%rdx), %edx
    0.00 :   169262:         testl   %r8d, %r8d
    0.00 :   169265:         je      0x169268 <__nss_database_lookup+0x1fb18>
    0.00 :   169267:         xchgl   %edx, %eax
    0.00 :   169268:         subl    %edx, %eax
    0.00 :   16926a:         retq
    0.00 :   16926b:         leaq    (%rdi,%rax), %rdi
    0.00 :   16926f:         leaq    (%rsi,%rcx), %rsi
    0.00 :   169273:         testl   %r8d, %r8d
    0.00 :   169276:         je      0x169280 <__nss_database_lookup+0x1fb30>
    0.00 :   169278:         xchgq   %rdi, %rsi
    0.00 :   16927b:         nopl    (%rax,%rax)
   11.61 :   169280:         bsfq    %rdx, %rdx
    2.75 :   169284:         movzbl  (%rsi,%rdx), %ecx
    6.02 :   169288:         movzbl  (%rdi,%rdx), %eax
    3.22 :   16928c:         subl    %ecx, %eax
    7.49 :   16928e:         retq
    0.00 :   16928f:         xorl    %eax, %eax
    0.00 :   169291:         retq
    0.00 :   169292:         nopw    %cs:(%rax,%rax)
    0.00 :   16929d:         nopl    (%rax)
    0.00 :   1692a0:         movzbl  (%rsi), %ecx
    0.00 :   1692a3:         movzbl  (%rdi), %eax
    0.00 :   1692a6:         subl    %ecx, %eax
    0.00 :   1692a8:         retq
 Percent |	Source code & Disassembly of lab2_list for cycles (1362 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    00000000000032c7 <SortedList_insert>:
         : 5    ; SortedList_insert():
         : 6    ; /home/tlam/cs134/project2b/SortedList.c:7
         : 7    ; void SortedList_insert(SortedList_t* list, SortedListElement_t* element) {
    0.00 :   32c7:           pushq   %rbp
    0.00 :   32c8:           movq    %rsp, %rbp
    0.00 :   32cb:           subq    $0x20, %rsp
    0.00 :   32cf:           movq    %rdi, -0x18(%rbp)
    0.00 :   32d3:           movq    %rsi, -0x20(%rbp)
         : 13   ; /home/tlam/cs134/project2b/SortedList.c:8
         : 14   ;     SortedListElement_t* it = list->next; // assumes that if list is empty, it will have a head node pointing to itself
    0.00 :   32d7:           movq    -0x18(%rbp), %rax
    0.00 :   32db:           movq    0x8(%rax), %rax
    0.00 :   32df:           movq    %rax, -0x8(%rbp)
         : 18   ; /home/tlam/cs134/project2b/SortedList.c:9
         : 19   ;     while (it != list) { // keep on going to next node until reaches last node, meaning element's key is > all keys in list or...
    0.00 :   32e3:           jmp     0x3322 <SortedList_insert+0x5b>
         : 21   ; /home/tlam/cs134/project2b/SortedList.c:10
         : 22   ;         if (strcmp(it->key, element->key) > 0) { // we find a node where the value is > than the element we want to insert
    5.25 :   32e5:           movq    -0x20(%rbp), %rax
    6.04 :   32e9:           movq    0x10(%rax), %rdx
    1.75 :   32ed:           movq    -0x8(%rbp), %rax
    1.91 :   32f1:           movq    0x10(%rax), %rax
    1.29 :   32f5:           movq    %rdx, %rsi
    0.99 :   32f8:           movq    %rax, %rdi
   10.34 :   32fb:           callq   0x1100 <strcmp@plt>
    1.93 :   3300:           testl   %eax, %eax
    0.00 :   3302:           jg      0x332e <SortedList_insert+0x67>
         : 32   ; /home/tlam/cs134/project2b/SortedList.c:14
         : 33   ;         if (opt_yield & INSERT_YIELD) {
    2.68 :   3304:           movl    0x2f12(%rip), %eax      # 0x621c <opt_yield>
    1.11 :   330a:           andl    $0x1, %eax
   49.85 :   330d:           testl   %eax, %eax
    0.18 :   330f:           je      0x3316 <SortedList_insert+0x4f>
         : 38   ; /home/tlam/cs134/project2b/SortedList.c:15
         : 39   ;             sched_yield();
    0.00 :   3311:           callq   0x10c0 <sched_yield@plt>
         : 41   ; /home/tlam/cs134/project2b/SortedList.c:17
         : 42   ;         it = it->next;
    1.22 :   3316:           movq    -0x8(%rbp), %rax
    2.20 :   331a:           movq    0x8(%rax), %rax
    0.72 :   331e:           movq    %rax, -0x8(%rbp)
         : 46   ; /home/tlam/cs134/project2b/SortedList.c:9
         : 47   ;     while (it != list) { // keep on going to next node until reaches last node, meaning element's key is > all keys in list or...
    5.34 :   3322:           movq    -0x8(%rbp), %rax
    7.22 :   3326:           cmpq    -0x18(%rbp), %rax
    0.00 :   332a:           jne     0x32e5 <SortedList_insert+0x1e>
    0.00 :   332c:           jmp     0x332f <SortedList_insert+0x68>
         : 52   ; /home/tlam/cs134/project2b/SortedList.c:11
         : 53   ;             break;
    0.00 :   332e:           nop
         : 55   ; /home/tlam/cs134/project2b/SortedList.c:21
         : 56   ;     element->next = it;
    0.00 :   332f:           movq    -0x20(%rbp), %rax
    0.00 :   3333:           movq    -0x8(%rbp), %rdx
    0.00 :   3337:           movq    %rdx, 0x8(%rax)
         : 60   ; /home/tlam/cs134/project2b/SortedList.c:22
         : 61   ;     element->prev = it->prev;
    0.00 :   333b:           movq    -0x8(%rbp), %rax
    0.00 :   333f:           movq    (%rax), %rdx
    0.00 :   3342:           movq    -0x20(%rbp), %rax
    0.00 :   3346:           movq    %rdx, (%rax)
         : 66   ; /home/tlam/cs134/project2b/SortedList.c:23
         : 67   ;     it->prev->next = element;
    0.00 :   3349:           movq    -0x8(%rbp), %rax
    0.00 :   334d:           movq    (%rax), %rax
    0.00 :   3350:           movq    -0x20(%rbp), %rdx
    0.00 :   3354:           movq    %rdx, 0x8(%rax)
         : 72   ; /home/tlam/cs134/project2b/SortedList.c:24
         : 73   ;     it->prev = element;
    0.00 :   3358:           movq    -0x8(%rbp), %rax
    0.00 :   335c:           movq    -0x20(%rbp), %rdx
    0.00 :   3360:           movq    %rdx, (%rax)
         : 77   ; /home/tlam/cs134/project2b/SortedList.c:25
         : 78   ; }
    0.00 :   3363:           nop
    0.00 :   3364:           leave
    0.00 :   3365:           retq
 Percent |	Source code & Disassembly of lab2_list for cycles (554 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    00000000000033f0 <SortedList_lookup>:
         : 5    ; SortedList_lookup():
         : 6    ; /home/tlam/cs134/project2b/SortedList.c:45
         : 7    ; SortedListElement_t* SortedList_lookup(SortedList_t* list, const char* key) {
    0.00 :   33f0:           pushq   %rbp
    0.00 :   33f1:           movq    %rsp, %rbp
    0.00 :   33f4:           subq    $0x20, %rsp
    0.00 :   33f8:           movq    %rdi, -0x18(%rbp)
    0.00 :   33fc:           movq    %rsi, -0x20(%rbp)
         : 13   ; /home/tlam/cs134/project2b/SortedList.c:46
         : 14   ;     SortedListElement_t* it = list->next;
    0.00 :   3400:           movq    -0x18(%rbp), %rax
    0.00 :   3404:           movq    0x8(%rax), %rax
    0.00 :   3408:           movq    %rax, -0x8(%rbp)
         : 18   ; /home/tlam/cs134/project2b/SortedList.c:47
         : 19   ;     while (it != list) { // keep on going until it reaches head of list
    0.00 :   340c:           jmp     0x344d <SortedList_lookup+0x5d>
         : 21   ; /home/tlam/cs134/project2b/SortedList.c:50
         : 22   ;         if (opt_yield & LOOKUP_YIELD) {
    5.24 :   340e:           movl    0x2e08(%rip), %eax      # 0x621c <opt_yield>
   12.62 :   3414:           andl    $0x4, %eax
    5.83 :   3417:           testl   %eax, %eax
    0.00 :   3419:           je      0x3420 <SortedList_lookup+0x30>
         : 27   ; /home/tlam/cs134/project2b/SortedList.c:51
         : 28   ;             sched_yield();
    0.00 :   341b:           callq   0x10c0 <sched_yield@plt>
         : 30   ; /home/tlam/cs134/project2b/SortedList.c:54
         : 31   ;         if (strcmp(it->key, key) == 0) {
    8.74 :   3420:           movq    -0x8(%rbp), %rax
   10.29 :   3424:           movq    0x10(%rax), %rax
    3.03 :   3428:           movq    -0x20(%rbp), %rdx
    5.21 :   342c:           movq    %rdx, %rsi
    4.85 :   342f:           movq    %rax, %rdi
   12.56 :   3432:           callq   0x1100 <strcmp@plt>
    9.26 :   3437:           testl   %eax, %eax
    1.71 :   3439:           jne     0x3441 <SortedList_lookup+0x51>
         : 40   ; /home/tlam/cs134/project2b/SortedList.c:55
         : 41   ;             return it;
    0.23 :   343b:           movq    -0x8(%rbp), %rax
    0.00 :   343f:           jmp     0x345c <SortedList_lookup+0x6c>
         : 44   ; /home/tlam/cs134/project2b/SortedList.c:57
         : 45   ;         it = it->next;
    2.05 :   3441:           movq    -0x8(%rbp), %rax
    2.32 :   3445:           movq    0x8(%rax), %rax
    1.37 :   3449:           movq    %rax, -0x8(%rbp)
         : 49   ; /home/tlam/cs134/project2b/SortedList.c:47
         : 50   ;     while (it != list) { // keep on going until it reaches head of list
    7.04 :   344d:           movq    -0x8(%rbp), %rax
    7.64 :   3451:           cmpq    -0x18(%rbp), %rax
    0.00 :   3455:           jne     0x340e <SortedList_lookup+0x1e>
         : 54   ; /home/tlam/cs134/project2b/SortedList.c:59
         : 55   ;     return NULL; // if end of list reached, key is not in list
    0.00 :   3457:           movl    $0x0, %eax
         : 57   ; /home/tlam/cs134/project2b/SortedList.c:60
         : 58   ; }
    0.00 :   345c:           leave
    0.00 :   345d:           retq
 Percent |	Source code & Disassembly of [vdso] for cycles (175 samples, percent: local period)
---------------------------------------------------------------------------------------------------
         :
         :
         : 2   Disassembly of section .text:
         :
         : 4   00000000000007f0 <clock_gettime>:
         : 5   ; __vdso_clock_gettime():
    0.00 :   7f0:            pushq   %rbp
    0.31 :   7f1:            cmpl    $0xf, %edi
    0.00 :   7f4:            movq    %rsp, %rbp
   35.24 :   7f7:            pushq   %r12
    0.00 :   7f9:            pushq   %rbx
    0.00 :   7fa:            ja      0x8bc <clock_gettime+0xcc>
    0.00 :   800:            movl    $0x1, %eax
    0.00 :   805:            movl    %edi, %ecx
    0.00 :   807:            leaq    -0x478e(%rip), %r8      # 0xffffffffffffc080
    0.00 :   80e:            shll    %cl, %eax
    0.00 :   810:            movl    %eax, %edx
    0.00 :   812:            andl    $0x883, %edx            # imm = 0x883
    0.57 :   818:            je      0x8ee <clock_gettime+0xfe>
    0.00 :   81e:            movl    (%r8), %r10d
    0.00 :   821:            testb   $0x1, %r10b
    0.00 :   825:            jne     0x8dd <clock_gettime+0xed>
    0.00 :   82b:            cmpl    $0x1, 0x4(%r8)
    0.00 :   830:            jne     0x8bc <clock_gettime+0xcc>
   58.51 :   836:            rdtscp
    0.00 :   839:            nop
    0.00 :   83b:            shlq    $0x20, %rdx
    0.00 :   83f:            orq     %rax, %rdx
    0.00 :   842:            js      0x8bc <clock_gettime+0xcc>
    0.00 :   844:            movq    0x8(%r8), %rcx
    0.00 :   848:            movslq  %edi, %r9
    0.00 :   84b:            movl    0x18(%r8), %r11d
    0.00 :   84f:            shlq    $0x4, %r9
    0.00 :   853:            addq    %r8, %r9
    0.00 :   856:            cmpq    %rdx, %rcx
    0.00 :   859:            movq    0x28(%r9), %rax
    0.00 :   85d:            jae     0x869 <clock_gettime+0x79>
    1.55 :   85f:            subq    %rcx, %rdx
    0.00 :   862:            imulq   %r11, %rdx
    0.00 :   866:            addq    %rdx, %rax
    0.00 :   869:            movl    0x1c(%r8), %ecx
    0.00 :   86d:            movq    0x20(%r9), %r9
    0.00 :   871:            movl    (%r8), %edx
    0.00 :   874:            cmpl    %edx, %r10d
    0.00 :   877:            jne     0x81e <clock_gettime+0x2e>
    0.00 :   879:            shrq    %cl, %rax
    0.00 :   87c:            cmpq    $0x3b9ac9ff, %rax       # imm = 0x3B9AC9FF
    0.00 :   882:            jbe     0x899 <clock_gettime+0xa9>
    0.00 :   884:            xorl    %edx, %edx
    0.00 :   886:            subq    $0x3b9aca00, %rax       # imm = 0x3B9ACA00
    0.00 :   88c:            incl    %edx
    0.00 :   88e:            cmpq    $0x3b9ac9ff, %rax       # imm = 0x3B9AC9FF
    0.00 :   894:            ja      0x886 <clock_gettime+0x96>
    0.00 :   896:            addq    %rdx, %r9
    0.45 :   899:            movq    %r9, (%rsi)
    1.76 :   89c:            movq    %rax, 0x8(%rsi)
    0.00 :   8a0:            popq    %rbx
    0.00 :   8a1:            xorl    %eax, %eax
    0.00 :   8a3:            popq    %r12
    0.00 :   8a5:            popq    %rbp
    0.60 :   8a6:            xorl    %edx, %edx
    0.00 :   8a8:            xorl    %ecx, %ecx
    0.00 :   8aa:            xorl    %esi, %esi
    0.00 :   8ac:            xorl    %edi, %edi
    0.00 :   8ae:            xorl    %r8d, %r8d
    0.00 :   8b1:            xorl    %r9d, %r9d
    0.00 :   8b4:            xorl    %r10d, %r10d
    0.56 :   8b7:            xorl    %r11d, %r11d
    0.45 :   8ba:            retq
    0.00 :   8bb:            int3
    0.00 :   8bc:            popq    %rbx
    0.00 :   8bd:            movl    $0xe4, %eax
    0.00 :   8c2:            syscall
    0.00 :   8c4:            popq    %r12
    0.00 :   8c6:            popq    %rbp
    0.00 :   8c7:            xorl    %edx, %edx
    0.00 :   8c9:            xorl    %ecx, %ecx
    0.00 :   8cb:            xorl    %esi, %esi
    0.00 :   8cd:            xorl    %edi, %edi
    0.00 :   8cf:            xorl    %r8d, %r8d
    0.00 :   8d2:            xorl    %r9d, %r9d
    0.00 :   8d5:            xorl    %r10d, %r10d
    0.00 :   8d8:            xorl    %r11d, %r11d
    0.00 :   8db:            retq
    0.00 :   8dc:            int3
    0.00 :   8dd:            cmpl    $0x7fffffff, 0x4(%r8)   # imm = 0x7FFFFFFF
    0.00 :   8e5:            je      0x949 <clock_gettime+0x159>
    0.00 :   8e7:            pause
    0.00 :   8e9:            jmp     0x81e <clock_gettime+0x2e>
    0.00 :   8ee:            testb   $0x60, %al
    0.00 :   8f0:            jne     0x903 <clock_gettime+0x113>
    0.00 :   8f2:            cmpl    $0x4, %edi
    0.00 :   8f5:            jne     0x8bc <clock_gettime+0xcc>
    0.00 :   8f7:            leaq    -0x478e(%rip), %r8      # 0xffffffffffffc170
    0.00 :   8fe:            jmp     0x81e <clock_gettime+0x2e>
    0.00 :   903:            movslq  %edi, %rdi
    0.00 :   906:            leaq    0x2(%rdi), %rax
    0.00 :   90a:            shlq    $0x4, %rax
    0.00 :   90e:            addq    %r8, %rax
    0.00 :   911:            movl    (%r8), %ecx
    0.00 :   914:            testb   $0x1, %cl
    0.00 :   917:            jne     0x935 <clock_gettime+0x145>
    0.00 :   919:            movq    (%rax), %r9
    0.00 :   91c:            movq    %r9, (%rsi)
    0.00 :   91f:            movq    0x8(%rax), %r9
    0.00 :   923:            movq    %r9, 0x8(%rsi)
    0.00 :   927:            movl    (%r8), %r9d
    0.00 :   92a:            cmpl    %r9d, %ecx
    0.00 :   92d:            je      0x8a0 <clock_gettime+0xb0>
    0.00 :   933:            jmp     0x911 <clock_gettime+0x121>
    0.00 :   935:            cmpl    $0x7fffffff, -0x48bb(%rip) # imm = 0x7FFFFFFF
         : 111 # 0xffffffffffffc084
    0.00 :   93f:            je      0x9fc <clock_gettime+0x20c>
    0.00 :   945:            pause
    0.00 :   947:            jmp     0x911 <clock_gettime+0x121>
    0.00 :   949:            leaq    -0x18d0(%rip), %r9      # 0xfffffffffffff080
    0.00 :   950:            cmpl    $0x4, %edi
    0.00 :   953:            leaq    0xf0(%r9), %rax
    0.00 :   95a:            cmoveq  %rax, %r9
    0.00 :   95e:            movl    (%r9), %r10d
    0.00 :   961:            testb   $0x1, %r10b
    0.00 :   965:            jne     0xa62 <clock_gettime+0x272>
    0.00 :   96b:            cmpl    $0x1, 0x4(%r9)
    0.00 :   970:            jne     0x8bc <clock_gettime+0xcc>
    0.00 :   976:            rdtscp
    0.00 :   979:            nop
    0.00 :   97b:            shlq    $0x20, %rdx
    0.00 :   97f:            orq     %rax, %rdx
    0.00 :   982:            js      0x8bc <clock_gettime+0xcc>
    0.00 :   988:            movq    0x8(%r9), %r12
    0.00 :   98c:            movslq  %edi, %r11
    0.00 :   98f:            movl    0x18(%r9), %ecx
    0.00 :   993:            shlq    $0x4, %r11
    0.00 :   997:            leaq    (%r9,%r11), %rbx
    0.00 :   99b:            cmpq    %rdx, %r12
    0.00 :   99e:            movq    0x28(%rbx), %rax
    0.00 :   9a2:            jae     0x9ae <clock_gettime+0x1be>
    0.00 :   9a4:            subq    %r12, %rdx
    0.00 :   9a7:            imulq   %rcx, %rdx
    0.00 :   9ab:            addq    %rdx, %rax
    0.00 :   9ae:            movl    0x1c(%r9), %ecx
    0.00 :   9b2:            movq    0x20(%rbx), %rdx
    0.00 :   9b6:            movl    (%r9), %ebx
    0.00 :   9b9:            cmpl    %ebx, %r10d
    0.00 :   9bc:            jne     0x95e <clock_gettime+0x16e>
    0.00 :   9be:            addq    %r11, %r8
    0.00 :   9c1:            shrq    %cl, %rax
    0.00 :   9c4:            addq    0x28(%r8), %rax
    0.00 :   9c8:            movq    0x20(%r8), %rdi
    0.00 :   9cc:            addq    %rdx, %rdi
    0.00 :   9cf:            cmpq    $0x3b9ac9ff, %rax       # imm = 0x3B9AC9FF
    0.00 :   9d5:            jbe     0xa6d <clock_gettime+0x27d>
    0.00 :   9db:            xorl    %edx, %edx
    0.00 :   9dd:            subq    $0x3b9aca00, %rax       # imm = 0x3B9ACA00
    0.00 :   9e3:            incl    %edx
    0.00 :   9e5:            cmpq    $0x3b9ac9ff, %rax       # imm = 0x3B9AC9FF
    0.00 :   9eb:            ja      0x9dd <clock_gettime+0x1ed>
    0.00 :   9ed:            addq    %rdi, %rdx
    0.00 :   9f0:            movq    %rax, 0x8(%rsi)
    0.00 :   9f4:            movq    %rdx, (%rsi)
    0.00 :   9f7:            jmp     0x8a0 <clock_gettime+0xb0>
    0.00 :   9fc:            addq    $0x2, %rdi
    0.00 :   a00:            leaq    -0x1987(%rip), %r9      # 0xfffffffffffff080
    0.00 :   a07:            movq    %rdi, %rax
    0.00 :   a0a:            shlq    $0x4, %rax
    0.00 :   a0e:            leaq    (%r9,%rax), %r11
    0.00 :   a12:            movl    (%r9), %edi
    0.00 :   a15:            testb   $0x1, %dil
    0.00 :   a19:            jne     0xa69 <clock_gettime+0x279>
    0.00 :   a1b:            movq    (%r11), %r10
    0.00 :   a1e:            movq    0x8(%r11), %rcx
    0.00 :   a22:            movl    (%r9), %ebx
    0.00 :   a25:            cmpl    %edi, %ebx
    0.00 :   a27:            jne     0xa12 <clock_gettime+0x222>
    0.00 :   a29:            addq    %rax, %r8
    0.00 :   a2c:            addq    0x8(%r8), %rcx
    0.00 :   a30:            movq    (%r8), %rdi
    0.00 :   a33:            addq    %r10, %rdi
    0.00 :   a36:            cmpq    $0x3b9ac9ff, %rcx       # imm = 0x3B9AC9FF
    0.00 :   a3d:            jbe     0xa51 <clock_gettime+0x261>
    0.00 :   a3f:            subq    $0x3b9aca00, %rcx       # imm = 0x3B9ACA00
    0.00 :   a46:            incl    %edx
    0.00 :   a48:            cmpq    $0x3b9ac9ff, %rcx       # imm = 0x3B9AC9FF
    0.00 :   a4f:            ja      0xa3f <clock_gettime+0x24f>
    0.00 :   a51:            movl    %edx, %eax
    0.00 :   a53:            movq    %rcx, 0x8(%rsi)
    0.00 :   a57:            addq    %rdi, %rax
    0.00 :   a5a:            movq    %rax, (%rsi)
    0.00 :   a5d:            jmp     0x8a0 <clock_gettime+0xb0>
    0.00 :   a62:            pause
    0.00 :   a64:            jmp     0x95e <clock_gettime+0x16e>
    0.00 :   a69:            pause
    0.00 :   a6b:            jmp     0xa12 <clock_gettime+0x222>
    0.00 :   a6d:            xorl    %edx, %edx
    0.00 :   a6f:            nop
    0.00 :   a70:            jmp     0x9ed <clock_gettime+0x1fd>
 Percent |	Source code & Disassembly of elf for cycles (79 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c00d70 <asm_sysvec_apic_timer_interrupt>:
         : 5                ; asm_sysvec_apic_timer_interrupt():
   98.74 :   ffffffff81c00d70:       nop
    0.00 :   ffffffff81c00d71:       nop
    0.00 :   ffffffff81c00d72:       nop
    1.26 :   ffffffff81c00d73:       cld
    0.00 :   ffffffff81c00d74:       pushq   $-0x1
    0.00 :   ffffffff81c00d76:       callq   0xffffffff81c012a0 <error_entry>
    0.00 :   ffffffff81c00d7b:       movq    %rax, %rsp
    0.00 :   ffffffff81c00d7e:       leaq    0x1(%rsp), %rbp
    0.00 :   ffffffff81c00d83:       movq    %rsp, %rdi
    0.00 :   ffffffff81c00d86:       callq   0xffffffff81b6a5f0 <sysvec_apic_timer_interrupt>
    0.00 :   ffffffff81c00d8b:       jmp     0xffffffff81c013f0 <error_return>
 Percent |	Source code & Disassembly of lab2_list for cycles (56 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .plt:
         :
         : 4    0000000000001100 <strcmp@plt>:
         : 5    ; _init():
  100.00 :   1100:           jmpq    *0x4f62(%rip)           # 0x6068 <_GLOBAL_OFFSET_TABLE_+0x80>
    0.00 :   1106:           pushq   $0xd
    0.00 :   110b:           jmp     0x1020 <.plt>
 Percent |	Source code & Disassembly of elf for cycles (60 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81028f40 <read_tsc>:
         : 5                ; read_tsc():
   57.70 :   ffffffff81028f40:       pushq   %rbp
   34.56 :   ffffffff81028f41:       movq    %rsp, %rbp
    7.74 :   ffffffff81028f44:       rdtsc
    0.00 :   ffffffff81028f46:       nop
    0.00 :   ffffffff81028f47:       nop
    0.00 :   ffffffff81028f48:       nop
    0.00 :   ffffffff81028f49:       shlq    $0x20, %rdx
    0.00 :   ffffffff81028f4d:       orq     %rdx, %rax
    0.00 :   ffffffff81028f50:       popq    %rbp
    0.00 :   ffffffff81028f51:       xorl    %edx, %edx
    0.00 :   ffffffff81028f53:       xorl    %ecx, %ecx
    0.00 :   ffffffff81028f55:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (51 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811d4e60 <perf_adjust_freq_unthr_context>:
         : 5                ; perf_adjust_freq_unthr_context():
    0.00 :   ffffffff811d4e60:       pushq   %rbp
    0.00 :   ffffffff811d4e61:       movq    %rsp, %rbp
    0.00 :   ffffffff811d4e64:       pushq   %r14
   27.34 :   ffffffff811d4e66:       pushq   %r13
    0.00 :   ffffffff811d4e68:       pushq   %r12
    0.00 :   ffffffff811d4e6a:       movq    %rdi, %r12
    0.00 :   ffffffff811d4e6d:       pushq   %rbx
    0.00 :   ffffffff811d4e6e:       movl    0x7c(%rdi), %eax
    0.00 :   ffffffff811d4e71:       testl   %eax, %eax
    0.00 :   ffffffff811d4e73:       jne     0xffffffff811d4e7e <perf_adjust_freq_unthr_context+0x1e>
    0.00 :   ffffffff811d4e75:       testb   %sil, %sil
    0.00 :   ffffffff811d4e78:       je      0xffffffff811d4fee <perf_adjust_freq_unthr_context+0x18e>
    1.29 :   ffffffff811d4e7e:       movq    %r12, %rdi
    0.00 :   ffffffff811d4e81:       leaq    0x58(%r12), %r14
    0.00 :   ffffffff811d4e86:       movq    $0x1f9e0, %r13  # imm = 0x1F9E0
    0.00 :   ffffffff811d4e8d:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff811d4e92:       movq    0x58(%r12), %rbx
    0.00 :   ffffffff811d4e97:       cmpq    %r14, %rbx
    0.00 :   ffffffff811d4e9a:       jne     0xffffffff811d4eb8 <perf_adjust_freq_unthr_context+0x58>
    0.00 :   ffffffff811d4e9c:       jmp     0xffffffff811d4fe6 <perf_adjust_freq_unthr_context+0x186>
    0.00 :   ffffffff811d4ea1:       movl    %gs:0x7ee4d864(%rip), %edx
    0.00 :   ffffffff811d4ea8:       cmpl    %edx, %eax
    0.00 :   ffffffff811d4eaa:       je      0xffffffff811d4ecc <perf_adjust_freq_unthr_context+0x6c>
   10.22 :   ffffffff811d4eac:       movq    (%rbx), %rbx
   21.31 :   ffffffff811d4eaf:       cmpq    %r14, %rbx
    0.00 :   ffffffff811d4eb2:       je      0xffffffff811d4fe6 <perf_adjust_freq_unthr_context+0x186>
   18.18 :   ffffffff811d4eb8:       cmpl    $0x1, 0xa8(%rbx)
   15.84 :   ffffffff811d4ebf:       jne     0xffffffff811d4eac <perf_adjust_freq_unthr_context+0x4c>
    0.00 :   ffffffff811d4ec1:       movl    0x28c(%rbx), %eax
    0.00 :   ffffffff811d4ec7:       cmpl    $-0x1, %eax
    0.00 :   ffffffff811d4eca:       jne     0xffffffff811d4ea1 <perf_adjust_freq_unthr_context+0x41>
    0.00 :   ffffffff811d4ecc:       movq    0x3f8(%rbx), %rdx
    0.00 :   ffffffff811d4ed3:       movq    %r13, %rax
    0.00 :   ffffffff811d4ed6:       addq    %gs:0x7ee40b52(%rip), %rax
    0.00 :   ffffffff811d4ede:       testq   %rdx, %rdx
    0.00 :   ffffffff811d4ee1:       je      0xffffffff811d4f1e <perf_adjust_freq_unthr_context+0xbe>
    0.00 :   ffffffff811d4ee3:       movq    0xf0(%rax), %rax
    0.00 :   ffffffff811d4eea:       testq   %rax, %rax
    0.00 :   ffffffff811d4eed:       je      0xffffffff811d4eac <perf_adjust_freq_unthr_context+0x4c>
    0.00 :   ffffffff811d4eef:       movq    (%rdx), %rdx
    0.00 :   ffffffff811d4ef2:       movq    (%rax), %rax
    0.00 :   ffffffff811d4ef5:       movq    0x288(%rdx), %rsi
    0.00 :   ffffffff811d4efc:       cmpq    %rsi, 0x288(%rax)
    0.00 :   ffffffff811d4f03:       jne     0xffffffff811d4eac <perf_adjust_freq_unthr_context+0x4c>
    0.00 :   ffffffff811d4f05:       movslq  0xd0(%rdx), %rcx
    0.00 :   ffffffff811d4f0c:       cmpl    %ecx, 0xd0(%rax)
    0.00 :   ffffffff811d4f12:       jl      0xffffffff811d4eac <perf_adjust_freq_unthr_context+0x4c>
    0.00 :   ffffffff811d4f14:       cmpq    0x650(%rax,%rcx,8), %rdx
    0.00 :   ffffffff811d4f1c:       jne     0xffffffff811d4eac <perf_adjust_freq_unthr_context+0x4c>
    0.00 :   ffffffff811d4f1e:       movq    0x98(%rbx), %rdi
    0.00 :   ffffffff811d4f25:       movq    0x40(%rdi), %rax
    0.00 :   ffffffff811d4f29:       addq    %gs:0x7ee40aff(%rip), %rax
    0.00 :   ffffffff811d4f31:       movl    (%rax), %edx
    0.00 :   ffffffff811d4f33:       leal    0x1(%rdx), %ecx
    0.00 :   ffffffff811d4f36:       testl   %edx, %edx
    0.00 :   ffffffff811d4f38:       movl    %ecx, (%rax)
    0.00 :   ffffffff811d4f3a:       jne     0xffffffff811d4f45 <perf_adjust_freq_unthr_context+0xe5>
    0.00 :   ffffffff811d4f3c:       movq    0x68(%rdi), %rax
    0.00 :   ffffffff811d4f40:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d4f45:       cmpq    $-0x1, 0x210(%rbx)
    0.00 :   ffffffff811d4f4d:       je      0xffffffff811d5029 <perf_adjust_freq_unthr_context+0x1c9>
    0.00 :   ffffffff811d4f53:       testb   $0x4, 0x101(%rbx)
    0.00 :   ffffffff811d4f5a:       je      0xffffffff811d4fb6 <perf_adjust_freq_unthr_context+0x156>
    0.00 :   ffffffff811d4f5c:       cmpq    $0x0, 0xe8(%rbx)
    0.00 :   ffffffff811d4f64:       je      0xffffffff811d4fb6 <perf_adjust_freq_unthr_context+0x156>
    0.00 :   ffffffff811d4f66:       movq    0x98(%rbx), %rax
    0.00 :   ffffffff811d4f6d:       movl    $0x4, %esi
    0.00 :   ffffffff811d4f72:       movq    %rbx, %rdi
    0.00 :   ffffffff811d4f75:       movq    0xa0(%rax), %rax
    0.00 :   ffffffff811d4f7c:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d4f81:       movq    0xb0(%rbx), %rax
    0.00 :   ffffffff811d4f88:       movq    %rax, %rdx
    0.00 :   ffffffff811d4f8b:       subq    0x220(%rbx), %rdx
    0.00 :   ffffffff811d4f92:       movq    %rax, 0x220(%rbx)
    0.00 :   ffffffff811d4f99:       testq   %rdx, %rdx
    0.00 :   ffffffff811d4f9c:       jg      0xffffffff811d5005 <perf_adjust_freq_unthr_context+0x1a5>
    0.00 :   ffffffff811d4f9e:       movq    0x98(%rbx), %rax
    0.00 :   ffffffff811d4fa5:       xorl    %esi, %esi
    0.00 :   ffffffff811d4fa7:       movq    0x98(%rax), %rax
    0.00 :   ffffffff811d4fae:       movq    %rbx, %rdi
    0.00 :   ffffffff811d4fb1:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d4fb6:       movq    0x98(%rbx), %rdi
    0.00 :   ffffffff811d4fbd:       movq    0x40(%rdi), %rax
    0.00 :   ffffffff811d4fc1:       addq    %gs:0x7ee40a67(%rip), %rax
    0.00 :   ffffffff811d4fc9:       decl    (%rax)
    0.00 :   ffffffff811d4fcb:       jne     0xffffffff811d4eac <perf_adjust_freq_unthr_context+0x4c>
    0.00 :   ffffffff811d4fd1:       movq    0x60(%rdi), %rax
    0.00 :   ffffffff811d4fd5:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    3.50 :   ffffffff811d4fda:       movq    (%rbx), %rbx
    0.00 :   ffffffff811d4fdd:       cmpq    %r14, %rbx
    0.00 :   ffffffff811d4fe0:       jne     0xffffffff811d4eb8 <perf_adjust_freq_unthr_context+0x58>
    0.00 :   ffffffff811d4fe6:       movq    %r12, %rdi
    0.00 :   ffffffff811d4fe9:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    2.32 :   ffffffff811d4fee:       popq    %rbx
    0.00 :   ffffffff811d4fef:       popq    %r12
    0.00 :   ffffffff811d4ff1:       popq    %r13
    0.00 :   ffffffff811d4ff3:       popq    %r14
    0.00 :   ffffffff811d4ff5:       popq    %rbp
    0.00 :   ffffffff811d4ff6:       xorl    %eax, %eax
    0.00 :   ffffffff811d4ff8:       xorl    %edx, %edx
    0.00 :   ffffffff811d4ffa:       xorl    %ecx, %ecx
    0.00 :   ffffffff811d4ffc:       xorl    %esi, %esi
    0.00 :   ffffffff811d4ffe:       xorl    %edi, %edi
    0.00 :   ffffffff811d5000:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff811d5005:       movl    $0xf4240, %esi  # imm = 0xF4240
    0.00 :   ffffffff811d500a:       xorl    %ecx, %ecx
    0.00 :   ffffffff811d500c:       movq    %rbx, %rdi
    0.00 :   ffffffff811d500f:       callq   0xffffffff811cec80 <perf_adjust_period>
    0.00 :   ffffffff811d5014:       movq    0x98(%rbx), %rax
    0.00 :   ffffffff811d501b:       movl    $0x2, %esi
    0.00 :   ffffffff811d5020:       movq    0x98(%rax), %rax
    0.00 :   ffffffff811d5027:       jmp     0xffffffff811d4fae <perf_adjust_freq_unthr_context+0x14e>
    0.00 :   ffffffff811d5029:       movq    %rbx, %rdi
    0.00 :   ffffffff811d502c:       movq    $0x0, 0x210(%rbx)
    0.00 :   ffffffff811d5037:       movl    $0x1, %esi
    0.00 :   ffffffff811d503c:       callq   0xffffffff811d4ce0 <perf_log_throttle>
    0.00 :   ffffffff811d5041:       movq    0x98(%rbx), %rax
    0.00 :   ffffffff811d5048:       xorl    %esi, %esi
    0.00 :   ffffffff811d504a:       movq    %rbx, %rdi
    0.00 :   ffffffff811d504d:       movq    0x98(%rax), %rax
    0.00 :   ffffffff811d5054:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d5059:       jmp     0xffffffff811d4f53 <perf_adjust_freq_unthr_context+0xf3>
 Percent |	Source code & Disassembly of elf for cycles (37 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b68930 <sched_clock>:
         : 5                ; native_sched_clock():
    0.00 :   ffffffff81b68930:       jmp     0xffffffff81b689b6 <sched_clock+0x86>
    0.00 :   ffffffff81b68935:       pushq   %rbp
    0.00 :   ffffffff81b68936:       movq    %rsp, %rbp
   86.41 :   ffffffff81b68939:       rdtsc
    0.00 :   ffffffff81b6893b:       incl    %gs:0x7e4b9dc6(%rip)
    0.00 :   ffffffff81b68942:       movl    %gs:0x7e4b9d97(%rip), %edi
    0.00 :   ffffffff81b68949:       movl    %edi, %ecx
    0.00 :   ffffffff81b6894b:       andl    $0x1, %ecx
    0.00 :   ffffffff81b6894e:       shlq    $0x4, %rcx
    0.00 :   ffffffff81b68952:       leaq    0x226c0(%rcx), %r8
    0.00 :   ffffffff81b68959:       movq    %gs:0x8(%r8), %rsi
    3.46 :   ffffffff81b6895e:       movl    %gs:0x226c0(%rcx), %r9d
    0.00 :   ffffffff81b68966:       movl    %gs:0x4(%r8), %ecx
    0.00 :   ffffffff81b6896b:       movl    %gs:0x7e4b9d6d(%rip), %r8d
    2.98 :   ffffffff81b68973:       cmpl    %r8d, %edi
    0.00 :   ffffffff81b68976:       jne     0xffffffff81b68942 <sched_clock+0x12>
    0.00 :   ffffffff81b68978:       decl    %gs:0x7e4b9d89(%rip)
    0.00 :   ffffffff81b6897f:       je      0xffffffff81b689e4 <sched_clock+0xb4>
    0.00 :   ffffffff81b68981:       shlq    $0x20, %rdx
    0.00 :   ffffffff81b68985:       movl    %r9d, %r9d
    0.00 :   ffffffff81b68988:       orq     %rax, %rdx
    0.00 :   ffffffff81b6898b:       movq    %rdx, %rax
    3.73 :   ffffffff81b6898e:       mulq    %r9
    0.00 :   ffffffff81b68991:       popq    %rbp
    0.00 :   ffffffff81b68992:       shrdq   %cl, %rdx, %rax
    0.00 :   ffffffff81b68996:       shrq    %cl, %rdx
    3.40 :   ffffffff81b68999:       andl    $0x40, %ecx
    0.00 :   ffffffff81b6899c:       cmovneq %rdx, %rax
    0.00 :   ffffffff81b689a0:       addq    %rsi, %rax
    0.00 :   ffffffff81b689a3:       xorl    %edx, %edx
    0.00 :   ffffffff81b689a5:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b689a7:       xorl    %esi, %esi
    0.00 :   ffffffff81b689a9:       xorl    %edi, %edi
    0.00 :   ffffffff81b689ab:       xorl    %r8d, %r8d
    0.01 :   ffffffff81b689ae:       xorl    %r9d, %r9d
    0.00 :   ffffffff81b689b1:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b689b6:       movq    0x69f003(%rip), %r8 # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81b689bd:       movabsq $-0xf41fa269b4800, %rdx # imm = 0xFFF0BE05D964B800
    0.00 :   ffffffff81b689c7:       imulq   $0xf4240, %r8, %rax # imm = 0xF4240
    0.00 :   ffffffff81b689ce:       addq    %rdx, %rax
    0.00 :   ffffffff81b689d1:       xorl    %edx, %edx
    0.00 :   ffffffff81b689d3:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b689d5:       xorl    %esi, %esi
    0.00 :   ffffffff81b689d7:       xorl    %edi, %edi
    0.00 :   ffffffff81b689d9:       xorl    %r8d, %r8d
    0.00 :   ffffffff81b689dc:       xorl    %r9d, %r9d
    0.00 :   ffffffff81b689df:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b689e4:       callq   0xffffffff81b789a8 <__SCT__preempt_schedule_notrace>
    0.00 :   ffffffff81b689e9:       jmp     0xffffffff81b68981 <sched_clock+0x51>
 Percent |	Source code & Disassembly of elf for cycles (30 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b787bf <zen_untrain_ret>:
         : 5                ; zen_untrain_ret():
    0.00 :   ffffffff81b787bf:       testb   $-0x34, %bl
         :
         : 8                ffffffff81b787c0 <__x86_return_thunk>:
         : 9                ; __x86_return_thunk():
  100.00 :   ffffffff81b787c0:       retq
    0.00 :   ffffffff81b787c1:       int3
    0.00 :   ffffffff81b787c2:       lfence
    0.00 :   ffffffff81b787c5:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b787c7:       int3
 Percent |	Source code & Disassembly of elf for cycles (22 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81112bc0 <__hrtimer_run_queues>:
         : 5                ; __hrtimer_run_queues():
    0.00 :   ffffffff81112bc0:       pushq   %rbp
    0.00 :   ffffffff81112bc1:       movq    %rsp, %rbp
    0.00 :   ffffffff81112bc4:       pushq   %r15
    0.00 :   ffffffff81112bc6:       pushq   %r14
    0.00 :   ffffffff81112bc8:       pushq   %r13
    0.00 :   ffffffff81112bca:       pushq   %r12
    0.00 :   ffffffff81112bcc:       pushq   %rbx
    0.00 :   ffffffff81112bcd:       subq    $0x20, %rsp
    0.00 :   ffffffff81112bd1:       movq    %rsi, -0x48(%rbp)
    0.00 :   ffffffff81112bd5:       movq    %rdx, -0x30(%rbp)
    0.00 :   ffffffff81112bd9:       andl    0x8(%rdi), %ecx
    0.00 :   ffffffff81112bdc:       je      0xffffffff81112d39 <__hrtimer_run_queues+0x179>
    0.00 :   ffffffff81112be2:       movl    %ecx, %eax
    0.00 :   ffffffff81112be4:       movq    %rdi, %rbx
    0.00 :   ffffffff81112be7:       tzcntq  %rax, %rax
    0.00 :   ffffffff81112bec:       movl    %eax, %edx
    0.00 :   ffffffff81112bee:       btrl    %eax, %ecx
    0.00 :   ffffffff81112bf1:       incq    %rdx
    0.00 :   ffffffff81112bf4:       movl    %ecx, -0x3c(%rbp)
    0.00 :   ffffffff81112bf7:       shlq    $0x6, %rdx
    0.00 :   ffffffff81112bfb:       addq    %rbx, %rdx
    0.00 :   ffffffff81112bfe:       movq    %rdx, %r14
    0.00 :   ffffffff81112c01:       je      0xffffffff81112d39 <__hrtimer_run_queues+0x179>
    0.00 :   ffffffff81112c07:       movq    0x28(%rdx), %r13
    0.00 :   ffffffff81112c0b:       movq    -0x48(%rbp), %r12
   22.94 :   ffffffff81112c0f:       addq    0x38(%rdx), %r12
   19.00 :   ffffffff81112c13:       testq   %r13, %r13
    6.71 :   ffffffff81112c16:       je      0xffffffff81112d08 <__hrtimer_run_queues+0x148>
   24.52 :   ffffffff81112c1c:       leaq    0x20(%rdx), %rax
   12.32 :   ffffffff81112c20:       movq    %rax, -0x38(%rbp)
   10.23 :   ffffffff81112c24:       jmp     0xffffffff81112c4d <__hrtimer_run_queues+0x8d>
    0.00 :   ffffffff81112c26:       incl    0x10(%r14)
    0.00 :   ffffffff81112c2a:       incl    0x10(%r14)
    0.00 :   ffffffff81112c2e:       cmpq    %r13, 0x18(%r14)
    0.00 :   ffffffff81112c32:       jne     0xffffffff81112d01 <__hrtimer_run_queues+0x141>
    0.00 :   ffffffff81112c38:       movq    0x28(%r14), %r13
    0.00 :   ffffffff81112c3c:       movq    $0x0, 0x18(%r14)
    0.00 :   ffffffff81112c44:       testq   %r13, %r13
    0.00 :   ffffffff81112c47:       je      0xffffffff81112d08 <__hrtimer_run_queues+0x148>
    4.28 :   ffffffff81112c4d:       cmpq    0x20(%r13), %r12
    0.00 :   ffffffff81112c51:       jl      0xffffffff81112d08 <__hrtimer_run_queues+0x148>
    0.00 :   ffffffff81112c57:       incl    0x10(%r14)
    0.00 :   ffffffff81112c5b:       movq    %r13, 0x18(%r14)
    0.00 :   ffffffff81112c5f:       incl    0x10(%r14)
    0.00 :   ffffffff81112c63:       movq    (%r14), %r15
    0.00 :   ffffffff81112c66:       movzbl  0x38(%r13), %eax
    0.00 :   ffffffff81112c6b:       movb    $0x0, 0x38(%r13)
    0.00 :   ffffffff81112c70:       testb   $0x1, %al
    0.00 :   ffffffff81112c72:       je      0xffffffff81112c95 <__hrtimer_run_queues+0xd5>
    0.00 :   ffffffff81112c74:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff81112c78:       movq    %r13, %rsi
    0.00 :   ffffffff81112c7b:       callq   0xffffffff81b57680 <timerqueue_del>
    0.00 :   ffffffff81112c80:       testb   %al, %al
    0.00 :   ffffffff81112c82:       jne     0xffffffff81112c95 <__hrtimer_run_queues+0xd5>
    0.00 :   ffffffff81112c84:       movl    0x8(%r14), %ecx
    0.00 :   ffffffff81112c88:       movl    $0x1, %eax
    0.00 :   ffffffff81112c8d:       shll    %cl, %eax
    0.00 :   ffffffff81112c8f:       notl    %eax
    0.00 :   ffffffff81112c91:       andl    %eax, 0x8(%r15)
    0.00 :   ffffffff81112c95:       movq    -0x30(%rbp), %rsi
    0.00 :   ffffffff81112c99:       movq    %rbx, %rdi
    0.00 :   ffffffff81112c9c:       movq    0x28(%r13), %r15
    0.00 :   ffffffff81112ca0:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff81112ca5:       movq    %r13, %rdi
    0.00 :   ffffffff81112ca8:       callq   0xffffffff81b78360 <__x86_indirect_thunk_r15>
    0.00 :   ffffffff81112cae:       movq    %rbx, %rdi
    0.00 :   ffffffff81112cb1:       movl    %eax, %r15d
    0.00 :   ffffffff81112cb4:       callq   0xffffffff81b77bc0 <_raw_spin_lock_irq>
    0.00 :   ffffffff81112cb9:       testl   %r15d, %r15d
    0.00 :   ffffffff81112cbc:       je      0xffffffff81112c26 <__hrtimer_run_queues+0x66>
    0.00 :   ffffffff81112cc2:       testb   $0x1, 0x38(%r13)
    0.00 :   ffffffff81112cc7:       jne     0xffffffff81112c26 <__hrtimer_run_queues+0x66>
    0.00 :   ffffffff81112ccd:       movl    0x8(%r14), %ecx
    0.00 :   ffffffff81112cd1:       movq    (%r14), %rax
    0.00 :   ffffffff81112cd4:       movl    $0x1, %esi
    0.00 :   ffffffff81112cd9:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff81112cdd:       shll    %cl, %esi
    0.00 :   ffffffff81112cdf:       orl     %esi, 0x8(%rax)
    0.00 :   ffffffff81112ce2:       movb    $0x1, 0x38(%r13)
    0.00 :   ffffffff81112ce7:       movq    %r13, %rsi
    0.00 :   ffffffff81112cea:       callq   0xffffffff81b57570 <timerqueue_add>
    0.00 :   ffffffff81112cef:       incl    0x10(%r14)
    0.00 :   ffffffff81112cf3:       incl    0x10(%r14)
    0.00 :   ffffffff81112cf7:       cmpq    %r13, 0x18(%r14)
    0.00 :   ffffffff81112cfb:       je      0xffffffff81112c38 <__hrtimer_run_queues+0x78>
    0.00 :   ffffffff81112d01:       ud2
    0.00 :   ffffffff81112d03:       jmp     0xffffffff81112c38 <__hrtimer_run_queues+0x78>
    0.00 :   ffffffff81112d08:       movl    -0x3c(%rbp), %edx
    0.00 :   ffffffff81112d0b:       testl   %edx, %edx
    0.00 :   ffffffff81112d0d:       je      0xffffffff81112d39 <__hrtimer_run_queues+0x179>
    0.00 :   ffffffff81112d0f:       movl    $0x1, %eax
    0.00 :   ffffffff81112d14:       movl    %edx, %ecx
    0.00 :   ffffffff81112d16:       tzcntq  %rcx, %rcx
    0.00 :   ffffffff81112d1b:       shll    %cl, %eax
    0.00 :   ffffffff81112d1d:       notl    %eax
    0.00 :   ffffffff81112d1f:       andl    %eax, %edx
    0.00 :   ffffffff81112d21:       movl    %edx, -0x3c(%rbp)
    0.00 :   ffffffff81112d24:       movl    %ecx, %edx
    0.00 :   ffffffff81112d26:       incq    %rdx
    0.00 :   ffffffff81112d29:       shlq    $0x6, %rdx
    0.00 :   ffffffff81112d2d:       addq    %rbx, %rdx
    0.00 :   ffffffff81112d30:       movq    %rdx, %r14
    0.00 :   ffffffff81112d33:       jne     0xffffffff81112c07 <__hrtimer_run_queues+0x47>
    0.00 :   ffffffff81112d39:       addq    $0x20, %rsp
    0.00 :   ffffffff81112d3d:       popq    %rbx
    0.00 :   ffffffff81112d3e:       popq    %r12
    0.00 :   ffffffff81112d40:       popq    %r13
    0.00 :   ffffffff81112d42:       popq    %r14
    0.00 :   ffffffff81112d44:       popq    %r15
    0.00 :   ffffffff81112d46:       popq    %rbp
    0.00 :   ffffffff81112d47:       xorl    %eax, %eax
    0.00 :   ffffffff81112d49:       xorl    %edx, %edx
    0.00 :   ffffffff81112d4b:       xorl    %ecx, %ecx
    0.00 :   ffffffff81112d4d:       xorl    %esi, %esi
    0.00 :   ffffffff81112d4f:       xorl    %edi, %edi
    0.00 :   ffffffff81112d51:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (20 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810c1860 <trigger_load_balance>:
         : 5                ; trigger_load_balance():
    0.00 :   ffffffff810c1860:       pushq   %rbp
    0.00 :   ffffffff810c1861:       movq    %rsp, %rbp
    0.00 :   ffffffff810c1864:       subq    $0x40, %rsp
    0.00 :   ffffffff810c1868:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff810c186c:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff810c1870:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff810c1874:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff810c1878:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff810c187c:       movq    0x9f8(%rdi), %rax
    0.00 :   ffffffff810c1883:       testq   %rax, %rax
    0.00 :   ffffffff810c1886:       je      0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c1888:       movl    0xa60(%rdi), %eax
    5.06 :   ffffffff810c188e:       movq    %rdi, %r15
    0.00 :   ffffffff810c1891:       btq     %rax, 0x12a4fb7(%rip) # 0xffffffff82366850 <__cpu_active_mask>
    0.00 :   ffffffff810c1899:       jae     0xffffffff810c18e2 <trigger_load_balance+0x82>
    4.34 :   ffffffff810c189b:       movq    $0x0, -0x30(%rbp)
   46.33 :   ffffffff810c18a3:       movq    0x1146116(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c18aa:       cmpq    0x988(%rdi), %rax
    0.00 :   ffffffff810c18b1:       jns     0xffffffff810c1909 <trigger_load_balance+0xa9>
    5.83 :   ffffffff810c18b3:       cmpb    $0x0, 0xa19(%r15)
    0.00 :   ffffffff810c18bb:       movq    0x11460fe(%rip), %r12 # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c18c2:       movl    0xa60(%r15), %ebx
    0.00 :   ffffffff810c18c9:       jne     0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c18cb:       movl    0x60(%r15), %r8d
    0.00 :   ffffffff810c18cf:       testl   %r8d, %r8d
    0.00 :   ffffffff810c18d2:       jne     0xffffffff810c1a1f <trigger_load_balance+0x1bf>
    0.00 :   ffffffff810c18d8:       movl    0x15ca1f2(%rip), %eax # 0xffffffff8268bad0 <nohz+0x10>
    0.00 :   ffffffff810c18de:       testl   %eax, %eax
    0.00 :   ffffffff810c18e0:       jne     0xffffffff810c1915 <trigger_load_balance+0xb5>
    0.00 :   ffffffff810c18e2:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff810c18e6:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff810c18ea:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff810c18ee:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff810c18f2:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff810c18f6:       leave
    0.00 :   ffffffff810c18f7:       xorl    %eax, %eax
    0.00 :   ffffffff810c18f9:       xorl    %edx, %edx
    0.00 :   ffffffff810c18fb:       xorl    %ecx, %ecx
    0.00 :   ffffffff810c18fd:       xorl    %esi, %esi
    0.00 :   ffffffff810c18ff:       xorl    %edi, %edi
    0.00 :   ffffffff810c1901:       xorl    %r8d, %r8d
    0.00 :   ffffffff810c1904:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810c1909:       movl    $0x7, %edi
    0.00 :   ffffffff810c190e:       callq   0xffffffff81071410 <raise_softirq>
    0.00 :   ffffffff810c1913:       jmp     0xffffffff810c18b3 <trigger_load_balance+0x53>
    0.00 :   ffffffff810c1915:       movl    0x15ca1b9(%rip), %edx # 0xffffffff8268bad4 <nohz+0x14>
    0.00 :   ffffffff810c191b:       movq    %r12, %rax
    0.00 :   ffffffff810c191e:       subq    0x15ca1bb(%rip), %rax # 0xffffffff8268bae0 <nohz+0x20>
    0.00 :   ffffffff810c1925:       testl   %edx, %edx
    0.00 :   ffffffff810c1927:       jne     0xffffffff810c1a2c <trigger_load_balance+0x1cc>
    0.00 :   ffffffff810c192d:       xorl    %r13d, %r13d
    8.82 :   ffffffff810c1930:       testq   %rax, %rax
    0.00 :   ffffffff810c1933:       js      0xffffffff810c1b95 <trigger_load_balance+0x335>
    0.00 :   ffffffff810c1939:       cmpl    $0x1, 0x4(%r15)
    0.00 :   ffffffff810c193e:       jbe     0xffffffff810c1a5d <trigger_load_balance+0x1fd>
    0.00 :   ffffffff810c1944:       movl    0x15ca18e(%rip), %eax # 0xffffffff8268bad8 <nohz+0x18>
    0.00 :   ffffffff810c194a:       movl    $0x3, %r13d
    0.00 :   ffffffff810c1950:       testl   %eax, %eax
    0.00 :   ffffffff810c1952:       je      0xffffffff810c195a <trigger_load_balance+0xfa>
    0.00 :   ffffffff810c1954:       movl    $0xb, %r13d
    0.00 :   ffffffff810c195a:       movq    0x114605f(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c1961:       incq    %rax
    0.00 :   ffffffff810c1964:       movq    %rax, 0x15ca175(%rip) # 0xffffffff8268bae0 <nohz+0x20>
    0.00 :   ffffffff810c196b:       movl    $0x2, %edi
    0.00 :   ffffffff810c1970:       callq   0xffffffff810ceb30 <housekeeping_cpumask>
    0.00 :   ffffffff810c1975:       movl    0x12a50e5(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810c197b:       movq    %rax, %r12
    0.00 :   ffffffff810c197e:       xorl    %ecx, %ecx
    0.00 :   ffffffff810c1980:       jmp     0xffffffff810c198b <trigger_load_balance+0x12b>
    0.00 :   ffffffff810c1982:       movl    0x12a50d8(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810c1988:       leal    0x1(%rbx), %ecx
    0.00 :   ffffffff810c198b:       movslq  %ecx, %rcx
    0.00 :   ffffffff810c198e:       movq    %r12, %rsi
    0.00 :   ffffffff810c1991:       movq    $-0x7d974540, %rdi # imm = 0x8268BAC0
    0.00 :   ffffffff810c1998:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff810c199d:       movl    0x12a50bd(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810c19a3:       movq    %rax, %rbx
    0.00 :   ffffffff810c19a6:       movl    %eax, %r14d
    0.00 :   ffffffff810c19a9:       cmpl    %edx, %eax
    0.00 :   ffffffff810c19ab:       jae     0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c19b1:       movl    %gs:0x7ef60d54(%rip), %eax
    0.00 :   ffffffff810c19b8:       cmpl    %ebx, %eax
    0.00 :   ffffffff810c19ba:       je      0xffffffff810c1988 <trigger_load_balance+0x128>
    0.00 :   ffffffff810c19bc:       movl    %r14d, %edi
    0.00 :   ffffffff810c19bf:       callq   0xffffffff810acf60 <idle_cpu>
    0.00 :   ffffffff810c19c4:       testl   %eax, %eax
    0.00 :   ffffffff810c19c6:       je      0xffffffff810c1982 <trigger_load_balance+0x122>
    0.00 :   ffffffff810c19c8:       cmpl    0x12a5092(%rip), %ebx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810c19ce:       jae     0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c19d4:       movq    $0x22f40, %rcx  # imm = 0x22F40
    0.00 :   ffffffff810c19db:       movslq  %ebx, %rbx
    0.00 :   ffffffff810c19de:       movq    %rcx, %rdx
    0.00 :   ffffffff810c19e1:       addq    -0x7dedc720(,%rbx,8), %rdx
    0.00 :   ffffffff810c19e9:       movl    0x64(%rdx), %eax
    0.00 :   ffffffff810c19ec:       addq    $0x64, %rdx
    0.00 :   ffffffff810c19f0:       movl    %r13d, %esi
    0.00 :   ffffffff810c19f3:       movl    %eax, %edi
    0.00 :   ffffffff810c19f5:       orl     %eax, %esi
    5.32 :   ffffffff810c19f7:       lock
    0.00 :   ffffffff810c19f8:       cmpxchgl        %esi, (%rdx)
    0.00 :   ffffffff810c19fb:       jne     0xffffffff810c19f0 <trigger_load_balance+0x190>
    0.00 :   ffffffff810c19fd:       andl    $0xb, %edi
    0.00 :   ffffffff810c1a00:       jne     0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c1a06:       addq    -0x7dedc720(,%rbx,8), %rcx
    0.00 :   ffffffff810c1a0e:       movl    %r14d, %edi
    0.00 :   ffffffff810c1a11:       leaq    0x40(%rcx), %rsi
    0.00 :   ffffffff810c1a15:       callq   0xffffffff811307a0 <smp_call_function_single_async>
    0.00 :   ffffffff810c1a1a:       jmp     0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c1a1f:       movq    %r15, %rdi
    0.00 :   ffffffff810c1a22:       callq   0xffffffff810b39c0 <nohz_balance_exit_idle.part.0>
    0.00 :   ffffffff810c1a27:       jmp     0xffffffff810c18d8 <trigger_load_balance+0x78>
    0.00 :   ffffffff810c1a2c:       movq    0x15ca0b5(%rip), %r13 # 0xffffffff8268bae8 <nohz+0x28>
    0.00 :   ffffffff810c1a33:       subq    %r12, %r13
    0.00 :   ffffffff810c1a36:       shrq    $0x3f, %r13
    0.00 :   ffffffff810c1a3a:       addl    %r13d, %r13d
    0.00 :   ffffffff810c1a3d:       testq   %rax, %rax
    0.00 :   ffffffff810c1a40:       jns     0xffffffff810c1939 <trigger_load_balance+0xd9>
    0.00 :   ffffffff810c1a46:       movl    0x15ca08c(%rip), %eax # 0xffffffff8268bad8 <nohz+0x18>
    0.00 :   ffffffff810c1a4c:       testl   %eax, %eax
    0.00 :   ffffffff810c1a4e:       je      0xffffffff810c1bae <trigger_load_balance+0x34e>
   10.41 :   ffffffff810c1a54:       orl     $0x8, %r13d
    0.00 :   ffffffff810c1a58:       jmp     0xffffffff810c196b <trigger_load_balance+0x10b>
    0.00 :   ffffffff810c1a5d:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff810c1a62:       movq    0x9f8(%r15), %rax
    0.00 :   ffffffff810c1a69:       testq   %rax, %rax
    0.00 :   ffffffff810c1a6c:       je      0xffffffff810c1a9d <trigger_load_balance+0x23d>
    0.00 :   ffffffff810c1a6e:       movl    0x94(%r15), %edi
    0.00 :   ffffffff810c1a75:       testl   %edi, %edi
    0.00 :   ffffffff810c1a77:       je      0xffffffff810c1a9d <trigger_load_balance+0x23d>
    0.00 :   ffffffff810c1a79:       movl    0x2c(%rax), %eax
    0.00 :   ffffffff810c1a7c:       movq    0xa08(%r15), %rdx
    0.00 :   ffffffff810c1a83:       movl    $0x64, %esi
    0.00 :   ffffffff810c1a88:       imulq   0xa00(%r15), %rax
    0.00 :   ffffffff810c1a90:       imulq   %rsi, %rdx
    0.00 :   ffffffff810c1a94:       cmpq    %rdx, %rax
    0.00 :   ffffffff810c1a97:       jb      0xffffffff810c1b8a <trigger_load_balance+0x32a>
    0.00 :   ffffffff810c1a9d:       movslq  %ebx, %rsi
    0.00 :   ffffffff810c1aa0:       movq    $0x1b298, %rax  # imm = 0x1B298
    0.00 :   ffffffff810c1aa7:       movq    -0x7dedc720(,%rsi,8), %rdx
    0.00 :   ffffffff810c1aaf:       movq    %rsi, -0x40(%rbp)
    0.00 :   ffffffff810c1ab3:       addq    %rdx, %rax
    0.00 :   ffffffff810c1ab6:       movq    (%rax), %r14
    0.00 :   ffffffff810c1ab9:       testq   %r14, %r14
    0.00 :   ffffffff810c1abc:       je      0xffffffff810c1b1b <trigger_load_balance+0x2bb>
    0.00 :   ffffffff810c1abe:       leaq    0x90(%r14), %rax
    0.00 :   ffffffff810c1ac5:       xorl    %ecx, %ecx
    0.00 :   ffffffff810c1ac7:       movq    %rax, -0x38(%rbp)
    0.00 :   ffffffff810c1acb:       jmp     0xffffffff810c1ae9 <trigger_load_balance+0x289>
    0.00 :   ffffffff810c1acd:       callq   0xffffffff810bc2f0 <arch_asym_cpu_priority>
    0.00 :   ffffffff810c1ad2:       movl    %ebx, %edi
    0.00 :   ffffffff810c1ad4:       movl    %eax, %r12d
    0.00 :   ffffffff810c1ad7:       callq   0xffffffff810bc2f0 <arch_asym_cpu_priority>
    0.00 :   ffffffff810c1adc:       cmpl    %eax, %r12d
    0.00 :   ffffffff810c1adf:       jg      0xffffffff810c1b8a <trigger_load_balance+0x32a>
    0.00 :   ffffffff810c1ae5:       leal    0x1(%r14), %ecx
    0.00 :   ffffffff810c1ae9:       movl    0x12a4f71(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810c1aef:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff810c1af3:       movslq  %ecx, %rcx
    0.00 :   ffffffff810c1af6:       movq    $-0x7d974540, %rsi # imm = 0x8268BAC0
    0.00 :   ffffffff810c1afd:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff810c1b02:       cmpl    0x12a4f58(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810c1b08:       movq    %rax, %r14
    0.00 :   ffffffff810c1b0b:       movl    %eax, %edi
    0.00 :   ffffffff810c1b0d:       jb      0xffffffff810c1acd <trigger_load_balance+0x26d>
    0.00 :   ffffffff810c1b0f:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff810c1b13:       movq    -0x7dedc720(,%rax,8), %rdx
    0.00 :   ffffffff810c1b1b:       movq    $0x1b290, %rax  # imm = 0x1B290
    0.00 :   ffffffff810c1b22:       addq    %rdx, %rax
    0.00 :   ffffffff810c1b25:       movq    (%rax), %rax
    0.00 :   ffffffff810c1b28:       testq   %rax, %rax
    0.00 :   ffffffff810c1b2b:       je      0xffffffff810c1b71 <trigger_load_balance+0x311>
    0.00 :   ffffffff810c1b2d:       cmpq    $0x0, 0xa20(%r15)
    0.00 :   ffffffff810c1b35:       je      0xffffffff810c1b67 <trigger_load_balance+0x307>
    0.00 :   ffffffff810c1b37:       movq    0x9f0(%r15), %rcx
    0.00 :   ffffffff810c1b3e:       movq    0xa08(%r15), %rdx
    0.00 :   ffffffff810c1b45:       cmpq    0xa60(%rcx), %rdx
    0.00 :   ffffffff810c1b4c:       jb      0xffffffff810c1b8a <trigger_load_balance+0x32a>
    0.00 :   ffffffff810c1b4e:       movl    0x2c(%rax), %eax
    0.00 :   ffffffff810c1b51:       movl    $0x64, %ecx
    0.00 :   ffffffff810c1b56:       imulq   0xa00(%r15), %rax
    0.00 :   ffffffff810c1b5e:       imulq   %rcx, %rdx
    0.00 :   ffffffff810c1b62:       cmpq    %rdx, %rax
    0.00 :   ffffffff810c1b65:       jb      0xffffffff810c1b8a <trigger_load_balance+0x32a>
    0.00 :   ffffffff810c1b67:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff810c1b6c:       jmp     0xffffffff810c1a46 <trigger_load_balance+0x1e6>
    0.00 :   ffffffff810c1b71:       movq    $0x1b2a8, %rax  # imm = 0x1B2A8
    0.00 :   ffffffff810c1b78:       addq    %rax, %rdx
    0.00 :   ffffffff810c1b7b:       movq    (%rdx), %rax
    0.00 :   ffffffff810c1b7e:       testq   %rax, %rax
    0.00 :   ffffffff810c1b81:       je      0xffffffff810c1b67 <trigger_load_balance+0x307>
    0.00 :   ffffffff810c1b83:       movl    0x4(%rax), %eax
    0.00 :   ffffffff810c1b86:       decl    %eax
    0.00 :   ffffffff810c1b88:       jle     0xffffffff810c1b67 <trigger_load_balance+0x307>
    0.00 :   ffffffff810c1b8a:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff810c1b8f:       nop
    0.00 :   ffffffff810c1b90:       jmp     0xffffffff810c1944 <trigger_load_balance+0xe4>
    0.00 :   ffffffff810c1b95:       movl    0x15c9f3d(%rip), %eax # 0xffffffff8268bad8 <nohz+0x18>
    0.00 :   ffffffff810c1b9b:       testl   %eax, %eax
    0.00 :   ffffffff810c1b9d:       je      0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c1ba3:       movl    $0x8, %r13d
    0.00 :   ffffffff810c1ba9:       jmp     0xffffffff810c196b <trigger_load_balance+0x10b>
   13.89 :   ffffffff810c1bae:       testl   %r13d, %r13d
    0.00 :   ffffffff810c1bb1:       je      0xffffffff810c18e2 <trigger_load_balance+0x82>
    0.00 :   ffffffff810c1bb7:       movl    $0x2, %r13d
    0.00 :   ffffffff810c1bbd:       jmp     0xffffffff810c196b <trigger_load_balance+0x10b>
 Percent |	Source code & Disassembly of elf for cycles (22 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c01042 <native_irq_return_iret>:
         : 5                ; native_irq_return_iret():
  100.00 :   ffffffff81c01042:       iretq
 Percent |	Source code & Disassembly of elf for cycles (19 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81117270 <ktime_get_update_offsets_now>:
         : 5                ; ktime_get_update_offsets_now():
    0.00 :   ffffffff81117270:       pushq   %rbp
    4.37 :   ffffffff81117271:       movq    %rsp, %rbp
    0.00 :   ffffffff81117274:       pushq   %r15
    0.00 :   ffffffff81117276:       pushq   %r14
    0.00 :   ffffffff81117278:       pushq   %r13
    0.00 :   ffffffff8111727a:       pushq   %r12
    0.00 :   ffffffff8111727c:       movq    %rdi, %r12
    0.00 :   ffffffff8111727f:       pushq   %rbx
    0.00 :   ffffffff81117280:       movq    %rsi, %rbx
    0.00 :   ffffffff81117283:       subq    $0x10, %rsp
    0.00 :   ffffffff81117287:       movq    %rdx, -0x30(%rbp)
    0.00 :   ffffffff8111728b:       movq    %rcx, -0x38(%rbp)
    0.00 :   ffffffff8111728f:       xorl    %r15d, %r15d
    0.00 :   ffffffff81117292:       jmp     0xffffffff81117296 <ktime_get_update_offsets_now+0x26>
   36.11 :   ffffffff81117294:       pause
    0.00 :   ffffffff81117296:       movl    0x15b7823(%rip), %r13d # 0xffffffff826ceac0 <tk_core>
    0.00 :   ffffffff8111729d:       testb   $0x1, %r13b
    0.00 :   ffffffff811172a1:       jne     0xffffffff81117294 <ktime_get_update_offsets_now+0x24>
    5.21 :   ffffffff811172a3:       movq    0x15b781e(%rip), %rdi # 0xffffffff826ceac8 <tk_core+0x8>
    9.91 :   ffffffff811172aa:       movq    0x15b783f(%rip), %r14 # 0xffffffff826ceaf0 <tk_core+0x30>
    0.00 :   ffffffff811172b1:       movq    (%rdi), %rax
    0.00 :   ffffffff811172b4:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    8.54 :   ffffffff811172b9:       movq    %rax, %rcx
    0.00 :   ffffffff811172bc:       subq    0x15b7815(%rip), %rcx # 0xffffffff826cead8 <tk_core+0x18>
    0.00 :   ffffffff811172c3:       movq    0x15b7806(%rip), %rax # 0xffffffff826cead0 <tk_core+0x10>
    0.00 :   ffffffff811172ca:       andq    %rax, %rcx
    0.00 :   ffffffff811172cd:       shrq    %rax
    0.00 :   ffffffff811172d0:       notq    %rax
    0.00 :   ffffffff811172d3:       testq   %rcx, %rax
    0.00 :   ffffffff811172d6:       movl    0x15b7804(%rip), %eax # 0xffffffff826ceae0 <tk_core+0x20>
    0.00 :   ffffffff811172dc:       cmovneq %r15, %rcx
    0.00 :   ffffffff811172e0:       imulq   %rcx, %rax
    0.00 :   ffffffff811172e4:       movl    0x15b77fa(%rip), %ecx # 0xffffffff826ceae4 <tk_core+0x24>
    0.00 :   ffffffff811172ea:       addq    0x15b77f7(%rip), %rax # 0xffffffff826ceae8 <tk_core+0x28>
    0.00 :   ffffffff811172f1:       shrq    %cl, %rax
   30.90 :   ffffffff811172f4:       movl    0x15b787a(%rip), %ecx # 0xffffffff826ceb74 <tk_core+0xb4>
    4.94 :   ffffffff811172fa:       addq    %r14, %rax
    0.00 :   ffffffff811172fd:       cmpl    %ecx, (%r12)
    0.00 :   ffffffff81117301:       je      0xffffffff8111732d <ktime_get_update_offsets_now+0xbd>
    0.00 :   ffffffff81117303:       movl    %ecx, (%r12)
    0.00 :   ffffffff81117307:       movq    0x15b784a(%rip), %rcx # 0xffffffff826ceb58 <tk_core+0x98>
    0.00 :   ffffffff8111730e:       movq    -0x30(%rbp), %rdx
    0.00 :   ffffffff81117312:       movq    -0x38(%rbp), %rsi
    0.00 :   ffffffff81117316:       movq    %rcx, (%rbx)
    0.00 :   ffffffff81117319:       movq    0x15b7840(%rip), %rcx # 0xffffffff826ceb60 <tk_core+0xa0>
    0.00 :   ffffffff81117320:       movq    %rcx, (%rdx)
    0.00 :   ffffffff81117323:       movq    0x15b783e(%rip), %rcx # 0xffffffff826ceb68 <tk_core+0xa8>
    0.00 :   ffffffff8111732a:       movq    %rcx, (%rsi)
    0.00 :   ffffffff8111732d:       cmpq    %rax, 0x15b784c(%rip) # 0xffffffff826ceb80 <tk_core+0xc0>
    0.00 :   ffffffff81117334:       jle     0xffffffff81117360 <ktime_get_update_offsets_now+0xf0>
    0.00 :   ffffffff81117336:       movl    0x15b7784(%rip), %ecx # 0xffffffff826ceac0 <tk_core>
    0.03 :   ffffffff8111733c:       cmpl    %r13d, %ecx
    0.00 :   ffffffff8111733f:       jne     0xffffffff81117296 <ktime_get_update_offsets_now+0x26>
    0.00 :   ffffffff81117345:       addq    $0x10, %rsp
    0.00 :   ffffffff81117349:       popq    %rbx
    0.00 :   ffffffff8111734a:       popq    %r12
    0.00 :   ffffffff8111734c:       popq    %r13
    0.00 :   ffffffff8111734e:       popq    %r14
    0.00 :   ffffffff81117350:       popq    %r15
    0.00 :   ffffffff81117352:       popq    %rbp
    0.00 :   ffffffff81117353:       xorl    %edx, %edx
    0.00 :   ffffffff81117355:       xorl    %ecx, %ecx
    0.00 :   ffffffff81117357:       xorl    %esi, %esi
    0.00 :   ffffffff81117359:       xorl    %edi, %edi
    0.00 :   ffffffff8111735b:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81117360:       movq    0x15b77f1(%rip), %rdx # 0xffffffff826ceb58 <tk_core+0x98>
    0.00 :   ffffffff81117367:       leaq    -0x3b9aca00(%rdx), %rcx
    0.00 :   ffffffff8111736e:       movq    %rcx, (%rbx)
    0.00 :   ffffffff81117371:       jmp     0xffffffff81117336 <ktime_get_update_offsets_now+0xc6>
 Percent |	Source code & Disassembly of elf for cycles (19 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8100a000 <perf_ibs_stop>:
         : 5                ; perf_ibs_stop():
    4.46 :   ffffffff8100a000:       pushq   %rbp
   36.50 :   ffffffff8100a001:       movq    %rsp, %rbp
    7.93 :   ffffffff8100a004:       subq    $0x18, %rsp
    0.00 :   ffffffff8100a008:       movq    %rbx, -0x8(%rbp)
    0.00 :   ffffffff8100a00c:       movq    %gs:0x28, %rax
    0.00 :   ffffffff8100a015:       movq    %rax, -0x10(%rbp)
    0.00 :   ffffffff8100a019:       xorl    %eax, %eax
    0.00 :   ffffffff8100a01b:       movq    0x98(%rdi), %r8
    4.97 :   ffffffff8100a022:       movq    $0x0, -0x18(%rbp)
    0.00 :   ffffffff8100a02a:       movq    0x168(%r8), %rsi
    0.00 :   ffffffff8100a031:       addq    %gs:0x7f00b9f7(%rip), %rsi
    0.00 :   ffffffff8100a039:       lock
    0.00 :   ffffffff8100a03a:       btsq    $0x2, 0x8(%rsi)
    0.00 :   ffffffff8100a040:       jb      0xffffffff8100a0a3 <perf_ibs_stop+0xa3>
    0.00 :   ffffffff8100a042:       movq    0x8(%rsi), %rax
    0.00 :   ffffffff8100a046:       movq    %rdi, %rbx
    0.00 :   ffffffff8100a049:       shrq    %rax
    0.00 :   ffffffff8100a04c:       movl    %eax, %edi
    0.00 :   ffffffff8100a04e:       andl    $0x1, %edi
    0.00 :   ffffffff8100a051:       jne     0xffffffff8100a05c <perf_ibs_stop+0x5c>
    0.00 :   ffffffff8100a053:       testb   $0x2, 0x1e0(%rbx)
    0.00 :   ffffffff8100a05a:       jne     0xffffffff8100a0a3 <perf_ibs_stop+0xa3>
    0.00 :   ffffffff8100a05c:       movq    0x178(%rbx), %rcx
   46.14 :   ffffffff8100a063:       rdmsr
    0.00 :   ffffffff8100a065:       shlq    $0x20, %rdx
    0.00 :   ffffffff8100a069:       orq     %rax, %rdx
    0.00 :   ffffffff8100a06c:       testb   %dil, %dil
    0.00 :   ffffffff8100a06f:       movq    %rdx, -0x18(%rbp)
    0.00 :   ffffffff8100a073:       jne     0xffffffff8100a0cd <perf_ibs_stop+0xcd>
    0.00 :   ffffffff8100a075:       movl    0x1e0(%rbx), %eax
    0.00 :   ffffffff8100a07b:       testb   $0x2, %al
    0.00 :   ffffffff8100a07d:       jne     0xffffffff8100a0a3 <perf_ibs_stop+0xa3>
    0.00 :   ffffffff8100a07f:       movq    0x148(%r8), %rax
    0.00 :   ffffffff8100a086:       leaq    -0x18(%rbp), %rdx
    0.00 :   ffffffff8100a08a:       movq    %rbx, %rsi
    0.00 :   ffffffff8100a08d:       movq    %r8, %rdi
    0.00 :   ffffffff8100a090:       notq    %rax
    0.00 :   ffffffff8100a093:       andq    %rax, -0x18(%rbp)
    0.00 :   ffffffff8100a097:       callq   0xffffffff81009f30 <perf_ibs_event_update>
    0.00 :   ffffffff8100a09c:       orl     $0x2, 0x1e0(%rbx)
    0.00 :   ffffffff8100a0a3:       movq    -0x10(%rbp), %rax
    0.00 :   ffffffff8100a0a7:       subq    %gs:0x28, %rax
    0.00 :   ffffffff8100a0b0:       jne     0xffffffff8100a13b <perf_ibs_stop+0x13b>
    0.00 :   ffffffff8100a0b6:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff8100a0ba:       leave
    0.00 :   ffffffff8100a0bb:       xorl    %eax, %eax
    0.00 :   ffffffff8100a0bd:       xorl    %edx, %edx
    0.00 :   ffffffff8100a0bf:       xorl    %ecx, %ecx
    0.00 :   ffffffff8100a0c1:       xorl    %esi, %esi
    0.00 :   ffffffff8100a0c3:       xorl    %edi, %edi
    0.00 :   ffffffff8100a0c5:       xorl    %r8d, %r8d
    0.00 :   ffffffff8100a0c8:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8100a0cd:       lock
    0.00 :   ffffffff8100a0ce:       orb     $0x8, 0x8(%rsi)
    0.00 :   ffffffff8100a0d2:       movq    0x138(%r8), %rdi
    0.00 :   ffffffff8100a0d9:       notq    %rdi
    0.00 :   ffffffff8100a0dc:       andq    -0x18(%rbp), %rdi
    0.00 :   ffffffff8100a0e0:       cmpb    $0x10, 0x135bf5b(%rip) # 0xffffffff82366042 <boot_cpu_data+0x22>
    0.00 :   ffffffff8100a0e7:       je      0xffffffff8100a123 <perf_ibs_stop+0x123>
    0.00 :   ffffffff8100a0e9:       movq    0x140(%r8), %rax
    0.00 :   ffffffff8100a0f0:       movq    0x178(%rbx), %rcx
    0.00 :   ffffffff8100a0f7:       notq    %rax
    0.00 :   ffffffff8100a0fa:       andq    %rdi, %rax
    0.00 :   ffffffff8100a0fd:       movq    %rax, %rdx
    0.00 :   ffffffff8100a100:       shrq    $0x20, %rdx
    0.00 :   ffffffff8100a104:       wrmsr
    0.00 :   ffffffff8100a106:       lock
    0.00 :   ffffffff8100a107:       andb    $-0x3, 0x8(%rsi)
    0.00 :   ffffffff8100a10b:       movl    0x1e0(%rbx), %eax
    0.00 :   ffffffff8100a111:       testb   $0x1, %al
    0.00 :   ffffffff8100a113:       jne     0xffffffff8100a137 <perf_ibs_stop+0x137>
    0.00 :   ffffffff8100a115:       orl     $0x1, %eax
    0.00 :   ffffffff8100a118:       movl    %eax, 0x1e0(%rbx)
    0.00 :   ffffffff8100a11e:       jmp     0xffffffff8100a07b <perf_ibs_stop+0x7b>
    0.00 :   ffffffff8100a123:       movq    %rdi, %rdx
    0.00 :   ffffffff8100a126:       movq    0x178(%rbx), %rcx
    0.00 :   ffffffff8100a12d:       movl    %edi, %eax
    0.00 :   ffffffff8100a12f:       shrq    $0x20, %rdx
    0.00 :   ffffffff8100a133:       wrmsr
    0.00 :   ffffffff8100a135:       jmp     0xffffffff8100a0e9 <perf_ibs_stop+0xe9>
    0.00 :   ffffffff8100a137:       ud2
    0.00 :   ffffffff8100a139:       jmp     0xffffffff8100a115 <perf_ibs_stop+0x115>
    0.00 :   ffffffff8100a13b:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (14 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000044b40 <strtoq>:
    0.00 :   44b60:          pushq   %r15
    0.00 :   44b62:          pushq   %r14
    0.00 :   44b64:          pushq   %r13
    0.00 :   44b66:          pushq   %r12
    0.00 :   44b68:          xorl    %r13d, %r13d
    0.00 :   44b6b:          pushq   %rbp
    0.00 :   44b6c:          pushq   %rbx
    0.00 :   44b6d:          xorl    %r12d, %r12d
    0.00 :   44b70:          subq    $0x28, %rsp
    0.00 :   44b74:          movq    0x8(%r8), %rax
    0.00 :   44b78:          movq    %rdi, 0x8(%rsp)
    0.00 :   44b7d:          movq    %rsi, 0x10(%rsp)
    0.00 :   44b82:          movl    %edx, %edi
    0.00 :   44b84:          testl   %ecx, %ecx
    0.00 :   44b86:          jne     0x44e20 <strtoq+0x2e0>
    0.00 :   44b8c:          cmpl    $0x1, %edi
   10.84 :   44b8f:          je      0x44c28 <strtoq+0xe8>
    0.00 :   44b95:          cmpl    $0x24, %edi
    0.00 :   44b98:          ja      0x44c28 <strtoq+0xe8>
    0.00 :   44b9e:          movq    0x8(%rsp), %rbx
    0.00 :   44ba3:          movq    0x68(%r8), %rcx
    0.00 :   44ba7:          movsbq  (%rbx), %rdx
    0.00 :   44bab:          movq    %rdx, %rax
    0.00 :   44bae:          testb   $0x20, 0x1(%rcx,%rdx,2)
    0.00 :   44bb3:          je      0x44bca <strtoq+0x8a>
    0.00 :   44bb5:          nopl    (%rax)
    0.00 :   44bb8:          movsbq  0x1(%rbx), %rdx
    0.00 :   44bbd:          incq    %rbx
    0.00 :   44bc0:          movq    %rdx, %rax
    0.00 :   44bc3:          testb   $0x20, 0x1(%rcx,%rdx,2)
    0.00 :   44bc8:          jne     0x44bb8 <strtoq+0x78>
    0.00 :   44bca:          testb   %al, %al
    0.00 :   44bcc:          je      0x44fd3 <strtoq+0x493>
    0.00 :   44bd2:          cmpb    $0x2d, %al
    0.00 :   44bd4:          je      0x44db0 <strtoq+0x270>
    0.00 :   44bda:          cmpb    $0x2b, %al
    0.00 :   44bdc:          movl    $0x0, 0x1c(%rsp)
    0.00 :   44be4:          sete    %al
    0.00 :   44be7:          movzbl  %al, %eax
    0.00 :   44bea:          addq    %rax, %rbx
    0.00 :   44bed:          movzbl  (%rbx), %edx
    0.00 :   44bf0:          cmpb    $0x30, %dl
    0.00 :   44bf3:          je      0x44dc8 <strtoq+0x288>
    0.00 :   44bf9:          testl   %edi, %edi
    0.00 :   44bfb:          je      0x44c48 <strtoq+0x108>
    0.00 :   44bfd:          cmpl    $0xa, %edi
    0.00 :   44c00:          je      0x44c48 <strtoq+0x108>
    0.00 :   44c02:          leal    -0x2(%rdi), %eax
    0.00 :   44c05:          leaq    0x13d114(%rip), %rcx    # 0x181d20
    0.00 :   44c0c:          xorl    %ebp, %ebp
    0.00 :   44c0e:          cltq
    0.00 :   44c10:          xorl    %r13d, %r13d
    0.00 :   44c13:          movzbl  (%rcx,%rax), %r14d
    0.00 :   44c18:          leaq    0x13d141(%rip), %rcx    # 0x181d60
    0.00 :   44c1f:          movq    (%rcx,%rax,8), %r8
    0.00 :   44c23:          jmp     0x44c68 <strtoq+0x128>
    0.00 :   44c25:          nopl    (%rax)
    0.00 :   44c28:          movq    0x1861c9(%rip), %rax    # 0x1cadf8
    0.00 :   44c2f:          movl    $0x16, %fs:(%rax)
    0.00 :   44c36:          xorl    %eax, %eax
    0.00 :   44c38:          addq    $0x28, %rsp
    0.00 :   44c3c:          popq    %rbx
    0.00 :   44c3d:          popq    %rbp
    0.00 :   44c3e:          popq    %r12
    0.00 :   44c40:          popq    %r13
    0.00 :   44c42:          popq    %r14
    0.00 :   44c44:          popq    %r15
    0.00 :   44c46:          retq
    0.00 :   44c47:          nop
    0.00 :   44c48:          testq   %r13, %r13
    0.00 :   44c4b:          jne     0x44ed9 <strtoq+0x399>
    0.00 :   44c51:          movabsq $0x1999999999999999, %r8 # imm = 0x1999999999999999
    0.00 :   44c5b:          movl    $0x5, %r14d
    0.00 :   44c61:          movl    $0xa, %edi
    0.00 :   44c66:          xorl    %ebp, %ebp
    0.00 :   44c68:          testb   %dl, %dl
    0.00 :   44c6a:          je      0x44e87 <strtoq+0x347>
    0.00 :   44c70:          cmpq    %rbx, %r13
    0.00 :   44c73:          je      0x44e87 <strtoq+0x347>
    0.00 :   44c79:          movq    0x185d58(%rip), %r10    # 0x1ca9d8 <h_errlist+0x758>
    0.00 :   44c80:          movq    0x185d41(%rip), %r11    # 0x1ca9c8 <h_errlist+0x748>
    0.00 :   44c87:          movq    %rbx, %rcx
    0.00 :   44c8a:          xorl    %esi, %esi
    0.00 :   44c8c:          xorl    %r9d, %r9d
    0.00 :   44c8f:          movslq  %edi, %r15
    0.00 :   44c92:          jmp     0x44cc0 <strtoq+0x180>
    0.00 :   44c94:          nopl    (%rax)
    0.00 :   44c98:          cmpb    %al, %r14b
    5.48 :   44c9b:          jae     0x44ca2 <strtoq+0x162>
   15.51 :   44c9d:          cmpq    %r8, %rsi
    0.00 :   44ca0:          je      0x44ce7 <strtoq+0x1a7>
    0.00 :   44ca2:          imulq   %r15, %rsi
    0.00 :   44ca6:          movzbl  %al, %eax
    0.00 :   44ca9:          addq    %rax, %rsi
    7.52 :   44cac:          movq    %rcx, %rax
    0.00 :   44caf:          movzbl  0x1(%rax), %edx
    0.00 :   44cb3:          leaq    0x1(%rax), %rcx
    0.00 :   44cb7:          testb   %dl, %dl
   14.41 :   44cb9:          je      0x44d00 <strtoq+0x1c0>
    0.00 :   44cbb:          cmpq    %r13, %rcx
    0.00 :   44cbe:          je      0x44d00 <strtoq+0x1c0>
    0.00 :   44cc0:          leal    -0x30(%rdx), %eax
    5.39 :   44cc3:          cmpb    $0x9, %al
    0.00 :   44cc5:          jbe     0x44cdb <strtoq+0x19b>
    0.00 :   44cc7:          testq   %rbp, %rbp
    0.00 :   44cca:          jne     0x44d48 <strtoq+0x208>
    0.00 :   44ccc:          testb   $0x4, 0x1(%r11,%rdx,2)
    0.00 :   44cd2:          je      0x44d00 <strtoq+0x1c0>
    0.00 :   44cd4:          movl    (%r10,%rdx,4), %eax
    0.00 :   44cd8:          subl    $0x37, %eax
    0.00 :   44cdb:          movzbl  %al, %edx
    9.24 :   44cde:          cmpl    %edi, %edx
   31.61 :   44ce0:          jge     0x44d00 <strtoq+0x1c0>
    0.00 :   44ce2:          cmpq    %rsi, %r8
    0.00 :   44ce5:          jae     0x44c98 <strtoq+0x158>
    0.00 :   44ce7:          movq    %rcx, %rax
    0.00 :   44cea:          movl    $0x1, %r9d
    0.00 :   44cf0:          movzbl  0x1(%rax), %edx
    0.00 :   44cf4:          leaq    0x1(%rax), %rcx
    0.00 :   44cf8:          testb   %dl, %dl
    0.00 :   44cfa:          jne     0x44cbb <strtoq+0x17b>
    0.00 :   44cfc:          nopl    (%rax)
    0.00 :   44d00:          cmpq    %rbx, %rcx
    0.00 :   44d03:          je      0x44e8a <strtoq+0x34a>
    0.00 :   44d09:          movq    0x10(%rsp), %rax
    0.00 :   44d0e:          testq   %rax, %rax
    0.00 :   44d11:          je      0x44d16 <strtoq+0x1d6>
    0.00 :   44d13:          movq    %rcx, (%rax)
    0.00 :   44d16:          testl   %r9d, %r9d
    0.00 :   44d19:          jne     0x44d80 <strtoq+0x240>
    0.00 :   44d1b:          movl    0x1c(%rsp), %edx
    0.00 :   44d1f:          movq    %rsi, %rax
    0.00 :   44d22:          testl   %edx, %edx
    0.00 :   44d24:          jne     0x44e50 <strtoq+0x310>
    0.00 :   44d2a:          testq   %rsi, %rsi
    0.00 :   44d2d:          jns     0x44c38 <strtoq+0xf8>
    0.00 :   44d33:          movq    0x1860be(%rip), %rax    # 0x1cadf8
    0.00 :   44d3a:          movl    $0x22, %fs:(%rax)
    0.00 :   44d41:          jmp     0x44d9a <strtoq+0x25a>
    0.00 :   44d43:          nopl    (%rax,%rax)
    0.00 :   44d48:          movb    %dl, 0x1b(%rsp)
    0.00 :   44d4c:          xorl    %eax, %eax
    0.00 :   44d4e:          jmp     0x44d58 <strtoq+0x218>
    0.00 :   44d50:          incq    %rax
    0.00 :   44d53:          cmpq    %rbp, %rax
    0.00 :   44d56:          je      0x44d70 <strtoq+0x230>
    0.00 :   44d58:          movzbl  (%rcx,%rax), %edx
    0.00 :   44d5c:          cmpb    %dl, (%r12,%rax)
    0.00 :   44d60:          je      0x44d50 <strtoq+0x210>
    0.00 :   44d62:          movzbl  0x1b(%rsp), %edx
    0.00 :   44d67:          cmpq    %rax, %rbp
    0.00 :   44d6a:          jne     0x44ccc <strtoq+0x18c>
    0.00 :   44d70:          leaq    -0x1(%rcx,%rbp), %rax
    0.00 :   44d75:          jmp     0x44caf <strtoq+0x16f>
    0.00 :   44d7a:          nopw    (%rax,%rax)
    0.00 :   44d80:          movq    0x186071(%rip), %rax    # 0x1cadf8
    0.00 :   44d87:          movl    $0x22, %fs:(%rax)
    0.00 :   44d8e:          movl    0x1c(%rsp), %eax
    0.00 :   44d92:          testl   %eax, %eax
    0.00 :   44d94:          jne     0x44e78 <strtoq+0x338>
    0.00 :   44d9a:          movabsq $0x7fffffffffffffff, %rax # imm = 0x7FFFFFFFFFFFFFFF
    0.00 :   44da4:          jmp     0x44c38 <strtoq+0xf8>
    0.00 :   44da9:          nopl    (%rax)
    0.00 :   44db0:          movzbl  0x1(%rbx), %edx
    0.00 :   44db4:          incq    %rbx
    0.00 :   44db7:          movl    $0x1, 0x1c(%rsp)
    0.00 :   44dbf:          cmpb    $0x30, %dl
    0.00 :   44dc2:          jne     0x44bf9 <strtoq+0xb9>
    0.00 :   44dc8:          testl   $0xffffffef, %edi       # imm = 0xFFFFFFEF
    0.00 :   44dce:          jne     0x44bfd <strtoq+0xbd>
    0.00 :   44dd4:          movsbq  0x1(%rbx), %rax
    0.00 :   44dd9:          movq    0x185bf8(%rip), %r10    # 0x1ca9d8 <h_errlist+0x758>
    0.00 :   44de0:          cmpl    $0x58, (%r10,%rax,4)
    0.00 :   44de5:          je      0x44fac <strtoq+0x46c>
    0.00 :   44deb:          testl   %edi, %edi
    0.00 :   44ded:          je      0x44fe8 <strtoq+0x4a8>
    0.00 :   44df3:          leal    -0x2(%rdi), %eax
    0.00 :   44df6:          leaq    0x13cf23(%rip), %rdx    # 0x181d20
    0.00 :   44dfd:          cltq
    0.00 :   44dff:          movzbl  (%rdx,%rax), %r14d
    0.00 :   44e04:          leaq    0x13cf55(%rip), %rdx    # 0x181d60
    0.00 :   44e0b:          movq    (%rdx,%rax,8), %r8
    0.00 :   44e0f:          xorl    %r13d, %r13d
    0.00 :   44e12:          xorl    %ebp, %ebp
    0.00 :   44e14:          movl    $0x30, %edx
    0.00 :   44e19:          jmp     0x44c80 <strtoq+0x140>
    0.00 :   44e1e:          nop
    0.00 :   44e20:          movq    0x48(%rax), %r13
    0.00 :   44e24:          movzbl  (%r13), %ebx
    0.00 :   44e29:          leal    -0x1(%rbx), %edx
    0.00 :   44e2c:          cmpb    $0x7d, %dl
    0.00 :   44e2f:          ja      0x44ed1 <strtoq+0x391>
    0.00 :   44e35:          movq    0x40(%rax), %r12
    0.00 :   44e39:          cmpb    $0x0, (%r12)
    0.00 :   44e3e:          jne     0x44b8c <strtoq+0x4c>
    0.00 :   44e44:          xorl    %r13d, %r13d
    0.00 :   44e47:          xorl    %r12d, %r12d
    0.00 :   44e4a:          jmp     0x44b8c <strtoq+0x4c>
    0.00 :   44e4f:          nop
    0.00 :   44e50:          movabsq $-0x8000000000000000, %rdx # imm = 0x8000000000000000
    0.00 :   44e5a:          negq    %rax
    0.00 :   44e5d:          cmpq    %rsi, %rdx
    0.00 :   44e60:          jae     0x44c38 <strtoq+0xf8>
    0.00 :   44e66:          movq    0x185f8b(%rip), %rax    # 0x1cadf8
    0.00 :   44e6d:          movl    $0x22, %fs:(%rax)
    0.00 :   44e74:          nopl    (%rax)
    0.00 :   44e78:          movabsq $-0x8000000000000000, %rax # imm = 0x8000000000000000
    0.00 :   44e82:          jmp     0x44c38 <strtoq+0xf8>
    0.00 :   44e87:          movq    %rbx, %rcx
    0.00 :   44e8a:          cmpq    $0x0, 0x10(%rsp)
    0.00 :   44e90:          je      0x44c36 <strtoq+0xf6>
    0.00 :   44e96:          movq    0x8(%rsp), %rdi
    0.00 :   44e9b:          movq    %rcx, %rax
    0.00 :   44e9e:          subq    %rdi, %rax
    0.00 :   44ea1:          cmpq    $0x1, %rax
    0.00 :   44ea5:          jle     0x44ebd <strtoq+0x37d>
    0.00 :   44ea7:          movsbq  -0x1(%rcx), %rdx
    0.00 :   44eac:          movq    0x185b25(%rip), %rax    # 0x1ca9d8 <h_errlist+0x758>
    0.00 :   44eb3:          cmpl    $0x58, (%rax,%rdx,4)
    0.00 :   44eb7:          je      0x45002 <strtoq+0x4c2>
    0.00 :   44ebd:          movq    0x10(%rsp), %rax
    0.00 :   44ec2:          movq    0x8(%rsp), %rdi
    0.00 :   44ec7:          movq    %rdi, (%rax)
    0.00 :   44eca:          xorl    %eax, %eax
    0.00 :   44ecc:          jmp     0x44c38 <strtoq+0xf8>
    0.00 :   44ed1:          xorl    %r13d, %r13d
    0.00 :   44ed4:          jmp     0x44b8c <strtoq+0x4c>
    0.00 :   44ed9:          movq    %r12, %rdi
    0.00 :   44edc:          movb    %dl, 0x1b(%rsp)
    0.00 :   44ee0:          callq   0x22110 <_dl_find_dso_for_object@plt+0x20>
    0.00 :   44ee5:          movq    %rax, %rcx
    0.00 :   44ee8:          movq    %rax, %rbp
    0.00 :   44eeb:          testq   %rax, %rax
    0.00 :   44eee:          je      0x44e87 <strtoq+0x347>
    0.00 :   44ef0:          movzbl  0x1b(%rsp), %edx
    0.00 :   44ef5:          xorl    %eax, %eax
    0.00 :   44ef7:          jmp     0x44f0c <strtoq+0x3cc>
    0.00 :   44ef9:          nopl    (%rax)
    0.00 :   44f00:          incq    %rax
    0.00 :   44f03:          cmpq    %rcx, %rax
    0.00 :   44f06:          je      0x44e87 <strtoq+0x347>
    0.00 :   44f0c:          movzbl  (%rbx,%rax), %edi
    0.00 :   44f10:          cmpb    %dil, (%r12,%rax)
    0.00 :   44f14:          je      0x44f00 <strtoq+0x3c0>
    0.00 :   44f16:          cmpq    %rcx, %rax
    0.00 :   44f19:          jae     0x44e87 <strtoq+0x347>
    0.00 :   44f1f:          testb   %dl, %dl
    0.00 :   44f21:          je      0x4501e <strtoq+0x4de>
    0.00 :   44f27:          movq    0x185a9a(%rip), %rdi    # 0x1ca9c8 <h_errlist+0x748>
    0.00 :   44f2e:          movq    0x185aa3(%rip), %r10    # 0x1ca9d8 <h_errlist+0x758>
    0.00 :   44f35:          movq    %rbx, %rsi
    0.00 :   44f38:          jmp     0x44f4b <strtoq+0x40b>
    0.00 :   44f3a:          nopw    (%rax,%rax)
    0.00 :   44f40:          movzbl  0x1(%rsi), %edx
    0.00 :   44f44:          incq    %rsi
    0.00 :   44f47:          testb   %dl, %dl
    0.00 :   44f49:          je      0x44f7e <strtoq+0x43e>
    0.00 :   44f4b:          leal    -0x30(%rdx), %eax
    0.00 :   44f4e:          cmpb    $0x9, %al
    0.00 :   44f50:          jbe     0x44f40 <strtoq+0x400>
    0.00 :   44f52:          xorl    %eax, %eax
    0.00 :   44f54:          jmp     0x44f60 <strtoq+0x420>
    0.00 :   44f56:          nop
    0.00 :   44f58:          incq    %rax
    0.00 :   44f5b:          cmpq    %rcx, %rax
    0.00 :   44f5e:          je      0x44f40 <strtoq+0x400>
    0.00 :   44f60:          movzbl  (%rsi,%rax), %r11d
    0.00 :   44f65:          cmpb    %r11b, (%r12,%rax)
    0.00 :   44f69:          je      0x44f58 <strtoq+0x418>
    0.00 :   44f6b:          cmpq    %rcx, %rax
    0.00 :   44f6e:          jae     0x44f40 <strtoq+0x400>
    0.00 :   44f70:          testb   $0x4, 0x1(%rdi,%rdx,2)
    0.00 :   44f75:          je      0x44f7e <strtoq+0x43e>
    0.00 :   44f77:          cmpl    $0x40, (%r10,%rdx,4)
    0.00 :   44f7c:          jle     0x44f40 <strtoq+0x400>
    0.00 :   44f7e:          movq    %r13, %rcx
    0.00 :   44f81:          movq    %r12, %rdx
    0.00 :   44f84:          movq    %rbx, %rdi
    0.00 :   44f87:          movl    $0x5, %r14d
    0.00 :   44f8d:          callq   0x4d350 <__strtof128_nan+0x120>
    0.00 :   44f92:          movzbl  (%rbx), %edx
    0.00 :   44f95:          movq    %rax, %r13
    0.00 :   44f98:          movabsq $0x1999999999999999, %r8 # imm = 0x1999999999999999
    0.00 :   44fa2:          movl    $0xa, %edi
    0.00 :   44fa7:          jmp     0x44c68 <strtoq+0x128>
    0.00 :   44fac:          movzbl  0x2(%rbx), %edx
    0.00 :   44fb0:          movabsq $0xfffffffffffffff, %r8 # imm = 0xFFFFFFFFFFFFFFF
    0.00 :   44fba:          addq    $0x2, %rbx
    0.00 :   44fbe:          movl    $0xf, %r14d
    0.00 :   44fc4:          movl    $0x10, %edi
    0.00 :   44fc9:          xorl    %ebp, %ebp
    0.00 :   44fcb:          xorl    %r13d, %r13d
    0.00 :   44fce:          jmp     0x44c68 <strtoq+0x128>
    0.00 :   44fd3:          cmpq    $0x0, 0x10(%rsp)
    0.00 :   44fd9:          jne     0x44ebd <strtoq+0x37d>
    0.00 :   44fdf:          xorl    %eax, %eax
    0.00 :   44fe1:          jmp     0x44c38 <strtoq+0xf8>
    0.00 :   44fe6:          nop
    0.00 :   44fe8:          movabsq $0x1fffffffffffffff, %r8 # imm = 0x1FFFFFFFFFFFFFFF
    0.00 :   44ff2:          movl    $0x7, %r14d
    0.00 :   44ff8:          movl    $0x8, %edi
    0.00 :   44ffd:          jmp     0x44e0f <strtoq+0x2cf>
    0.00 :   45002:          cmpb    $0x30, -0x2(%rcx)
    0.00 :   45006:          jne     0x44ebd <strtoq+0x37d>
    0.00 :   4500c:          movq    0x10(%rsp), %rax
    0.00 :   45011:          decq    %rcx
    0.00 :   45014:          movq    %rcx, (%rax)
    0.00 :   45017:          xorl    %eax, %eax
    0.00 :   45019:          jmp     0x44c38 <strtoq+0xf8>
    0.00 :   4501e:          movq    %rbx, %rsi
    0.00 :   45021:          jmp     0x44f7e <strtoq+0x43e>
 Percent |	Source code & Disassembly of elf for cycles (18 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b6b730 <stackleak_erase>:
         : 5                ; stackleak_erase():
    0.00 :   ffffffff81b6b730:       pushq   %rbp
    0.00 :   ffffffff81b6b731:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81b6b73a:       movq    0xa30(%rax), %r9
    0.00 :   ffffffff81b6b741:       movq    0xb28(%rax), %rax
    0.00 :   ffffffff81b6b748:       movq    %rsp, %rdi
    0.00 :   ffffffff81b6b74b:       movq    %gs:0x22718, %r10
    0.00 :   ffffffff81b6b754:       subq    %rdi, %r10
    0.00 :   ffffffff81b6b757:       movq    %rsp, %rbp
    0.00 :   ffffffff81b6b75a:       leaq    0x8(%r9), %r8
    0.00 :   ffffffff81b6b75e:       addq    $0x3f58, %r9    # imm = 0x3F58
    0.00 :   ffffffff81b6b765:       movq    %rax, %rdx
    0.00 :   ffffffff81b6b768:       cmpq    %rax, %r8
    0.00 :   ffffffff81b6b76b:       jae     0xffffffff81b6b79e <stackleak_erase+0x6e>
    0.00 :   ffffffff81b6b76d:       xorl    %esi, %esi
    0.00 :   ffffffff81b6b76f:       jmp     0xffffffff81b6b784 <stackleak_erase+0x54>
    0.00 :   ffffffff81b6b771:       xorl    %esi, %esi
    0.00 :   ffffffff81b6b773:       cmpq    %rax, %r8
    0.00 :   ffffffff81b6b776:       movq    %rax, %rdx
    0.00 :   ffffffff81b6b779:       movl    $0x1, %ecx
    0.00 :   ffffffff81b6b77e:       jae     0xffffffff81b6b79e <stackleak_erase+0x6e>
    6.67 :   ffffffff81b6b780:       testb   %cl, %cl
    0.00 :   ffffffff81b6b782:       je      0xffffffff81b6b79e <stackleak_erase+0x6e>
    0.00 :   ffffffff81b6b784:       subq    $0x8, %rax
    0.00 :   ffffffff81b6b788:       cmpq    $-0xbeef, (%rax) # imm = 0xFFFF4111
    0.00 :   ffffffff81b6b78f:       jne     0xffffffff81b6b771 <stackleak_erase+0x41>
    4.78 :   ffffffff81b6b791:       incl    %esi
    0.00 :   ffffffff81b6b793:       cmpl    $0xf, %esi
    7.32 :   ffffffff81b6b796:       setbe   %cl
    0.00 :   ffffffff81b6b799:       cmpq    %rax, %r8
   27.38 :   ffffffff81b6b79c:       jb      0xffffffff81b6b780 <stackleak_erase+0x50>
    0.00 :   ffffffff81b6b79e:       cmpq    $0x4000, %r10   # imm = 0x4000
    0.00 :   ffffffff81b6b7a5:       cmovaeq %r9, %rdi
    0.00 :   ffffffff81b6b7a9:       cmpq    %rdi, %rdx
    0.00 :   ffffffff81b6b7ac:       jae     0xffffffff81b6b7be <stackleak_erase+0x8e>
   15.72 :   ffffffff81b6b7ae:       movq    $-0xbeef, (%rdx) # imm = 0xFFFF4111
   31.45 :   ffffffff81b6b7b5:       addq    $0x8, %rdx
    6.69 :   ffffffff81b6b7b9:       cmpq    %rdi, %rdx
    0.00 :   ffffffff81b6b7bc:       jb      0xffffffff81b6b7ae <stackleak_erase+0x7e>
    0.00 :   ffffffff81b6b7be:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81b6b7c7:       movq    %r9, 0xb28(%rax)
    0.00 :   ffffffff81b6b7ce:       popq    %rbp
    0.00 :   ffffffff81b6b7cf:       xorl    %eax, %eax
    0.00 :   ffffffff81b6b7d1:       xorl    %edx, %edx
    0.00 :   ffffffff81b6b7d3:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b6b7d5:       xorl    %esi, %esi
    0.00 :   ffffffff81b6b7d7:       xorl    %edi, %edi
    0.00 :   ffffffff81b6b7d9:       xorl    %r8d, %r8d
    0.00 :   ffffffff81b6b7dc:       xorl    %r9d, %r9d
    0.00 :   ffffffff81b6b7df:       xorl    %r10d, %r10d
    0.00 :   ffffffff81b6b7e2:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (14 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810d1ec0 <cpuacct_account_field>:
         : 5                ; cpuacct_account_field():
    0.00 :   ffffffff810d1ec0:       pushq   %rbp
    0.00 :   ffffffff810d1ec1:       movq    %rsp, %rbp
    0.00 :   ffffffff810d1ec4:       movq    0x5f0(%rdi), %rax
    0.00 :   ffffffff810d1ecb:       movq    0x10(%rax), %rax
   88.72 :   ffffffff810d1ecf:       cmpq    $-0x7ddc84c0, %rax # imm = 0x82237B40
    0.00 :   ffffffff810d1ed5:       je      0xffffffff810d1efb <cpuacct_account_field+0x3b>
    0.00 :   ffffffff810d1ed7:       movslq  %esi, %rsi
    0.00 :   ffffffff810d1eda:       shlq    $0x3, %rsi
    0.00 :   ffffffff810d1ede:       movq    0xd0(%rax), %rcx
    0.00 :   ffffffff810d1ee5:       addq    %rsi, %rcx
    0.00 :   ffffffff810d1ee8:       addq    %rdx, %gs:(%rcx)
    0.00 :   ffffffff810d1eec:       movq    0xc0(%rax), %rax
    0.00 :   ffffffff810d1ef3:       cmpq    $-0x7ddc84c0, %rax # imm = 0x82237B40
    0.00 :   ffffffff810d1ef9:       jne     0xffffffff810d1ede <cpuacct_account_field+0x1e>
    0.00 :   ffffffff810d1efb:       popq    %rbp
    0.00 :   ffffffff810d1efc:       xorl    %eax, %eax
    0.00 :   ffffffff810d1efe:       xorl    %edx, %edx
   11.28 :   ffffffff810d1f00:       xorl    %ecx, %ecx
    0.00 :   ffffffff810d1f02:       xorl    %esi, %esi
    0.00 :   ffffffff810d1f04:       xorl    %edi, %edi
    0.00 :   ffffffff810d1f06:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (11 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b3cf0 <update_curr>:
         : 5                ; update_curr():
    0.00 :   ffffffff810b3cf0:       pushq   %rbp
    0.00 :   ffffffff810b3cf1:       movq    %rsp, %rbp
    0.00 :   ffffffff810b3cf4:       subq    $0x18, %rsp
   63.73 :   ffffffff810b3cf8:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff810b3cfc:       movq    %r12, -0x10(%rbp)
   12.05 :   ffffffff810b3d00:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff810b3d04:       movq    0x50(%rdi), %rbx
    0.00 :   ffffffff810b3d08:       movq    0x130(%rdi), %rax
    0.00 :   ffffffff810b3d0f:       testq   %rbx, %rbx
    9.08 :   ffffffff810b3d12:       movq    0x9c0(%rax), %rax
    8.07 :   ffffffff810b3d19:       je      0xffffffff810b3d5a <update_curr+0x6a>
    0.00 :   ffffffff810b3d1b:       movq    %rax, %r13
    0.00 :   ffffffff810b3d1e:       subq    0x40(%rbx), %r13
    0.00 :   ffffffff810b3d22:       testq   %r13, %r13
    0.00 :   ffffffff810b3d25:       jle     0xffffffff810b3d5a <update_curr+0x6a>
    0.00 :   ffffffff810b3d27:       addq    %r13, 0x48(%rbx)
    0.00 :   ffffffff810b3d2b:       cmpq    $0x100000, (%rbx) # imm = 0x100000
    0.00 :   ffffffff810b3d32:       movq    %rdi, %r12
    0.00 :   ffffffff810b3d35:       movq    %rax, 0x40(%rbx)
    0.00 :   ffffffff810b3d39:       movq    %r13, %rax
    7.06 :   ffffffff810b3d3c:       jne     0xffffffff810b3e15 <update_curr+0x125>
    0.00 :   ffffffff810b3d42:       addq    %rax, 0x50(%rbx)
    0.00 :   ffffffff810b3d46:       movq    %r12, %rdi
    0.00 :   ffffffff810b3d49:       callq   0xffffffff810b2f90 <update_min_vruntime>
    0.00 :   ffffffff810b3d4e:       cmpq    $0x0, 0x80(%rbx)
    0.00 :   ffffffff810b3d56:       je      0xffffffff810b3da9 <update_curr+0xb9>
    0.00 :   ffffffff810b3d58:       nop
    0.00 :   ffffffff810b3d5a:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff810b3d5e:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff810b3d62:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff810b3d66:       leave
    0.00 :   ffffffff810b3d67:       xorl    %eax, %eax
    0.00 :   ffffffff810b3d69:       xorl    %edx, %edx
    0.00 :   ffffffff810b3d6b:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b3d6d:       xorl    %esi, %esi
    0.00 :   ffffffff810b3d6f:       xorl    %edi, %edi
    0.00 :   ffffffff810b3d71:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b3d76:       movl    0x15c(%r12), %eax
    0.00 :   ffffffff810b3d7e:       testl   %eax, %eax
    0.00 :   ffffffff810b3d80:       je      0xffffffff810b3d5a <update_curr+0x6a>
    0.00 :   ffffffff810b3d82:       movq    %r13, %rsi
    0.00 :   ffffffff810b3d85:       movq    %r12, %rdi
    0.00 :   ffffffff810b3d88:       callq   0xffffffff810b3bc0 <__account_cfs_rq_runtime>
    0.00 :   ffffffff810b3d8d:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff810b3d91:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff810b3d95:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff810b3d99:       leave
    0.00 :   ffffffff810b3d9a:       xorl    %eax, %eax
    0.00 :   ffffffff810b3d9c:       xorl    %edx, %edx
    0.00 :   ffffffff810b3d9e:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b3da0:       xorl    %esi, %esi
    0.00 :   ffffffff810b3da2:       xorl    %edi, %edi
    0.00 :   ffffffff810b3da4:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b3da9:       leaq    -0x400(%rbx), %rdi
    0.00 :   ffffffff810b3db0:       movq    %r13, %rsi
    0.00 :   ffffffff810b3db3:       callq   0xffffffff810d1e60 <cpuacct_charge>
    0.00 :   ffffffff810b3db8:       movq    0x1f0(%rbx), %rax
    0.00 :   ffffffff810b3dbf:       movq    0x78(%rax), %rdi
    0.00 :   ffffffff810b3dc3:       cmpq    $0x0, 0xc0(%rdi)
    0.00 :   ffffffff810b3dcb:       je      0xffffffff810b3dd5 <update_curr+0xe5>
    0.00 :   ffffffff810b3dcd:       movq    %r13, %rsi
    0.00 :   ffffffff810b3dd0:       callq   0xffffffff81140910 <__cgroup_account_cputime>
    0.00 :   ffffffff810b3dd5:       movq    0x4f8(%rbx), %rax
    0.00 :   ffffffff810b3ddc:       movl    0x258(%rax), %edx
    0.00 :   ffffffff810b3de2:       leaq    0x150(%rax), %rcx
    0.00 :   ffffffff810b3de9:       testl   %edx, %edx
    0.00 :   ffffffff810b3deb:       je      0xffffffff810b3d58 <update_curr+0x68>
    0.00 :   ffffffff810b3df1:       cmpq    $0x0, -0x110(%rbx)
    0.00 :   ffffffff810b3df9:       je      0xffffffff810b3d58 <update_curr+0x68>
    0.00 :   ffffffff810b3dff:       testq   %rcx, %rcx
    0.00 :   ffffffff810b3e02:       je      0xffffffff810b3d58 <update_curr+0x68>
    0.00 :   ffffffff810b3e08:       lock
    0.00 :   ffffffff810b3e09:       addq    %r13, 0x160(%rax)
    0.00 :   ffffffff810b3e10:       jmp     0xffffffff810b3d58 <update_curr+0x68>
    0.00 :   ffffffff810b3e15:       movq    %rbx, %rdx
    0.00 :   ffffffff810b3e18:       movl    $0x100000, %esi # imm = 0x100000
    0.00 :   ffffffff810b3e1d:       movq    %r13, %rdi
    0.00 :   ffffffff810b3e20:       callq   0xffffffff810b3350 <__calc_delta>
    0.00 :   ffffffff810b3e25:       jmp     0xffffffff810b3d42 <update_curr+0x52>
 Percent |	Source code & Disassembly of elf for cycles (12 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810fec30 <rcu_sched_clock_irq>:
         : 5                ; rcu_sched_clock_irq():
    0.00 :   ffffffff810fec30:       pushq   %rbp
    0.00 :   ffffffff810fec31:       movq    %rsp, %rbp
    0.00 :   ffffffff810fec34:       pushq   %r15
    0.00 :   ffffffff810fec36:       pushq   %r14
    0.00 :   ffffffff810fec38:       pushq   %r13
    0.00 :   ffffffff810fec3a:       pushq   %r12
    0.00 :   ffffffff810fec3c:       pushq   %rbx
    0.00 :   ffffffff810fec3d:       movl    %edi, %ebx
    0.00 :   ffffffff810fec3f:       subq    $0xa8, %rsp
    0.00 :   ffffffff810fec46:       movq    %gs:0x28, %rax
    0.00 :   ffffffff810fec4f:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff810fec53:       xorl    %eax, %eax
    0.00 :   ffffffff810fec55:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff810fec5a:       incq    %gs:0x7ef25046(%rip)
    0.00 :   ffffffff810fec62:       movq    $0x23d95, %rax  # imm = 0x23D95
    0.00 :   ffffffff810fec69:       addq    %gs:0x7ef16dbf(%rip), %rax
    0.00 :   ffffffff810fec71:       movzbl  (%rax), %eax
    0.00 :   ffffffff810fec74:       testb   %al, %al
    0.00 :   ffffffff810fec76:       jne     0xffffffff810ff287 <rcu_sched_clock_irq+0x657>
    0.00 :   ffffffff810fec7c:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff810fec85:       movl    0xa58(%rdi), %eax
    0.00 :   ffffffff810fec8b:       testl   %eax, %eax
    0.00 :   ffffffff810fec8d:       jg      0xffffffff810fec9f <rcu_sched_clock_irq+0x6f>
    0.00 :   ffffffff810fec8f:       movl    %gs:0x7ef23a72(%rip), %eax
    0.00 :   ffffffff810fec96:       testw   %ax, %ax
    0.00 :   ffffffff810fec99:       je      0xffffffff810ff2d5 <rcu_sched_clock_irq+0x6a5>
    0.00 :   ffffffff810fec9f:       movb    %gs:0x7ef24feb(%rip), %al
    0.00 :   ffffffff810feca6:       testb   %al, %al
    0.00 :   ffffffff810feca8:       je      0xffffffff810fef7a <rcu_sched_clock_irq+0x34a>
    0.00 :   ffffffff810fecae:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810fecb7:       movl    0xa58(%rax), %eax
    0.00 :   ffffffff810fecbd:       testl   %eax, %eax
    0.00 :   ffffffff810fecbf:       jne     0xffffffff810fecd0 <rcu_sched_clock_irq+0xa0>
    0.00 :   ffffffff810fecc1:       lock
    0.00 :   ffffffff810fecc2:       orb     $0x8, (%rdi)
    0.00 :   ffffffff810fecc5:       andl    $0x7fffffff, %gs:0x7ef23a38(%rip) # imm = 0x7FFFFFFF
    0.00 :   ffffffff810fecd0:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810fecd9:       movl    0xa58(%rax), %eax
    0.00 :   ffffffff810fecdf:       testl   %eax, %eax
    0.00 :   ffffffff810fece1:       jle     0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810fece3:       movb    %gs:0x7ef24fa8(%rip), %al
    0.00 :   ffffffff810fecea:       testb   %al, %al
    0.00 :   ffffffff810fecec:       je      0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810fecee:       movb    %gs:0x7ef24f9b(%rip), %al
    0.00 :   ffffffff810fecf5:       testb   %al, %al
    0.00 :   ffffffff810fecf7:       je      0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810fecf9:       cmpb    $0x0, 0xa5(%rdi)
    0.00 :   ffffffff810fed00:       jne     0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810fed02:       movq    0x121ba37(%rip), %rax # 0xffffffff8231a740 <rcu_state+0x1800>
    0.00 :   ffffffff810fed09:       movq    $0x0, -0x88(%rbp)
    0.00 :   ffffffff810fed14:       movq    0x1108ca5(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810fed1b:       addq    $0x3e8, %rax    # imm = 0x3E8
    0.00 :   ffffffff810fed21:       cmpq    %rdx, %rax
    0.00 :   ffffffff810fed24:       js      0xffffffff810ff69a <rcu_sched_clock_irq+0xa6a>
    0.00 :   ffffffff810fed2a:       movl    0x1267c23(%rip), %r11d # 0xffffffff82366954 <rcu_cpu_stall_suppress_at_boot>
    9.06 :   ffffffff810fed31:       movq    $0x23c80, %r14  # imm = 0x23C80
    0.00 :   ffffffff810fed38:       movq    %r14, %r15
    0.00 :   ffffffff810fed3b:       addq    %gs:0x7ef16ced(%rip), %r15
    0.00 :   ffffffff810fed43:       testl   %r11d, %r11d
    0.00 :   ffffffff810fed46:       movq    0x18(%r15), %r12
    0.00 :   ffffffff810fed4a:       jne     0xffffffff810fee9e <rcu_sched_clock_irq+0x26e>
   34.68 :   ffffffff810fed50:       movl    0x1267c0d(%rip), %r10d # 0xffffffff82366964 <rcu_cpu_stall_suppress>
    0.00 :   ffffffff810fed57:       testl   %r10d, %r10d
    0.00 :   ffffffff810fed5a:       jne     0xffffffff810feeab <rcu_sched_clock_irq+0x27b>
    0.00 :   ffffffff810fed60:       movq    0x121b899(%rip), %rax # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810fed67:       testb   $0x3, %al
    0.00 :   ffffffff810fed69:       je      0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810fed6b:       movzbl  0x15cf9ce(%rip), %eax # 0xffffffff826ce740 <rcu_kick_kthreads>
    0.00 :   ffffffff810fed72:       testb   %al, %al
    0.00 :   ffffffff810fed74:       je      0xffffffff810fed7b <rcu_sched_clock_irq+0x14b>
    0.00 :   ffffffff810fed76:       callq   0xffffffff810f6bc0 <rcu_stall_kick_kthreads.part.0>
    9.07 :   ffffffff810fed7b:       movq    0x1108c3e(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810fed82:       movq    0x121b877(%rip), %rax # 0xffffffff8231a600 <rcu_state+0x16c0>
   16.75 :   ffffffff810fed89:       movq    0x121b9d0(%rip), %rcx # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810fed90:       movq    0x121b9a9(%rip), %r8 # 0xffffffff8231a740 <rcu_state+0x1800>
    0.00 :   ffffffff810fed97:       movq    0x121b862(%rip), %r11 # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810fed9e:       cmpq    %r11, %rax
    0.00 :   ffffffff810feda1:       je      0xffffffff810fef8d <rcu_sched_clock_irq+0x35d>
    0.00 :   ffffffff810feda7:       testl   %ebx, %ebx
    0.00 :   ffffffff810feda9:       je      0xffffffff810feec2 <rcu_sched_clock_irq+0x292>
    0.00 :   ffffffff810fedaf:       movq    0x121b84a(%rip), %rax # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810fedb6:       movl    %eax, %r13d
    0.00 :   ffffffff810fedb9:       andl    $0x3, %r13d
    0.00 :   ffffffff810fedbd:       cmpb    $0x0, 0x12(%r15)
    0.00 :   ffffffff810fedc2:       je      0xffffffff810feef0 <rcu_sched_clock_irq+0x2c0>
    0.00 :   ffffffff810fedc8:       cmpb    $0x0, 0x10(%r15)
    0.00 :   ffffffff810fedcd:       jne     0xffffffff810feef0 <rcu_sched_clock_irq+0x2c0>
    0.00 :   ffffffff810fedd3:       testl   %r13d, %r13d
    0.00 :   ffffffff810fedd6:       jne     0xffffffff810fee08 <rcu_sched_clock_irq+0x1d8>
    0.00 :   ffffffff810fedd8:       leaq    0x78(%r15), %rdi
    0.00 :   ffffffff810feddc:       callq   0xffffffff81100040 <rcu_segcblist_ready_cbs>
    0.00 :   ffffffff810fede1:       testb   %al, %al
    0.00 :   ffffffff810fede3:       jne     0xffffffff810fee08 <rcu_sched_clock_irq+0x1d8>
    0.00 :   ffffffff810fede5:       movzbl  0xe8(%r15), %eax
    0.00 :   ffffffff810feded:       testb   $0x1, %al
    0.00 :   ffffffff810fedef:       je      0xffffffff810fef0a <rcu_sched_clock_irq+0x2da>
    0.00 :   ffffffff810fedf5:       movq    0x90(%r15), %rax
    0.00 :   ffffffff810fedfc:       movq    (%rax), %rax
    0.00 :   ffffffff810fedff:       testq   %rax, %rax
    0.00 :   ffffffff810fee02:       je      0xffffffff810fef0a <rcu_sched_clock_irq+0x2da>
    6.12 :   ffffffff810fee08:       callq   0xffffffff810f7df0 <invoke_rcu_core>
    0.00 :   ffffffff810fee0d:       testl   %ebx, %ebx
    0.00 :   ffffffff810fee0f:       je      0xffffffff810fef2d <rcu_sched_clock_irq+0x2fd>
    0.00 :   ffffffff810fee15:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810fee1e:       movzbl  0x940(%rax), %edx
    0.00 :   ffffffff810fee25:       testb   %dl, %dl
    0.00 :   ffffffff810fee27:       jne     0xffffffff810fef6e <rcu_sched_clock_irq+0x33e>
    0.00 :   ffffffff810fee2d:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff810fee36:       movl    0x350(%rdi), %eax
    0.00 :   ffffffff810fee3c:       movzbl  0xa99(%rdi), %edx
    0.00 :   ffffffff810fee43:       testb   %dl, %dl
    0.00 :   ffffffff810fee45:       jne     0xffffffff810ff650 <rcu_sched_clock_irq+0xa20>
    0.00 :   ffffffff810fee4b:       testl   %eax, %eax
    0.00 :   ffffffff810fee4d:       jne     0xffffffff810ff650 <rcu_sched_clock_irq+0xa20>
    0.00 :   ffffffff810fee53:       movl    $0x2, %edx
    0.00 :   ffffffff810fee58:       xorl    %esi, %esi
    0.00 :   ffffffff810fee5a:       callq   0xffffffff810f01e0 <rcu_trc_cmpxchg_need_qs>
    0.00 :   ffffffff810fee5f:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff810fee63:       subq    %gs:0x28, %rax
    0.00 :   ffffffff810fee6c:       jne     0xffffffff810ffc0f <rcu_sched_clock_irq+0xfdf>
    0.00 :   ffffffff810fee72:       addq    $0xa8, %rsp
    0.00 :   ffffffff810fee79:       popq    %rbx
    0.00 :   ffffffff810fee7a:       popq    %r12
    0.00 :   ffffffff810fee7c:       popq    %r13
    0.00 :   ffffffff810fee7e:       popq    %r14
    0.00 :   ffffffff810fee80:       popq    %r15
    0.00 :   ffffffff810fee82:       popq    %rbp
    0.00 :   ffffffff810fee83:       xorl    %eax, %eax
    0.00 :   ffffffff810fee85:       xorl    %edx, %edx
    0.00 :   ffffffff810fee87:       xorl    %ecx, %ecx
    0.00 :   ffffffff810fee89:       xorl    %esi, %esi
    0.00 :   ffffffff810fee8b:       xorl    %edi, %edi
    0.00 :   ffffffff810fee8d:       xorl    %r8d, %r8d
    0.00 :   ffffffff810fee90:       xorl    %r9d, %r9d
    0.00 :   ffffffff810fee93:       xorl    %r10d, %r10d
    0.00 :   ffffffff810fee96:       xorl    %r11d, %r11d
    0.00 :   ffffffff810fee99:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810fee9e:       callq   0xffffffff810f0130 <rcu_inkernel_boot_has_ended>
    0.00 :   ffffffff810feea3:       testb   %al, %al
    0.00 :   ffffffff810feea5:       jne     0xffffffff810fed50 <rcu_sched_clock_irq+0x120>
    0.00 :   ffffffff810feeab:       movzbl  0x15cf88e(%rip), %eax # 0xffffffff826ce740 <rcu_kick_kthreads>
    0.00 :   ffffffff810feeb2:       testb   %al, %al
    0.00 :   ffffffff810feeb4:       jne     0xffffffff810fed60 <rcu_sched_clock_irq+0x130>
    0.00 :   ffffffff810feeba:       testl   %ebx, %ebx
    0.00 :   ffffffff810feebc:       jne     0xffffffff810fedaf <rcu_sched_clock_irq+0x17f>
    0.00 :   ffffffff810feec2:       movq    %gs:0x7ef20f26(%rip), %rax
    0.00 :   ffffffff810feeca:       testq   %rax, %rax
    0.00 :   ffffffff810feecd:       jne     0xffffffff810fedaf <rcu_sched_clock_irq+0x17f>
    0.00 :   ffffffff810feed3:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810feedc:       testb   $0x2, 0x354(%rax)
    0.00 :   ffffffff810feee3:       jne     0xffffffff810fedaf <rcu_sched_clock_irq+0x17f>
    0.00 :   ffffffff810feee9:       ud2
    0.00 :   ffffffff810feeeb:       jmp     0xffffffff810fedaf <rcu_sched_clock_irq+0x17f>
    0.00 :   ffffffff810feef0:       leaq    0x78(%r15), %rdi
    0.00 :   ffffffff810feef4:       callq   0xffffffff81100040 <rcu_segcblist_ready_cbs>
    0.00 :   ffffffff810feef9:       testb   %al, %al
    0.00 :   ffffffff810feefb:       jne     0xffffffff810fee08 <rcu_sched_clock_irq+0x1d8>
    0.00 :   ffffffff810fef01:       testl   %r13d, %r13d
    0.00 :   ffffffff810fef04:       je      0xffffffff810fede5 <rcu_sched_clock_irq+0x1b5>
    0.00 :   ffffffff810fef0a:       movq    0x8(%r12), %rax
    0.00 :   ffffffff810fef0f:       cmpq    (%r15), %rax
    0.00 :   ffffffff810fef12:       jne     0xffffffff810fee08 <rcu_sched_clock_irq+0x1d8>
   16.53 :   ffffffff810fef18:       movzbl  0x14(%r15), %eax
    7.79 :   ffffffff810fef1d:       testb   %al, %al
    0.00 :   ffffffff810fef1f:       jne     0xffffffff810fee08 <rcu_sched_clock_irq+0x1d8>
    0.00 :   ffffffff810fef25:       testl   %ebx, %ebx
    0.00 :   ffffffff810fef27:       jne     0xffffffff810fee15 <rcu_sched_clock_irq+0x1e5>
    0.00 :   ffffffff810fef2d:       movq    %gs:0x7ef20ebb(%rip), %rax
    0.00 :   ffffffff810fef35:       cmpq    $0x1, %rax
    0.00 :   ffffffff810fef39:       jg      0xffffffff810fee5f <rcu_sched_clock_irq+0x22f>
    0.00 :   ffffffff810fef3f:       testq   %rax, %rax
    0.00 :   ffffffff810fef42:       jne     0xffffffff810fef58 <rcu_sched_clock_irq+0x328>
    0.00 :   ffffffff810fef44:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810fef4d:       testb   $0x2, 0x354(%rax)
    0.00 :   ffffffff810fef54:       jne     0xffffffff810fef58 <rcu_sched_clock_irq+0x328>
    0.00 :   ffffffff810fef56:       ud2
    0.00 :   ffffffff810fef58:       movq    %gs:0x7ef20e88(%rip), %rax
    0.00 :   ffffffff810fef60:       testq   %rax, %rax
    0.00 :   ffffffff810fef63:       je      0xffffffff810fee15 <rcu_sched_clock_irq+0x1e5>
    0.00 :   ffffffff810fef69:       jmp     0xffffffff810fee5f <rcu_sched_clock_irq+0x22f>
    0.00 :   ffffffff810fef6e:       movb    $0x0, 0x940(%rax)
    0.00 :   ffffffff810fef75:       jmp     0xffffffff810fee2d <rcu_sched_clock_irq+0x1fd>
    0.00 :   ffffffff810fef7a:       movl    0xa4(%rdi), %eax
    0.00 :   ffffffff810fef80:       testl   %eax, %eax
    0.00 :   ffffffff810fef82:       je      0xffffffff810fecd0 <rcu_sched_clock_irq+0xa0>
    0.00 :   ffffffff810fef88:       jmp     0xffffffff810fecae <rcu_sched_clock_irq+0x7e>
    0.00 :   ffffffff810fef8d:       subq    %rcx, %rdx
    0.00 :   ffffffff810fef90:       js      0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810fef96:       cmpq    %rcx, %r8
    0.00 :   ffffffff810fef99:       jns     0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810fef9f:       movq    0x1108a1a(%rip), %rsi # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810fefa6:       movabsq $0x7fffffffffffffff, %rax # imm = 0x7FFFFFFFFFFFFFFF
    0.00 :   ffffffff810fefb0:       movq    0x18(%r15), %rdi
    0.00 :   ffffffff810fefb4:       leaq    (%rsi,%rax), %r10
    0.00 :   ffffffff810fefb8:       movq    0x121b641(%rip), %rax # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810fefbf:       testb   $0x3, %al
    0.00 :   ffffffff810fefc1:       je      0xffffffff810ff343 <rcu_sched_clock_irq+0x713>
    0.00 :   ffffffff810fefc7:       movq    0x20(%rdi), %rax
    0.00 :   ffffffff810fefcb:       andq    0x20(%r15), %rax
    0.00 :   ffffffff810fefcf:       je      0xffffffff810ff343 <rcu_sched_clock_irq+0x713>
    0.00 :   ffffffff810fefd5:       movq    %rcx, %rax
    0.00 :   ffffffff810fefd8:       lock
    0.00 :   ffffffff810fefd9:       cmpxchgq        %r10, 0x121b77f(%rip) # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810fefe1:       cmpq    %rax, %rcx
    0.00 :   ffffffff810fefe4:       jne     0xffffffff810ff343 <rcu_sched_clock_irq+0x713>
    0.00 :   ffffffff810fefea:       movzbl  0x15cf74f(%rip), %eax # 0xffffffff826ce740 <rcu_kick_kthreads>
    0.00 :   ffffffff810feff1:       movq    %r14, %r13
    0.00 :   ffffffff810feff4:       addq    %gs:0x7ef16a34(%rip), %r13
    0.00 :   ffffffff810feffc:       testb   %al, %al
    0.00 :   ffffffff810feffe:       je      0xffffffff810ff021 <rcu_sched_clock_irq+0x3f1>
    0.00 :   ffffffff810ff000:       movq    %r10, -0x98(%rbp)
    0.00 :   ffffffff810ff007:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff810ff00e:       callq   0xffffffff810f6bc0 <rcu_stall_kick_kthreads.part.0>
    0.00 :   ffffffff810ff013:       movq    -0x98(%rbp), %r10
    0.00 :   ffffffff810ff01a:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff810ff021:       movl    0x126792c(%rip), %r9d # 0xffffffff82366954 <rcu_cpu_stall_suppress_at_boot>
    0.00 :   ffffffff810ff028:       testl   %r9d, %r9d
    0.00 :   ffffffff810ff02b:       jne     0xffffffff810ffa28 <rcu_sched_clock_irq+0xdf8>
    0.00 :   ffffffff810ff031:       movl    0x126792d(%rip), %edx # 0xffffffff82366964 <rcu_cpu_stall_suppress>
    0.00 :   ffffffff810ff037:       testl   %edx, %edx
    0.00 :   ffffffff810ff039:       jne     0xffffffff810ff208 <rcu_sched_clock_irq+0x5d8>
    0.00 :   ffffffff810ff03f:       movq    0x121b732(%rip), %rsi # 0xffffffff8231a778 <rcu_state+0x1838>
    0.00 :   ffffffff810ff046:       movq    $-0x7df79870, %rdi # imm = 0x82086790
    0.00 :   ffffffff810ff04d:       movl    %edx, -0xa8(%rbp)
    0.00 :   ffffffff810ff053:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff810ff05a:       movq    %r8, -0x98(%rbp)
    0.00 :   ffffffff810ff061:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff066:       movq    0x18(%r13), %rdi
    0.00 :   ffffffff810ff06a:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff810ff06f:       movl    %gs:0x7ef23696(%rip), %edi
    0.00 :   ffffffff810ff076:       movq    %rax, -0x90(%rbp)
    0.00 :   ffffffff810ff07d:       callq   0xffffffff810f89e0 <print_cpu_stall_info>
    0.00 :   ffffffff810ff082:       movq    0x18(%r13), %rdi
    0.00 :   ffffffff810ff086:       movq    -0x90(%rbp), %rsi
    0.00 :   ffffffff810ff08d:       xorl    %r13d, %r13d
    0.00 :   ffffffff810ff090:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810ff095:       movq    -0x98(%rbp), %r8
    0.00 :   ffffffff810ff09c:       movq    -0xa0(%rbp), %r10
    0.00 :   ffffffff810ff0a3:       movl    0x12679b7(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ff0a9:       movl    -0xa8(%rbp), %edx
    0.00 :   ffffffff810ff0af:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff810ff0b6:       movq    %r10, -0x98(%rbp)
    0.00 :   ffffffff810ff0bd:       jmp     0xffffffff810ff0e9 <rcu_sched_clock_irq+0x4b9>
    0.00 :   ffffffff810ff0bf:       movslq  %eax, %rdx
    0.00 :   ffffffff810ff0c2:       movq    -0x7dedc720(,%rdx,8), %rcx
    0.00 :   ffffffff810ff0ca:       addq    %r14, %rcx
    0.00 :   ffffffff810ff0cd:       movq    %rcx, %rdx
    0.00 :   ffffffff810ff0d0:       movzbl  0xe8(%rcx), %ecx
    0.00 :   ffffffff810ff0d7:       andl    $0x1, %ecx
    0.00 :   ffffffff810ff0da:       je      0xffffffff810ff0e6 <rcu_sched_clock_irq+0x4b6>
    0.00 :   ffffffff810ff0dc:       movq    0xc0(%rdx), %rdx
    0.00 :   ffffffff810ff0e3:       addq    %rdx, %r13
    0.00 :   ffffffff810ff0e6:       leal    0x1(%rax), %edx
    0.00 :   ffffffff810ff0e9:       movslq  %edx, %rdx
    0.00 :   ffffffff810ff0ec:       movq    $-0x7dc99780, %rdi # imm = 0x82366880
    0.00 :   ffffffff810ff0f3:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ff0f8:       movl    0x1267962(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ff0fe:       cmpl    %esi, %eax
    0.00 :   ffffffff810ff100:       jb      0xffffffff810ff0bf <rcu_sched_clock_irq+0x48f>
    0.00 :   ffffffff810ff102:       movq    0x121b4f7(%rip), %rdx # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810ff109:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff810ff110:       movq    %r13, %rcx
    0.00 :   ffffffff810ff113:       movq    0x11088a6(%rip), %rsi # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ff11a:       movq    -0x98(%rbp), %r10
    0.00 :   ffffffff810ff121:       movq    $-0x7df79840, %rdi # imm = 0x820867C0
    0.00 :   ffffffff810ff128:       subq    %r8, %rsi
    0.00 :   ffffffff810ff12b:       movl    0x121b4aa(%rip), %r8d # 0xffffffff8231a5dc <rcu_state+0x169c>
    0.00 :   ffffffff810ff132:       movq    %r10, -0x90(%rbp)
    0.00 :   ffffffff810ff139:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff13e:       callq   0xffffffff810f6100 <rcu_check_gp_kthread_expired_fqs_timer>
    0.00 :   ffffffff810ff143:       callq   0xffffffff810f9100 <rcu_check_gp_kthread_starvation>
    0.00 :   ffffffff810ff148:       callq   0xffffffff810f8f10 <rcu_dump_cpu_stacks>
    0.00 :   ffffffff810ff14d:       movq    $-0x7dce70c0, %rdi # imm = 0x82318F40
    0.00 :   ffffffff810ff154:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff810ff159:       movq    0x1108860(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ff160:       movq    %rax, %rsi
    0.00 :   ffffffff810ff163:       movq    0x121b5f6(%rip), %rax # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810ff16a:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ff171:       cmpq    %rax, %rdx
    0.00 :   ffffffff810ff174:       js      0xffffffff810ff1b0 <rcu_sched_clock_irq+0x580>
    0.00 :   ffffffff810ff176:       movl    0x12677e4(%rip), %edx # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ff17c:       cmpl    $0x2, %edx
    0.00 :   ffffffff810ff17f:       jg      0xffffffff810ffba3 <rcu_sched_clock_irq+0xf73>
    0.00 :   ffffffff810ff185:       movl    $0x3, 0x12677d1(%rip) # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ff18f:       movl    $0x3, %edx
    0.00 :   ffffffff810ff194:       imull   $0xbb8, %edx, %edx # imm = 0xBB8
    0.00 :   ffffffff810ff19a:       movq    0x110881f(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ff1a1:       movslq  %edx, %rdx
    0.00 :   ffffffff810ff1a4:       leaq    0x3(%rax,%rdx), %rax
    0.00 :   ffffffff810ff1a9:       movq    %rax, 0x121b5b0(%rip) # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810ff1b0:       movq    $-0x7dce70c0, %rdi # imm = 0x82318F40
    0.00 :   ffffffff810ff1b7:       movq    %r10, -0x90(%rbp)
    0.00 :   ffffffff810ff1be:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810ff1c3:       movl    0x15cf553(%rip), %eax # 0xffffffff826ce71c <cpu_stall.20>
    0.00 :   ffffffff810ff1c9:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ff1d0:       incl    %eax
    0.00 :   ffffffff810ff1d2:       cmpl    0x12677a4(%rip), %eax # 0xffffffff8236697c <sysctl_max_rcu_stall_to_panic>
    0.00 :   ffffffff810ff1d8:       movl    %eax, 0x15cf53e(%rip) # 0xffffffff826ce71c <cpu_stall.20>
    0.00 :   ffffffff810ff1de:       jl      0xffffffff810ff1f0 <rcu_sched_clock_irq+0x5c0>
    0.00 :   ffffffff810ff1e0:       movl    0x1267799(%rip), %r8d # 0xffffffff82366980 <sysctl_panic_on_rcu_stall>
    0.00 :   ffffffff810ff1e7:       testl   %r8d, %r8d
    0.00 :   ffffffff810ff1ea:       jne     0xffffffff810ffc21 <rcu_sched_clock_irq+0xff1>
    0.00 :   ffffffff810ff1f0:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810ff1f9:       lock
    0.00 :   ffffffff810ff1fa:       orb     $0x8, (%rax)
    0.00 :   ffffffff810ff1fd:       andl    $0x7fffffff, %gs:0x7ef23500(%rip) # imm = 0x7FFFFFFF
    0.00 :   ffffffff810ff208:       movl    0x126775a(%rip), %eax # 0xffffffff82366968 <rcu_cpu_stall_ftrace_dump>
    0.00 :   ffffffff810ff20e:       testl   %eax, %eax
    0.00 :   ffffffff810ff210:       je      0xffffffff810ff241 <rcu_sched_clock_irq+0x611>
    0.00 :   ffffffff810ff212:       movl    0x15cf510(%rip), %eax # 0xffffffff826ce728 <___rfd_beenhere.23>
    0.00 :   ffffffff810ff218:       testl   %eax, %eax
    0.00 :   ffffffff810ff21a:       jne     0xffffffff810ff241 <rcu_sched_clock_irq+0x611>
    0.00 :   ffffffff810ff21c:       movl    $0x1, %eax
    0.00 :   ffffffff810ff221:       xchgl   %eax, 0x15cf501(%rip) # 0xffffffff826ce728 <___rfd_beenhere.23>
    0.00 :   ffffffff810ff227:       testl   %eax, %eax
    0.00 :   ffffffff810ff229:       jne     0xffffffff810ff241 <rcu_sched_clock_irq+0x611>
    0.00 :   ffffffff810ff22b:       movl    0x1267733(%rip), %eax # 0xffffffff82366964 <rcu_cpu_stall_suppress>
    0.00 :   ffffffff810ff231:       testl   %eax, %eax
    0.00 :   ffffffff810ff233:       jne     0xffffffff810ffb76 <rcu_sched_clock_irq+0xf46>
    0.00 :   ffffffff810ff239:       xorl    %edi, %edi
    0.00 :   ffffffff810ff23b:       movl    %edi, 0x1267723(%rip) # 0xffffffff82366964 <rcu_cpu_stall_suppress>
    0.00 :   ffffffff810ff241:       movq    0x121b518(%rip), %rax # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810ff248:       cmpq    %rax, %r10
    0.00 :   ffffffff810ff24b:       jne     0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810ff251:       movl    0x1267709(%rip), %eax # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ff257:       cmpl    $0x2, %eax
    0.00 :   ffffffff810ff25a:       jg      0xffffffff810ffa10 <rcu_sched_clock_irq+0xde0>
    0.00 :   ffffffff810ff260:       movl    $0x3, 0x12676f6(%rip) # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ff26a:       movl    $0x2328, %eax   # imm = 0x2328
    0.00 :   ffffffff810ff26f:       movq    0x110874a(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ff276:       leaq    0x3(%rdx,%rax), %rax
    0.00 :   ffffffff810ff27b:       movq    %rax, 0x121b4de(%rip) # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810ff282:       jmp     0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810ff287:       movq    %gs:0x7ef20b61(%rip), %rax
    0.00 :   ffffffff810ff28f:       cmpq    $0x1, %rax
    0.00 :   ffffffff810ff293:       jg      0xffffffff810ff2bb <rcu_sched_clock_irq+0x68b>
    0.00 :   ffffffff810ff295:       testq   %rax, %rax
    0.00 :   ffffffff810ff298:       jne     0xffffffff810ff2ae <rcu_sched_clock_irq+0x67e>
    0.00 :   ffffffff810ff29a:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810ff2a3:       testb   $0x2, 0x354(%rax)
    0.00 :   ffffffff810ff2aa:       jne     0xffffffff810ff2ae <rcu_sched_clock_irq+0x67e>
    0.00 :   ffffffff810ff2ac:       ud2
    0.00 :   ffffffff810ff2ae:       movq    %gs:0x7ef20b32(%rip), %rax
    0.00 :   ffffffff810ff2b6:       testq   %rax, %rax
    0.00 :   ffffffff810ff2b9:       je      0xffffffff810ff2c3 <rcu_sched_clock_irq+0x693>
    0.00 :   ffffffff810ff2bb:       testl   %ebx, %ebx
    0.00 :   ffffffff810ff2bd:       je      0xffffffff810ff67d <rcu_sched_clock_irq+0xa4d>
    0.00 :   ffffffff810ff2c3:       movb    $0x0, %gs:0x7ef24aca(%rip)
    0.00 :   ffffffff810ff2cb:       nopl    (%rax,%rax)
    0.00 :   ffffffff810ff2d0:       jmp     0xffffffff810fec7c <rcu_sched_clock_irq+0x4c>
    0.00 :   ffffffff810ff2d5:       movb    %gs:0x7ef249b5(%rip), %al
    0.00 :   ffffffff810ff2dc:       testb   %al, %al
    0.00 :   ffffffff810ff2de:       nop
    0.00 :   ffffffff810ff2e0:       jne     0xffffffff810ff326 <rcu_sched_clock_irq+0x6f6>
    0.00 :   ffffffff810ff2e2:       movl    0xa4(%rdi), %eax
    0.00 :   ffffffff810ff2e8:       testl   %eax, %eax
    0.00 :   ffffffff810ff2ea:       jne     0xffffffff810ff326 <rcu_sched_clock_irq+0x6f6>
    0.00 :   ffffffff810ff2ec:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810ff2f5:       movl    0xa58(%rax), %edx
    0.00 :   ffffffff810ff2fb:       testl   %edx, %edx
    0.00 :   ffffffff810ff2fd:       jne     0xffffffff810ff727 <rcu_sched_clock_irq+0xaf7>
    0.00 :   ffffffff810ff303:       movb    %gs:0x7ef24986(%rip), %dl
    0.00 :   ffffffff810ff30a:       testb   %dl, %dl
    0.00 :   ffffffff810ff30c:       je      0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810ff312:       movb    $0x0, %gs:0x7ef24976(%rip)
    0.00 :   ffffffff810ff31a:       movb    $0x0, 0xa5(%rax)
    0.00 :   ffffffff810ff321:       jmp     0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810ff326:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810ff32f:       movl    0xa58(%rax), %eax
    0.00 :   ffffffff810ff335:       testl   %eax, %eax
    0.00 :   ffffffff810ff337:       jne     0xffffffff810ff2ec <rcu_sched_clock_irq+0x6bc>
    0.00 :   ffffffff810ff339:       callq   0xffffffff810fdd50 <rcu_preempt_deferred_qs>
    0.00 :   ffffffff810ff33e:       jmp     0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810ff343:       movq    0x121b2b6(%rip), %rax # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810ff34a:       testb   $0x3, %al
    0.00 :   ffffffff810ff34c:       je      0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810ff352:       subq    $0x2, %rdx
    0.00 :   ffffffff810ff356:       js      0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810ff35c:       movq    %rcx, %rax
    0.00 :   ffffffff810ff35f:       lock
    0.00 :   ffffffff810ff360:       cmpxchgq        %r10, 0x121b3f8(%rip) # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810ff368:       cmpq    %rax, %rcx
    0.00 :   ffffffff810ff36b:       jne     0xffffffff810feda7 <rcu_sched_clock_irq+0x177>
    0.00 :   ffffffff810ff371:       movzbl  0x15cf3c8(%rip), %eax # 0xffffffff826ce740 <rcu_kick_kthreads>
    0.00 :   ffffffff810ff378:       testb   %al, %al
    0.00 :   ffffffff810ff37a:       je      0xffffffff810ff3ab <rcu_sched_clock_irq+0x77b>
    0.00 :   ffffffff810ff37c:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff810ff383:       movq    %r11, -0x98(%rbp)
    0.00 :   ffffffff810ff38a:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff810ff391:       callq   0xffffffff810f6bc0 <rcu_stall_kick_kthreads.part.0>
    0.00 :   ffffffff810ff396:       movq    -0xa0(%rbp), %r10
    0.00 :   ffffffff810ff39d:       movq    -0x98(%rbp), %r11
    0.00 :   ffffffff810ff3a4:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff810ff3ab:       movl    0x12675a3(%rip), %esi # 0xffffffff82366954 <rcu_cpu_stall_suppress_at_boot>
    0.00 :   ffffffff810ff3b1:       testl   %esi, %esi
    0.00 :   ffffffff810ff3b3:       jne     0xffffffff810ff9d4 <rcu_sched_clock_irq+0xda4>
    0.00 :   ffffffff810ff3b9:       movl    0x12675a5(%rip), %edx # 0xffffffff82366964 <rcu_cpu_stall_suppress>
    0.00 :   ffffffff810ff3bf:       testl   %edx, %edx
    0.00 :   ffffffff810ff3c1:       jne     0xffffffff810ff980 <rcu_sched_clock_irq+0xd50>
    0.00 :   ffffffff810ff3c7:       movq    0x121b3aa(%rip), %rsi # 0xffffffff8231a778 <rcu_state+0x1838>
    0.00 :   ffffffff810ff3ce:       movq    $-0x7df79810, %rdi # imm = 0x820867F0
    0.00 :   ffffffff810ff3d5:       movl    %edx, -0xa8(%rbp)
    0.00 :   ffffffff810ff3db:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff810ff3e2:       movq    %r11, -0x98(%rbp)
    0.00 :   ffffffff810ff3e9:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff810ff3f0:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff3f5:       movl    0x1267595(%rip), %eax # 0xffffffff82366990 <rcu_num_lvls>
    0.00 :   ffffffff810ff3fb:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff810ff402:       movq    -0x98(%rbp), %r11
    0.00 :   ffffffff810ff409:       movq    -0xa0(%rbp), %r10
    0.00 :   ffffffff810ff410:       movl    -0xa8(%rbp), %edx
    0.00 :   ffffffff810ff416:       decl    %eax
    0.00 :   ffffffff810ff418:       cltq
    0.00 :   ffffffff810ff41a:       movq    -0x7dce5a40(,%rax,8), %rcx
    0.00 :   ffffffff810ff422:       movslq  0x1267563(%rip), %rax # 0xffffffff8236698c <rcu_num_nodes>
    0.00 :   ffffffff810ff429:       leaq    (%rax,%rax,4), %rax
    0.00 :   ffffffff810ff42d:       shlq    $0x7, %rax
    0.00 :   ffffffff810ff431:       addq    $-0x7dce70c0, %rax # imm = 0x82318F40
    0.00 :   ffffffff810ff437:       cmpq    %rax, %rcx
    0.00 :   ffffffff810ff43a:       jae     0xffffffff810ffc14 <rcu_sched_clock_irq+0xfe4>
    0.00 :   ffffffff810ff440:       leaq    0x88(%rcx), %r9
    0.00 :   ffffffff810ff447:       movl    $0x0, -0x98(%rbp)
    0.00 :   ffffffff810ff451:       movq    %r12, -0xa0(%rbp)
    0.00 :   ffffffff810ff458:       movq    %r8, -0xa8(%rbp)
    0.00 :   ffffffff810ff45f:       movq    %r11, -0xb0(%rbp)
    0.00 :   ffffffff810ff466:       movq    %r10, -0xb8(%rbp)
    0.00 :   ffffffff810ff46d:       movl    %edx, -0xbc(%rbp)
    0.00 :   ffffffff810ff473:       movq    %r9, %r13
    0.00 :   ffffffff810ff476:       movl    %ebx, -0xc0(%rbp)
    0.00 :   ffffffff810ff47c:       movq    %r15, -0xc8(%rbp)
    0.00 :   ffffffff810ff483:       leaq    -0x88(%r13), %rbx
    0.00 :   ffffffff810ff48a:       movq    %rbx, %rdi
    0.00 :   ffffffff810ff48d:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff810ff492:       cmpq    $0x0, -0x68(%r13)
    0.00 :   ffffffff810ff497:       movq    %rax, -0x90(%rbp)
    0.00 :   ffffffff810ff49e:       jne     0xffffffff810ff742 <rcu_sched_clock_irq+0xb12>
    0.00 :   ffffffff810ff4a4:       leaq    -0x70(%rbp), %rdi
    0.00 :   ffffffff810ff4a8:       xorl    %eax, %eax
    0.00 :   ffffffff810ff4aa:       movl    $0x8, %ecx
    0.00 :   ffffffff810ff4af:       movq    $0x0, -0x7c(%rbp)
    0.00 :   ffffffff810ff4b7:       movl    $0x0, -0x74(%rbp)
    0.00 :   ffffffff810ff4be:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff810ff4c1:       movq    0x98(%rbx), %rax
    0.00 :   ffffffff810ff4c8:       testq   %rax, %rax
    0.00 :   ffffffff810ff4cb:       je      0xffffffff810ff9c0 <rcu_sched_clock_irq+0xd90>
    0.00 :   ffffffff810ff4d1:       movzbl  -0xf(%r13), %esi
    0.00 :   ffffffff810ff4d6:       movl    -0x14(%r13), %ecx
    0.00 :   ffffffff810ff4da:       movq    $-0x7df797e0, %rdi # imm = 0x82086820
    0.00 :   ffffffff810ff4e1:       movl    -0x18(%r13), %edx
    0.00 :   ffffffff810ff4e5:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff4ea:       movq    0x10(%r13), %rax
    0.00 :   ffffffff810ff4ee:       movq    0x8(%rax), %rax
    0.00 :   ffffffff810ff4f2:       movq    (%rax), %rax
    0.00 :   ffffffff810ff4f5:       cmpq    %rax, %r13
    0.00 :   ffffffff810ff4f8:       leaq    -0x100(%rax), %r15
    0.00 :   ffffffff810ff4ff:       je      0xffffffff810ffa56 <rcu_sched_clock_irq+0xe26>
    0.00 :   ffffffff810ff505:       movl    $0x1, %r12d
    0.00 :   ffffffff810ff50b:       movl    $0x1, %ecx
    0.00 :   ffffffff810ff510:       jmp     0xffffffff810ff52d <rcu_sched_clock_irq+0x8fd>
    0.00 :   ffffffff810ff512:       movq    0x100(%r15), %rax
    0.00 :   ffffffff810ff519:       leaq    0x1(%r12), %rdx
    0.00 :   ffffffff810ff51e:       cmpq    %rax, %r13
    0.00 :   ffffffff810ff521:       leaq    -0x100(%rax), %r15
    0.00 :   ffffffff810ff528:       je      0xffffffff810ff563 <rcu_sched_clock_irq+0x933>
    0.00 :   ffffffff810ff52a:       movq    %rdx, %r12
    0.00 :   ffffffff810ff52d:       leaq    0x9c8(%r15), %rdi
    0.00 :   ffffffff810ff534:       movl    %ecx, %eax
    0.00 :   ffffffff810ff536:       lock
    0.00 :   ffffffff810ff537:       xaddl   %eax, 0x9c8(%r15)
    0.00 :   ffffffff810ff53f:       testl   %eax, %eax
    0.00 :   ffffffff810ff541:       je      0xffffffff810ff72e <rcu_sched_clock_irq+0xafe>
    0.00 :   ffffffff810ff547:       leal    0x1(%rax), %edx
    0.00 :   ffffffff810ff54a:       orl     %eax, %edx
    0.00 :   ffffffff810ff54c:       js      0xffffffff810ff6c5 <rcu_sched_clock_irq+0xa95>
    0.00 :   ffffffff810ff552:       cmpq    $0x8, %r12
    0.00 :   ffffffff810ff556:       movq    %r15, -0x78(%rbp,%r12,8)
    0.00 :   ffffffff810ff55b:       jne     0xffffffff810ff512 <rcu_sched_clock_irq+0x8e2>
    0.00 :   ffffffff810ff55d:       movl    $0x8, %r12d
    0.00 :   ffffffff810ff563:       movq    -0x90(%rbp), %rsi
    0.00 :   ffffffff810ff56a:       movq    %rbx, %rdi
    0.00 :   ffffffff810ff56d:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810ff572:       leal    -0x1(%r12), %eax
    0.00 :   ffffffff810ff577:       leaq    -0x70(%rbp), %rcx
    0.00 :   ffffffff810ff57b:       movl    %r12d, -0x90(%rbp)
    0.00 :   ffffffff810ff582:       movslq  %eax, %rdx
    0.00 :   ffffffff810ff585:       movl    %eax, %eax
    0.00 :   ffffffff810ff587:       shlq    $0x3, %rdx
    0.00 :   ffffffff810ff58b:       shlq    $0x3, %rax
    0.00 :   ffffffff810ff58f:       leaq    (%rcx,%rdx), %rbx
    0.00 :   ffffffff810ff593:       leaq    -0x78(%rbp,%rdx), %rdx
    0.00 :   ffffffff810ff598:       subq    %rax, %rdx
    0.00 :   ffffffff810ff59b:       movq    %rdx, %r15
    0.00 :   ffffffff810ff59e:       jmp     0xffffffff810ff5e9 <rcu_sched_clock_irq+0x9b9>
    0.00 :   ffffffff810ff5a0:       movl    0x2e0(%r12), %esi
    0.00 :   ffffffff810ff5a8:       movq    $-0x7df7a888, %rdi # imm = 0x82085778
    0.00 :   ffffffff810ff5af:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff5b4:       leaq    0x9c8(%r12), %rdi
    0.00 :   ffffffff810ff5bc:       movl    $0xffffffff, %eax # imm = 0xFFFFFFFF
    0.00 :   ffffffff810ff5c1:       lock
    0.00 :   ffffffff810ff5c2:       xaddl   %eax, 0x9c8(%r12)
    0.00 :   ffffffff810ff5cb:       cmpl    $0x1, %eax
    0.00 :   ffffffff810ff5ce:       je      0xffffffff810ff6a6 <rcu_sched_clock_irq+0xa76>
    0.00 :   ffffffff810ff5d4:       testl   %eax, %eax
    0.00 :   ffffffff810ff5d6:       jle     0xffffffff810ff6b3 <rcu_sched_clock_irq+0xa83>
    0.00 :   ffffffff810ff5dc:       subq    $0x8, %rbx
    0.00 :   ffffffff810ff5e0:       cmpq    %r15, %rbx
    0.00 :   ffffffff810ff5e3:       je      0xffffffff810ff6d9 <rcu_sched_clock_irq+0xaa9>
    0.00 :   ffffffff810ff5e9:       movq    (%rbx), %r12
    0.00 :   ffffffff810ff5ec:       leaq    -0x7c(%rbp), %rdx
    0.00 :   ffffffff810ff5f0:       movq    $-0x7ef09e10, %rsi # imm = 0x810F61F0
    0.00 :   ffffffff810ff5f7:       movq    %r12, %rdi
    0.00 :   ffffffff810ff5fa:       callq   0xffffffff810abe60 <task_call_func>
    0.00 :   ffffffff810ff5ff:       testl   %eax, %eax
    0.00 :   ffffffff810ff601:       jne     0xffffffff810ff5a0 <rcu_sched_clock_irq+0x970>
    0.00 :   ffffffff810ff603:       movzbl  -0x74(%rbp), %edi
    0.00 :   ffffffff810ff607:       movzbl  -0x76(%rbp), %edx
    0.00 :   ffffffff810ff60b:       movzbl  -0x77(%rbp), %eax
    0.00 :   ffffffff810ff60f:       movzbl  -0x78(%rbp), %ecx
    0.00 :   ffffffff810ff613:       movl    0x2e0(%r12), %esi
    0.00 :   ffffffff810ff61b:       movzbl  -0x7df7a743(%rdi), %edi
    0.00 :   ffffffff810ff622:       movzbl  -0x7df7a740(%rdx), %r9d
    0.00 :   ffffffff810ff62a:       movzbl  -0x7df7a82f(%rcx), %ecx
    0.00 :   ffffffff810ff631:       movzbl  -0x7df7a73d(%rax), %r8d
    0.00 :   ffffffff810ff639:       movl    -0x7c(%rbp), %edx
    0.00 :   ffffffff810ff63c:       movl    %edi, (%rsp)
    0.00 :   ffffffff810ff63f:       movq    $-0x7df7a756, %rdi # imm = 0x820858AA
    0.00 :   ffffffff810ff646:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff64b:       jmp     0xffffffff810ff5b4 <rcu_sched_clock_irq+0x984>
    0.00 :   ffffffff810ff650:       testl   $0x7fffffff, %eax # imm = 0x7FFFFFFF
    0.00 :   ffffffff810ff655:       je      0xffffffff810fee5f <rcu_sched_clock_irq+0x22f>
    0.00 :   ffffffff810ff65b:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff810ff664:       movzbl  0xa98(%rdi), %eax
    0.00 :   ffffffff810ff66b:       testb   %al, %al
    0.00 :   ffffffff810ff66d:       jne     0xffffffff810fee5f <rcu_sched_clock_irq+0x22f>
    0.00 :   ffffffff810ff673:       callq   0xffffffff810f0230 <rcu_tasks_trace_qs_blkd>
    0.00 :   ffffffff810ff678:       jmp     0xffffffff810fee5f <rcu_sched_clock_irq+0x22f>
    0.00 :   ffffffff810ff67d:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810ff686:       lock
    0.00 :   ffffffff810ff687:       orb     $0x8, (%rax)
    0.00 :   ffffffff810ff68a:       andl    $0x7fffffff, %gs:0x7ef23073(%rip) # imm = 0x7FFFFFFF
    0.00 :   ffffffff810ff695:       jmp     0xffffffff810ff2c3 <rcu_sched_clock_irq+0x693>
    0.00 :   ffffffff810ff69a:       movb    $0x1, 0xa5(%rdi)
    0.00 :   ffffffff810ff6a1:       jmp     0xffffffff810fed2a <rcu_sched_clock_irq+0xfa>
    0.00 :   ffffffff810ff6a6:       movq    %r12, %rdi
    0.00 :   ffffffff810ff6a9:       callq   0xffffffff81066020 <__put_task_struct>
    0.00 :   ffffffff810ff6ae:       jmp     0xffffffff810ff5dc <rcu_sched_clock_irq+0x9ac>
    0.00 :   ffffffff810ff6b3:       movl    $0x3, %esi
    0.00 :   ffffffff810ff6b8:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff810ff6bd:       nopl    (%rax)
    0.00 :   ffffffff810ff6c0:       jmp     0xffffffff810ff5dc <rcu_sched_clock_irq+0x9ac>
    0.00 :   ffffffff810ff6c5:       movl    $0x1, %esi
    0.00 :   ffffffff810ff6ca:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff810ff6cf:       movl    $0x1, %ecx
    0.00 :   ffffffff810ff6d4:       jmp     0xffffffff810ff552 <rcu_sched_clock_irq+0x922>
    0.00 :   ffffffff810ff6d9:       movl    -0x90(%rbp), %r12d
    0.00 :   ffffffff810ff6e0:       addl    %r12d, -0x98(%rbp)
    0.00 :   ffffffff810ff6e7:       movq    $-0x7df90a4a, %rdi # imm = 0x8206F5B6
    0.00 :   ffffffff810ff6ee:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff6f3:       movslq  0x1267292(%rip), %rax # 0xffffffff8236698c <rcu_num_nodes>
    0.00 :   ffffffff810ff6fa:       leaq    0x1f8(%r13), %r9
    0.00 :   ffffffff810ff701:       leaq    0x280(%r13), %rdx
    0.00 :   ffffffff810ff708:       leaq    (%rax,%rax,4), %rax
    0.00 :   ffffffff810ff70c:       shlq    $0x7, %rax
    0.00 :   ffffffff810ff710:       addq    $-0x7dce70c0, %rax # imm = 0x82318F40
    0.00 :   ffffffff810ff716:       cmpq    %rax, %r9
    0.00 :   ffffffff810ff719:       jae     0xffffffff810ff7c8 <rcu_sched_clock_irq+0xb98>
    0.00 :   ffffffff810ff71f:       movq    %rdx, %r13
    0.00 :   ffffffff810ff722:       jmp     0xffffffff810ff483 <rcu_sched_clock_irq+0x853>
    0.00 :   ffffffff810ff727:       ud2
    0.00 :   ffffffff810ff729:       jmp     0xffffffff810fecd0 <rcu_sched_clock_irq+0xa0>
    0.00 :   ffffffff810ff72e:       movl    $0x2, %esi
    0.00 :   ffffffff810ff733:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff810ff738:       movl    $0x1, %ecx
    0.00 :   ffffffff810ff73d:       jmp     0xffffffff810ff552 <rcu_sched_clock_irq+0x922>
    0.00 :   ffffffff810ff742:       movzbl  -0xf(%r13), %edx
    0.00 :   ffffffff810ff747:       movl    0x1267243(%rip), %eax # 0xffffffff82366990 <rcu_num_lvls>
    0.00 :   ffffffff810ff74d:       decl    %eax
    0.00 :   ffffffff810ff74f:       cmpl    %eax, %edx
    0.00 :   ffffffff810ff751:       jne     0xffffffff810ffc08 <rcu_sched_clock_irq+0xfd8>
    0.00 :   ffffffff810ff757:       movslq  -0x18(%r13), %rdx
    0.00 :   ffffffff810ff75b:       movl    0x12672ff(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ff761:       movq    $-0x7dc99780, %rdi # imm = 0x82366880
    0.00 :   ffffffff810ff768:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ff76d:       cmpl    %eax, -0x14(%r13)
    0.00 :   ffffffff810ff771:       movl    %eax, %r12d
    0.00 :   ffffffff810ff774:       jl      0xffffffff810ff4a4 <rcu_sched_clock_irq+0x874>
    0.00 :   ffffffff810ff77a:       movl    -0x98(%rbp), %r15d
    0.00 :   ffffffff810ff781:       jmp     0xffffffff810ff7aa <rcu_sched_clock_irq+0xb7a>
    0.00 :   ffffffff810ff783:       movl    0x12672d7(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ff789:       leal    0x1(%r12), %edx
    0.00 :   ffffffff810ff78e:       movq    $-0x7dc99780, %rdi # imm = 0x82366880
    0.00 :   ffffffff810ff795:       movslq  %edx, %rdx
    0.00 :   ffffffff810ff798:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ff79d:       cmpl    -0x14(%r13), %eax
    0.00 :   ffffffff810ff7a1:       movl    %eax, %r12d
    0.00 :   ffffffff810ff7a4:       jg      0xffffffff810ff9b4 <rcu_sched_clock_irq+0xd84>
    0.00 :   ffffffff810ff7aa:       movl    %r12d, %eax
    0.00 :   ffffffff810ff7ad:       subl    -0x18(%r13), %eax
    0.00 :   ffffffff810ff7b1:       movq    -0x68(%r13), %rdx
    0.00 :   ffffffff810ff7b5:       btq     %rax, %rdx
    0.00 :   ffffffff810ff7b9:       jae     0xffffffff810ff783 <rcu_sched_clock_irq+0xb53>
    0.00 :   ffffffff810ff7bb:       movl    %r12d, %edi
    0.00 :   ffffffff810ff7be:       incl    %r15d
    0.00 :   ffffffff810ff7c1:       callq   0xffffffff810f89e0 <print_cpu_stall_info>
    0.00 :   ffffffff810ff7c6:       jmp     0xffffffff810ff783 <rcu_sched_clock_irq+0xb53>
    0.00 :   ffffffff810ff7c8:       movq    -0xa0(%rbp), %r12
    0.00 :   ffffffff810ff7cf:       movq    -0xa8(%rbp), %r8
    0.00 :   ffffffff810ff7d6:       movq    -0xb0(%rbp), %r11
    0.00 :   ffffffff810ff7dd:       movq    -0xb8(%rbp), %r10
    0.00 :   ffffffff810ff7e4:       movl    -0xbc(%rbp), %edx
    0.00 :   ffffffff810ff7ea:       movl    -0xc0(%rbp), %ebx
    0.00 :   ffffffff810ff7f0:       movq    -0xc8(%rbp), %r15
    0.00 :   ffffffff810ff7f7:       movl    0x1267263(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ff7fd:       xorl    %r13d, %r13d
    0.00 :   ffffffff810ff800:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff810ff807:       movq    %r11, -0xa0(%rbp)
    0.00 :   ffffffff810ff80e:       movq    %r10, -0xa8(%rbp)
    0.00 :   ffffffff810ff815:       jmp     0xffffffff810ff841 <rcu_sched_clock_irq+0xc11>
    0.00 :   ffffffff810ff817:       movslq  %eax, %rdx
    0.00 :   ffffffff810ff81a:       movq    -0x7dedc720(,%rdx,8), %rsi
    0.00 :   ffffffff810ff822:       addq    %r14, %rsi
    0.00 :   ffffffff810ff825:       movq    %rsi, %rdx
    0.00 :   ffffffff810ff828:       movzbl  0xe8(%rsi), %esi
    0.00 :   ffffffff810ff82f:       andl    $0x1, %esi
    0.00 :   ffffffff810ff832:       je      0xffffffff810ff83e <rcu_sched_clock_irq+0xc0e>
    0.00 :   ffffffff810ff834:       movq    0xc0(%rdx), %rdx
    0.00 :   ffffffff810ff83b:       addq    %rdx, %r13
    0.00 :   ffffffff810ff83e:       leal    0x1(%rax), %edx
    0.00 :   ffffffff810ff841:       movl    %ecx, %esi
    0.00 :   ffffffff810ff843:       movslq  %edx, %rdx
    0.00 :   ffffffff810ff846:       movq    $-0x7dc99780, %rdi # imm = 0x82366880
    0.00 :   ffffffff810ff84d:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ff852:       movl    0x1267208(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ff858:       cmpl    %ecx, %eax
    0.00 :   ffffffff810ff85a:       jb      0xffffffff810ff817 <rcu_sched_clock_irq+0xbe7>
    0.00 :   ffffffff810ff85c:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff810ff863:       movq    0x121ad96(%rip), %rcx # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810ff86a:       movq    $-0x7df797a0, %rdi # imm = 0x82086860
    0.00 :   ffffffff810ff871:       movq    0x1108148(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ff878:       movq    -0xa8(%rbp), %r10
    0.00 :   ffffffff810ff87f:       movl    0x121ad56(%rip), %r9d # 0xffffffff8231a5dc <rcu_state+0x169c>
    0.00 :   ffffffff810ff886:       movl    %gs:0x7ef22e7f(%rip), %esi
    0.00 :   ffffffff810ff88d:       subq    %r8, %rdx
    0.00 :   ffffffff810ff890:       movq    %r13, %r8
    0.00 :   ffffffff810ff893:       movq    %r10, -0x90(%rbp)
    0.00 :   ffffffff810ff89a:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff89f:       movl    -0x98(%rbp), %edx
    0.00 :   ffffffff810ff8a5:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ff8ac:       movq    -0xa0(%rbp), %r11
    0.00 :   ffffffff810ff8b3:       testl   %edx, %edx
    0.00 :   ffffffff810ff8b5:       jne     0xffffffff810ffa6a <rcu_sched_clock_irq+0xe3a>
    0.00 :   ffffffff810ff8bb:       movq    0x121ad3e(%rip), %rax # 0xffffffff8231a600 <rcu_state+0x16c0>
    0.00 :   ffffffff810ff8c2:       movq    %r10, -0x90(%rbp)
    0.00 :   ffffffff810ff8c9:       cmpq    %rax, %r11
    0.00 :   ffffffff810ff8cc:       je      0xffffffff810ffbc3 <rcu_sched_clock_irq+0xf93>
    0.00 :   ffffffff810ff8d2:       movq    $-0x7df79760, %rdi # imm = 0x820868A0
    0.00 :   ffffffff810ff8d9:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ff8de:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ff8e5:       movq    0x11080d4(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ff8ec:       movq    0x121ae6d(%rip), %rax # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810ff8f3:       cmpq    %rax, %rdx
    0.00 :   ffffffff810ff8f6:       js      0xffffffff810ff931 <rcu_sched_clock_irq+0xd01>
    0.00 :   ffffffff810ff8f8:       movl    0x1267062(%rip), %eax # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ff8fe:       cmpl    $0x2, %eax
    0.00 :   ffffffff810ff901:       jg      0xffffffff810ffb84 <rcu_sched_clock_irq+0xf54>
    0.00 :   ffffffff810ff907:       movl    $0x3, 0x126704f(%rip) # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ff911:       movl    $0x3, %eax
    0.00 :   ffffffff810ff916:       imull   $0xbb8, %eax, %eax # imm = 0xBB8
    0.00 :   ffffffff810ff91c:       movq    0x110809d(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ff923:       cltq
    0.00 :   ffffffff810ff925:       leaq    0x3(%rdx,%rax), %rax
    0.00 :   ffffffff810ff92a:       movq    %rax, 0x121ae2f(%rip) # 0xffffffff8231a760 <rcu_state+0x1820>
    0.00 :   ffffffff810ff931:       movq    %r10, -0x90(%rbp)
    0.00 :   ffffffff810ff938:       callq   0xffffffff810f6100 <rcu_check_gp_kthread_expired_fqs_timer>
    0.00 :   ffffffff810ff93d:       callq   0xffffffff810f9100 <rcu_check_gp_kthread_starvation>
    0.00 :   ffffffff810ff942:       movl    0x15cedd4(%rip), %eax # 0xffffffff826ce71c <cpu_stall.20>
    0.00 :   ffffffff810ff948:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ff94f:       incl    %eax
    0.00 :   ffffffff810ff951:       cmpl    0x1267025(%rip), %eax # 0xffffffff8236697c <sysctl_max_rcu_stall_to_panic>
    0.00 :   ffffffff810ff957:       movl    %eax, 0x15cedbf(%rip) # 0xffffffff826ce71c <cpu_stall.20>
    0.00 :   ffffffff810ff95d:       jl      0xffffffff810ff96d <rcu_sched_clock_irq+0xd3d>
    0.00 :   ffffffff810ff95f:       movl    0x126701b(%rip), %eax # 0xffffffff82366980 <sysctl_panic_on_rcu_stall>
    0.00 :   ffffffff810ff965:       testl   %eax, %eax
    0.00 :   ffffffff810ff967:       jne     0xffffffff810ffc21 <rcu_sched_clock_irq+0xff1>
    0.00 :   ffffffff810ff96d:       movq    %r10, -0x90(%rbp)
    0.00 :   ffffffff810ff974:       callq   0xffffffff810f6d50 <rcu_force_quiescent_state>
    0.00 :   ffffffff810ff979:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ff980:       movl    0x1266fe2(%rip), %eax # 0xffffffff82366968 <rcu_cpu_stall_ftrace_dump>
    0.00 :   ffffffff810ff986:       testl   %eax, %eax
    0.00 :   ffffffff810ff988:       je      0xffffffff810ff241 <rcu_sched_clock_irq+0x611>
    0.00 :   ffffffff810ff98e:       movl    0x15ced90(%rip), %eax # 0xffffffff826ce724 <___rfd_beenhere.22>
    0.00 :   ffffffff810ff994:       testl   %eax, %eax
    0.00 :   ffffffff810ff996:       jne     0xffffffff810ff241 <rcu_sched_clock_irq+0x611>
    0.00 :   ffffffff810ff99c:       movl    $0x1, %eax
    0.00 :   ffffffff810ff9a1:       xchgl   %eax, 0x15ced7d(%rip) # 0xffffffff826ce724 <___rfd_beenhere.22>
    0.00 :   ffffffff810ff9a7:       testl   %eax, %eax
    0.00 :   ffffffff810ff9a9:       jne     0xffffffff810ff241 <rcu_sched_clock_irq+0x611>
    0.00 :   ffffffff810ff9af:       jmp     0xffffffff810ff22b <rcu_sched_clock_irq+0x5fb>
    0.00 :   ffffffff810ff9b4:       movl    %r15d, -0x98(%rbp)
    0.00 :   ffffffff810ff9bb:       jmp     0xffffffff810ff4a4 <rcu_sched_clock_irq+0x874>
    0.00 :   ffffffff810ff9c0:       movq    -0x90(%rbp), %rsi
    0.00 :   ffffffff810ff9c7:       movq    %rbx, %rdi
    0.00 :   ffffffff810ff9ca:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810ff9cf:       jmp     0xffffffff810ff6f3 <rcu_sched_clock_irq+0xac3>
    0.00 :   ffffffff810ff9d4:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff810ff9db:       movq    %r11, -0x98(%rbp)
    0.00 :   ffffffff810ff9e2:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff810ff9e9:       callq   0xffffffff810f0130 <rcu_inkernel_boot_has_ended>
    0.00 :   ffffffff810ff9ee:       testb   %al, %al
    0.00 :   ffffffff810ff9f0:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff810ff9f7:       movq    -0x98(%rbp), %r11
    0.00 :   ffffffff810ff9fe:       movq    -0xa0(%rbp), %r10
    0.00 :   ffffffff810ffa05:       jne     0xffffffff810ff3b9 <rcu_sched_clock_irq+0x789>
    0.00 :   ffffffff810ffa0b:       jmp     0xffffffff810ff980 <rcu_sched_clock_irq+0xd50>
    0.00 :   ffffffff810ffa10:       cmpl    $0x12c, %eax    # imm = 0x12C
    0.00 :   ffffffff810ffa15:       jg      0xffffffff810ffb62 <rcu_sched_clock_irq+0xf32>
    0.00 :   ffffffff810ffa1b:       imull   $0xbb8, %eax, %eax # imm = 0xBB8
    0.00 :   ffffffff810ffa21:       cltq
    0.00 :   ffffffff810ffa23:       jmp     0xffffffff810ff26f <rcu_sched_clock_irq+0x63f>
    0.00 :   ffffffff810ffa28:       movq    %r10, -0x98(%rbp)
    0.00 :   ffffffff810ffa2f:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff810ffa36:       callq   0xffffffff810f0130 <rcu_inkernel_boot_has_ended>
    0.00 :   ffffffff810ffa3b:       testb   %al, %al
    0.00 :   ffffffff810ffa3d:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff810ffa44:       movq    -0x98(%rbp), %r10
    0.00 :   ffffffff810ffa4b:       jne     0xffffffff810ff031 <rcu_sched_clock_irq+0x401>
    0.00 :   ffffffff810ffa51:       jmp     0xffffffff810ff208 <rcu_sched_clock_irq+0x5d8>
    0.00 :   ffffffff810ffa56:       movq    -0x90(%rbp), %rsi
    0.00 :   ffffffff810ffa5d:       movq    %rbx, %rdi
    0.00 :   ffffffff810ffa60:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810ffa65:       jmp     0xffffffff810ff6e7 <rcu_sched_clock_irq+0xab7>
    0.00 :   ffffffff810ffa6a:       callq   0xffffffff810f8f10 <rcu_dump_cpu_stacks>
    0.00 :   ffffffff810ffa6f:       movl    0x1266f1b(%rip), %eax # 0xffffffff82366990 <rcu_num_lvls>
    0.00 :   ffffffff810ffa75:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ffa7c:       decl    %eax
    0.00 :   ffffffff810ffa7e:       cltq
    0.00 :   ffffffff810ffa80:       movq    -0x7dce5a40(,%rax,8), %rdx
    0.00 :   ffffffff810ffa88:       movslq  0x1266efd(%rip), %rax # 0xffffffff8236698c <rcu_num_nodes>
    0.00 :   ffffffff810ffa8f:       leaq    0x88(%rdx), %r13
    0.00 :   ffffffff810ffa96:       leaq    (%rax,%rax,4), %rax
    0.00 :   ffffffff810ffa9a:       shlq    $0x7, %rax
    0.00 :   ffffffff810ffa9e:       addq    $-0x7dce70c0, %rax # imm = 0x82318F40
    0.00 :   ffffffff810ffaa4:       cmpq    %rax, %rdx
    0.00 :   ffffffff810ffaa7:       jae     0xffffffff810ff8e5 <rcu_sched_clock_irq+0xcb5>
    0.00 :   ffffffff810ffaad:       movq    %r12, -0x90(%rbp)
    0.00 :   ffffffff810ffab4:       movq    %r10, -0x98(%rbp)
    0.00 :   ffffffff810ffabb:       movq    %rdx, %r12
    0.00 :   ffffffff810ffabe:       movl    %ebx, -0xa0(%rbp)
    0.00 :   ffffffff810ffac4:       movq    %r12, %rdi
    0.00 :   ffffffff810ffac7:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff810ffacc:       movq    %rax, %r14
    0.00 :   ffffffff810ffacf:       movq    0x98(%r12), %rax
    0.00 :   ffffffff810ffad7:       testq   %rax, %rax
    0.00 :   ffffffff810ffada:       je      0xffffffff810ffb12 <rcu_sched_clock_irq+0xee2>
    0.00 :   ffffffff810ffadc:       movq    0x98(%r12), %rax
    0.00 :   ffffffff810ffae4:       movq    0x8(%rax), %rax
    0.00 :   ffffffff810ffae8:       movq    (%rax), %rdx
    0.00 :   ffffffff810ffaeb:       cmpq    %rdx, %r13
    0.00 :   ffffffff810ffaee:       leaq    -0x100(%rdx), %rbx
    0.00 :   ffffffff810ffaf5:       je      0xffffffff810ffb12 <rcu_sched_clock_irq+0xee2>
    0.00 :   ffffffff810ffaf7:       movq    %rbx, %rdi
    0.00 :   ffffffff810ffafa:       callq   0xffffffff810a6a30 <sched_show_task>
    0.00 :   ffffffff810ffaff:       movq    0x100(%rbx), %rdx
    0.00 :   ffffffff810ffb06:       cmpq    %rdx, %r13
    0.00 :   ffffffff810ffb09:       leaq    -0x100(%rdx), %rbx
    0.00 :   ffffffff810ffb10:       jne     0xffffffff810ffaf7 <rcu_sched_clock_irq+0xec7>
    0.00 :   ffffffff810ffb12:       movq    %r12, %rdi
    0.00 :   ffffffff810ffb15:       movq    %r14, %rsi
    0.00 :   ffffffff810ffb18:       addq    $0x280, %r12    # imm = 0x280
    0.00 :   ffffffff810ffb1f:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810ffb24:       movslq  0x1266e61(%rip), %rax # 0xffffffff8236698c <rcu_num_nodes>
    0.00 :   ffffffff810ffb2b:       addq    $0x280, %r13    # imm = 0x280
    0.00 :   ffffffff810ffb32:       leaq    (%rax,%rax,4), %rax
    0.00 :   ffffffff810ffb36:       shlq    $0x7, %rax
    0.00 :   ffffffff810ffb3a:       addq    $-0x7dce70c0, %rax # imm = 0x82318F40
    0.00 :   ffffffff810ffb40:       cmpq    %rax, %r12
    0.00 :   ffffffff810ffb43:       jb      0xffffffff810ffac4 <rcu_sched_clock_irq+0xe94>
    0.00 :   ffffffff810ffb49:       movq    -0x90(%rbp), %r12
    0.00 :   ffffffff810ffb50:       movq    -0x98(%rbp), %r10
    0.00 :   ffffffff810ffb57:       movl    -0xa0(%rbp), %ebx
    0.00 :   ffffffff810ffb5d:       jmp     0xffffffff810ff8e5 <rcu_sched_clock_irq+0xcb5>
    0.00 :   ffffffff810ffb62:       movl    $0x12c, 0x1266df4(%rip) # imm = 0x12C
         : 788              # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ffb6c:       movl    $0xdbba0, %eax  # imm = 0xDBBA0
    0.00 :   ffffffff810ffb71:       jmp     0xffffffff810ff26f <rcu_sched_clock_irq+0x63f>
    0.00 :   ffffffff810ffb76:       cmpl    $0x3, %eax
    0.00 :   ffffffff810ffb79:       jne     0xffffffff810ff241 <rcu_sched_clock_irq+0x611>
    0.00 :   ffffffff810ffb7f:       jmp     0xffffffff810ff239 <rcu_sched_clock_irq+0x609>
    0.00 :   ffffffff810ffb84:       cmpl    $0x12c, %eax    # imm = 0x12C
    0.00 :   ffffffff810ffb89:       jle     0xffffffff810ff916 <rcu_sched_clock_irq+0xce6>
    0.00 :   ffffffff810ffb8f:       movl    $0x12c, 0x1266dc7(%rip) # imm = 0x12C
         : 797              # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ffb99:       movl    $0x12c, %eax    # imm = 0x12C
    0.00 :   ffffffff810ffb9e:       jmp     0xffffffff810ff916 <rcu_sched_clock_irq+0xce6>
    0.00 :   ffffffff810ffba3:       cmpl    $0x12c, %edx    # imm = 0x12C
    0.00 :   ffffffff810ffba9:       jle     0xffffffff810ff194 <rcu_sched_clock_irq+0x564>
    0.00 :   ffffffff810ffbaf:       movl    $0x12c, 0x1266da7(%rip) # imm = 0x12C
         : 803              # 0xffffffff82366960 <rcu_cpu_stall_timeout>
    0.00 :   ffffffff810ffbb9:       movl    $0x12c, %edx    # imm = 0x12C
    0.00 :   ffffffff810ffbbe:       jmp     0xffffffff810ff194 <rcu_sched_clock_irq+0x564>
    0.00 :   ffffffff810ffbc3:       movq    0x1107df6(%rip), %rcx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810ffbca:       movq    0x121ab7f(%rip), %r8 # 0xffffffff8231a750 <rcu_state+0x1810>
    0.00 :   ffffffff810ffbd1:       movq    $-0x7df79728, %rdi # imm = 0x820868D8
    0.00 :   ffffffff810ffbd8:       movq    0x1219381(%rip), %rax # 0xffffffff82318f60 <rcu_state+0x20>
    0.00 :   ffffffff810ffbdf:       movq    0x121ab92(%rip), %rsi # 0xffffffff8231a778 <rcu_state+0x1838>
    0.00 :   ffffffff810ffbe6:       movq    0x12192eb(%rip), %r9 # 0xffffffff82318ed8 <jiffies_till_next_fqs>
    0.00 :   ffffffff810ffbed:       movq    %rcx, %rdx
    0.00 :   ffffffff810ffbf0:       subq    %r8, %rdx
    0.00 :   ffffffff810ffbf3:       movq    %rax, (%rsp)
    0.00 :   ffffffff810ffbf7:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810ffbfc:       movq    -0x90(%rbp), %r10
    0.00 :   ffffffff810ffc03:       jmp     0xffffffff810ff8e5 <rcu_sched_clock_irq+0xcb5>
    0.00 :   ffffffff810ffc08:       ud2
    0.00 :   ffffffff810ffc0a:       jmp     0xffffffff810ff757 <rcu_sched_clock_irq+0xb27>
    0.00 :   ffffffff810ffc0f:       callq   0xffffffff81b6af40 <__stack_chk_fail>
    0.00 :   ffffffff810ffc14:       xorl    %ecx, %ecx
    0.00 :   ffffffff810ffc16:       movl    %ecx, -0x98(%rbp)
    0.00 :   ffffffff810ffc1c:       jmp     0xffffffff810ff7f7 <rcu_sched_clock_irq+0xbc7>
    0.00 :   ffffffff810ffc21:       movq    $-0x7df7a85c, %rdi # imm = 0x820857A4
    0.00 :   ffffffff810ffc28:       callq   0xffffffff8106a2b0 <panic>
 Percent |	Source code & Disassembly of elf for cycles (11 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b78180 <__x86_indirect_thunk_rax>:
         : 5                ; __x86_indirect_thunk_array():
   41.08 :   ffffffff81b78180:       callq   0xffffffff81b78186 <__x86_indirect_thunk_rax+0x6>
    0.00 :   ffffffff81b78185:       int3
   40.62 :   ffffffff81b78186:       movq    %rax, (%rsp)
   18.30 :   ffffffff81b7818a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7818f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7819a:       nopw    (%rax,%rax)
         :
         : 13               ffffffff81b781a0 <__x86_indirect_thunk_rcx>:
         : 14               ; __x86_indirect_thunk_rcx():
    0.00 :   ffffffff81b781a0:       callq   0xffffffff81b781a6 <__x86_indirect_thunk_rcx+0x6>
    0.00 :   ffffffff81b781a5:       int3
    0.00 :   ffffffff81b781a6:       movq    %rcx, (%rsp)
    0.00 :   ffffffff81b781aa:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b781af:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b781ba:       nopw    (%rax,%rax)
         :
         : 22               ffffffff81b781c0 <__x86_indirect_thunk_rdx>:
         : 23               ; __x86_indirect_thunk_rdx():
    0.00 :   ffffffff81b781c0:       callq   0xffffffff81b781c6 <__x86_indirect_thunk_rdx+0x6>
    0.00 :   ffffffff81b781c5:       int3
    0.00 :   ffffffff81b781c6:       movq    %rdx, (%rsp)
    0.00 :   ffffffff81b781ca:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b781cf:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b781da:       nopw    (%rax,%rax)
         :
         : 31               ffffffff81b781e0 <__x86_indirect_thunk_rbx>:
         : 32               ; __x86_indirect_thunk_rbx():
    0.00 :   ffffffff81b781e0:       callq   0xffffffff81b781e6 <__x86_indirect_thunk_rbx+0x6>
    0.00 :   ffffffff81b781e5:       int3
    0.00 :   ffffffff81b781e6:       movq    %rbx, (%rsp)
    0.00 :   ffffffff81b781ea:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b781ef:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b781fa:       nopw    (%rax,%rax)
         :
         : 40               ffffffff81b78200 <__x86_indirect_thunk_rsp>:
         : 41               ; __x86_indirect_thunk_rsp():
    0.00 :   ffffffff81b78200:       callq   0xffffffff81b78206 <__x86_indirect_thunk_rsp+0x6>
    0.00 :   ffffffff81b78205:       int3
    0.00 :   ffffffff81b78206:       movq    %rsp, (%rsp)
    0.00 :   ffffffff81b7820a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7820f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7821a:       nopw    (%rax,%rax)
         :
         : 49               ffffffff81b78220 <__x86_indirect_thunk_rbp>:
         : 50               ; __x86_indirect_thunk_rbp():
    0.00 :   ffffffff81b78220:       callq   0xffffffff81b78226 <__x86_indirect_thunk_rbp+0x6>
    0.00 :   ffffffff81b78225:       int3
    0.00 :   ffffffff81b78226:       movq    %rbp, (%rsp)
    0.00 :   ffffffff81b7822a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7822f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7823a:       nopw    (%rax,%rax)
         :
         : 58               ffffffff81b78240 <__x86_indirect_thunk_rsi>:
         : 59               ; __x86_indirect_thunk_rsi():
    0.00 :   ffffffff81b78240:       callq   0xffffffff81b78246 <__x86_indirect_thunk_rsi+0x6>
    0.00 :   ffffffff81b78245:       int3
    0.00 :   ffffffff81b78246:       movq    %rsi, (%rsp)
    0.00 :   ffffffff81b7824a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7824f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7825a:       nopw    (%rax,%rax)
         :
         : 67               ffffffff81b78260 <__x86_indirect_thunk_rdi>:
         : 68               ; __x86_indirect_thunk_rdi():
    0.00 :   ffffffff81b78260:       callq   0xffffffff81b78266 <__x86_indirect_thunk_rdi+0x6>
    0.00 :   ffffffff81b78265:       int3
    0.00 :   ffffffff81b78266:       movq    %rdi, (%rsp)
    0.00 :   ffffffff81b7826a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7826f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7827a:       nopw    (%rax,%rax)
         :
         : 76               ffffffff81b78280 <__x86_indirect_thunk_r8>:
         : 77               ; __x86_indirect_thunk_r8():
    0.00 :   ffffffff81b78280:       callq   0xffffffff81b78286 <__x86_indirect_thunk_r8+0x6>
    0.00 :   ffffffff81b78285:       int3
    0.00 :   ffffffff81b78286:       movq    %r8, (%rsp)
    0.00 :   ffffffff81b7828a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7828f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7829a:       nopw    (%rax,%rax)
         :
         : 85               ffffffff81b782a0 <__x86_indirect_thunk_r9>:
         : 86               ; __x86_indirect_thunk_r9():
    0.00 :   ffffffff81b782a0:       callq   0xffffffff81b782a6 <__x86_indirect_thunk_r9+0x6>
    0.00 :   ffffffff81b782a5:       int3
    0.00 :   ffffffff81b782a6:       movq    %r9, (%rsp)
    0.00 :   ffffffff81b782aa:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b782af:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b782ba:       nopw    (%rax,%rax)
         :
         : 94               ffffffff81b782c0 <__x86_indirect_thunk_r10>:
         : 95               ; __x86_indirect_thunk_r10():
    0.00 :   ffffffff81b782c0:       callq   0xffffffff81b782c6 <__x86_indirect_thunk_r10+0x6>
    0.00 :   ffffffff81b782c5:       int3
    0.00 :   ffffffff81b782c6:       movq    %r10, (%rsp)
    0.00 :   ffffffff81b782ca:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b782cf:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b782da:       nopw    (%rax,%rax)
         :
         : 103              ffffffff81b782e0 <__x86_indirect_thunk_r11>:
         : 104              ; __x86_indirect_thunk_r11():
    0.00 :   ffffffff81b782e0:       callq   0xffffffff81b782e6 <__x86_indirect_thunk_r11+0x6>
    0.00 :   ffffffff81b782e5:       int3
    0.00 :   ffffffff81b782e6:       movq    %r11, (%rsp)
    0.00 :   ffffffff81b782ea:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b782ef:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b782fa:       nopw    (%rax,%rax)
         :
         : 112              ffffffff81b78300 <__x86_indirect_thunk_r12>:
         : 113              ; __x86_indirect_thunk_r12():
    0.00 :   ffffffff81b78300:       callq   0xffffffff81b78306 <__x86_indirect_thunk_r12+0x6>
    0.00 :   ffffffff81b78305:       int3
    0.00 :   ffffffff81b78306:       movq    %r12, (%rsp)
    0.00 :   ffffffff81b7830a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7830f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7831a:       nopw    (%rax,%rax)
         :
         : 121              ffffffff81b78320 <__x86_indirect_thunk_r13>:
         : 122              ; __x86_indirect_thunk_r13():
    0.00 :   ffffffff81b78320:       callq   0xffffffff81b78326 <__x86_indirect_thunk_r13+0x6>
    0.00 :   ffffffff81b78325:       int3
    0.00 :   ffffffff81b78326:       movq    %r13, (%rsp)
    0.00 :   ffffffff81b7832a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7832f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7833a:       nopw    (%rax,%rax)
         :
         : 130              ffffffff81b78340 <__x86_indirect_thunk_r14>:
         : 131              ; __x86_indirect_thunk_r14():
    0.00 :   ffffffff81b78340:       callq   0xffffffff81b78346 <__x86_indirect_thunk_r14+0x6>
    0.00 :   ffffffff81b78345:       int3
    0.00 :   ffffffff81b78346:       movq    %r14, (%rsp)
    0.00 :   ffffffff81b7834a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7834f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7835a:       nopw    (%rax,%rax)
         :
         : 139              ffffffff81b78360 <__x86_indirect_thunk_r15>:
         : 140              ; __x86_indirect_thunk_r15():
    0.00 :   ffffffff81b78360:       callq   0xffffffff81b78366 <__x86_indirect_thunk_r15+0x6>
    0.00 :   ffffffff81b78365:       int3
    0.00 :   ffffffff81b78366:       movq    %r15, (%rsp)
    0.00 :   ffffffff81b7836a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7836f:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81b7837a:       nopw    (%rax,%rax)
 Percent |	Source code & Disassembly of elf for cycles (11 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81122a20 <run_posix_cpu_timers>:
         : 5                ; run_posix_cpu_timers():
    0.00 :   ffffffff81122a20:       pushq   %rbp
    0.00 :   ffffffff81122a21:       movq    %rsp, %rbp
    0.00 :   ffffffff81122a24:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff81122a2d:       movl    0x8e8(%rdi), %edx
    0.00 :   ffffffff81122a33:       testl   %edx, %edx
    0.00 :   ffffffff81122a35:       je      0xffffffff81122a4d <run_posix_cpu_timers+0x2d>
    0.00 :   ffffffff81122a37:       popq    %rbp
    0.00 :   ffffffff81122a38:       xorl    %eax, %eax
   21.49 :   ffffffff81122a3a:       xorl    %edx, %edx
    7.64 :   ffffffff81122a3c:       xorl    %ecx, %ecx
    8.42 :   ffffffff81122a3e:       xorl    %esi, %esi
   11.14 :   ffffffff81122a40:       xorl    %edi, %edi
   28.78 :   ffffffff81122a42:       xorl    %r8d, %r8d
    5.39 :   ffffffff81122a45:       xorl    %r9d, %r9d
    0.00 :   ffffffff81122a48:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81122a4d:       movq    0xb38(%rdi), %rdx
    0.00 :   ffffffff81122a54:       movq    0xb50(%rdi), %rcx
    8.82 :   ffffffff81122a5b:       movq    0xb68(%rdi), %rsi
    0.00 :   ffffffff81122a62:       movq    %rdx, %rax
    0.00 :   ffffffff81122a65:       andq    %rcx, %rax
    0.00 :   ffffffff81122a68:       andq    %rsi, %rax
    0.00 :   ffffffff81122a6b:       incq    %rax
    0.00 :   ffffffff81122a6e:       je      0xffffffff81122a97 <run_posix_cpu_timers+0x77>
    0.00 :   ffffffff81122a70:       movq    0x3a8(%rdi), %rax
    0.00 :   ffffffff81122a77:       movq    0x880(%rdi), %r8
    0.00 :   ffffffff81122a7e:       movq    0x448(%rdi), %r9
    0.00 :   ffffffff81122a85:       addq    %rax, %r8
    0.00 :   ffffffff81122a88:       cmpq    %rdx, %r8
    0.00 :   ffffffff81122a8b:       jae     0xffffffff81122b00 <run_posix_cpu_timers+0xe0>
    0.00 :   ffffffff81122a8d:       cmpq    %rcx, %rax
    0.00 :   ffffffff81122a90:       jae     0xffffffff81122b00 <run_posix_cpu_timers+0xe0>
    0.00 :   ffffffff81122a92:       cmpq    %rsi, %r9
    0.00 :   ffffffff81122a95:       jae     0xffffffff81122b00 <run_posix_cpu_timers+0xe0>
    0.00 :   ffffffff81122a97:       movq    0x8f8(%rdi), %rax
    0.00 :   ffffffff81122a9e:       movl    0x258(%rax), %edx
    0.00 :   ffffffff81122aa4:       testl   %edx, %edx
    0.00 :   ffffffff81122aa6:       je      0xffffffff81122ae5 <run_posix_cpu_timers+0xc5>
    0.00 :   ffffffff81122aa8:       movl    0x25c(%rax), %edx
    0.00 :   ffffffff81122aae:       testl   %edx, %edx
    0.00 :   ffffffff81122ab0:       jne     0xffffffff81122ae5 <run_posix_cpu_timers+0xc5>
    0.00 :   ffffffff81122ab2:       movq    0x150(%rax), %rcx
    0.00 :   ffffffff81122ab9:       movq    0x158(%rax), %rdx
    0.00 :   ffffffff81122ac0:       movq    0x160(%rax), %rsi
    0.00 :   ffffffff81122ac7:       addq    %rcx, %rdx
    0.00 :   ffffffff81122aca:       cmpq    0x210(%rax), %rdx
    0.00 :   ffffffff81122ad1:       jae     0xffffffff81122b00 <run_posix_cpu_timers+0xe0>
    0.00 :   ffffffff81122ad3:       cmpq    0x228(%rax), %rcx
    0.00 :   ffffffff81122ada:       jae     0xffffffff81122b00 <run_posix_cpu_timers+0xe0>
    0.00 :   ffffffff81122adc:       cmpq    0x240(%rax), %rsi
    0.00 :   ffffffff81122ae3:       jae     0xffffffff81122b00 <run_posix_cpu_timers+0xe0>
    8.33 :   ffffffff81122ae5:       movl    0xe8(%rdi), %eax
    0.00 :   ffffffff81122aeb:       testl   %eax, %eax
    0.00 :   ffffffff81122aed:       jns     0xffffffff81122a37 <run_posix_cpu_timers+0x17>
    0.00 :   ffffffff81122af3:       testb   $0x8, 0x64c(%rdi)
    0.00 :   ffffffff81122afa:       je      0xffffffff81122a37 <run_posix_cpu_timers+0x17>
    0.00 :   ffffffff81122b00:       leaq    0x8b8(%rdi), %rsi
    0.00 :   ffffffff81122b07:       movl    $0x1, 0x8e8(%rdi)
    0.00 :   ffffffff81122b11:       movl    $0x1, %edx
    0.00 :   ffffffff81122b16:       callq   0xffffffff81094920 <task_work_add>
    0.00 :   ffffffff81122b1b:       popq    %rbp
    0.00 :   ffffffff81122b1c:       xorl    %eax, %eax
    0.00 :   ffffffff81122b1e:       xorl    %edx, %edx
    0.00 :   ffffffff81122b20:       xorl    %ecx, %ecx
    0.00 :   ffffffff81122b22:       xorl    %esi, %esi
    0.00 :   ffffffff81122b24:       xorl    %edi, %edi
    0.00 :   ffffffff81122b26:       xorl    %r8d, %r8d
    0.00 :   ffffffff81122b29:       xorl    %r9d, %r9d
    0.00 :   ffffffff81122b2c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (10 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b3350 <__calc_delta>:
         : 5                ; __calc_delta():
    0.00 :   ffffffff810b3350:       pushq   %rbp
    0.00 :   ffffffff810b3351:       movq    %rdi, %r9
    0.00 :   ffffffff810b3354:       movq    %rdx, %rcx
    0.00 :   ffffffff810b3357:       movq    %rsp, %rbp
    0.00 :   ffffffff810b335a:       testq   %rsi, %rsi
    0.00 :   ffffffff810b335d:       movl    0x8(%rdx), %eax
    0.00 :   ffffffff810b3360:       jne     0xffffffff810b3383 <__calc_delta+0x33>
    0.00 :   ffffffff810b3362:       testl   %eax, %eax
    0.00 :   ffffffff810b3364:       je      0xffffffff810b343b <__calc_delta+0xeb>
    0.00 :   ffffffff810b336a:       xorl    %eax, %eax
    0.00 :   ffffffff810b336c:       popq    %rbp
    0.00 :   ffffffff810b336d:       xorl    %edx, %edx
    0.00 :   ffffffff810b336f:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b3371:       xorl    %esi, %esi
    0.00 :   ffffffff810b3373:       xorl    %edi, %edi
    0.00 :   ffffffff810b3375:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b3378:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b337b:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b337e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b3383:       shrq    $0xa, %rsi
    0.00 :   ffffffff810b3387:       movl    $0x2, %edx
    0.00 :   ffffffff810b338c:       movl    %eax, %r8d
    0.00 :   ffffffff810b338f:       cmpq    %rdx, %rsi
    0.00 :   ffffffff810b3392:       cmovbq  %rdx, %rsi
    0.00 :   ffffffff810b3396:       movq    %rsi, %r10
    0.00 :   ffffffff810b3399:       shrq    $0x20, %r10
    0.00 :   ffffffff810b339d:       testl   %eax, %eax
    0.00 :   ffffffff810b339f:       je      0xffffffff810b347e <__calc_delta+0x12e>
    0.00 :   ffffffff810b33a5:       testl   %r10d, %r10d
    0.00 :   ffffffff810b33a8:       movl    $0x20, %edi
    0.00 :   ffffffff810b33ad:       je      0xffffffff810b33c4 <__calc_delta+0x74>
    0.00 :   ffffffff810b33af:       movl    $0x20, %edi
    0.00 :   ffffffff810b33b4:       movl    $0xffffffff, %ecx # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b33b9:       bsrl    %r10d, %ecx
    0.00 :   ffffffff810b33bd:       incl    %ecx
    0.00 :   ffffffff810b33bf:       subl    %ecx, %edi
    0.00 :   ffffffff810b33c1:       shrq    %cl, %rsi
    0.00 :   ffffffff810b33c4:       movl    %esi, %eax
    6.86 :   ffffffff810b33c6:       imulq   %r8, %rax
    0.00 :   ffffffff810b33ca:       movq    %rax, %rdx
    0.00 :   ffffffff810b33cd:       shrq    $0x20, %rdx
    9.38 :   ffffffff810b33d1:       je      0xffffffff810b3411 <__calc_delta+0xc1>
    0.00 :   ffffffff810b33d3:       movl    $0xffffffff, %ecx # imm = 0xFFFFFFFF
   20.86 :   ffffffff810b33d8:       bsrl    %edx, %ecx
    0.00 :   ffffffff810b33db:       leal    0x1(%rcx), %esi
    0.00 :   ffffffff810b33de:       popq    %rbp
    0.00 :   ffffffff810b33df:       movl    %esi, %ecx
    0.00 :   ffffffff810b33e1:       subl    %esi, %edi
    0.00 :   ffffffff810b33e3:       shrq    %cl, %rax
    0.00 :   ffffffff810b33e6:       movl    %edi, %ecx
    0.00 :   ffffffff810b33e8:       movl    %eax, %eax
    0.00 :   ffffffff810b33ea:       mulq    %r9
    0.00 :   ffffffff810b33ed:       shrdq   %cl, %rdx, %rax
    0.00 :   ffffffff810b33f1:       shrq    %cl, %rdx
    0.00 :   ffffffff810b33f4:       andl    $0x40, %ecx
    0.00 :   ffffffff810b33f7:       cmovneq %rdx, %rax
    0.00 :   ffffffff810b33fb:       xorl    %edx, %edx
    0.00 :   ffffffff810b33fd:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b33ff:       xorl    %esi, %esi
    0.00 :   ffffffff810b3401:       xorl    %edi, %edi
    0.00 :   ffffffff810b3403:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b3406:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b3409:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b340c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b3411:       mulq    %r9
    0.00 :   ffffffff810b3414:       movl    %edi, %ecx
    0.00 :   ffffffff810b3416:       popq    %rbp
    0.00 :   ffffffff810b3417:       shrdq   %cl, %rdx, %rax
    0.00 :   ffffffff810b341b:       shrq    %cl, %rdx
    0.00 :   ffffffff810b341e:       andl    $0x40, %ecx
    0.00 :   ffffffff810b3421:       cmovneq %rdx, %rax
    0.00 :   ffffffff810b3425:       xorl    %edx, %edx
    0.00 :   ffffffff810b3427:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b3429:       xorl    %esi, %esi
    0.00 :   ffffffff810b342b:       xorl    %edi, %edi
    0.00 :   ffffffff810b342d:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b3430:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b3433:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b3436:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b343b:       movq    (%rdx), %rax
    0.00 :   ffffffff810b343e:       testq   %rax, %rax
    0.00 :   ffffffff810b3441:       je      0xffffffff810b34b5 <__calc_delta+0x165>
    0.00 :   ffffffff810b3443:       shrq    $0xa, %rax
    0.00 :   ffffffff810b3447:       movl    $0xfffffffe, %edx # imm = 0xFFFFFFFE
    0.00 :   ffffffff810b344c:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b344f:       jb      0xffffffff810b34d5 <__calc_delta+0x185>
    0.00 :   ffffffff810b3455:       movl    $0x2, %edx
    0.00 :   ffffffff810b345a:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b345d:       movq    %rdx, %rdi
    0.00 :   ffffffff810b3460:       cmovaeq %rax, %rdi
    0.00 :   ffffffff810b3464:       movl    $0xffffffff, %eax # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b3469:       xorl    %edx, %edx
    0.00 :   ffffffff810b346b:       divq    %rdi
    0.00 :   ffffffff810b346e:       movl    $0x20, %edi
    0.00 :   ffffffff810b3473:       movq    %rax, %r8
    0.00 :   ffffffff810b3476:       movl    %eax, 0x8(%rcx)
    0.00 :   ffffffff810b3479:       jmp     0xffffffff810b33c4 <__calc_delta+0x74>
    0.00 :   ffffffff810b347e:       movq    (%rcx), %rax
    0.00 :   ffffffff810b3481:       testq   %rax, %rax
    0.00 :   ffffffff810b3484:       je      0xffffffff810b34c3 <__calc_delta+0x173>
    0.00 :   ffffffff810b3486:       shrq    $0xa, %rax
    0.00 :   ffffffff810b348a:       movl    $0x2, %edi
    0.00 :   ffffffff810b348f:       movl    $0xfffffffe, %edx # imm = 0xFFFFFFFE
    0.00 :   ffffffff810b3494:       cmpq    %rdi, %rax
   10.00 :   ffffffff810b3497:       cmovaeq %rax, %rdi
    0.00 :   ffffffff810b349b:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b349e:       jb      0xffffffff810b34fe <__calc_delta+0x1ae>
    0.00 :   ffffffff810b34a0:       movl    $0xffffffff, %eax # imm = 0xFFFFFFFF
   23.19 :   ffffffff810b34a5:       xorl    %edx, %edx
   21.58 :   ffffffff810b34a7:       divq    %rdi
    0.00 :   ffffffff810b34aa:       movq    %rax, %r8
    8.14 :   ffffffff810b34ad:       movl    %eax, 0x8(%rcx)
    0.00 :   ffffffff810b34b0:       jmp     0xffffffff810b33a5 <__calc_delta+0x55>
    0.00 :   ffffffff810b34b5:       movl    $0xffffffff, 0x8(%rdx) # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b34bc:       xorl    %eax, %eax
    0.00 :   ffffffff810b34be:       jmp     0xffffffff810b336c <__calc_delta+0x1c>
    0.00 :   ffffffff810b34c3:       movl    $0xffffffff, 0x8(%rcx) # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b34ca:       movl    $0xffffffff, %r8d # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b34d0:       jmp     0xffffffff810b33a5 <__calc_delta+0x55>
    0.00 :   ffffffff810b34d5:       movl    $0x1, 0x8(%rcx)
    0.00 :   ffffffff810b34dc:       movq    %rsi, %rax
    0.00 :   ffffffff810b34df:       mulq    %r9
    0.00 :   ffffffff810b34e2:       popq    %rbp
    0.00 :   ffffffff810b34e3:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810b34e8:       xorl    %edx, %edx
    0.00 :   ffffffff810b34ea:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b34ec:       xorl    %esi, %esi
    0.00 :   ffffffff810b34ee:       xorl    %edi, %edi
    0.00 :   ffffffff810b34f0:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b34f3:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b34f6:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b34f9:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b34fe:       testq   %r10, %r10
    0.00 :   ffffffff810b3501:       movl    $0x1, 0x8(%rcx)
    0.00 :   ffffffff810b3508:       movl    $0x1, %r8d
    0.00 :   ffffffff810b350e:       jne     0xffffffff810b33af <__calc_delta+0x5f>
    0.00 :   ffffffff810b3514:       jmp     0xffffffff810b34dc <__calc_delta+0x18c>
 Percent |	Source code & Disassembly of elf for cycles (9 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810ca1b0 <__update_load_avg_cfs_rq>:
         : 5                ; __update_load_avg_cfs_rq():
    0.00 :   ffffffff810ca1b0:       pushq   %rbp
    0.00 :   ffffffff810ca1b1:       movq    %rsp, %rbp
    0.00 :   ffffffff810ca1b4:       subq    $0x28, %rsp
    0.00 :   ffffffff810ca1b8:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff810ca1bc:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff810ca1c0:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff810ca1c4:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff810ca1c8:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff810ca1cc:       movq    (%rsi), %r8
    0.00 :   ffffffff810ca1cf:       movl    0x14(%rsi), %r10d
    0.00 :   ffffffff810ca1d3:       movq    0x50(%rsi), %rcx
    0.00 :   ffffffff810ca1d7:       testq   %r8, %r8
    0.00 :   ffffffff810ca1da:       je      0xffffffff810ca1ec <__update_load_avg_cfs_rq+0x3c>
    0.00 :   ffffffff810ca1dc:       shrq    $0xa, %r8
    0.00 :   ffffffff810ca1e0:       movl    $0x2, %eax
    0.00 :   ffffffff810ca1e5:       cmpq    %rax, %r8
    0.00 :   ffffffff810ca1e8:       cmovbq  %rax, %r8
    0.00 :   ffffffff810ca1ec:       movq    0x80(%rsi), %rdx
    0.00 :   ffffffff810ca1f3:       movq    %rdi, %rax
    0.00 :   ffffffff810ca1f6:       subq    %rdx, %rax
    0.00 :   ffffffff810ca1f9:       js      0xffffffff810ca2e3 <__update_load_avg_cfs_rq+0x133>
    0.00 :   ffffffff810ca1ff:       movq    %rax, %rdi
    0.00 :   ffffffff810ca202:       shrq    $0xa, %rdi
    0.00 :   ffffffff810ca206:       je      0xffffffff810ca2ea <__update_load_avg_cfs_rq+0x13a>
    0.00 :   ffffffff810ca20c:       andq    $-0x400, %rax   # imm = 0xFC00
    0.00 :   ffffffff810ca212:       addq    %rdx, %rax
    0.00 :   ffffffff810ca215:       movl    0x9c(%rsi), %edx
    0.00 :   ffffffff810ca21b:       movq    %rax, 0x80(%rsi)
    0.00 :   ffffffff810ca222:       movq    %rdx, %rbx
    0.00 :   ffffffff810ca225:       addq    %rdi, %rdx
    0.00 :   ffffffff810ca228:       movq    %rdx, %r11
    0.00 :   ffffffff810ca22b:       shrq    $0xa, %r11
    0.00 :   ffffffff810ca22f:       testq   %r8, %r8
    0.00 :   ffffffff810ca232:       jne     0xffffffff810ca31a <__update_load_avg_cfs_rq+0x16a>
    0.00 :   ffffffff810ca238:       cmpq    $0x3ff, %rdx    # imm = 0x3FF
    0.00 :   ffffffff810ca23f:       jbe     0xffffffff810ca3c7 <__update_load_avg_cfs_rq+0x217>
    0.00 :   ffffffff810ca245:       andl    $0x3ff, %edx    # imm = 0x3FF
    0.00 :   ffffffff810ca24b:       cmpq    $0x7e0, %r11    # imm = 0x7E0
    0.00 :   ffffffff810ca252:       movq    0x88(%rsi), %rax
    0.00 :   ffffffff810ca259:       movl    %edx, %r9d
    0.00 :   ffffffff810ca25c:       ja      0xffffffff810ca4af <__update_load_avg_cfs_rq+0x2ff>
    0.00 :   ffffffff810ca262:       xorl    %r10d, %r10d
    0.00 :   ffffffff810ca265:       xorl    %r13d, %r13d
    0.00 :   ffffffff810ca268:       cmpq    $0x1f, %r11
    0.00 :   ffffffff810ca26c:       movq    0x90(%rsi), %r12
    0.00 :   ffffffff810ca273:       ja      0xffffffff810ca485 <__update_load_avg_cfs_rq+0x2d5>
    0.00 :   ffffffff810ca279:       movl    %r11d, %edx
    0.00 :   ffffffff810ca27c:       movl    -0x7e1f5720(,%rdx,4), %r14d
    0.00 :   ffffffff810ca284:       mulq    %r14
    0.00 :   ffffffff810ca287:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca28c:       movq    %rax, %r15
    0.00 :   ffffffff810ca28f:       movq    %r12, %rax
    0.00 :   ffffffff810ca292:       movq    %r15, 0x88(%rsi)
    0.00 :   ffffffff810ca299:       mulq    %r14
    0.00 :   ffffffff810ca29c:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca2a1:       cmpl    $0x1f, %r11d
    0.00 :   ffffffff810ca2a5:       movq    %rax, 0x90(%rsi)
    0.00 :   ffffffff810ca2ac:       movl    0x98(%rsi), %eax
    0.00 :   ffffffff810ca2b2:       ja      0xffffffff810ca439 <__update_load_avg_cfs_rq+0x289>
    0.00 :   ffffffff810ca2b8:       movl    %r11d, %edx
    0.00 :   ffffffff810ca2bb:       movl    -0x7e1f5720(,%rdx,4), %r12d
    0.00 :   ffffffff810ca2c3:       mulq    %r12
    0.00 :   ffffffff810ca2c6:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca2cb:       testq   %r8, %r8
    0.00 :   ffffffff810ca2ce:       movl    %eax, 0x98(%rsi)
    0.00 :   ffffffff810ca2d4:       jne     0xffffffff810ca3d2 <__update_load_avg_cfs_rq+0x222>
    0.00 :   ffffffff810ca2da:       movl    %r9d, 0x9c(%rsi)
    0.00 :   ffffffff810ca2e1:       jmp     0xffffffff810ca352 <__update_load_avg_cfs_rq+0x1a2>
    0.00 :   ffffffff810ca2e3:       movq    %rdi, 0x80(%rsi)
    0.00 :   ffffffff810ca2ea:       xorl    %eax, %eax
    0.00 :   ffffffff810ca2ec:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff810ca2f0:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff810ca2f4:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff810ca2f8:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff810ca2fc:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff810ca300:       leave
    0.00 :   ffffffff810ca301:       xorl    %edx, %edx
    0.00 :   ffffffff810ca303:       xorl    %ecx, %ecx
    0.00 :   ffffffff810ca305:       xorl    %esi, %esi
    0.00 :   ffffffff810ca307:       xorl    %edi, %edi
    0.00 :   ffffffff810ca309:       xorl    %r8d, %r8d
    0.00 :   ffffffff810ca30c:       xorl    %r9d, %r9d
    0.00 :   ffffffff810ca30f:       xorl    %r10d, %r10d
    0.00 :   ffffffff810ca312:       xorl    %r11d, %r11d
    0.00 :   ffffffff810ca315:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
   11.19 :   ffffffff810ca31a:       xorl    %r13d, %r13d
    0.00 :   ffffffff810ca31d:       testq   %rcx, %rcx
   13.90 :   ffffffff810ca320:       movq    0x88(%rsi), %r15
    0.00 :   ffffffff810ca327:       setne   %r13b
    0.00 :   ffffffff810ca32b:       cmpq    $0x3ff, %rdx    # imm = 0x3FF
    0.00 :   ffffffff810ca332:       movl    %edx, %r9d
    0.00 :   ffffffff810ca335:       ja      0xffffffff810ca402 <__update_load_avg_cfs_rq+0x252>
    0.00 :   ffffffff810ca33b:       movl    %edi, %eax
    0.00 :   ffffffff810ca33d:       movl    %r9d, 0x9c(%rsi)
    0.00 :   ffffffff810ca344:       imulq   %r8, %rax
    0.00 :   ffffffff810ca348:       addq    %r15, %rax
    0.00 :   ffffffff810ca34b:       movq    %rax, 0x88(%rsi)
    0.00 :   ffffffff810ca352:       testq   %r10, %r10
    0.00 :   ffffffff810ca355:       je      0xffffffff810ca368 <__update_load_avg_cfs_rq+0x1b8>
    0.00 :   ffffffff810ca357:       movl    %edi, %eax
    0.00 :   ffffffff810ca359:       imulq   %r10, %rax
    0.00 :   ffffffff810ca35d:       shlq    $0xa, %rax
    0.00 :   ffffffff810ca361:       addq    %rax, 0x90(%rsi)
    0.00 :   ffffffff810ca368:       testl   %r13d, %r13d
    0.00 :   ffffffff810ca36b:       je      0xffffffff810ca376 <__update_load_avg_cfs_rq+0x1c6>
    0.00 :   ffffffff810ca36d:       shll    $0xa, %edi
    0.00 :   ffffffff810ca370:       addl    %edi, 0x98(%rsi)
    0.00 :   ffffffff810ca376:       testl   %r11d, %r11d
    0.00 :   ffffffff810ca379:       je      0xffffffff810ca2ea <__update_load_avg_cfs_rq+0x13a>
    0.00 :   ffffffff810ca37f:       movq    0x88(%rsi), %rax
    0.00 :   ffffffff810ca386:       leal    0xb67e(%r9), %ecx
    0.00 :   ffffffff810ca38d:       xorl    %edx, %edx
    0.00 :   ffffffff810ca38f:       divq    %rcx
    0.00 :   ffffffff810ca392:       xorl    %edx, %edx
    0.00 :   ffffffff810ca394:       movq    %rax, 0xa0(%rsi)
    0.00 :   ffffffff810ca39b:       movq    0x90(%rsi), %rax
   47.97 :   ffffffff810ca3a2:       divq    %rcx
    0.00 :   ffffffff810ca3a5:       xorl    %edx, %edx
    0.00 :   ffffffff810ca3a7:       movq    %rax, 0xa8(%rsi)
    0.00 :   ffffffff810ca3ae:       movl    0x98(%rsi), %eax
    0.00 :   ffffffff810ca3b4:       divl    %ecx
    0.00 :   ffffffff810ca3b6:       movq    %rax, 0xb0(%rsi)
    0.00 :   ffffffff810ca3bd:       movl    $0x1, %eax
    0.00 :   ffffffff810ca3c2:       jmp     0xffffffff810ca2ec <__update_load_avg_cfs_rq+0x13c>
    0.00 :   ffffffff810ca3c7:       movl    %edx, %r9d
    0.00 :   ffffffff810ca3ca:       movl    %edx, 0x9c(%rsi)
    0.00 :   ffffffff810ca3d0:       jmp     0xffffffff810ca376 <__update_load_avg_cfs_rq+0x1c6>
    0.00 :   ffffffff810ca3d2:       movl    $0x400, %eax    # imm = 0x400
   14.26 :   ffffffff810ca3d7:       subl    %ebx, %eax
    0.00 :   ffffffff810ca3d9:       movl    $0xba7e, %ebx   # imm = 0xBA7E
   12.69 :   ffffffff810ca3de:       mulq    %r12
    0.00 :   ffffffff810ca3e1:       shrq    $0x20, %rax
    0.00 :   ffffffff810ca3e5:       leal    (%r9,%rax), %ecx
    0.00 :   ffffffff810ca3e9:       movq    %rbx, %rax
    0.00 :   ffffffff810ca3ec:       mulq    %r12
    0.00 :   ffffffff810ca3ef:       shrq    $0x20, %rax
    0.00 :   ffffffff810ca3f3:       leal    0xb67e(%rcx), %edx
    0.00 :   ffffffff810ca3f9:       subl    %eax, %edx
    0.00 :   ffffffff810ca3fb:       movl    %edx, %edi
    0.00 :   ffffffff810ca3fd:       jmp     0xffffffff810ca33b <__update_load_avg_cfs_rq+0x18b>
    0.00 :   ffffffff810ca402:       andl    $0x3ff, %edx    # imm = 0x3FF
    0.00 :   ffffffff810ca408:       cmpq    $0x7e0, %r11    # imm = 0x7E0
    0.00 :   ffffffff810ca40f:       movq    %r15, %rax
    0.00 :   ffffffff810ca412:       movl    %edx, %r9d
    0.00 :   ffffffff810ca415:       jbe     0xffffffff810ca268 <__update_load_avg_cfs_rq+0xb8>
    0.00 :   ffffffff810ca41b:       movq    $0x0, 0x90(%rsi)
    0.00 :   ffffffff810ca426:       movl    $0x0, 0x98(%rsi)
    0.00 :   ffffffff810ca430:       movl    %edx, %ecx
    0.00 :   ffffffff810ca432:       xorl    %r15d, %r15d
    0.00 :   ffffffff810ca435:       xorl    %eax, %eax
    0.00 :   ffffffff810ca437:       jmp     0xffffffff810ca3f3 <__update_load_avg_cfs_rq+0x243>
    0.00 :   ffffffff810ca439:       movq    %r11, %rdx
    0.00 :   ffffffff810ca43c:       movl    %r11d, %ecx
    0.00 :   ffffffff810ca43f:       andl    $0x1f, %edx
    0.00 :   ffffffff810ca442:       shrl    $0x5, %ecx
    0.00 :   ffffffff810ca445:       movl    -0x7e1f5720(,%rdx,4), %r12d
    0.00 :   ffffffff810ca44d:       shrq    %cl, %rax
    0.00 :   ffffffff810ca450:       mulq    %r12
    0.00 :   ffffffff810ca453:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca458:       testq   %r8, %r8
    0.00 :   ffffffff810ca45b:       movl    %eax, 0x98(%rsi)
    0.00 :   ffffffff810ca461:       je      0xffffffff810ca2da <__update_load_avg_cfs_rq+0x12a>
    0.00 :   ffffffff810ca467:       movl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff810ca46c:       subl    %ebx, %eax
    0.00 :   ffffffff810ca46e:       movl    $0xba7e, %ebx   # imm = 0xBA7E
    0.00 :   ffffffff810ca473:       shrq    %cl, %rax
    0.00 :   ffffffff810ca476:       shrq    %cl, %rbx
    0.00 :   ffffffff810ca479:       mulq    %r12
    0.00 :   ffffffff810ca47c:       shrq    $0x20, %rax
    0.00 :   ffffffff810ca480:       jmp     0xffffffff810ca3e5 <__update_load_avg_cfs_rq+0x235>
    0.00 :   ffffffff810ca485:       movq    %r11, %rdx
    0.00 :   ffffffff810ca488:       movl    %r11d, %ecx
    0.00 :   ffffffff810ca48b:       andl    $0x1f, %edx
    0.00 :   ffffffff810ca48e:       shrl    $0x5, %ecx
    0.00 :   ffffffff810ca491:       movl    -0x7e1f5720(,%rdx,4), %r14d
    0.00 :   ffffffff810ca499:       shrq    %cl, %rax
    0.00 :   ffffffff810ca49c:       shrq    %cl, %r12
    0.00 :   ffffffff810ca49f:       mulq    %r14
    0.00 :   ffffffff810ca4a2:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca4a7:       movq    %rax, %r15
    0.00 :   ffffffff810ca4aa:       jmp     0xffffffff810ca28f <__update_load_avg_cfs_rq+0xdf>
    0.00 :   ffffffff810ca4af:       movq    $0x0, 0x88(%rsi)
    0.00 :   ffffffff810ca4ba:       movq    $0x0, 0x90(%rsi)
    0.00 :   ffffffff810ca4c5:       movl    $0x0, 0x98(%rsi)
    0.00 :   ffffffff810ca4cf:       movl    %edx, 0x9c(%rsi)
    0.00 :   ffffffff810ca4d5:       jmp     0xffffffff810ca376 <__update_load_avg_cfs_rq+0x1c6>
 Percent |	Source code & Disassembly of elf for cycles (8 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810c9e10 <__update_load_avg_se>:
         : 5                ; __update_load_avg_se():
    0.00 :   ffffffff810c9e10:       pushq   %rbp
    0.00 :   ffffffff810c9e11:       movq    %rdx, %r8
    0.00 :   ffffffff810c9e14:       movq    %rsp, %rbp
   13.74 :   ffffffff810c9e17:       subq    $0x28, %rsp
    0.00 :   ffffffff810c9e1b:       andq    $-0x10, %rsp
    0.00 :   ffffffff810c9e1f:       subq    $0x10, %rsp
    0.00 :   ffffffff810c9e23:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff810c9e27:       movq    %r12, -0x20(%rbp)
   15.85 :   ffffffff810c9e2b:       movq    %r13, -0x18(%rbp)
   10.68 :   ffffffff810c9e2f:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff810c9e33:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff810c9e37:       movl    0x38(%rdx), %r9d
    0.00 :   ffffffff810c9e3b:       movq    0x50(%rsi), %rcx
    0.00 :   ffffffff810c9e3f:       testl   %r9d, %r9d
    0.00 :   ffffffff810c9e42:       setne   %sil
    0.00 :   ffffffff810c9e46:       cmpq    $0x0, 0x80(%rdx)
    0.00 :   ffffffff810c9e4e:       movzbl  %sil, %r11d
    0.00 :   ffffffff810c9e52:       je      0xffffffff810c9e5b <__update_load_avg_se+0x4b>
    0.00 :   ffffffff810c9e54:       movq    0x88(%rdx), %r11
    0.00 :   ffffffff810c9e5b:       movq    0xc0(%r8), %rdx
    0.00 :   ffffffff810c9e62:       movq    %rdi, %rax
    0.00 :   ffffffff810c9e65:       subq    %rdx, %rax
   14.89 :   ffffffff810c9e68:       js      0xffffffff810c9f87 <__update_load_avg_se+0x177>
    0.00 :   ffffffff810c9e6e:       movq    %rax, %rdi
    0.00 :   ffffffff810c9e71:       shrq    $0xa, %rdi
    0.00 :   ffffffff810c9e75:       je      0xffffffff810c9f8e <__update_load_avg_se+0x17e>
    0.00 :   ffffffff810c9e7b:       andq    $-0x400, %rax   # imm = 0xFC00
   13.52 :   ffffffff810c9e81:       movl    %edi, %r10d
    0.00 :   ffffffff810c9e84:       addq    %rdx, %rax
    0.00 :   ffffffff810c9e87:       movl    0xdc(%r8), %edx
    0.00 :   ffffffff810c9e8e:       movq    %rax, 0xc0(%r8)
    0.00 :   ffffffff810c9e95:       movq    %rdx, %r13
    0.00 :   ffffffff810c9e98:       addq    %rdi, %rdx
    0.00 :   ffffffff810c9e9b:       movq    %rdx, %rbx
    0.00 :   ffffffff810c9e9e:       shrq    $0xa, %rbx
    0.00 :   ffffffff810c9ea2:       testl   %r9d, %r9d
    0.00 :   ffffffff810c9ea5:       je      0xffffffff810c9fbe <__update_load_avg_se+0x1ae>
    0.00 :   ffffffff810c9eab:       xorl    %r14d, %r14d
    0.00 :   ffffffff810c9eae:       cmpq    %r8, %rcx
    0.00 :   ffffffff810c9eb1:       sete    %r14b
    0.00 :   ffffffff810c9eb5:       cmpq    $0x3ff, %rdx    # imm = 0x3FF
    0.00 :   ffffffff810c9ebc:       ja      0xffffffff810ca0b4 <__update_load_avg_se+0x2a4>
    0.00 :   ffffffff810c9ec2:       movq    0xc8(%r8), %r12
    0.00 :   ffffffff810c9ec9:       movl    %edx, %edi
    0.00 :   ffffffff810c9ecb:       movl    %edx, 0xdc(%r8)
    0.00 :   ffffffff810c9ed2:       movzbl  %sil, %esi
    0.00 :   ffffffff810c9ed6:       movl    %r10d, %eax
    0.00 :   ffffffff810c9ed9:       imulq   %rax, %rsi
    0.00 :   ffffffff810c9edd:       addq    %r12, %rsi
    0.00 :   ffffffff810c9ee0:       movq    %rsi, 0xc8(%r8)
    0.00 :   ffffffff810c9ee7:       testq   %r11, %r11
    0.00 :   ffffffff810c9eea:       je      0xffffffff810c9efe <__update_load_avg_se+0xee>
    0.00 :   ffffffff810c9eec:       movl    %r10d, %eax
    0.00 :   ffffffff810c9eef:       imulq   %r11, %rax
   15.26 :   ffffffff810c9ef3:       shlq    $0xa, %rax
    0.00 :   ffffffff810c9ef7:       addq    %rax, 0xd0(%r8)
    0.00 :   ffffffff810c9efe:       testl   %r14d, %r14d
    0.00 :   ffffffff810c9f01:       je      0xffffffff810c9f0e <__update_load_avg_se+0xfe>
    0.00 :   ffffffff810c9f03:       shll    $0xa, %r10d
    0.00 :   ffffffff810c9f07:       addl    %r10d, 0xd8(%r8)
    0.00 :   ffffffff810c9f0e:       testl   %ebx, %ebx
    0.00 :   ffffffff810c9f10:       je      0xffffffff810c9f8e <__update_load_avg_se+0x17e>
    0.00 :   ffffffff810c9f12:       movq    (%r8), %rax
    0.00 :   ffffffff810c9f15:       testq   %rax, %rax
    0.00 :   ffffffff810c9f18:       je      0xffffffff810c9f2a <__update_load_avg_se+0x11a>
    0.00 :   ffffffff810c9f1a:       shrq    $0xa, %rax
    0.00 :   ffffffff810c9f1e:       movl    $0x2, %edx
    0.00 :   ffffffff810c9f23:       cmpq    %rdx, %rax
    0.00 :   ffffffff810c9f26:       cmovbq  %rdx, %rax
    0.00 :   ffffffff810c9f2a:       imulq   0xc8(%r8), %rax
    0.00 :   ffffffff810c9f32:       leal    0xb67e(%rdi), %ecx
    0.00 :   ffffffff810c9f38:       xorl    %edx, %edx
    0.00 :   ffffffff810c9f3a:       divq    %rcx
    0.00 :   ffffffff810c9f3d:       xorl    %edx, %edx
    0.00 :   ffffffff810c9f3f:       movq    %rax, 0xe0(%r8)
    0.00 :   ffffffff810c9f46:       movq    0xd0(%r8), %rax
    0.00 :   ffffffff810c9f4d:       divq    %rcx
    0.00 :   ffffffff810c9f50:       xorl    %edx, %edx
    0.00 :   ffffffff810c9f52:       movq    %rax, 0xe8(%r8)
    0.00 :   ffffffff810c9f59:       movl    0xd8(%r8), %eax
    9.80 :   ffffffff810c9f60:       divl    %ecx
    0.00 :   ffffffff810c9f62:       movq    %rax, 0xf0(%r8)
    0.00 :   ffffffff810c9f69:       movl    0xf8(%r8), %eax
    0.00 :   ffffffff810c9f70:       testl   %eax, %eax
    0.00 :   ffffffff810c9f72:       jns     0xffffffff810c9f80 <__update_load_avg_se+0x170>
    0.00 :   ffffffff810c9f74:       andl    $0x7fffffff, %eax # imm = 0x7FFFFFFF
    0.00 :   ffffffff810c9f79:       movl    %eax, 0xf8(%r8)
    0.00 :   ffffffff810c9f80:       movl    $0x1, %eax
    0.00 :   ffffffff810c9f85:       jmp     0xffffffff810c9f90 <__update_load_avg_se+0x180>
    0.00 :   ffffffff810c9f87:       movq    %rdi, 0xc0(%r8)
    0.00 :   ffffffff810c9f8e:       xorl    %eax, %eax
    0.00 :   ffffffff810c9f90:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff810c9f94:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff810c9f98:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff810c9f9c:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff810c9fa0:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff810c9fa4:       leave
    0.00 :   ffffffff810c9fa5:       xorl    %edx, %edx
    0.00 :   ffffffff810c9fa7:       xorl    %ecx, %ecx
    0.00 :   ffffffff810c9fa9:       xorl    %esi, %esi
    0.00 :   ffffffff810c9fab:       xorl    %edi, %edi
    0.00 :   ffffffff810c9fad:       xorl    %r8d, %r8d
    0.00 :   ffffffff810c9fb0:       xorl    %r9d, %r9d
    0.00 :   ffffffff810c9fb3:       xorl    %r10d, %r10d
    0.00 :   ffffffff810c9fb6:       xorl    %r11d, %r11d
    0.00 :   ffffffff810c9fb9:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810c9fbe:       cmpq    $0x3ff, %rdx    # imm = 0x3FF
    0.00 :   ffffffff810c9fc5:       jbe     0xffffffff810ca06d <__update_load_avg_se+0x25d>
    0.00 :   ffffffff810c9fcb:       andl    $0x3ff, %edx    # imm = 0x3FF
    0.00 :   ffffffff810c9fd1:       cmpq    $0x7e0, %rbx    # imm = 0x7E0
    0.00 :   ffffffff810c9fd8:       movq    0xc8(%r8), %rax
    0.00 :   ffffffff810c9fdf:       movl    %edx, %edi
    0.00 :   ffffffff810c9fe1:       ja      0xffffffff810ca16a <__update_load_avg_se+0x35a>
    0.00 :   ffffffff810c9fe7:       xorl    %r11d, %r11d
    0.00 :   ffffffff810c9fea:       xorl    %r14d, %r14d
    0.00 :   ffffffff810c9fed:       movq    0xd0(%r8), %rcx
    0.00 :   ffffffff810c9ff4:       cmpq    $0x1f, %rbx
    0.00 :   ffffffff810c9ff8:       movq    %rcx, 0x8(%rsp)
    0.00 :   ffffffff810c9ffd:       ja      0xffffffff810ca13f <__update_load_avg_se+0x32f>
    0.00 :   ffffffff810ca003:       movl    %ebx, %edx
    0.00 :   ffffffff810ca005:       movl    -0x7e1f5720(,%rdx,4), %r15d
    0.00 :   ffffffff810ca00d:       mulq    %r15
    0.00 :   ffffffff810ca010:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca015:       movq    %rax, %r12
    0.00 :   ffffffff810ca018:       movq    0x8(%rsp), %rax
    0.00 :   ffffffff810ca01d:       movq    %r12, 0xc8(%r8)
    0.00 :   ffffffff810ca024:       mulq    %r15
    0.00 :   ffffffff810ca027:       shrdq   $0x20, %rdx, %rax
    6.27 :   ffffffff810ca02c:       cmpl    $0x1f, %ebx
    0.00 :   ffffffff810ca02f:       movq    %rax, 0xd0(%r8)
    0.00 :   ffffffff810ca036:       movl    0xd8(%r8), %eax
    0.00 :   ffffffff810ca03d:       ja      0xffffffff810ca0ef <__update_load_avg_se+0x2df>
    0.00 :   ffffffff810ca043:       movl    %ebx, %edx
    0.00 :   ffffffff810ca045:       movl    -0x7e1f5720(,%rdx,4), %r15d
    0.00 :   ffffffff810ca04d:       mulq    %r15
    0.00 :   ffffffff810ca050:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca055:       testl   %r9d, %r9d
    0.00 :   ffffffff810ca058:       movl    %eax, 0xd8(%r8)
    0.00 :   ffffffff810ca05f:       jne     0xffffffff810ca07b <__update_load_avg_se+0x26b>
    0.00 :   ffffffff810ca061:       movl    %edi, 0xdc(%r8)
    0.00 :   ffffffff810ca068:       jmp     0xffffffff810c9ee7 <__update_load_avg_se+0xd7>
    0.00 :   ffffffff810ca06d:       movl    %edx, %edi
    0.00 :   ffffffff810ca06f:       movl    %edx, 0xdc(%r8)
    0.00 :   ffffffff810ca076:       jmp     0xffffffff810c9f0e <__update_load_avg_se+0xfe>
    0.00 :   ffffffff810ca07b:       movl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff810ca080:       movl    $0xba7e, %r10d  # imm = 0xBA7E
    0.00 :   ffffffff810ca086:       subl    %r13d, %eax
    0.00 :   ffffffff810ca089:       mulq    %r15
    0.00 :   ffffffff810ca08c:       shrq    $0x20, %rax
    0.00 :   ffffffff810ca090:       leal    (%rdi,%rax), %ecx
    0.00 :   ffffffff810ca093:       movq    %r10, %rax
    0.00 :   ffffffff810ca096:       mulq    %r15
    0.00 :   ffffffff810ca099:       shrq    $0x20, %rax
    0.00 :   ffffffff810ca09d:       leal    0xb67e(%rcx), %edx
    0.00 :   ffffffff810ca0a3:       movl    %edi, 0xdc(%r8)
    0.00 :   ffffffff810ca0aa:       subl    %eax, %edx
    0.00 :   ffffffff810ca0ac:       movl    %edx, %r10d
    0.00 :   ffffffff810ca0af:       jmp     0xffffffff810c9ed2 <__update_load_avg_se+0xc2>
    0.00 :   ffffffff810ca0b4:       andl    $0x3ff, %edx    # imm = 0x3FF
    0.00 :   ffffffff810ca0ba:       cmpq    $0x7e0, %rbx    # imm = 0x7E0
    0.00 :   ffffffff810ca0c1:       movq    0xc8(%r8), %rax
    0.00 :   ffffffff810ca0c8:       movl    %edx, %edi
    0.00 :   ffffffff810ca0ca:       jbe     0xffffffff810c9fed <__update_load_avg_se+0x1dd>
    0.00 :   ffffffff810ca0d0:       movq    $0x0, 0xd0(%r8)
    0.00 :   ffffffff810ca0db:       movl    $0x0, 0xd8(%r8)
    0.00 :   ffffffff810ca0e6:       movl    %edx, %ecx
    0.00 :   ffffffff810ca0e8:       xorl    %r12d, %r12d
    0.00 :   ffffffff810ca0eb:       xorl    %eax, %eax
    0.00 :   ffffffff810ca0ed:       jmp     0xffffffff810ca09d <__update_load_avg_se+0x28d>
    0.00 :   ffffffff810ca0ef:       movq    %rbx, %rdx
    0.00 :   ffffffff810ca0f2:       movl    %ebx, %ecx
    0.00 :   ffffffff810ca0f4:       andl    $0x1f, %edx
    0.00 :   ffffffff810ca0f7:       shrl    $0x5, %ecx
    0.00 :   ffffffff810ca0fa:       movl    -0x7e1f5720(,%rdx,4), %r15d
    0.00 :   ffffffff810ca102:       shrq    %cl, %rax
    0.00 :   ffffffff810ca105:       mulq    %r15
    0.00 :   ffffffff810ca108:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca10d:       testl   %r9d, %r9d
    0.00 :   ffffffff810ca110:       movl    %eax, 0xd8(%r8)
    0.00 :   ffffffff810ca117:       je      0xffffffff810ca061 <__update_load_avg_se+0x251>
    0.00 :   ffffffff810ca11d:       movl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff810ca122:       subl    %r13d, %eax
    0.00 :   ffffffff810ca125:       shrq    %cl, %rax
    0.00 :   ffffffff810ca128:       mulq    %r15
    0.00 :   ffffffff810ca12b:       movl    $0xba7e, %edx   # imm = 0xBA7E
    0.00 :   ffffffff810ca130:       shrq    %cl, %rdx
    0.00 :   ffffffff810ca133:       movq    %rdx, %r10
    0.00 :   ffffffff810ca136:       shrq    $0x20, %rax
    0.00 :   ffffffff810ca13a:       jmp     0xffffffff810ca090 <__update_load_avg_se+0x280>
    0.00 :   ffffffff810ca13f:       movq    %rbx, %rdx
    0.00 :   ffffffff810ca142:       movl    %ebx, %ecx
    0.00 :   ffffffff810ca144:       andl    $0x1f, %edx
    0.00 :   ffffffff810ca147:       shrl    $0x5, %ecx
    0.00 :   ffffffff810ca14a:       shrq    %cl, 0x8(%rsp)
    0.00 :   ffffffff810ca14f:       movl    -0x7e1f5720(,%rdx,4), %r15d
    0.00 :   ffffffff810ca157:       shrq    %cl, %rax
    0.00 :   ffffffff810ca15a:       mulq    %r15
    0.00 :   ffffffff810ca15d:       shrdq   $0x20, %rdx, %rax
    0.00 :   ffffffff810ca162:       movq    %rax, %r12
    0.00 :   ffffffff810ca165:       jmp     0xffffffff810ca018 <__update_load_avg_se+0x208>
    0.00 :   ffffffff810ca16a:       movq    $0x0, 0xc8(%r8)
    0.00 :   ffffffff810ca175:       movq    $0x0, 0xd0(%r8)
    0.00 :   ffffffff810ca180:       movl    $0x0, 0xd8(%r8)
    0.00 :   ffffffff810ca18b:       movl    %edx, 0xdc(%r8)
    0.00 :   ffffffff810ca192:       jmp     0xffffffff810c9f0e <__update_load_avg_se+0xfe>
 Percent |	Source code & Disassembly of elf for cycles (8 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b77b20 <_raw_spin_lock>:
         : 5                ; _raw_spin_lock():
    0.00 :   ffffffff81b77b20:       pushq   %rbp
   12.08 :   ffffffff81b77b21:       movq    %rsp, %rbp
    0.00 :   ffffffff81b77b24:       incl    %gs:0x7e4aabdd(%rip)
    0.00 :   ffffffff81b77b2b:       xorl    %eax, %eax
   13.18 :   ffffffff81b77b2d:       movl    $0x1, %edx
    0.00 :   ffffffff81b77b32:       lock
    0.00 :   ffffffff81b77b33:       cmpxchgl        %edx, (%rdi)
   40.97 :   ffffffff81b77b36:       jne     0xffffffff81b77b46 <_raw_spin_lock+0x26>
    0.00 :   ffffffff81b77b38:       popq    %rbp
    0.00 :   ffffffff81b77b39:       xorl    %eax, %eax
    0.00 :   ffffffff81b77b3b:       xorl    %edx, %edx
   12.94 :   ffffffff81b77b3d:       xorl    %esi, %esi
   12.17 :   ffffffff81b77b3f:       xorl    %edi, %edi
    8.66 :   ffffffff81b77b41:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b77b46:       movl    %eax, %esi
    0.00 :   ffffffff81b77b48:       callq   0xffffffff81b77c10 <queued_spin_lock_slowpath>
    0.00 :   ffffffff81b77b4d:       popq    %rbp
    0.00 :   ffffffff81b77b4e:       xorl    %eax, %eax
    0.00 :   ffffffff81b77b50:       xorl    %edx, %edx
    0.00 :   ffffffff81b77b52:       xorl    %esi, %esi
    0.00 :   ffffffff81b77b54:       xorl    %edi, %edi
    0.00 :   ffffffff81b77b56:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (7 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b773a0 <_raw_spin_unlock>:
         : 5                ; _raw_spin_unlock():
   26.37 :   ffffffff81b773a0:       pushq   %rbp
    0.00 :   ffffffff81b773a1:       movq    %rsp, %rbp
   73.63 :   ffffffff81b773a4:       movb    $0x0, (%rdi)
    0.00 :   ffffffff81b773a7:       decl    %gs:0x7e4ab35a(%rip)
    0.00 :   ffffffff81b773ae:       je      0xffffffff81b773b8 <_raw_spin_unlock+0x18>
    0.00 :   ffffffff81b773b0:       popq    %rbp
    0.00 :   ffffffff81b773b1:       xorl    %edi, %edi
    0.00 :   ffffffff81b773b3:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b773b8:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff81b773bd:       popq    %rbp
    0.00 :   ffffffff81b773be:       xorl    %edi, %edi
    0.00 :   ffffffff81b773c0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (8 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c00270 <irq_entries_start>:
         : 5                ; irq_entries_start():
    0.00 :   ffffffff81c00270:       pushq   $0x20
    0.00 :   ffffffff81c00272:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00277:       int3
    0.00 :   ffffffff81c00278:       pushq   $0x21
    0.00 :   ffffffff81c0027a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0027f:       int3
   86.56 :   ffffffff81c00280:       pushq   $0x22
   13.44 :   ffffffff81c00282:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00287:       int3
    0.00 :   ffffffff81c00288:       pushq   $0x23
    0.00 :   ffffffff81c0028a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0028f:       int3
    0.00 :   ffffffff81c00290:       pushq   $0x24
    0.00 :   ffffffff81c00292:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00297:       int3
    0.00 :   ffffffff81c00298:       pushq   $0x25
    0.00 :   ffffffff81c0029a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0029f:       int3
    0.00 :   ffffffff81c002a0:       pushq   $0x26
    0.00 :   ffffffff81c002a2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002a7:       int3
    0.00 :   ffffffff81c002a8:       pushq   $0x27
    0.00 :   ffffffff81c002aa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002af:       int3
    0.00 :   ffffffff81c002b0:       pushq   $0x28
    0.00 :   ffffffff81c002b2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002b7:       int3
    0.00 :   ffffffff81c002b8:       pushq   $0x29
    0.00 :   ffffffff81c002ba:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002bf:       int3
    0.00 :   ffffffff81c002c0:       pushq   $0x2a
    0.00 :   ffffffff81c002c2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002c7:       int3
    0.00 :   ffffffff81c002c8:       pushq   $0x2b
    0.00 :   ffffffff81c002ca:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002cf:       int3
    0.00 :   ffffffff81c002d0:       pushq   $0x2c
    0.00 :   ffffffff81c002d2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002d7:       int3
    0.00 :   ffffffff81c002d8:       pushq   $0x2d
    0.00 :   ffffffff81c002da:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002df:       int3
    0.00 :   ffffffff81c002e0:       pushq   $0x2e
    0.00 :   ffffffff81c002e2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002e7:       int3
    0.00 :   ffffffff81c002e8:       pushq   $0x2f
    0.00 :   ffffffff81c002ea:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002ef:       int3
    0.00 :   ffffffff81c002f0:       pushq   $0x30
    0.00 :   ffffffff81c002f2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002f7:       int3
    0.00 :   ffffffff81c002f8:       pushq   $0x31
    0.00 :   ffffffff81c002fa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c002ff:       int3
    0.00 :   ffffffff81c00300:       pushq   $0x32
    0.00 :   ffffffff81c00302:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00307:       int3
    0.00 :   ffffffff81c00308:       pushq   $0x33
    0.00 :   ffffffff81c0030a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0030f:       int3
    0.00 :   ffffffff81c00310:       pushq   $0x34
    0.00 :   ffffffff81c00312:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00317:       int3
    0.00 :   ffffffff81c00318:       pushq   $0x35
    0.00 :   ffffffff81c0031a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0031f:       int3
    0.00 :   ffffffff81c00320:       pushq   $0x36
    0.00 :   ffffffff81c00322:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00327:       int3
    0.00 :   ffffffff81c00328:       pushq   $0x37
    0.00 :   ffffffff81c0032a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0032f:       int3
    0.00 :   ffffffff81c00330:       pushq   $0x38
    0.00 :   ffffffff81c00332:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00337:       int3
    0.00 :   ffffffff81c00338:       pushq   $0x39
    0.00 :   ffffffff81c0033a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0033f:       int3
    0.00 :   ffffffff81c00340:       pushq   $0x3a
    0.00 :   ffffffff81c00342:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00347:       int3
    0.00 :   ffffffff81c00348:       pushq   $0x3b
    0.00 :   ffffffff81c0034a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0034f:       int3
    0.00 :   ffffffff81c00350:       pushq   $0x3c
    0.00 :   ffffffff81c00352:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00357:       int3
    0.00 :   ffffffff81c00358:       pushq   $0x3d
    0.00 :   ffffffff81c0035a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0035f:       int3
    0.00 :   ffffffff81c00360:       pushq   $0x3e
    0.00 :   ffffffff81c00362:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00367:       int3
    0.00 :   ffffffff81c00368:       pushq   $0x3f
    0.00 :   ffffffff81c0036a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0036f:       int3
    0.00 :   ffffffff81c00370:       pushq   $0x40
    0.00 :   ffffffff81c00372:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00377:       int3
    0.00 :   ffffffff81c00378:       pushq   $0x41
    0.00 :   ffffffff81c0037a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0037f:       int3
    0.00 :   ffffffff81c00380:       pushq   $0x42
    0.00 :   ffffffff81c00382:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00387:       int3
    0.00 :   ffffffff81c00388:       pushq   $0x43
    0.00 :   ffffffff81c0038a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0038f:       int3
    0.00 :   ffffffff81c00390:       pushq   $0x44
    0.00 :   ffffffff81c00392:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00397:       int3
    0.00 :   ffffffff81c00398:       pushq   $0x45
    0.00 :   ffffffff81c0039a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0039f:       int3
    0.00 :   ffffffff81c003a0:       pushq   $0x46
    0.00 :   ffffffff81c003a2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003a7:       int3
    0.00 :   ffffffff81c003a8:       pushq   $0x47
    0.00 :   ffffffff81c003aa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003af:       int3
    0.00 :   ffffffff81c003b0:       pushq   $0x48
    0.00 :   ffffffff81c003b2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003b7:       int3
    0.00 :   ffffffff81c003b8:       pushq   $0x49
    0.00 :   ffffffff81c003ba:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003bf:       int3
    0.00 :   ffffffff81c003c0:       pushq   $0x4a
    0.00 :   ffffffff81c003c2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003c7:       int3
    0.00 :   ffffffff81c003c8:       pushq   $0x4b
    0.00 :   ffffffff81c003ca:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003cf:       int3
    0.00 :   ffffffff81c003d0:       pushq   $0x4c
    0.00 :   ffffffff81c003d2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003d7:       int3
    0.00 :   ffffffff81c003d8:       pushq   $0x4d
    0.00 :   ffffffff81c003da:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003df:       int3
    0.00 :   ffffffff81c003e0:       pushq   $0x4e
    0.00 :   ffffffff81c003e2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003e7:       int3
    0.00 :   ffffffff81c003e8:       pushq   $0x4f
    0.00 :   ffffffff81c003ea:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003ef:       int3
    0.00 :   ffffffff81c003f0:       pushq   $0x50
    0.00 :   ffffffff81c003f2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003f7:       int3
    0.00 :   ffffffff81c003f8:       pushq   $0x51
    0.00 :   ffffffff81c003fa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c003ff:       int3
    0.00 :   ffffffff81c00400:       pushq   $0x52
    0.00 :   ffffffff81c00402:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00407:       int3
    0.00 :   ffffffff81c00408:       pushq   $0x53
    0.00 :   ffffffff81c0040a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0040f:       int3
    0.00 :   ffffffff81c00410:       pushq   $0x54
    0.00 :   ffffffff81c00412:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00417:       int3
    0.00 :   ffffffff81c00418:       pushq   $0x55
    0.00 :   ffffffff81c0041a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0041f:       int3
    0.00 :   ffffffff81c00420:       pushq   $0x56
    0.00 :   ffffffff81c00422:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00427:       int3
    0.00 :   ffffffff81c00428:       pushq   $0x57
    0.00 :   ffffffff81c0042a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0042f:       int3
    0.00 :   ffffffff81c00430:       pushq   $0x58
    0.00 :   ffffffff81c00432:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00437:       int3
    0.00 :   ffffffff81c00438:       pushq   $0x59
    0.00 :   ffffffff81c0043a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0043f:       int3
    0.00 :   ffffffff81c00440:       pushq   $0x5a
    0.00 :   ffffffff81c00442:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00447:       int3
    0.00 :   ffffffff81c00448:       pushq   $0x5b
    0.00 :   ffffffff81c0044a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0044f:       int3
    0.00 :   ffffffff81c00450:       pushq   $0x5c
    0.00 :   ffffffff81c00452:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00457:       int3
    0.00 :   ffffffff81c00458:       pushq   $0x5d
    0.00 :   ffffffff81c0045a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0045f:       int3
    0.00 :   ffffffff81c00460:       pushq   $0x5e
    0.00 :   ffffffff81c00462:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00467:       int3
    0.00 :   ffffffff81c00468:       pushq   $0x5f
    0.00 :   ffffffff81c0046a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0046f:       int3
    0.00 :   ffffffff81c00470:       pushq   $0x60
    0.00 :   ffffffff81c00472:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00477:       int3
    0.00 :   ffffffff81c00478:       pushq   $0x61
    0.00 :   ffffffff81c0047a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0047f:       int3
    0.00 :   ffffffff81c00480:       pushq   $0x62
    0.00 :   ffffffff81c00482:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00487:       int3
    0.00 :   ffffffff81c00488:       pushq   $0x63
    0.00 :   ffffffff81c0048a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0048f:       int3
    0.00 :   ffffffff81c00490:       pushq   $0x64
    0.00 :   ffffffff81c00492:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00497:       int3
    0.00 :   ffffffff81c00498:       pushq   $0x65
    0.00 :   ffffffff81c0049a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0049f:       int3
    0.00 :   ffffffff81c004a0:       pushq   $0x66
    0.00 :   ffffffff81c004a2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004a7:       int3
    0.00 :   ffffffff81c004a8:       pushq   $0x67
    0.00 :   ffffffff81c004aa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004af:       int3
    0.00 :   ffffffff81c004b0:       pushq   $0x68
    0.00 :   ffffffff81c004b2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004b7:       int3
    0.00 :   ffffffff81c004b8:       pushq   $0x69
    0.00 :   ffffffff81c004ba:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004bf:       int3
    0.00 :   ffffffff81c004c0:       pushq   $0x6a
    0.00 :   ffffffff81c004c2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004c7:       int3
    0.00 :   ffffffff81c004c8:       pushq   $0x6b
    0.00 :   ffffffff81c004ca:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004cf:       int3
    0.00 :   ffffffff81c004d0:       pushq   $0x6c
    0.00 :   ffffffff81c004d2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004d7:       int3
    0.00 :   ffffffff81c004d8:       pushq   $0x6d
    0.00 :   ffffffff81c004da:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004df:       int3
    0.00 :   ffffffff81c004e0:       pushq   $0x6e
    0.00 :   ffffffff81c004e2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004e7:       int3
    0.00 :   ffffffff81c004e8:       pushq   $0x6f
    0.00 :   ffffffff81c004ea:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004ef:       int3
    0.00 :   ffffffff81c004f0:       pushq   $0x70
    0.00 :   ffffffff81c004f2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004f7:       int3
    0.00 :   ffffffff81c004f8:       pushq   $0x71
    0.00 :   ffffffff81c004fa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c004ff:       int3
    0.00 :   ffffffff81c00500:       pushq   $0x72
    0.00 :   ffffffff81c00502:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00507:       int3
    0.00 :   ffffffff81c00508:       pushq   $0x73
    0.00 :   ffffffff81c0050a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0050f:       int3
    0.00 :   ffffffff81c00510:       pushq   $0x74
    0.00 :   ffffffff81c00512:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00517:       int3
    0.00 :   ffffffff81c00518:       pushq   $0x75
    0.00 :   ffffffff81c0051a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0051f:       int3
    0.00 :   ffffffff81c00520:       pushq   $0x76
    0.00 :   ffffffff81c00522:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00527:       int3
    0.00 :   ffffffff81c00528:       pushq   $0x77
    0.00 :   ffffffff81c0052a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0052f:       int3
    0.00 :   ffffffff81c00530:       pushq   $0x78
    0.00 :   ffffffff81c00532:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00537:       int3
    0.00 :   ffffffff81c00538:       pushq   $0x79
    0.00 :   ffffffff81c0053a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0053f:       int3
    0.00 :   ffffffff81c00540:       pushq   $0x7a
    0.00 :   ffffffff81c00542:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00547:       int3
    0.00 :   ffffffff81c00548:       pushq   $0x7b
    0.00 :   ffffffff81c0054a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0054f:       int3
    0.00 :   ffffffff81c00550:       pushq   $0x7c
    0.00 :   ffffffff81c00552:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00557:       int3
    0.00 :   ffffffff81c00558:       pushq   $0x7d
    0.00 :   ffffffff81c0055a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0055f:       int3
    0.00 :   ffffffff81c00560:       pushq   $0x7e
    0.00 :   ffffffff81c00562:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00567:       int3
    0.00 :   ffffffff81c00568:       pushq   $0x7f
    0.00 :   ffffffff81c0056a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0056f:       int3
    0.00 :   ffffffff81c00570:       pushq   $-0x80
    0.00 :   ffffffff81c00572:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00577:       int3
    0.00 :   ffffffff81c00578:       pushq   $-0x7f
    0.00 :   ffffffff81c0057a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0057f:       int3
    0.00 :   ffffffff81c00580:       pushq   $-0x7e
    0.00 :   ffffffff81c00582:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00587:       int3
    0.00 :   ffffffff81c00588:       pushq   $-0x7d
    0.00 :   ffffffff81c0058a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0058f:       int3
    0.00 :   ffffffff81c00590:       pushq   $-0x7c
    0.00 :   ffffffff81c00592:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00597:       int3
    0.00 :   ffffffff81c00598:       pushq   $-0x7b
    0.00 :   ffffffff81c0059a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0059f:       int3
    0.00 :   ffffffff81c005a0:       pushq   $-0x7a
    0.00 :   ffffffff81c005a2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005a7:       int3
    0.00 :   ffffffff81c005a8:       pushq   $-0x79
    0.00 :   ffffffff81c005aa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005af:       int3
    0.00 :   ffffffff81c005b0:       pushq   $-0x78
    0.00 :   ffffffff81c005b2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005b7:       int3
    0.00 :   ffffffff81c005b8:       pushq   $-0x77
    0.00 :   ffffffff81c005ba:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005bf:       int3
    0.00 :   ffffffff81c005c0:       pushq   $-0x76
    0.00 :   ffffffff81c005c2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005c7:       int3
    0.00 :   ffffffff81c005c8:       pushq   $-0x75
    0.00 :   ffffffff81c005ca:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005cf:       int3
    0.00 :   ffffffff81c005d0:       pushq   $-0x74
    0.00 :   ffffffff81c005d2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005d7:       int3
    0.00 :   ffffffff81c005d8:       pushq   $-0x73
    0.00 :   ffffffff81c005da:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005df:       int3
    0.00 :   ffffffff81c005e0:       pushq   $-0x72
    0.00 :   ffffffff81c005e2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005e7:       int3
    0.00 :   ffffffff81c005e8:       pushq   $-0x71
    0.00 :   ffffffff81c005ea:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005ef:       int3
    0.00 :   ffffffff81c005f0:       pushq   $-0x70
    0.00 :   ffffffff81c005f2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005f7:       int3
    0.00 :   ffffffff81c005f8:       pushq   $-0x6f
    0.00 :   ffffffff81c005fa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c005ff:       int3
    0.00 :   ffffffff81c00600:       pushq   $-0x6e
    0.00 :   ffffffff81c00602:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00607:       int3
    0.00 :   ffffffff81c00608:       pushq   $-0x6d
    0.00 :   ffffffff81c0060a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0060f:       int3
    0.00 :   ffffffff81c00610:       pushq   $-0x6c
    0.00 :   ffffffff81c00612:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00617:       int3
    0.00 :   ffffffff81c00618:       pushq   $-0x6b
    0.00 :   ffffffff81c0061a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0061f:       int3
    0.00 :   ffffffff81c00620:       pushq   $-0x6a
    0.00 :   ffffffff81c00622:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00627:       int3
    0.00 :   ffffffff81c00628:       pushq   $-0x69
    0.00 :   ffffffff81c0062a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0062f:       int3
    0.00 :   ffffffff81c00630:       pushq   $-0x68
    0.00 :   ffffffff81c00632:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00637:       int3
    0.00 :   ffffffff81c00638:       pushq   $-0x67
    0.00 :   ffffffff81c0063a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0063f:       int3
    0.00 :   ffffffff81c00640:       pushq   $-0x66
    0.00 :   ffffffff81c00642:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00647:       int3
    0.00 :   ffffffff81c00648:       pushq   $-0x65
    0.00 :   ffffffff81c0064a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0064f:       int3
    0.00 :   ffffffff81c00650:       pushq   $-0x64
    0.00 :   ffffffff81c00652:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00657:       int3
    0.00 :   ffffffff81c00658:       pushq   $-0x63
    0.00 :   ffffffff81c0065a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0065f:       int3
    0.00 :   ffffffff81c00660:       pushq   $-0x62
    0.00 :   ffffffff81c00662:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00667:       int3
    0.00 :   ffffffff81c00668:       pushq   $-0x61
    0.00 :   ffffffff81c0066a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0066f:       int3
    0.00 :   ffffffff81c00670:       pushq   $-0x60
    0.00 :   ffffffff81c00672:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00677:       int3
    0.00 :   ffffffff81c00678:       pushq   $-0x5f
    0.00 :   ffffffff81c0067a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0067f:       int3
    0.00 :   ffffffff81c00680:       pushq   $-0x5e
    0.00 :   ffffffff81c00682:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00687:       int3
    0.00 :   ffffffff81c00688:       pushq   $-0x5d
    0.00 :   ffffffff81c0068a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0068f:       int3
    0.00 :   ffffffff81c00690:       pushq   $-0x5c
    0.00 :   ffffffff81c00692:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00697:       int3
    0.00 :   ffffffff81c00698:       pushq   $-0x5b
    0.00 :   ffffffff81c0069a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0069f:       int3
    0.00 :   ffffffff81c006a0:       pushq   $-0x5a
    0.00 :   ffffffff81c006a2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006a7:       int3
    0.00 :   ffffffff81c006a8:       pushq   $-0x59
    0.00 :   ffffffff81c006aa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006af:       int3
    0.00 :   ffffffff81c006b0:       pushq   $-0x58
    0.00 :   ffffffff81c006b2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006b7:       int3
    0.00 :   ffffffff81c006b8:       pushq   $-0x57
    0.00 :   ffffffff81c006ba:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006bf:       int3
    0.00 :   ffffffff81c006c0:       pushq   $-0x56
    0.00 :   ffffffff81c006c2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006c7:       int3
    0.00 :   ffffffff81c006c8:       pushq   $-0x55
    0.00 :   ffffffff81c006ca:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006cf:       int3
    0.00 :   ffffffff81c006d0:       pushq   $-0x54
    0.00 :   ffffffff81c006d2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006d7:       int3
    0.00 :   ffffffff81c006d8:       pushq   $-0x53
    0.00 :   ffffffff81c006da:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006df:       int3
    0.00 :   ffffffff81c006e0:       pushq   $-0x52
    0.00 :   ffffffff81c006e2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006e7:       int3
    0.00 :   ffffffff81c006e8:       pushq   $-0x51
    0.00 :   ffffffff81c006ea:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006ef:       int3
    0.00 :   ffffffff81c006f0:       pushq   $-0x50
    0.00 :   ffffffff81c006f2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006f7:       int3
    0.00 :   ffffffff81c006f8:       pushq   $-0x4f
    0.00 :   ffffffff81c006fa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c006ff:       int3
    0.00 :   ffffffff81c00700:       pushq   $-0x4e
    0.00 :   ffffffff81c00702:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00707:       int3
    0.00 :   ffffffff81c00708:       pushq   $-0x4d
    0.00 :   ffffffff81c0070a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0070f:       int3
    0.00 :   ffffffff81c00710:       pushq   $-0x4c
    0.00 :   ffffffff81c00712:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00717:       int3
    0.00 :   ffffffff81c00718:       pushq   $-0x4b
    0.00 :   ffffffff81c0071a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0071f:       int3
    0.00 :   ffffffff81c00720:       pushq   $-0x4a
    0.00 :   ffffffff81c00722:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00727:       int3
    0.00 :   ffffffff81c00728:       pushq   $-0x49
    0.00 :   ffffffff81c0072a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0072f:       int3
    0.00 :   ffffffff81c00730:       pushq   $-0x48
    0.00 :   ffffffff81c00732:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00737:       int3
    0.00 :   ffffffff81c00738:       pushq   $-0x47
    0.00 :   ffffffff81c0073a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0073f:       int3
    0.00 :   ffffffff81c00740:       pushq   $-0x46
    0.00 :   ffffffff81c00742:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00747:       int3
    0.00 :   ffffffff81c00748:       pushq   $-0x45
    0.00 :   ffffffff81c0074a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0074f:       int3
    0.00 :   ffffffff81c00750:       pushq   $-0x44
    0.00 :   ffffffff81c00752:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00757:       int3
    0.00 :   ffffffff81c00758:       pushq   $-0x43
    0.00 :   ffffffff81c0075a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0075f:       int3
    0.00 :   ffffffff81c00760:       pushq   $-0x42
    0.00 :   ffffffff81c00762:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00767:       int3
    0.00 :   ffffffff81c00768:       pushq   $-0x41
    0.00 :   ffffffff81c0076a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0076f:       int3
    0.00 :   ffffffff81c00770:       pushq   $-0x40
    0.00 :   ffffffff81c00772:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00777:       int3
    0.00 :   ffffffff81c00778:       pushq   $-0x3f
    0.00 :   ffffffff81c0077a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0077f:       int3
    0.00 :   ffffffff81c00780:       pushq   $-0x3e
    0.00 :   ffffffff81c00782:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00787:       int3
    0.00 :   ffffffff81c00788:       pushq   $-0x3d
    0.00 :   ffffffff81c0078a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0078f:       int3
    0.00 :   ffffffff81c00790:       pushq   $-0x3c
    0.00 :   ffffffff81c00792:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00797:       int3
    0.00 :   ffffffff81c00798:       pushq   $-0x3b
    0.00 :   ffffffff81c0079a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0079f:       int3
    0.00 :   ffffffff81c007a0:       pushq   $-0x3a
    0.00 :   ffffffff81c007a2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007a7:       int3
    0.00 :   ffffffff81c007a8:       pushq   $-0x39
    0.00 :   ffffffff81c007aa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007af:       int3
    0.00 :   ffffffff81c007b0:       pushq   $-0x38
    0.00 :   ffffffff81c007b2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007b7:       int3
    0.00 :   ffffffff81c007b8:       pushq   $-0x37
    0.00 :   ffffffff81c007ba:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007bf:       int3
    0.00 :   ffffffff81c007c0:       pushq   $-0x36
    0.00 :   ffffffff81c007c2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007c7:       int3
    0.00 :   ffffffff81c007c8:       pushq   $-0x35
    0.00 :   ffffffff81c007ca:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007cf:       int3
    0.00 :   ffffffff81c007d0:       pushq   $-0x34
    0.00 :   ffffffff81c007d2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007d7:       int3
    0.00 :   ffffffff81c007d8:       pushq   $-0x33
    0.00 :   ffffffff81c007da:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007df:       int3
    0.00 :   ffffffff81c007e0:       pushq   $-0x32
    0.00 :   ffffffff81c007e2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007e7:       int3
    0.00 :   ffffffff81c007e8:       pushq   $-0x31
    0.00 :   ffffffff81c007ea:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007ef:       int3
    0.00 :   ffffffff81c007f0:       pushq   $-0x30
    0.00 :   ffffffff81c007f2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007f7:       int3
    0.00 :   ffffffff81c007f8:       pushq   $-0x2f
    0.00 :   ffffffff81c007fa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c007ff:       int3
    0.00 :   ffffffff81c00800:       pushq   $-0x2e
    0.00 :   ffffffff81c00802:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00807:       int3
    0.00 :   ffffffff81c00808:       pushq   $-0x2d
    0.00 :   ffffffff81c0080a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0080f:       int3
    0.00 :   ffffffff81c00810:       pushq   $-0x2c
    0.00 :   ffffffff81c00812:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00817:       int3
    0.00 :   ffffffff81c00818:       pushq   $-0x2b
    0.00 :   ffffffff81c0081a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0081f:       int3
    0.00 :   ffffffff81c00820:       pushq   $-0x2a
    0.00 :   ffffffff81c00822:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00827:       int3
    0.00 :   ffffffff81c00828:       pushq   $-0x29
    0.00 :   ffffffff81c0082a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0082f:       int3
    0.00 :   ffffffff81c00830:       pushq   $-0x28
    0.00 :   ffffffff81c00832:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00837:       int3
    0.00 :   ffffffff81c00838:       pushq   $-0x27
    0.00 :   ffffffff81c0083a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0083f:       int3
    0.00 :   ffffffff81c00840:       pushq   $-0x26
    0.00 :   ffffffff81c00842:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00847:       int3
    0.00 :   ffffffff81c00848:       pushq   $-0x25
    0.00 :   ffffffff81c0084a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0084f:       int3
    0.00 :   ffffffff81c00850:       pushq   $-0x24
    0.00 :   ffffffff81c00852:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00857:       int3
    0.00 :   ffffffff81c00858:       pushq   $-0x23
    0.00 :   ffffffff81c0085a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0085f:       int3
    0.00 :   ffffffff81c00860:       pushq   $-0x22
    0.00 :   ffffffff81c00862:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00867:       int3
    0.00 :   ffffffff81c00868:       pushq   $-0x21
    0.00 :   ffffffff81c0086a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0086f:       int3
    0.00 :   ffffffff81c00870:       pushq   $-0x20
    0.00 :   ffffffff81c00872:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00877:       int3
    0.00 :   ffffffff81c00878:       pushq   $-0x1f
    0.00 :   ffffffff81c0087a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0087f:       int3
    0.00 :   ffffffff81c00880:       pushq   $-0x1e
    0.00 :   ffffffff81c00882:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00887:       int3
    0.00 :   ffffffff81c00888:       pushq   $-0x1d
    0.00 :   ffffffff81c0088a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0088f:       int3
    0.00 :   ffffffff81c00890:       pushq   $-0x1c
    0.00 :   ffffffff81c00892:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c00897:       int3
    0.00 :   ffffffff81c00898:       pushq   $-0x1b
    0.00 :   ffffffff81c0089a:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c0089f:       int3
    0.00 :   ffffffff81c008a0:       pushq   $-0x1a
    0.00 :   ffffffff81c008a2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c008a7:       int3
    0.00 :   ffffffff81c008a8:       pushq   $-0x19
    0.00 :   ffffffff81c008aa:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c008af:       int3
    0.00 :   ffffffff81c008b0:       pushq   $-0x18
    0.00 :   ffffffff81c008b2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c008b7:       int3
    0.00 :   ffffffff81c008b8:       pushq   $-0x17
    0.00 :   ffffffff81c008ba:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c008bf:       int3
    0.00 :   ffffffff81c008c0:       pushq   $-0x16
    0.00 :   ffffffff81c008c2:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c008c7:       int3
    0.00 :   ffffffff81c008c8:       pushq   $-0x15
    0.00 :   ffffffff81c008ca:       jmp     0xffffffff81c00cc0 <asm_common_interrupt>
    0.00 :   ffffffff81c008cf:       int3
 Percent |	Source code & Disassembly of elf for cycles (7 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81935d00 <skb_release_data>:
         : 5                ; skb_release_data():
    0.00 :   ffffffff81935d00:       pushq   %rbp
    0.00 :   ffffffff81935d01:       movq    %rsp, %rbp
    0.00 :   ffffffff81935d04:       pushq   %r15
    0.00 :   ffffffff81935d06:       movq    %rdi, %r15
    0.00 :   ffffffff81935d09:       pushq   %r14
    0.00 :   ffffffff81935d0b:       movl    %edx, %r14d
    0.00 :   ffffffff81935d0e:       pushq   %r13
    0.00 :   ffffffff81935d10:       pushq   %r12
    0.00 :   ffffffff81935d12:       pushq   %rbx
    0.00 :   ffffffff81935d13:       subq    $0x8, %rsp
    0.00 :   ffffffff81935d17:       movl    %esi, -0x2c(%rbp)
    0.00 :   ffffffff81935d1a:       movzbl  0x7e(%rdi), %eax
    0.00 :   ffffffff81935d1e:       movl    0xb8(%rdi), %r13d
    0.00 :   ffffffff81935d25:       addq    0xc0(%rdi), %r13
    0.00 :   ffffffff81935d2c:       testb   $0x1, %al
    0.00 :   ffffffff81935d2e:       je      0xffffffff81935d5a <skb_release_data+0x5a>
    0.00 :   ffffffff81935d30:       andl    $0x2, %eax
    0.00 :   ffffffff81935d33:       cmpb    $0x1, %al
    0.00 :   ffffffff81935d35:       movl    %eax, %edx
    0.00 :   ffffffff81935d37:       sbbl    %eax, %eax
    0.00 :   ffffffff81935d39:       orl     $0xfffeffff, %eax # imm = 0xFFFEFFFF
    0.00 :   ffffffff81935d3e:       cmpb    $0x1, %dl
    0.00 :   ffffffff81935d41:       sbbl    %edx, %edx
    0.00 :   ffffffff81935d43:       xorw    %dx, %dx
    0.00 :   ffffffff81935d46:       addl    $0x10001, %edx  # imm = 0x10001
    0.00 :   ffffffff81935d4c:       lock
    0.00 :   ffffffff81935d4d:       xaddl   %eax, 0x20(%r13)
   10.25 :   ffffffff81935d52:       cmpl    %eax, %edx
    0.00 :   ffffffff81935d54:       jne     0xffffffff81935e3a <skb_release_data+0x13a>
   12.76 :   ffffffff81935d5a:       testq   %r15, %r15
    0.00 :   ffffffff81935d5d:       je      0xffffffff81935dba <skb_release_data+0xba>
    0.00 :   ffffffff81935d5f:       movl    0xb8(%r15), %eax
    0.00 :   ffffffff81935d66:       addq    0xc0(%r15), %rax
    0.00 :   ffffffff81935d6d:       movzbl  (%rax), %edx
    0.00 :   ffffffff81935d70:       testb   $0x1, %dl
    0.00 :   ffffffff81935d73:       je      0xffffffff81935dba <skb_release_data+0xba>
    0.00 :   ffffffff81935d75:       movq    0x28(%rax), %rsi
    0.00 :   ffffffff81935d79:       testq   %rsi, %rsi
    0.00 :   ffffffff81935d7c:       je      0xffffffff81935dba <skb_release_data+0xba>
    0.00 :   ffffffff81935d7e:       movzbl  (%r13), %ebx
    0.00 :   ffffffff81935d83:       andl    $0x10, %ebx
    0.00 :   ffffffff81935d86:       testb   $0x1, %sil
    0.00 :   ffffffff81935d8a:       jne     0xffffffff81935dad <skb_release_data+0xad>
    0.00 :   ffffffff81935d8c:       movq    (%rsi), %rax
    0.00 :   ffffffff81935d8f:       movl    $0x1, %edx
    0.00 :   ffffffff81935d94:       movq    %r15, %rdi
    0.00 :   ffffffff81935d97:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81935d9c:       movl    0xb8(%r15), %eax
    0.00 :   ffffffff81935da3:       addq    0xc0(%r15), %rax
    0.00 :   ffffffff81935daa:       movzbl  (%rax), %edx
    0.00 :   ffffffff81935dad:       andl    $-0x20, %edx
    0.00 :   ffffffff81935db0:       testb   %bl, %bl
    0.00 :   ffffffff81935db2:       movb    %dl, (%rax)
    0.00 :   ffffffff81935db4:       jne     0xffffffff81935e82 <skb_release_data+0x182>
    0.00 :   ffffffff81935dba:       xorl    %r12d, %r12d
    0.00 :   ffffffff81935dbd:       cmpb    $0x0, 0x2(%r13)
   11.09 :   ffffffff81935dc2:       movzbl  %r14b, %r14d
    0.00 :   ffffffff81935dc6:       jne     0xffffffff81935dd7 <skb_release_data+0xd7>
    0.00 :   ffffffff81935dc8:       jmp     0xffffffff81935e1e <skb_release_data+0x11e>
    0.00 :   ffffffff81935dca:       movzbl  0x2(%r13), %eax
    0.00 :   ffffffff81935dcf:       incq    %r12
    0.00 :   ffffffff81935dd2:       cmpl    %r12d, %eax
    0.00 :   ffffffff81935dd5:       jle     0xffffffff81935e1e <skb_release_data+0x11e>
    0.00 :   ffffffff81935dd7:       movq    %r12, %rax
    0.00 :   ffffffff81935dda:       shlq    $0x4, %rax
    0.00 :   ffffffff81935dde:       cmpb    $0x0, 0x7e(%r15)
    0.00 :   ffffffff81935de3:       movq    0x30(%r13,%rax), %rbx
    0.00 :   ffffffff81935de8:       jns     0xffffffff81935df9 <skb_release_data+0xf9>
    0.00 :   ffffffff81935dea:       movl    %r14d, %esi
    0.00 :   ffffffff81935ded:       movq    %rbx, %rdi
    0.00 :   ffffffff81935df0:       callq   0xffffffff819992f0 <page_pool_return_skb_page>
    0.00 :   ffffffff81935df5:       testb   %al, %al
    0.00 :   ffffffff81935df7:       jne     0xffffffff81935dca <skb_release_data+0xca>
    0.00 :   ffffffff81935df9:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff81935dfd:       testb   $0x1, %al
    0.00 :   ffffffff81935dff:       jne     0xffffffff81935e7c <skb_release_data+0x17c>
    0.00 :   ffffffff81935e01:       nop
    0.00 :   ffffffff81935e03:       lock
    0.00 :   ffffffff81935e04:       decl    0x34(%rbx)
    0.00 :   ffffffff81935e07:       jne     0xffffffff81935dca <skb_release_data+0xca>
    0.00 :   ffffffff81935e09:       movq    %rbx, %rdi
    0.00 :   ffffffff81935e0c:       incq    %r12
    0.00 :   ffffffff81935e0f:       callq   0xffffffff811f98d0 <__folio_put>
    0.00 :   ffffffff81935e14:       movzbl  0x2(%r13), %eax
    0.00 :   ffffffff81935e19:       cmpl    %r12d, %eax
    0.00 :   ffffffff81935e1c:       jg      0xffffffff81935dd7 <skb_release_data+0xd7>
   20.42 :   ffffffff81935e1e:       movq    0x8(%r13), %rdi
    0.00 :   ffffffff81935e22:       testq   %rdi, %rdi
    0.00 :   ffffffff81935e25:       je      0xffffffff81935e2f <skb_release_data+0x12f>
    0.00 :   ffffffff81935e27:       movl    -0x2c(%rbp), %esi
    0.00 :   ffffffff81935e2a:       callq   0xffffffff81935b70 <kfree_skb_list_reason>
    0.00 :   ffffffff81935e2f:       movl    %r14d, %esi
    0.00 :   ffffffff81935e32:       movq    %r15, %rdi
    0.00 :   ffffffff81935e35:       callq   0xffffffff81931ca0 <skb_free_head>
    0.00 :   ffffffff81935e3a:       andb    $0x7f, 0x7e(%r15)
    0.00 :   ffffffff81935e3f:       addq    $0x8, %rsp
    0.00 :   ffffffff81935e43:       popq    %rbx
    0.00 :   ffffffff81935e44:       popq    %r12
    0.00 :   ffffffff81935e46:       popq    %r13
    0.00 :   ffffffff81935e48:       popq    %r14
    0.00 :   ffffffff81935e4a:       popq    %r15
    0.00 :   ffffffff81935e4c:       popq    %rbp
    0.00 :   ffffffff81935e4d:       xorl    %eax, %eax
    0.00 :   ffffffff81935e4f:       xorl    %edx, %edx
    0.00 :   ffffffff81935e51:       xorl    %esi, %esi
   24.83 :   ffffffff81935e53:       xorl    %edi, %edi
   20.65 :   ffffffff81935e55:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81935e5a:       testl   $0xfff, %ebx    # imm = 0xFFF
    0.00 :   ffffffff81935e60:       jne     0xffffffff81935e03 <skb_release_data+0x103>
    0.00 :   ffffffff81935e62:       movq    (%rbx), %rax
    0.00 :   ffffffff81935e65:       testl   $0x10000, %eax  # imm = 0x10000
    0.00 :   ffffffff81935e6a:       je      0xffffffff81935e03 <skb_release_data+0x103>
    0.00 :   ffffffff81935e6c:       movq    0x48(%rbx), %rax
    0.00 :   ffffffff81935e70:       leaq    -0x1(%rax), %rdx
    0.00 :   ffffffff81935e74:       testb   $0x1, %al
    0.00 :   ffffffff81935e76:       cmovneq %rdx, %rbx
    0.00 :   ffffffff81935e7a:       jmp     0xffffffff81935e03 <skb_release_data+0x103>
    0.00 :   ffffffff81935e7c:       leaq    -0x1(%rax), %rbx
    0.00 :   ffffffff81935e80:       jmp     0xffffffff81935e03 <skb_release_data+0x103>
    0.00 :   ffffffff81935e82:       movzbl  %r14b, %r14d
    0.00 :   ffffffff81935e86:       jmp     0xffffffff81935e1e <skb_release_data+0x11e>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (8 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     000000000008fa38 <__default_morecore>:
    0.00 :   8fb10:          pushq   %r15
    0.00 :   8fb12:          pushq   %r14
   87.01 :   8fb14:          pushq   %r13
    0.00 :   8fb16:          pushq   %r12
    0.00 :   8fb18:          movl    %edx, %r13d
    0.00 :   8fb1b:          pushq   %rbp
    0.00 :   8fb1c:          pushq   %rbx
    0.00 :   8fb1d:          subq    $0x38, %rsp
    0.00 :   8fb21:          movq    0x8(%rsi), %rdx
    0.00 :   8fb25:          movq    %fs:0x28, %rax
    0.00 :   8fb2e:          movq    %rax, 0x28(%rsp)
    0.00 :   8fb33:          xorl    %eax, %eax
    0.00 :   8fb35:          movq    %rdx, %r12
    0.00 :   8fb38:          andq    $-0x8, %r12
    0.00 :   8fb3c:          movq    %r12, %rcx
    0.00 :   8fb3f:          negq    %rcx
    0.00 :   8fb42:          cmpq    %rsi, %rcx
    0.00 :   8fb45:          jb      0x8ffc8 <__default_morecore+0x590>
    0.00 :   8fb4b:          movq    %rsi, %rbx
    0.00 :   8fb4e:          testb   $0xf, %sil
    0.00 :   8fb52:          jne     0x8ffc8 <__default_morecore+0x590>
    0.00 :   8fb58:          cmpq    $0x1f, %r12
    0.00 :   8fb5c:          jbe     0x8ffd8 <__default_morecore+0x5a0>
    0.00 :   8fb62:          movq    %rdx, %rsi
    0.00 :   8fb65:          andl    $0x8, %esi
    0.00 :   8fb68:          jne     0x8ffd8 <__default_morecore+0x5a0>
    0.00 :   8fb6e:          movq    0x13b223(%rip), %rax    # 0x1cad98
    0.00 :   8fb75:          movq    %rdi, %rbp
    0.00 :   8fb78:          movq    %fs:(%rax), %rax
    0.00 :   8fb7c:          testq   %rax, %rax
    0.00 :   8fb7f:          je      0x8fbbf <__default_morecore+0x187>
    0.00 :   8fb81:          leaq    -0x11(%r12), %rcx
    0.00 :   8fb86:          shrq    $0x4, %rcx
    0.00 :   8fb8a:          cmpq    0x13b837(%rip), %rcx    # 0x1cb3c8 <__nptl_nthreads+0x120>
    0.00 :   8fb91:          jae     0x8fbbf <__default_morecore+0x187>
    0.00 :   8fb93:          movq    0x1428fe(%rip), %r10    # 0x1d2498 <__malloc_initialize_hook+0x18>
    0.00 :   8fb9a:          movq    0x13b837(%rip), %r8     # 0x1cb3d8 <__nptl_nthreads+0x130>
    0.00 :   8fba1:          leaq    0x10(%rbx), %r9
    0.00 :   8fba5:          cmpq    %r10, 0x18(%rbx)
    0.00 :   8fba9:          je      0x90210 <__default_morecore+0x7d8>
    0.00 :   8fbaf:          movzwl  (%rax,%rcx,2), %edi
    0.00 :   8fbb3:          movq    %rdi, %rsi
    0.00 :   8fbb6:          cmpq    %r8, %rdi
    0.00 :   8fbb9:          jb      0x8ff98 <__default_morecore+0x560>
    0.00 :   8fbbf:          movzbl  0x1428fa(%rip), %eax    # 0x1d24c0 <__malloc_initialize_hook+0x40>
    0.00 :   8fbc6:          cmpq    %r12, %rax
    0.00 :   8fbc9:          jb      0x8fc80 <__default_morecore+0x248>
    0.00 :   8fbcf:          leaq    (%rbx,%r12), %r14
    0.00 :   8fbd3:          movq    0x8(%r14), %rax
    0.00 :   8fbd7:          cmpq    $0x10, %rax
    0.00 :   8fbdb:          jbe     0x8ffe8 <__default_morecore+0x5b0>
    0.00 :   8fbe1:          andq    $-0x8, %rax
    0.00 :   8fbe5:          cmpq    0x888(%rbp), %rax
    0.00 :   8fbec:          jae     0x8ffe8 <__default_morecore+0x5b0>
    0.00 :   8fbf2:          movl    0x1428c4(%rip), %eax    # 0x1d24bc <__malloc_initialize_hook+0x3c>
    0.00 :   8fbf8:          testl   %eax, %eax
    0.00 :   8fbfa:          jne     0x90118 <__default_morecore+0x6e0>
    0.00 :   8fc00:          movl    $0x1, 0x8(%rbp)
    0.00 :   8fc07:          shrl    $0x4, %r12d
    0.00 :   8fc0b:          cmpb    $0x0, 0x1439c6(%rip)    # 0x1d35d8 <__libc_single_threaded>
    0.00 :   8fc12:          leal    -0x2(%r12), %ecx
    0.00 :   8fc17:          movq    0x10(%rbp,%rcx,8), %rdx
    0.00 :   8fc1c:          je      0x8ff10 <__default_morecore+0x4d8>
    0.00 :   8fc22:          cmpq    %rdx, %rbx
    0.00 :   8fc25:          je      0x8ff56 <__default_morecore+0x51e>
    0.00 :   8fc2b:          leaq    0x10(%rbx), %rax
    0.00 :   8fc2f:          shrq    $0xc, %rax
    0.00 :   8fc33:          xorq    %rdx, %rax
    0.00 :   8fc36:          movq    %rax, 0x10(%rbx)
    0.00 :   8fc3a:          movq    %rbx, 0x10(%rbp,%rcx,8)
    0.00 :   8fc3f:          testq   %rdx, %rdx
    0.00 :   8fc42:          je      0x8fc5a <__default_morecore+0x222>
    0.00 :   8fc44:          andl    $0x1, %r13d
    0.00 :   8fc48:          je      0x8fc5a <__default_morecore+0x222>
    0.00 :   8fc4a:          movq    0x8(%rdx), %rax
    0.00 :   8fc4e:          shrl    $0x4, %eax
    0.00 :   8fc51:          cmpl    %eax, %r12d
    0.00 :   8fc54:          jne     0x9030c <__default_morecore+0x8d4>
    0.00 :   8fc5a:          movq    0x28(%rsp), %rax
   12.99 :   8fc5f:          subq    %fs:0x28, %rax
    0.00 :   8fc68:          jne     0x903ca <__default_morecore+0x992>
    0.00 :   8fc6e:          addq    $0x38, %rsp
    0.00 :   8fc72:          popq    %rbx
    0.00 :   8fc73:          popq    %rbp
    0.00 :   8fc74:          popq    %r12
    0.00 :   8fc76:          popq    %r13
    0.00 :   8fc78:          popq    %r14
    0.00 :   8fc7a:          popq    %r15
    0.00 :   8fc7c:          retq
    0.00 :   8fc7d:          nopl    (%rax)
    0.00 :   8fc80:          andl    $0x2, %edx
    0.00 :   8fc83:          jne     0x8ff68 <__default_morecore+0x530>
    0.00 :   8fc89:          cmpb    $0x0, 0x143948(%rip)    # 0x1d35d8 <__libc_single_threaded>
    0.00 :   8fc90:          jne     0x8fc9c <__default_morecore+0x264>
    0.00 :   8fc92:          andl    $0x1, %r13d
    0.00 :   8fc96:          je      0x900e8 <__default_morecore+0x6b0>
    0.00 :   8fc9c:          movl    $0x1, 0x14(%rsp)
    0.00 :   8fca4:          movq    0x60(%rbp), %rax
    0.00 :   8fca8:          leaq    (%rbx,%r12), %r14
    0.00 :   8fcac:          cmpq    %rbx, %rax
    0.00 :   8fcaf:          je      0x90268 <__default_morecore+0x830>
    0.00 :   8fcb5:          testb   $0x2, 0x4(%rbp)
    0.00 :   8fcb9:          je      0x90278 <__default_morecore+0x840>
    0.00 :   8fcbf:          movq    0x8(%r14), %rax
    0.00 :   8fcc3:          testb   $0x1, %al
    0.00 :   8fcc5:          je      0x90298 <__default_morecore+0x860>
    0.00 :   8fccb:          movq    %rax, %r15
    0.00 :   8fcce:          andq    $-0x8, %r15
    0.00 :   8fcd2:          cmpq    $0x10, %rax
    0.00 :   8fcd6:          jbe     0x90108 <__default_morecore+0x6d0>
    0.00 :   8fcdc:          cmpq    0x888(%rbp), %r15
    0.00 :   8fce3:          jae     0x90108 <__default_morecore+0x6d0>
    0.00 :   8fce9:          movl    0x1427cd(%rip), %esi    # 0x1d24bc <__malloc_initialize_hook+0x3c>
    0.00 :   8fcef:          testl   %esi, %esi
    0.00 :   8fcf1:          jne     0x902a8 <__default_morecore+0x870>
    0.00 :   8fcf7:          testb   $0x1, 0x8(%rbx)
    0.00 :   8fcfb:          jne     0x8fd1f <__default_morecore+0x2e7>
    0.00 :   8fcfd:          movq    (%rbx), %rax
    0.00 :   8fd00:          subq    %rax, %rbx
    0.00 :   8fd03:          addq    %rax, %r12
    0.00 :   8fd06:          movq    0x8(%rbx), %rdx
    0.00 :   8fd0a:          andq    $-0x8, %rdx
    0.00 :   8fd0e:          cmpq    %rax, %rdx
    0.00 :   8fd11:          jne     0x90324 <__default_morecore+0x8ec>
    0.00 :   8fd17:          movq    %rbx, %rdi
    0.00 :   8fd1a:          callq   0x8eaa8 <timer_settime+0xb38>
    0.00 :   8fd1f:          cmpq    %r14, 0x60(%rbp)
    0.00 :   8fd23:          je      0x900d0 <__default_morecore+0x698>
    0.00 :   8fd29:          testb   $0x1, 0x8(%r14,%r15)
    0.00 :   8fd2f:          je      0x90168 <__default_morecore+0x730>
    0.00 :   8fd35:          andq    $-0x2, 0x8(%r14)
    0.00 :   8fd3a:          movq    0x70(%rbp), %rax
    0.00 :   8fd3e:          leaq    0x60(%rbp), %rdx
    0.00 :   8fd42:          cmpq    %rdx, 0x18(%rax)
    0.00 :   8fd46:          jne     0x90318 <__default_morecore+0x8e0>
    0.00 :   8fd4c:          movq    %r12, %rcx
    0.00 :   8fd4f:          movq    %rdx, 0x18(%rbx)
    0.00 :   8fd53:          movq    %rax, 0x10(%rbx)
    0.00 :   8fd57:          leaq    (%rbx,%r12), %rdx
    0.00 :   8fd5b:          orq     $0x1, %rcx
    0.00 :   8fd5f:          cmpq    $0x3ff, %r12            # imm = 0x3FF
    0.00 :   8fd66:          jbe     0x90040 <__default_morecore+0x608>
    0.00 :   8fd6c:          movq    $0x0, 0x20(%rbx)
    0.00 :   8fd74:          movq    $0x0, 0x28(%rbx)
    0.00 :   8fd7c:          movq    %rbx, 0x70(%rbp)
    0.00 :   8fd80:          movq    %rbx, 0x18(%rax)
    0.00 :   8fd84:          movq    %rcx, 0x8(%rbx)
    0.00 :   8fd88:          movq    %r12, (%rdx)
    0.00 :   8fd8b:          cmpq    $0xffff, %r12           # imm = 0xFFFF
    0.00 :   8fd92:          jbe     0x9004f <__default_morecore+0x617>
    0.00 :   8fd98:          movl    0x8(%rbp), %eax
    0.00 :   8fd9b:          testl   %eax, %eax
    0.00 :   8fd9d:          jne     0x902c0 <__default_morecore+0x888>
    0.00 :   8fda3:          leaq    0x13bed6(%rip), %rax    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   8fdaa:          cmpq    %rax, %rbp
    0.00 :   8fdad:          je      0x902d0 <__default_morecore+0x898>
    0.00 :   8fdb3:          movq    0x13b5d6(%rip), %rsi    # 0x1cb390 <__nptl_nthreads+0xe8>
    0.00 :   8fdba:          movq    0x60(%rbp), %r15
    0.00 :   8fdbe:          testq   %rsi, %rsi
    0.00 :   8fdc1:          je      0x902fa <__default_morecore+0x8c2>
    0.00 :   8fdc7:          leaq    (,%rsi,4), %r13
    0.00 :   8fdcf:          movq    %r13, %rbx
    0.00 :   8fdd2:          negq    %rbx
    0.00 :   8fdd5:          andq    %r15, %rbx
    0.00 :   8fdd8:          cmpq    %rbp, (%rbx)
    0.00 :   8fddb:          jne     0x904bc <__default_morecore+0xa84>
    0.00 :   8fde1:          movq    0x13b580(%rip), %rsi    # 0x1cb368 <__nptl_nthreads+0xc0>
    0.00 :   8fde8:          leaq    0x30(%rbx), %rax
    0.00 :   8fdec:          movq    %rsi, 0x18(%rsp)
    0.00 :   8fdf1:          cmpq    %rax, %r15
    0.00 :   8fdf4:          jne     0x903c1 <__default_morecore+0x989>
    0.00 :   8fdfa:          movq    %rsi, %rax
    0.00 :   8fdfd:          addq    $0x20, %rax
    0.00 :   8fe01:          movq    %rax, 0x8(%rsp)
    0.00 :   8fe06:          jmp     0x8fe45 <__default_morecore+0x40d>
    0.00 :   8fe08:          movq    0x20(%rbx), %rax
    0.00 :   8fe0c:          leaq    (%r15,%r12), %rdx
    0.00 :   8fe10:          decq    %rax
    0.00 :   8fe13:          testq   %rax, %rdx
    0.00 :   8fe16:          jne     0x9042c <__default_morecore+0x9f4>
    0.00 :   8fe1c:          movq    0x10(%rbx), %rax
    0.00 :   8fe20:          addq    %rbx, %rax
    0.00 :   8fe23:          cmpq    %rax, %rdx
    0.00 :   8fe26:          jne     0x9040d <__default_morecore+0x9d5>
    0.00 :   8fe2c:          orq     $0x1, %r12
    0.00 :   8fe30:          leaq    0x30(%rbx), %rax
    0.00 :   8fe34:          movq    %r15, 0x60(%rbp)
    0.00 :   8fe38:          movq    %r12, 0x8(%r15)
    0.00 :   8fe3c:          cmpq    %rax, %r15
    0.00 :   8fe3f:          jne     0x9017f <__default_morecore+0x747>
    0.00 :   8fe45:          movq    %rbx, %rdi
    0.00 :   8fe48:          movq    0x8(%rbx), %rbx
    0.00 :   8fe4c:          movq    0x10(%rbx), %r8
    0.00 :   8fe50:          leaq    -0x10(%rbx,%r8), %rax
    0.00 :   8fe55:          leaq    -0x10(%r8), %rcx
    0.00 :   8fe59:          andl    $0xf, %eax
    0.00 :   8fe5c:          subq    %rax, %rcx
    0.00 :   8fe5f:          cmpq    $0x1, 0x8(%rbx,%rcx)
    0.00 :   8fe65:          leaq    (%rbx,%rcx), %rdx
    0.00 :   8fe69:          jne     0x9044b <__default_morecore+0xa13>
    0.00 :   8fe6f:          subq    (%rdx), %rdx
    0.00 :   8fe72:          movq    0x8(%rdx), %r9
    0.00 :   8fe76:          movq    %rdx, %r14
    0.00 :   8fe79:          movq    %r9, %rcx
    0.00 :   8fe7c:          andq    $-0x8, %rcx
    0.00 :   8fe80:          leaq    0x10(%rax,%rcx), %r12
    0.00 :   8fe85:          leaq    0xf(%rax,%rcx), %rax
    0.00 :   8fe8a:          cmpq    $0x3e, %rax
    0.00 :   8fe8e:          ja      0x903ee <__default_morecore+0x9b6>
    0.00 :   8fe94:          andl    $0x1, %r9d
    0.00 :   8fe98:          jne     0x8fe9d <__default_morecore+0x465>
    0.00 :   8fe9a:          addq    (%rdx), %r12
    0.00 :   8fe9d:          testq   %r12, %r12
    0.00 :   8fea0:          jle     0x903cf <__default_morecore+0x997>
    0.00 :   8fea6:          cmpq    %r13, %r12
    0.00 :   8fea9:          jae     0x903cf <__default_morecore+0x997>
    0.00 :   8feaf:          movq    0x8(%rsp), %rcx
    0.00 :   8feb4:          movq    %r13, %rax
    0.00 :   8feb7:          addq    0x20(%rdi), %rcx
    0.00 :   8febb:          subq    %r8, %rax
    0.00 :   8febe:          addq    %r12, %rax
    0.00 :   8fec1:          cmpq    %rcx, %rax
    0.00 :   8fec4:          jb      0x90178 <__default_morecore+0x740>
    0.00 :   8feca:          movq    0x10(%rdi), %rax
    0.00 :   8fece:          subq    %rax, 0x888(%rbp)
    0.00 :   8fed5:          leaq    (%rdi,%r13), %rax
    0.00 :   8fed9:          cmpq    %rax, 0x1425c0(%rip)    # 0x1d24a0 <__malloc_initialize_hook+0x20>
    0.00 :   8fee0:          je      0x900c0 <__default_morecore+0x688>
    0.00 :   8fee6:          movq    %r13, %rsi
    0.00 :   8fee9:          movq    %r14, %r15
    0.00 :   8feec:          callq   0xfa200 <munmap>
    0.00 :   8fef1:          testb   $0x1, 0x8(%r14)
    0.00 :   8fef6:          jne     0x8fe08 <__default_morecore+0x3d0>
    0.00 :   8fefc:          subq    (%r14), %r15
    0.00 :   8feff:          movq    %r15, %rdi
    0.00 :   8ff02:          callq   0x8eaa8 <timer_settime+0xb38>
    0.00 :   8ff07:          jmp     0x8fe08 <__default_morecore+0x3d0>
    0.00 :   8ff0c:          nopl    (%rax)
    0.00 :   8ff10:          movl    %r12d, %eax
    0.00 :   8ff13:          leaq    0x10(%rbx), %rsi
    0.00 :   8ff17:          leaq    (%rbp,%rax,8), %rcx
    0.00 :   8ff1c:          shrq    $0xc, %rsi
    0.00 :   8ff20:          jmp     0x8ff51 <__default_morecore+0x519>
    0.00 :   8ff22:          nopw    (%rax,%rax)
    0.00 :   8ff28:          movq    %rdx, %rax
    0.00 :   8ff2b:          xorq    %rsi, %rax
    0.00 :   8ff2e:          movq    %rax, 0x10(%rbx)
    0.00 :   8ff32:          movq    %rdx, %rax
    0.00 :   8ff35:          cmpl    $0x0, %fs:0x18
    0.00 :   8ff3e:          je      0x8ff41 <__default_morecore+0x509>
    0.00 :   8ff40:          lock
    0.00 :   8ff41:          cmpxchgq        %rbx, (%rcx)
    0.00 :   8ff45:          cmpq    %rax, %rdx
    0.00 :   8ff48:          je      0x8fc3f <__default_morecore+0x207>
    0.00 :   8ff4e:          movq    %rax, %rdx
    0.00 :   8ff51:          cmpq    %rbx, %rdx
    0.00 :   8ff54:          jne     0x8ff28 <__default_morecore+0x4f0>
    0.00 :   8ff56:          leaq    0x103683(%rip), %rdi    # 0x1935e0 <_itoa_lower_digits+0x1e20>
    0.00 :   8ff5d:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   8ff62:          nopw    (%rax,%rax)
    0.00 :   8ff68:          movq    0x28(%rsp), %rax
    0.00 :   8ff6d:          subq    %fs:0x28, %rax
    0.00 :   8ff76:          jne     0x903ca <__default_morecore+0x992>
    0.00 :   8ff7c:          addq    $0x38, %rsp
    0.00 :   8ff80:          movq    %rbx, %rdi
    0.00 :   8ff83:          popq    %rbx
    0.00 :   8ff84:          popq    %rbp
    0.00 :   8ff85:          popq    %r12
    0.00 :   8ff87:          popq    %r13
    0.00 :   8ff89:          popq    %r14
    0.00 :   8ff8b:          popq    %r15
    0.00 :   8ff8d:          jmp     0x8e3f0 <timer_settime+0x480>
    0.00 :   8ff92:          nopw    (%rax,%rax)
    0.00 :   8ff98:          movq    %r9, %rdx
    0.00 :   8ff9b:          incl    %esi
    0.00 :   8ff9d:          movq    %r10, 0x18(%rbx)
    0.00 :   8ffa1:          shrq    $0xc, %rdx
    0.00 :   8ffa5:          xorq    0x80(%rax,%rcx,8), %rdx
    0.00 :   8ffad:          movq    %rdx, 0x10(%rbx)
    0.00 :   8ffb1:          movq    %r9, 0x80(%rax,%rcx,8)
    0.00 :   8ffb9:          movw    %si, (%rax,%rcx,2)
    0.00 :   8ffbd:          jmp     0x8fc5a <__default_morecore+0x222>
    0.00 :   8ffc2:          nopw    (%rax,%rax)
    0.00 :   8ffc8:          leaq    0xfe25d(%rip), %rdi     # 0x18e22c <_libc_intl_domainname+0x139e>
    0.00 :   8ffcf:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   8ffd4:          nopl    (%rax)
    0.00 :   8ffd8:          leaq    0xfe265(%rip), %rdi     # 0x18e244 <_libc_intl_domainname+0x13b6>
    0.00 :   8ffdf:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   8ffe4:          nopl    (%rax)
    0.00 :   8ffe8:          testl   %r13d, %r13d
    0.00 :   8ffeb:          jne     0x90030 <__default_morecore+0x5f8>
    0.00 :   8ffed:          movl    $0x1, %edx
    0.00 :   8fff2:          movl    %r13d, %eax
    0.00 :   8fff5:          lock
    0.00 :   8fff6:          cmpxchgl        %edx, (%rbp)
    0.00 :   8fffa:          jne     0x900ac <__default_morecore+0x674>
    0.00 :   90000:          movq    0x8(%r14), %rax
    0.00 :   90004:          cmpq    $0x10, %rax
    0.00 :   90008:          jbe     0x90098 <__default_morecore+0x660>
    0.00 :   9000e:          movq    0x888(%rbp), %r14
    0.00 :   90015:          andq    $-0x8, %rax
    0.00 :   90019:          xorl    %edx, %edx
    0.00 :   9001b:          xchgl   %edx, (%rbp)
    0.00 :   9001e:          cmpl    $0x1, %edx
    0.00 :   90021:          jg      0x9033d <__default_morecore+0x905>
    0.00 :   90027:          cmpq    %r14, %rax
    0.00 :   9002a:          jb      0x8fbf2 <__default_morecore+0x1ba>
    0.00 :   90030:          leaq    0x103581(%rip), %rdi    # 0x1935b8 <_itoa_lower_digits+0x1df8>
    0.00 :   90037:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   9003c:          nopl    (%rax)
    0.00 :   90040:          movq    %rbx, 0x70(%rbp)
    0.00 :   90044:          movq    %rbx, 0x18(%rax)
    0.00 :   90048:          movq    %rcx, 0x8(%rbx)
    0.00 :   9004c:          movq    %r12, (%rdx)
    0.00 :   9004f:          movl    0x14(%rsp), %eax
    0.00 :   90053:          testl   %eax, %eax
    0.00 :   90055:          jne     0x8fc5a <__default_morecore+0x222>
    0.00 :   9005b:          movl    0x14(%rsp), %r13d
    0.00 :   90060:          xchgl   %r13d, (%rbp)
    0.00 :   90064:          cmpl    $0x1, %r13d
    0.00 :   90068:          jle     0x8fc5a <__default_morecore+0x222>
    0.00 :   9006e:          movq    0x28(%rsp), %rax
    0.00 :   90073:          subq    %fs:0x28, %rax
    0.00 :   9007c:          jne     0x903ca <__default_morecore+0x992>
    0.00 :   90082:          addq    $0x38, %rsp
    0.00 :   90086:          movq    %rbp, %rdi
    0.00 :   90089:          popq    %rbx
    0.00 :   9008a:          popq    %rbp
    0.00 :   9008b:          popq    %r12
    0.00 :   9008d:          popq    %r13
    0.00 :   9008f:          popq    %r14
    0.00 :   90091:          popq    %r15
    0.00 :   90093:          jmp     0x7fe38 <__lll_lock_wake_private>
    0.00 :   90098:          xorl    %eax, %eax
    0.00 :   9009a:          xchgl   %eax, (%rbp)
    0.00 :   9009d:          cmpl    $0x1, %eax
    0.00 :   900a0:          jle     0x90030 <__default_morecore+0x5f8>
    0.00 :   900a2:          movq    %rbp, %rdi
    0.00 :   900a5:          callq   0x7fe38 <__lll_lock_wake_private>
    0.00 :   900aa:          jmp     0x90030 <__default_morecore+0x5f8>
    0.00 :   900ac:          movq    %rbp, %rdi
    0.00 :   900af:          callq   0x7fd90 <__lll_lock_wait_private>
    0.00 :   900b4:          jmp     0x90000 <__default_morecore+0x5c8>
    0.00 :   900b9:          nopl    (%rax)
    0.00 :   900c0:          movq    $0x0, 0x1423d5(%rip)    # 0x1d24a0 <__malloc_initialize_hook+0x20>
    0.00 :   900cb:          jmp     0x8fee6 <__default_morecore+0x4ae>
    0.00 :   900d0:          addq    %r15, %r12
    0.00 :   900d3:          movq    %r12, %rax
    0.00 :   900d6:          orq     $0x1, %rax
    0.00 :   900da:          movq    %rax, 0x8(%rbx)
    0.00 :   900de:          movq    %rbx, 0x60(%rbp)
    0.00 :   900e2:          jmp     0x8fd8b <__default_morecore+0x353>
    0.00 :   900e7:          nop
    0.00 :   900e8:          xorl    %eax, %eax
    0.00 :   900ea:          movl    $0x1, %edx
    0.00 :   900ef:          lock
    0.00 :   900f0:          cmpxchgl        %edx, (%rbp)
    0.00 :   900f4:          jne     0x90330 <__default_morecore+0x8f8>
    0.00 :   900fa:          movl    $0x0, 0x14(%rsp)
    0.00 :   90102:          jmp     0x8fca4 <__default_morecore+0x26c>
    0.00 :   90107:          nop
    0.00 :   90108:          leaq    0x103561(%rip), %rdi    # 0x193670 <_itoa_lower_digits+0x1eb0>
    0.00 :   9010f:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   90114:          nopl    (%rax)
    0.00 :   90118:          movzbl  %al, %eax
    0.00 :   9011b:          leaq    0x18(%rbx), %rdi
    0.00 :   9011f:          leaq    0x10(%rbx), %rcx
    0.00 :   90123:          movb    %al, %ah
    0.00 :   90125:          andq    $-0x8, %rdi
    0.00 :   90129:          leaq    -0x10(%r12), %rdx
    0.00 :   9012e:          movq    %rax, %rsi
    0.00 :   90131:          subq    %rdi, %rcx
    0.00 :   90134:          shlq    $0x10, %rsi
    0.00 :   90138:          addl    %edx, %ecx
    0.00 :   9013a:          orq     %rsi, %rax
    0.00 :   9013d:          movq    %rax, %rsi
    0.00 :   90140:          shlq    $0x20, %rsi
    0.00 :   90144:          orq     %rsi, %rax
    0.00 :   90147:          movl    %edx, %esi
    0.00 :   90149:          movl    %ecx, %edx
    0.00 :   9014b:          movq    %rax, 0x10(%rbx)
    0.00 :   9014f:          movq    %rax, 0x8(%rbx,%rsi)
    0.00 :   90154:          shrl    $0x3, %edx
    0.00 :   90157:          movl    %edx, %ecx
    0.00 :   90159:          rep             stosq   %rax, %es:(%rdi)
    0.00 :   9015c:          jmp     0x8fc00 <__default_morecore+0x1c8>
    0.00 :   90161:          nopl    (%rax)
    0.00 :   90168:          movq    %r14, %rdi
    0.00 :   9016b:          addq    %r15, %r12
    0.00 :   9016e:          callq   0x8eaa8 <timer_settime+0xb38>
    0.00 :   90173:          jmp     0x8fd3a <__default_morecore+0x302>
    0.00 :   90178:          movq    0x8(%r15), %r12
    0.00 :   9017c:          movq    %rdi, %rbx
    0.00 :   9017f:          andq    $-0x8, %r12
    0.00 :   90183:          cmpq    0x13b1d6(%rip), %r12    # 0x1cb360 <__nptl_nthreads+0xb8>
    0.00 :   9018a:          jb      0x9004f <__default_morecore+0x617>
    0.00 :   90190:          movq    %r12, %rax
    0.00 :   90193:          subq    $0x21, %rax
    0.00 :   90197:          js      0x9004f <__default_morecore+0x617>
    0.00 :   9019d:          movq    0x18(%rsp), %rsi
    0.00 :   901a2:          cmpq    %rax, %rsi
    0.00 :   901a5:          jae     0x9004f <__default_morecore+0x617>
    0.00 :   901ab:          movq    0x20(%rbx), %r14
    0.00 :   901af:          subq    %rsi, %rax
    0.00 :   901b2:          negq    %r14
    0.00 :   901b5:          andq    %rax, %r14
    0.00 :   901b8:          je      0x9004f <__default_morecore+0x617>
    0.00 :   901be:          movq    0x10(%rbx), %r13
    0.00 :   901c2:          subq    %r14, %r13
    0.00 :   901c5:          cmpq    $0x2f, %r13
    0.00 :   901c9:          jle     0x9004f <__default_morecore+0x617>
    0.00 :   901cf:          movl    0x13b16b(%rip), %edx    # 0x1cb340 <__nptl_nthreads+0x98>
    0.00 :   901d5:          testl   %edx, %edx
    0.00 :   901d7:          js      0x90354 <__default_morecore+0x91c>
    0.00 :   901dd:          jne     0x90395 <__default_morecore+0x95d>
    0.00 :   901e3:          leaq    (%rbx,%r13), %rdi
    0.00 :   901e7:          movl    $0x4, %edx
    0.00 :   901ec:          movq    %r14, %rsi
    0.00 :   901ef:          callq   0xfa300 <madvise>
    0.00 :   901f4:          subq    %r14, %r12
    0.00 :   901f7:          movq    %r13, 0x10(%rbx)
    0.00 :   901fb:          subq    %r14, 0x888(%rbp)
    0.00 :   90202:          orq     $0x1, %r12
    0.00 :   90206:          movq    %r12, 0x8(%r15)
    0.00 :   9020a:          jmp     0x9004f <__default_morecore+0x617>
    0.00 :   9020f:          nop
    0.00 :   90210:          movq    0x80(%rax,%rcx,8), %rdi
    0.00 :   90218:          testq   %rdi, %rdi
    0.00 :   9021b:          jne     0x9024d <__default_morecore+0x815>
    0.00 :   9021d:          jmp     0x8fbaf <__default_morecore+0x177>
    0.00 :   90222:          nopw    (%rax,%rax)
    0.00 :   90228:          cmpq    %r9, %rdi
    0.00 :   9022b:          je      0x904b0 <__default_morecore+0xa78>
    0.00 :   90231:          movq    (%rdi), %r14
    0.00 :   90234:          shrq    $0xc, %rdi
    0.00 :   90238:          incq    %rsi
    0.00 :   9023b:          movq    %rdi, %r11
    0.00 :   9023e:          movq    %r14, %rdi
    0.00 :   90241:          xorq    %r11, %rdi
    0.00 :   90244:          cmpq    %r11, %r14
    0.00 :   90247:          je      0x8fbaf <__default_morecore+0x177>
    0.00 :   9024d:          cmpq    %r8, %rsi
    0.00 :   90250:          je      0x904a4 <__default_morecore+0xa6c>
    0.00 :   90256:          testb   $0xf, %dil
    0.00 :   9025a:          je      0x90228 <__default_morecore+0x7f0>
    0.00 :   9025c:          leaq    0x1032f5(%rip), %rdi    # 0x193558 <_itoa_lower_digits+0x1d98>
    0.00 :   90263:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   90268:          leaq    0x103399(%rip), %rdi    # 0x193608 <_itoa_lower_digits+0x1e48>
    0.00 :   9026f:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   90274:          nopl    (%rax)
    0.00 :   90278:          movq    0x8(%rax), %rdx
    0.00 :   9027c:          andq    $-0x8, %rdx
    0.00 :   90280:          addq    %rdx, %rax
    0.00 :   90283:          cmpq    %rax, %r14
    0.00 :   90286:          jb      0x8fcbf <__default_morecore+0x287>
    0.00 :   9028c:          leaq    0x103395(%rip), %rdi    # 0x193628 <_itoa_lower_digits+0x1e68>
    0.00 :   90293:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   90298:          leaq    0x1033a9(%rip), %rdi    # 0x193648 <_itoa_lower_digits+0x1e88>
    0.00 :   9029f:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   902a4:          nopl    (%rax)
    0.00 :   902a8:          leaq    -0x10(%r12), %rdx
    0.00 :   902ad:          leaq    0x10(%rbx), %rdi
    0.00 :   902b1:          callq   0x22310 <__tunable_get_val@plt+0x20>
    0.00 :   902b6:          jmp     0x8fcf7 <__default_morecore+0x2bf>
    0.00 :   902bb:          nopl    (%rax,%rax)
    0.00 :   902c0:          movq    %rbp, %rdi
    0.00 :   902c3:          callq   0x8eb80 <timer_settime+0xc10>
    0.00 :   902c8:          jmp     0x8fda3 <__default_morecore+0x36b>
    0.00 :   902cd:          nopl    (%rax)
    0.00 :   902d0:          movq    0x60(%rbp), %rax
    0.00 :   902d4:          movq    0x8(%rax), %rax
    0.00 :   902d8:          andq    $-0x8, %rax
    0.00 :   902dc:          cmpq    0x13b07d(%rip), %rax    # 0x1cb360 <__nptl_nthreads+0xb8>
    0.00 :   902e3:          jb      0x9004f <__default_morecore+0x617>
    0.00 :   902e9:          movq    0x13b078(%rip), %rdi    # 0x1cb368 <__nptl_nthreads+0xc0>
    0.00 :   902f0:          callq   0x8fa68 <__default_morecore+0x30>
    0.00 :   902f5:          jmp     0x9004f <__default_morecore+0x617>
    0.00 :   902fa:          movq    $-0x4000000, %rbx       # imm = 0xFC000000
    0.00 :   90301:          movl    $0x4000000, %r13d       # imm = 0x4000000
    0.00 :   90307:          jmp     0x8fdd5 <__default_morecore+0x39d>
    0.00 :   9030c:          leaq    0xfdf46(%rip), %rdi     # 0x18e259 <_libc_intl_domainname+0x13cb>
    0.00 :   90313:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   90318:          leaq    0x1033b1(%rip), %rdi    # 0x1936d0 <_itoa_lower_digits+0x1f10>
    0.00 :   9031f:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   90324:          leaq    0x10336d(%rip), %rdi    # 0x193698 <_itoa_lower_digits+0x1ed8>
    0.00 :   9032b:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   90330:          movq    %rbp, %rdi
    0.00 :   90333:          callq   0x7fd90 <__lll_lock_wait_private>
    0.00 :   90338:          jmp     0x900fa <__default_morecore+0x6c2>
    0.00 :   9033d:          movq    %rbp, %rdi
    0.00 :   90340:          movq    %rax, 0x8(%rsp)
    0.00 :   90345:          callq   0x7fe38 <__lll_lock_wake_private>
    0.00 :   9034a:          movq    0x8(%rsp), %rax
    0.00 :   9034f:          jmp     0x90027 <__default_morecore+0x5ef>
    0.00 :   90354:          movq    0x13ab0d(%rip), %rax    # 0x1cae68
    0.00 :   9035b:          movl    (%rax), %ecx
    0.00 :   9035d:          testl   %ecx, %ecx
    0.00 :   9035f:          movl    %ecx, 0x13afdb(%rip)    # 0x1cb340 <__nptl_nthreads+0x98>
    0.00 :   90365:          movl    %ecx, 0x18(%rsp)
    0.00 :   90369:          jne     0x90395 <__default_morecore+0x95d>
    0.00 :   9036b:          leaq    0x10348e(%rip), %rdi    # 0x193800 <_itoa_lower_digits+0x2040>
    0.00 :   90372:          movl    $0x80000, %esi          # imm = 0x80000
    0.00 :   90377:          xorl    %eax, %eax
    0.00 :   90379:          callq   0xf5a20 <__open_nocancel>
    0.00 :   9037e:          movl    %eax, %edi
    0.00 :   90380:          testl   %eax, %eax
    0.00 :   90382:          jns     0x9046a <__default_morecore+0xa32>
    0.00 :   90388:          cmpl    $0x0, 0x13afb1(%rip)    # 0x1cb340 <__nptl_nthreads+0x98>
    0.00 :   9038f:          je      0x901e3 <__default_morecore+0x7ab>
    0.00 :   90395:          xorl    %r9d, %r9d
    0.00 :   90398:          orl     $-0x1, %r8d
    0.00 :   9039c:          leaq    (%rbx,%r13), %rdi
    0.00 :   903a0:          xorl    %edx, %edx
    0.00 :   903a2:          movl    $0x32, %ecx
    0.00 :   903a7:          movq    %r14, %rsi
    0.00 :   903aa:          callq   0xfa1b0 <mmap64>
    0.00 :   903af:          incq    %rax
    0.00 :   903b2:          je      0x9004f <__default_morecore+0x617>
    0.00 :   903b8:          movq    %r13, 0x18(%rbx)
    0.00 :   903bc:          jmp     0x901f4 <__default_morecore+0x7bc>
    0.00 :   903c1:          movq    0x8(%r15), %r12
    0.00 :   903c5:          jmp     0x9017f <__default_morecore+0x747>
    0.00 :   903ca:          callq   0x111090 <__stack_chk_fail>
    0.00 :   903cf:          leaq    0x103c8a(%rip), %rcx    # 0x194060 <_itoa_lower_digits+0x28a0>
    0.00 :   903d6:          movl    $0x296, %edx            # imm = 0x296
    0.00 :   903db:          leaq    0xfddb0(%rip), %rsi     # 0x18e192 <_libc_intl_domainname+0x1304>
    0.00 :   903e2:          leaq    0x10336f(%rip), %rdi    # 0x193758 <_itoa_lower_digits+0x1f98>
    0.00 :   903e9:          callq   0x30e40 <__assert+0x10>
    0.00 :   903ee:          leaq    0x103c6b(%rip), %rcx    # 0x194060 <_itoa_lower_digits+0x28a0>
    0.00 :   903f5:          movl    $0x293, %edx            # imm = 0x293
    0.00 :   903fa:          leaq    0xfdd91(%rip), %rsi     # 0x18e192 <_libc_intl_domainname+0x1304>
    0.00 :   90401:          leaq    0x103320(%rip), %rdi    # 0x193728 <_itoa_lower_digits+0x1f68>
    0.00 :   90408:          callq   0x30e40 <__assert+0x10>
    0.00 :   9040d:          leaq    0x103c4c(%rip), %rcx    # 0x194060 <_itoa_lower_digits+0x28a0>
    0.00 :   90414:          movl    $0x2a7, %edx            # imm = 0x2A7
    0.00 :   90419:          leaq    0xfdd72(%rip), %rsi     # 0x18e192 <_libc_intl_domainname+0x1304>
    0.00 :   90420:          leaq    0x1033a1(%rip), %rdi    # 0x1937c8 <_itoa_lower_digits+0x2008>
    0.00 :   90427:          callq   0x30e40 <__assert+0x10>
    0.00 :   9042c:          leaq    0x103c2d(%rip), %rcx    # 0x194060 <_itoa_lower_digits+0x28a0>
    0.00 :   90433:          movl    $0x2a5, %edx            # imm = 0x2A5
    0.00 :   90438:          leaq    0xfdd53(%rip), %rsi     # 0x18e192 <_libc_intl_domainname+0x1304>
    0.00 :   9043f:          leaq    0x10333a(%rip), %rdi    # 0x193780 <_itoa_lower_digits+0x1fc0>
    0.00 :   90446:          callq   0x30e40 <__assert+0x10>
    0.00 :   9044b:          leaq    0x103c0e(%rip), %rcx    # 0x194060 <_itoa_lower_digits+0x28a0>
    0.00 :   90452:          movl    $0x290, %edx            # imm = 0x290
    0.00 :   90457:          leaq    0xfdd34(%rip), %rsi     # 0x18e192 <_libc_intl_domainname+0x1304>
    0.00 :   9045e:          leaq    0x103293(%rip), %rdi    # 0x1936f8 <_itoa_lower_digits+0x1f38>
    0.00 :   90465:          callq   0x30e40 <__assert+0x10>
    0.00 :   9046a:          leaq    0x27(%rsp), %rsi
    0.00 :   9046f:          movl    $0x1, %edx
    0.00 :   90474:          movl    %eax, 0x8(%rsp)
    0.00 :   90478:          callq   0xf5b60 <__read_nocancel>
    0.00 :   9047d:          testq   %rax, %rax
    0.00 :   90480:          movl    0x8(%rsp), %edi
    0.00 :   90484:          movl    0x18(%rsp), %ecx
    0.00 :   90488:          jle     0x90494 <__default_morecore+0xa5c>
    0.00 :   9048a:          xorl    %ecx, %ecx
    0.00 :   9048c:          cmpb    $0x32, 0x27(%rsp)
    0.00 :   90491:          sete    %cl
    0.00 :   90494:          movl    %ecx, 0x13aea6(%rip)    # 0x1cb340 <__nptl_nthreads+0x98>
    0.00 :   9049a:          callq   0xf58d0 <__close_nocancel>
    0.00 :   9049f:          jmp     0x90388 <__default_morecore+0x950>
    0.00 :   904a4:          leaq    0x10307d(%rip), %rdi    # 0x193528 <_itoa_lower_digits+0x1d68>
    0.00 :   904ab:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   904b0:          leaq    0x1030d1(%rip), %rdi    # 0x193588 <_itoa_lower_digits+0x1dc8>
    0.00 :   904b7:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   904bc:          leaq    0x103bad(%rip), %rcx    # 0x194070 <_itoa_lower_digits+0x28b0>
    0.00 :   904c3:          movl    $0x1248, %edx           # imm = 0x1248
    0.00 :   904c8:          leaq    0xfdca5(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   904cf:          leaq    0xfdda0(%rip), %rdi     # 0x18e276 <_libc_intl_domainname+0x13e8>
    0.00 :   904d6:          callq   0x30e40 <__assert+0x10>
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c00f30 <swapgs_restore_regs_and_return_to_usermode>:
         : 5                ; common_interrupt_return():
    0.00 :   ffffffff81c00f30:       jmp     0xffffffff81c00f4b <swapgs_restore_regs_and_return_to_usermode+0x1b>
    0.00 :   ffffffff81c00f32:       movl    $0x48, %ecx
    0.00 :   ffffffff81c00f37:       movq    %gs:0x1abf0, %rdx
    0.00 :   ffffffff81c00f40:       andl    $-0x2, %edx
    0.00 :   ffffffff81c00f43:       movl    %edx, %eax
    0.00 :   ffffffff81c00f45:       shrq    $0x20, %rdx
    0.00 :   ffffffff81c00f49:       wrmsr
    0.00 :   ffffffff81c00f4b:       popq    %r15
    0.00 :   ffffffff81c00f4d:       popq    %r14
    0.00 :   ffffffff81c00f4f:       popq    %r13
    0.00 :   ffffffff81c00f51:       popq    %r12
    0.00 :   ffffffff81c00f53:       popq    %rbp
    0.00 :   ffffffff81c00f54:       popq    %rbx
    0.00 :   ffffffff81c00f55:       popq    %r11
    0.00 :   ffffffff81c00f57:       popq    %r10
    0.00 :   ffffffff81c00f59:       popq    %r9
    0.00 :   ffffffff81c00f5b:       popq    %r8
    0.00 :   ffffffff81c00f5d:       popq    %rax
    0.00 :   ffffffff81c00f5e:       popq    %rcx
    0.00 :   ffffffff81c00f5f:       popq    %rdx
    0.00 :   ffffffff81c00f60:       popq    %rsi
    0.00 :   ffffffff81c00f61:       movq    %rsp, %rdi
    0.00 :   ffffffff81c00f64:       movq    %gs:0x6004, %rsp
    0.00 :   ffffffff81c00f6d:       pushq   0x30(%rdi)
    0.00 :   ffffffff81c00f70:       pushq   0x28(%rdi)
    0.00 :   ffffffff81c00f73:       pushq   0x20(%rdi)
    0.00 :   ffffffff81c00f76:       pushq   0x18(%rdi)
    0.00 :   ffffffff81c00f79:       pushq   0x10(%rdi)
    0.00 :   ffffffff81c00f7c:       pushq   (%rdi)
    0.00 :   ffffffff81c00f7e:       pushq   %rdi
    0.00 :   ffffffff81c00f7f:       pushq   %rsi
    0.00 :   ffffffff81c00f80:       pushq   %rdx
    0.00 :   ffffffff81c00f81:       pushq   %rcx
    0.00 :   ffffffff81c00f82:       pushq   %rax
   15.12 :   ffffffff81c00f83:       pushq   %r8
    0.00 :   ffffffff81c00f85:       pushq   %r9
    0.00 :   ffffffff81c00f87:       pushq   %r10
    0.00 :   ffffffff81c00f89:       pushq   %r11
    0.00 :   ffffffff81c00f8b:       pushq   %rbx
    0.00 :   ffffffff81c00f8c:       pushq   %rbp
    0.00 :   ffffffff81c00f8d:       pushq   %r12
    0.00 :   ffffffff81c00f8f:       pushq   %r13
    0.00 :   ffffffff81c00f91:       pushq   %r14
    0.00 :   ffffffff81c00f93:       pushq   %r15
    0.00 :   ffffffff81c00f95:       xorl    %esi, %esi
    0.00 :   ffffffff81c00f97:       xorl    %edx, %edx
    0.00 :   ffffffff81c00f99:       xorl    %ecx, %ecx
    0.00 :   ffffffff81c00f9b:       xorl    %r8d, %r8d
    0.00 :   ffffffff81c00f9e:       xorl    %r9d, %r9d
    0.00 :   ffffffff81c00fa1:       xorl    %r10d, %r10d
    0.00 :   ffffffff81c00fa4:       xorl    %r11d, %r11d
    0.00 :   ffffffff81c00fa7:       xorl    %ebx, %ebx
    0.00 :   ffffffff81c00fa9:       xorl    %ebp, %ebp
    0.00 :   ffffffff81c00fab:       xorl    %r12d, %r12d
    0.00 :   ffffffff81c00fae:       xorl    %r13d, %r13d
   12.20 :   ffffffff81c00fb1:       xorl    %r14d, %r14d
   13.16 :   ffffffff81c00fb4:       xorl    %r15d, %r15d
    0.00 :   ffffffff81c00fb7:       callq   0xffffffff81b6b730 <stackleak_erase>
    0.00 :   ffffffff81c00fbc:       popq    %r15
    0.00 :   ffffffff81c00fbe:       popq    %r14
    0.00 :   ffffffff81c00fc0:       popq    %r13
    0.00 :   ffffffff81c00fc2:       popq    %r12
    0.00 :   ffffffff81c00fc4:       popq    %rbp
    0.00 :   ffffffff81c00fc5:       popq    %rbx
    0.00 :   ffffffff81c00fc6:       popq    %r11
    0.00 :   ffffffff81c00fc8:       popq    %r10
    0.00 :   ffffffff81c00fca:       popq    %r9
    0.00 :   ffffffff81c00fcc:       popq    %r8
    0.00 :   ffffffff81c00fce:       popq    %rax
    0.00 :   ffffffff81c00fcf:       popq    %rcx
    0.00 :   ffffffff81c00fd0:       popq    %rdx
    0.00 :   ffffffff81c00fd1:       popq    %rsi
    0.00 :   ffffffff81c00fd2:       popq    %rdi
    0.00 :   ffffffff81c00fd3:       pushq   %rax
    0.00 :   ffffffff81c00fd4:       jmp     0xffffffff81c01019 <swapgs_restore_regs_and_return_to_usermode+0xe9>
    0.00 :   ffffffff81c00fd6:       movq    %cr3, %rdi
    0.00 :   ffffffff81c00fd9:       jmp     0xffffffff81c0100f <swapgs_restore_regs_and_return_to_usermode+0xdf>
    0.00 :   ffffffff81c00fdb:       movq    %rdi, %rax
    0.00 :   ffffffff81c00fde:       andq    $0x7ff, %rdi    # imm = 0x7FF
    0.00 :   ffffffff81c00fe5:       btq     %rdi, %gs:0x227d6
    0.00 :   ffffffff81c00fef:       jae     0xffffffff81c01000 <swapgs_restore_regs_and_return_to_usermode+0xd0>
    0.00 :   ffffffff81c00ff1:       btrq    %rdi, %gs:0x227d6
    0.00 :   ffffffff81c00ffb:       movq    %rax, %rdi
    0.00 :   ffffffff81c00ffe:       jmp     0xffffffff81c01008 <swapgs_restore_regs_and_return_to_usermode+0xd8>
    0.00 :   ffffffff81c01000:       movq    %rax, %rdi
    0.00 :   ffffffff81c01003:       btsq    $0x3f, %rdi
    0.00 :   ffffffff81c01008:       orq     $0x800, %rdi    # imm = 0x800
    0.00 :   ffffffff81c0100f:       orq     $0x1000, %rdi   # imm = 0x1000
    0.00 :   ffffffff81c01016:       movq    %rdi, %cr3
    0.00 :   ffffffff81c01019:       popq    %rax
    0.00 :   ffffffff81c0101a:       popq    %rdi
   59.52 :   ffffffff81c0101b:       swapgs
    0.00 :   ffffffff81c0101e:       jmp     0xffffffff81c0103b <restore_regs_and_return_to_kernel+0x1b>
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81038080 <arch_scale_freq_tick>:
         : 5                ; arch_scale_freq_tick():
    0.00 :   ffffffff81038080:       pushq   %rbp
    0.00 :   ffffffff81038081:       movq    %rsp, %rbp
    0.00 :   ffffffff81038084:       movq    $0x22740, %rsi  # imm = 0x22740
    0.00 :   ffffffff8103808b:       addq    %gs:0x7efdd99d(%rip), %rsi
    0.00 :   ffffffff81038093:       jmp     0xffffffff8241e9b9 <init_per_cpu__gdt_page+0x8c9b9>
    0.00 :   ffffffff81038098:       movl    $0xe8, %ecx
   29.66 :   ffffffff8103809d:       rdmsr
    0.00 :   ffffffff8103809f:       shlq    $0x20, %rdx
   20.31 :   ffffffff810380a3:       movl    $0xe7, %ecx
    0.00 :   ffffffff810380a8:       movq    %rdx, %rdi
    0.00 :   ffffffff810380ab:       orq     %rax, %rdi
   31.00 :   ffffffff810380ae:       rdmsr
   19.03 :   ffffffff810380b0:       shlq    $0x20, %rdx
    0.00 :   ffffffff810380b4:       movq    %rdi, %r8
    0.00 :   ffffffff810380b7:       incl    (%rsi)
    0.00 :   ffffffff810380b9:       orq     %rax, %rdx
    0.00 :   ffffffff810380bc:       subq    0x20(%rsi), %r8
    0.00 :   ffffffff810380c0:       movq    %rdi, 0x20(%rsi)
    0.00 :   ffffffff810380c4:       movq    %rdx, %rax
    0.00 :   ffffffff810380c7:       subq    0x28(%rsi), %rax
    0.00 :   ffffffff810380cb:       movq    %rdx, 0x28(%rsi)
    0.00 :   ffffffff810380cf:       movq    0x11cf8ea(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810380d6:       movq    %r8, 0x10(%rsi)
    0.00 :   ffffffff810380da:       movq    %rax, 0x18(%rsi)
    0.00 :   ffffffff810380de:       movq    %rdx, 0x8(%rsi)
    0.00 :   ffffffff810380e2:       incl    (%rsi)
    0.00 :   ffffffff810380e4:       jmp     0xffffffff81038113 <arch_scale_freq_tick+0x93>
    0.00 :   ffffffff810380e6:       movq    %r8, %rcx
    0.00 :   ffffffff810380e9:       shrq    $0x2c, %rcx
    0.00 :   ffffffff810380ed:       je      0xffffffff81038126 <arch_scale_freq_tick+0xa6>
    0.00 :   ffffffff810380ef:       movq    $-0x7df8aef0, %rdi # imm = 0x82075110
    0.00 :   ffffffff810380f6:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff810380fb:       movq    0x132e7c6(%rip), %rsi # 0xffffffff823668c8 <system_wq>
    0.00 :   ffffffff81038102:       movq    $-0x7dde1e60, %rdx # imm = 0x8221E1A0
    0.00 :   ffffffff81038109:       movl    $0x80, %edi
    0.00 :   ffffffff8103810e:       callq   0xffffffff8108de60 <queue_work_on>
    0.00 :   ffffffff81038113:       popq    %rbp
    0.00 :   ffffffff81038114:       xorl    %eax, %eax
    0.00 :   ffffffff81038116:       xorl    %edx, %edx
    0.00 :   ffffffff81038118:       xorl    %ecx, %ecx
    0.00 :   ffffffff8103811a:       xorl    %esi, %esi
    0.00 :   ffffffff8103811c:       xorl    %edi, %edi
    0.00 :   ffffffff8103811e:       xorl    %r8d, %r8d
    0.00 :   ffffffff81038121:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81038126:       mulq    0x11e6093(%rip) # 0xffffffff8221e1c0 <arch_max_freq_ratio>
    0.00 :   ffffffff8103812d:       movq    %rax, %rcx
    0.00 :   ffffffff81038130:       seto    %al
    0.00 :   ffffffff81038133:       testq   %rcx, %rcx
    0.00 :   ffffffff81038136:       movzbl  %al, %eax
    0.00 :   ffffffff81038139:       je      0xffffffff810380ef <arch_scale_freq_tick+0x6f>
    0.00 :   ffffffff8103813b:       testq   %rax, %rax
    0.00 :   ffffffff8103813e:       jne     0xffffffff810380ef <arch_scale_freq_tick+0x6f>
    0.00 :   ffffffff81038140:       movq    %r8, %rax
    0.00 :   ffffffff81038143:       shlq    $0x14, %rax
    0.00 :   ffffffff81038147:       cmpq    %rcx, %rax
    0.00 :   ffffffff8103814a:       jb      0xffffffff810380ef <arch_scale_freq_tick+0x6f>
    0.00 :   ffffffff8103814c:       xorl    %edx, %edx
    0.00 :   ffffffff8103814e:       divq    %rcx
    0.00 :   ffffffff81038151:       movl    $0x400, %edx    # imm = 0x400
    0.00 :   ffffffff81038156:       cmpq    %rdx, %rax
    0.00 :   ffffffff81038159:       cmovaq  %rdx, %rax
    0.00 :   ffffffff8103815d:       movq    %rax, %gs:0x7efe2a93(%rip)
    0.00 :   ffffffff81038165:       popq    %rbp
    0.00 :   ffffffff81038166:       xorl    %eax, %eax
    0.00 :   ffffffff81038168:       xorl    %edx, %edx
    0.00 :   ffffffff8103816a:       xorl    %ecx, %ecx
    0.00 :   ffffffff8103816c:       xorl    %esi, %esi
    0.00 :   ffffffff8103816e:       xorl    %edi, %edi
    0.00 :   ffffffff81038170:       xorl    %r8d, %r8d
    0.00 :   ffffffff81038173:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8104be00 <native_send_call_func_single_ipi>:
         : 5                ; native_send_call_func_single_ipi():
   11.51 :   ffffffff8104be00:       pushq   %rbp
   29.71 :   ffffffff8104be01:       movq    %rsp, %rbp
   58.77 :   ffffffff8104be04:       movq    0x10d8075(%rip), %rax # 0xffffffff82123e80 <apic>
    0.00 :   ffffffff8104be0b:       movl    $0xfb, %esi
    0.00 :   ffffffff8104be10:       movq    0x30(%rax), %rax
    0.00 :   ffffffff8104be14:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8104be19:       popq    %rbp
    0.00 :   ffffffff8104be1a:       xorl    %eax, %eax
    0.00 :   ffffffff8104be1c:       xorl    %esi, %esi
    0.00 :   ffffffff8104be1e:       xorl    %edi, %edi
    0.00 :   ffffffff8104be20:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (5 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b77600 <_raw_spin_lock_irqsave>:
         : 5                ; _raw_spin_lock_irqsave():
    0.00 :   ffffffff81b77600:       pushq   %rbp
    0.00 :   ffffffff81b77601:       movq    %rsp, %rbp
    0.00 :   ffffffff81b77604:       pushq   %rbx
   15.73 :   ffffffff81b77605:       pushfq
   43.66 :   ffffffff81b77606:       popq    %rbx
    0.00 :   ffffffff81b77607:       cli
    0.00 :   ffffffff81b77608:       incl    %gs:0x7e4ab0f9(%rip)
    0.00 :   ffffffff81b7760f:       xorl    %eax, %eax
    0.00 :   ffffffff81b77611:       movl    $0x1, %edx
    0.00 :   ffffffff81b77616:       lock
    0.00 :   ffffffff81b77617:       cmpxchgl        %edx, (%rdi)
   40.61 :   ffffffff81b7761a:       jne     0xffffffff81b7762f <_raw_spin_lock_irqsave+0x2f>
    0.00 :   ffffffff81b7761c:       movq    %rbx, %rax
    0.00 :   ffffffff81b7761f:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81b77623:       leave
    0.00 :   ffffffff81b77624:       xorl    %edx, %edx
    0.00 :   ffffffff81b77626:       xorl    %esi, %esi
    0.00 :   ffffffff81b77628:       xorl    %edi, %edi
    0.00 :   ffffffff81b7762a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b7762f:       movl    %eax, %esi
    0.00 :   ffffffff81b77631:       callq   0xffffffff81b77c10 <queued_spin_lock_slowpath>
    0.00 :   ffffffff81b77636:       movq    %rbx, %rax
    0.00 :   ffffffff81b77639:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81b7763d:       leave
    0.00 :   ffffffff81b7763e:       xorl    %edx, %edx
    0.00 :   ffffffff81b77640:       xorl    %esi, %esi
    0.00 :   ffffffff81b77642:       xorl    %edi, %edi
    0.00 :   ffffffff81b77644:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811281d0 <tick_sched_timer>:
         : 5                ; tick_sched_timer():
    0.00 :   ffffffff811281d0:       pushq   %rbp
   34.81 :   ffffffff811281d1:       movq    %rsp, %rbp
    0.00 :   ffffffff811281d4:       subq    $0x20, %rsp
    0.00 :   ffffffff811281d8:       movq    %rbx, -0x20(%rbp)
    0.00 :   ffffffff811281dc:       movq    %r12, -0x18(%rbp)
    0.00 :   ffffffff811281e0:       movq    %rdi, %rbx
    0.00 :   ffffffff811281e3:       movq    %r13, -0x10(%rbp)
    0.00 :   ffffffff811281e7:       movq    %r14, -0x8(%rbp)
    0.00 :   ffffffff811281eb:       leaq    -0x10(%rdi), %r13
    0.00 :   ffffffff811281ef:       movq    %gs:0x7eefa439(%rip), %r14
    0.00 :   ffffffff811281f7:       callq   0xffffffff811160b0 <ktime_get>
    0.00 :   ffffffff811281fc:       movq    %r13, %rdi
    0.00 :   ffffffff811281ff:       movq    %rax, %rsi
    0.00 :   ffffffff81128202:       movq    %rax, %r12
   35.19 :   ffffffff81128205:       callq   0xffffffff81128120 <tick_sched_do_timer>
    0.00 :   ffffffff8112820a:       testq   %r14, %r14
    0.00 :   ffffffff8112820d:       jne     0xffffffff8112824e <tick_sched_timer+0x7e>
    0.00 :   ffffffff8112820f:       testb   $0x2, -0x10(%rbx)
    0.00 :   ffffffff81128213:       movq    $0x0, 0x48(%rbx)
    0.00 :   ffffffff8112821b:       jne     0xffffffff8112825f <tick_sched_timer+0x8f>
    0.00 :   ffffffff8112821d:       movl    $0xf4240, %edx  # imm = 0xF4240
    0.00 :   ffffffff81128222:       movq    %r12, %rsi
    0.00 :   ffffffff81128225:       movq    %rbx, %rdi
    0.00 :   ffffffff81128228:       callq   0xffffffff81112640 <hrtimer_forward>
    0.00 :   ffffffff8112822d:       movl    $0x1, %eax
    0.00 :   ffffffff81128232:       movq    -0x20(%rbp), %rbx
    0.00 :   ffffffff81128236:       movq    -0x18(%rbp), %r12
    0.00 :   ffffffff8112823a:       movq    -0x10(%rbp), %r13
    0.00 :   ffffffff8112823e:       movq    -0x8(%rbp), %r14
    0.00 :   ffffffff81128242:       leave
    0.00 :   ffffffff81128243:       xorl    %edx, %edx
    0.00 :   ffffffff81128245:       xorl    %esi, %esi
    0.00 :   ffffffff81128247:       xorl    %edi, %edi
    0.00 :   ffffffff81128249:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8112824e:       movq    %r14, %rsi
    0.00 :   ffffffff81128251:       movq    %r13, %rdi
    0.00 :   ffffffff81128254:       callq   0xffffffff81127dc0 <tick_sched_handle>
    0.00 :   ffffffff81128259:       testb   $0x2, -0x10(%rbx)
   30.00 :   ffffffff8112825d:       je      0xffffffff8112821d <tick_sched_timer+0x4d>
    0.00 :   ffffffff8112825f:       xorl    %eax, %eax
    0.00 :   ffffffff81128261:       jmp     0xffffffff81128232 <tick_sched_timer+0x62>
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811122d0 <update_process_times>:
         : 5                ; update_process_times():
    0.00 :   ffffffff811122d0:       pushq   %rbp
    0.00 :   ffffffff811122d1:       movq    %rsp, %rbp
    0.00 :   ffffffff811122d4:       pushq   %r12
    0.00 :   ffffffff811122d6:       pushq   %rbx
    0.00 :   ffffffff811122d7:       movl    %edi, %ebx
    0.00 :   ffffffff811122d9:       subq    $0x10, %rsp
    0.00 :   ffffffff811122dd:       movl    %ebx, %esi
    0.00 :   ffffffff811122df:       movq    $0x1bb00, %r12  # imm = 0x1BB00
    0.00 :   ffffffff811122e6:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff811122ef:       callq   0xffffffff810cbc30 <account_process_tick>
    0.00 :   ffffffff811122f4:       addq    %gs:0x7ef03734(%rip), %r12
   56.36 :   ffffffff811122fc:       callq   0xffffffff81113d00 <hrtimer_run_queues>
    0.00 :   ffffffff81112301:       movq    $0x0, -0x20(%rbp)
    0.00 :   ffffffff81112309:       movq    0x10f56b0(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81112310:       cmpq    0x18(%r12), %rax
    0.00 :   ffffffff81112315:       jns     0xffffffff81112330 <update_process_times+0x60>
    0.00 :   ffffffff81112317:       movq    $0x0, -0x18(%rbp)
    0.00 :   ffffffff8111231f:       movq    0x10f569a(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81112326:       cmpq    0x1298(%r12), %rax
    0.00 :   ffffffff8111232e:       js      0xffffffff8111233a <update_process_times+0x6a>
    0.00 :   ffffffff81112330:       movl    $0x1, %edi
    0.00 :   ffffffff81112335:       callq   0xffffffff81071410 <raise_softirq>
    0.00 :   ffffffff8111233a:       movl    %ebx, %edi
    0.00 :   ffffffff8111233c:       callq   0xffffffff810fec30 <rcu_sched_clock_irq>
   16.41 :   ffffffff81112341:       movl    %gs:0x7ef103c0(%rip), %eax
    0.00 :   ffffffff81112348:       testl   $0xf0000, %eax  # imm = 0xF0000
    0.00 :   ffffffff8111234d:       jne     0xffffffff8111236c <update_process_times+0x9c>
    0.00 :   ffffffff8111234f:       callq   0xffffffff810b2c40 <scheduler_tick>
   27.23 :   ffffffff81112354:       callq   0xffffffff81122a20 <run_posix_cpu_timers>
    0.00 :   ffffffff81112359:       addq    $0x10, %rsp
    0.00 :   ffffffff8111235d:       popq    %rbx
    0.00 :   ffffffff8111235e:       popq    %r12
    0.00 :   ffffffff81112360:       popq    %rbp
    0.00 :   ffffffff81112361:       xorl    %eax, %eax
    0.00 :   ffffffff81112363:       xorl    %esi, %esi
    0.00 :   ffffffff81112365:       xorl    %edi, %edi
    0.00 :   ffffffff81112367:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8111236c:       callq   0xffffffff81165ed0 <irq_work_tick>
    0.00 :   ffffffff81112371:       jmp     0xffffffff8111234f <update_process_times+0x7f>
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b2c40 <scheduler_tick>:
         : 5                ; scheduler_tick():
    0.00 :   ffffffff810b2c40:       pushq   %rbp
   21.90 :   ffffffff810b2c41:       movq    %rsp, %rbp
    0.00 :   ffffffff810b2c44:       subq    $0x20, %rsp
    0.00 :   ffffffff810b2c48:       movq    %rbx, -0x20(%rbp)
    0.00 :   ffffffff810b2c4c:       movq    %r12, -0x18(%rbp)
    0.00 :   ffffffff810b2c50:       movq    %r13, -0x10(%rbp)
    0.00 :   ffffffff810b2c54:       movq    %r14, -0x8(%rbp)
    0.00 :   ffffffff810b2c58:       movq    $0x22f40, %r12  # imm = 0x22F40
    0.00 :   ffffffff810b2c5f:       movl    %gs:0x7ef6faa6(%rip), %edi
    0.00 :   ffffffff810b2c66:       movslq  %edi, %r14
    0.00 :   ffffffff810b2c69:       movq    %r12, %rbx
    0.00 :   ffffffff810b2c6c:       addq    -0x7dedc720(,%r14,8), %rbx
   10.15 :   ffffffff810b2c74:       movq    0x970(%rbx), %r13
    0.00 :   ffffffff810b2c7b:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b2c80:       callq   0xffffffff81038080 <arch_scale_freq_tick>
    0.00 :   ffffffff810b2c85:       callq   0xffffffff810d1cb0 <sched_clock_tick>
    0.00 :   ffffffff810b2c8a:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2c8d:       callq   0xffffffff810a6c70 <raw_spin_rq_lock_nested.constprop.0>
   31.46 :   ffffffff810b2c92:       testb   $0x2, 0x998(%rbx)
    0.00 :   ffffffff810b2c99:       jne     0xffffffff810b2ca3 <scheduler_tick+0x63>
    0.00 :   ffffffff810b2c9b:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2c9e:       callq   0xffffffff810a6870 <update_rq_clock.part.0>
    0.00 :   ffffffff810b2ca3:       movq    0xd0(%r13), %rax
    0.00 :   ffffffff810b2caa:       xorl    %edx, %edx
    0.00 :   ffffffff810b2cac:       movq    %r13, %rsi
    0.00 :   ffffffff810b2caf:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2cb2:       movq    0x88(%rax), %rax
    0.00 :   ffffffff810b2cb9:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff810b2cbe:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2cc1:       callq   0xffffffff810d27f0 <calc_global_load_tick>
    0.00 :   ffffffff810b2cc6:       movq    %r13, %rsi
    0.00 :   ffffffff810b2cc9:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2ccc:       callq   0xffffffff810b2bc0 <task_tick_mm_cid>
    0.00 :   ffffffff810b2cd1:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2cd4:       callq   0xffffffff810a84a0 <raw_spin_rq_unlock>
    0.00 :   ffffffff810b2cd9:       callq   0xffffffff811d8500 <perf_event_task_tick>
    0.00 :   ffffffff810b2cde:       movq    %r12, %rax
    0.00 :   ffffffff810b2ce1:       xorl    %edx, %edx
    0.00 :   ffffffff810b2ce3:       addq    -0x7dedc720(,%r14,8), %rax
    0.00 :   ffffffff810b2ceb:       movq    0x978(%rax), %rcx
    0.00 :   ffffffff810b2cf2:       cmpq    %rcx, 0x970(%rax)
    0.00 :   ffffffff810b2cf9:       je      0xffffffff810b2d40 <scheduler_tick+0x100>
    0.00 :   ffffffff810b2cfb:       movb    %dl, 0xa19(%rbx)
    0.00 :   ffffffff810b2d01:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2d04:       callq   0xffffffff810c1860 <trigger_load_balance>
    0.00 :   ffffffff810b2d09:       movq    -0x20(%rbp), %rbx
    0.00 :   ffffffff810b2d0d:       movq    -0x18(%rbp), %r12
    0.00 :   ffffffff810b2d11:       movq    -0x10(%rbp), %r13
    0.00 :   ffffffff810b2d15:       movq    -0x8(%rbp), %r14
    0.00 :   ffffffff810b2d19:       leave
    0.00 :   ffffffff810b2d1a:       xorl    %eax, %eax
    0.00 :   ffffffff810b2d1c:       xorl    %edx, %edx
    0.00 :   ffffffff810b2d1e:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b2d20:       xorl    %esi, %esi
    0.00 :   ffffffff810b2d22:       xorl    %edi, %edi
   36.49 :   ffffffff810b2d24:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b2d29:       movl    $0x4, %esi
    0.00 :   ffffffff810b2d2e:       callq   0xffffffff810ceb90 <housekeeping_test_cpu>
    0.00 :   ffffffff810b2d33:       testb   %al, %al
    0.00 :   ffffffff810b2d35:       je      0xffffffff810b2c85 <scheduler_tick+0x45>
    0.00 :   ffffffff810b2d3b:       jmp     0xffffffff810b2c80 <scheduler_tick+0x40>
    0.00 :   ffffffff810b2d40:       movl    0x4(%rax), %ecx
    0.00 :   ffffffff810b2d43:       testl   %ecx, %ecx
    0.00 :   ffffffff810b2d45:       jne     0xffffffff810b2cfb <scheduler_tick+0xbb>
    0.00 :   ffffffff810b2d47:       movl    0x68(%rax), %eax
    0.00 :   ffffffff810b2d4a:       testl   %eax, %eax
    0.00 :   ffffffff810b2d4c:       sete    %dl
    0.00 :   ffffffff810b2d4f:       jmp     0xffffffff810b2cfb <scheduler_tick+0xbb>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (5 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     00000000000c86d0 <clock_gettime>:
         : 5     ; __clock_gettime():
    0.00 :   c86d0:          movq    0x1027d9(%rip), %rax    # 0x1caeb0
   12.72 :   c86d7:          movq    0x2e0(%rax), %rax
    0.00 :   c86de:          testq   %rax, %rax
    0.00 :   c86e1:          je      0xc86f8 <clock_gettime+0x28>
    0.00 :   c86e3:          subq    $0x8, %rsp
   18.57 :   c86e7:          callq   *%rax
    0.00 :   c86e9:          testl   %eax, %eax
   18.85 :   c86eb:          jne     0xc8708 <clock_gettime+0x38>
    0.00 :   c86ed:          xorl    %eax, %eax
   49.86 :   c86ef:          addq    $0x8, %rsp
    0.00 :   c86f3:          retq
    0.00 :   c86f4:          nopl    (%rax)
    0.00 :   c86f8:          movl    $0xe4, %eax
    0.00 :   c86fd:          syscall
    0.00 :   c86ff:          testl   %eax, %eax
    0.00 :   c8701:          jne     0xc8720 <clock_gettime+0x50>
    0.00 :   c8703:          xorl    %eax, %eax
    0.00 :   c8705:          retq
    0.00 :   c8706:          nop
    0.00 :   c8708:          movq    0x1026e9(%rip), %rdx    # 0x1cadf8
    0.00 :   c870f:          negl    %eax
    0.00 :   c8711:          movl    %eax, %fs:(%rdx)
    0.00 :   c8714:          movl    $0xffffffff, %eax       # imm = 0xFFFFFFFF
    0.00 :   c8719:          jmp     0xc86ef <clock_gettime+0x1f>
    0.00 :   c871b:          nopl    (%rax,%rax)
    0.00 :   c8720:          movq    0x1026d1(%rip), %rdx    # 0x1cadf8
    0.00 :   c8727:          negl    %eax
    0.00 :   c8729:          movl    %eax, %fs:(%rdx)
    0.00 :   c872c:          movl    $0xffffffff, %eax       # imm = 0xFFFFFFFF
    0.00 :   c8731:          retq
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81105510 <exit_to_user_mode_prepare>:
         : 5                ; exit_to_user_mode_prepare():
    0.00 :   ffffffff81105510:       pushq   %rbp
    0.00 :   ffffffff81105511:       movq    %rsp, %rbp
   10.01 :   ffffffff81105514:       subq    $0x18, %rsp
    0.00 :   ffffffff81105518:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff8110551c:       movq    %r12, -0x10(%rbp)
    0.00 :   ffffffff81105520:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff81105524:       movq    %gs:0x22700, %r12
    0.00 :   ffffffff8110552d:       movq    (%r12), %rbx
    0.00 :   ffffffff81105531:       testl   $0x2300e, %ebx  # imm = 0x2300E
    0.00 :   ffffffff81105537:       jne     0xffffffff811055a9 <exit_to_user_mode_prepare+0x99>
    0.00 :   ffffffff81105539:       testb   $0x8, %bh
    0.00 :   ffffffff8110553c:       jne     0xffffffff8110558b <exit_to_user_mode_prepare+0x7b>
    0.00 :   ffffffff8110553e:       testl   $0x400000, %ebx # imm = 0x400000
    0.00 :   ffffffff81105544:       jne     0xffffffff81105598 <exit_to_user_mode_prepare+0x88>
    0.00 :   ffffffff81105546:       andb    $0x40, %bh
    0.00 :   ffffffff81105549:       jne     0xffffffff811055a2 <exit_to_user_mode_prepare+0x92>
    0.00 :   ffffffff8110554b:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81105554:       andl    $-0x7, 0x10(%rax)
    0.00 :   ffffffff81105558:       nop
    0.00 :   ffffffff8110555a:       movl    %gs:0x7ef1051f(%rip), %ecx
   28.15 :   ffffffff81105561:       rdtsc
    0.00 :   ffffffff81105563:       movzbl  %al, %eax
    0.00 :   ffffffff81105566:       xorl    %eax, %ecx
    0.00 :   ffffffff81105568:       movl    %ecx, %gs:0x7ef10511(%rip)
    0.00 :   ffffffff8110556f:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff81105573:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff81105577:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff8110557b:       leave
    0.00 :   ffffffff8110557c:       xorl    %eax, %eax
   19.37 :   ffffffff8110557e:       xorl    %edx, %edx
    0.00 :   ffffffff81105580:       xorl    %ecx, %ecx
    0.00 :   ffffffff81105582:       xorl    %esi, %esi
    0.00 :   ffffffff81105584:       xorl    %edi, %edi
    0.00 :   ffffffff81105586:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8110558b:       callq   0xffffffff811e63a0 <fire_user_return_notifiers>
    0.00 :   ffffffff81105590:       testl   $0x400000, %ebx # imm = 0x400000
    0.00 :   ffffffff81105596:       je      0xffffffff81105546 <exit_to_user_mode_prepare+0x36>
    0.00 :   ffffffff81105598:       callq   0xffffffff8102b3a0 <native_tss_update_io_bitmap>
    0.00 :   ffffffff8110559d:       andb    $0x40, %bh
    0.00 :   ffffffff811055a0:       je      0xffffffff8110554b <exit_to_user_mode_prepare+0x3b>
    0.00 :   ffffffff811055a2:       callq   0xffffffff8102cc50 <switch_fpu_return>
    0.00 :   ffffffff811055a7:       jmp     0xffffffff8110554b <exit_to_user_mode_prepare+0x3b>
    0.00 :   ffffffff811055a9:       movq    %rdi, %r13
    0.00 :   ffffffff811055ac:       nopl    (%rax)
    0.00 :   ffffffff811055b0:       jmp     0xffffffff811055d0 <exit_to_user_mode_prepare+0xc0>
    0.00 :   ffffffff811055b2:       testl   $0x20004, %ebx  # imm = 0x20004
    0.00 :   ffffffff811055b8:       jne     0xffffffff811055e3 <exit_to_user_mode_prepare+0xd3>
    0.00 :   ffffffff811055ba:       andl    $0x2, %ebx
    0.00 :   ffffffff811055bd:       jne     0xffffffff811055f0 <exit_to_user_mode_prepare+0xe0>
    0.00 :   ffffffff811055bf:       cli
    0.00 :   ffffffff811055c0:       movq    (%r12), %rbx
   42.46 :   ffffffff811055c4:       testl   $0x2300e, %ebx  # imm = 0x2300E
    0.00 :   ffffffff811055ca:       je      0xffffffff81105539 <exit_to_user_mode_prepare+0x29>
    0.00 :   ffffffff811055d0:       sti
    0.00 :   ffffffff811055d1:       testb   $0x8, %bl
    0.00 :   ffffffff811055d4:       je      0xffffffff811055b2 <exit_to_user_mode_prepare+0xa2>
    0.00 :   ffffffff811055d6:       callq   0xffffffff81b702c0 <schedule>
    0.00 :   ffffffff811055db:       testl   $0x20004, %ebx  # imm = 0x20004
    0.00 :   ffffffff811055e1:       je      0xffffffff811055ba <exit_to_user_mode_prepare+0xaa>
    0.00 :   ffffffff811055e3:       movq    %r13, %rdi
    0.00 :   ffffffff811055e6:       callq   0xffffffff8101d700 <arch_do_signal_or_restart>
    0.00 :   ffffffff811055eb:       andl    $0x2, %ebx
    0.00 :   ffffffff811055ee:       je      0xffffffff811055bf <exit_to_user_mode_prepare+0xaf>
    0.00 :   ffffffff811055f0:       lock
    0.00 :   ffffffff811055f1:       andb    $-0x3, (%r12)
    0.00 :   ffffffff811055f6:       movq    0x378(%r12), %rax
    0.00 :   ffffffff811055fe:       testq   %rax, %rax
    0.00 :   ffffffff81105601:       jne     0xffffffff81105624 <exit_to_user_mode_prepare+0x114>
    0.00 :   ffffffff81105603:       callq   0xffffffff8129b050 <mem_cgroup_handle_over_high>
    0.00 :   ffffffff81105608:       callq   0xffffffff8155d7e0 <blkcg_maybe_throttle_current>
    0.00 :   ffffffff8110560d:       cmpq    $0x0, 0x3b0(%r12)
    0.00 :   ffffffff81105616:       je      0xffffffff811055bf <exit_to_user_mode_prepare+0xaf>
    0.00 :   ffffffff81105618:       movq    %r13, %rsi
    0.00 :   ffffffff8110561b:       xorl    %edi, %edi
    0.00 :   ffffffff8110561d:       callq   0xffffffff811e7a70 <__rseq_handle_notify_resume>
    0.00 :   ffffffff81105622:       jmp     0xffffffff811055bf <exit_to_user_mode_prepare+0xaf>
    0.00 :   ffffffff81105624:       callq   0xffffffff81094b80 <task_work_run>
    0.00 :   ffffffff81105629:       nopl    (%rax)
    0.00 :   ffffffff81105630:       jmp     0xffffffff81105603 <exit_to_user_mode_prepare+0xf3>
 Percent |	Source code & Disassembly of elf for cycles (5 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81958400 <__napi_poll>:
         : 5                ; __napi_poll():
    0.00 :   ffffffff81958400:       pushq   %rbp
    0.00 :   ffffffff81958401:       movq    %rsp, %rbp
    0.00 :   ffffffff81958404:       subq    $0x20, %rsp
  100.00 :   ffffffff81958408:       movq    %rbx, -0x20(%rbp)
    0.00 :   ffffffff8195840c:       movq    %r14, -0x8(%rbp)
    0.00 :   ffffffff81958410:       movq    %rdi, %rbx
    0.00 :   ffffffff81958413:       movq    %r12, -0x18(%rbp)
    0.00 :   ffffffff81958417:       movq    %r13, -0x10(%rbp)
    0.00 :   ffffffff8195841b:       movq    %rsi, %r14
    0.00 :   ffffffff8195841e:       movq    0x10(%rdi), %rax
    0.00 :   ffffffff81958422:       xorl    %r12d, %r12d
    0.00 :   ffffffff81958425:       movl    0x18(%rdi), %r13d
    0.00 :   ffffffff81958429:       testb   $0x1, %al
    0.00 :   ffffffff8195842b:       je      0xffffffff8195843c <__napi_poll+0x3c>
    0.00 :   ffffffff8195842d:       movq    0x28(%rdi), %rax
    0.00 :   ffffffff81958431:       movl    %r13d, %esi
    0.00 :   ffffffff81958434:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81958439:       movl    %eax, %r12d
    0.00 :   ffffffff8195843c:       cmpl    %r13d, %r12d
    0.00 :   ffffffff8195843f:       jg      0xffffffff8195846d <__napi_poll+0x6d>
    0.00 :   ffffffff81958441:       cmpl    %r13d, %r12d
    0.00 :   ffffffff81958444:       jge     0xffffffff81958476 <__napi_poll+0x76>
    0.00 :   ffffffff81958446:       movl    %r12d, %eax
    0.00 :   ffffffff81958449:       movq    -0x20(%rbp), %rbx
    0.00 :   ffffffff8195844d:       movq    -0x18(%rbp), %r12
    0.00 :   ffffffff81958451:       movq    -0x10(%rbp), %r13
    0.00 :   ffffffff81958455:       movq    -0x8(%rbp), %r14
    0.00 :   ffffffff81958459:       leave
    0.00 :   ffffffff8195845a:       xorl    %edx, %edx
    0.00 :   ffffffff8195845c:       xorl    %ecx, %ecx
    0.00 :   ffffffff8195845e:       xorl    %esi, %esi
    0.00 :   ffffffff81958460:       xorl    %edi, %edi
    0.00 :   ffffffff81958462:       xorl    %r8d, %r8d
    0.00 :   ffffffff81958465:       xorl    %r9d, %r9d
    0.00 :   ffffffff81958468:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8195846d:       cmpb    $0x0, 0xa0b93b(%rip) # 0xffffffff82363daf <__print_once.58>
    0.00 :   ffffffff81958474:       je      0xffffffff819584e9 <__napi_poll+0xe9>
    0.00 :   ffffffff81958476:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff8195847a:       testb   $0x4, %al
    0.00 :   ffffffff8195847c:       jne     0xffffffff81958546 <__napi_poll+0x146>
    0.00 :   ffffffff81958482:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff81958486:       testb   %al, %al
    0.00 :   ffffffff81958488:       js      0xffffffff81958516 <__napi_poll+0x116>
    0.00 :   ffffffff8195848e:       cmpq    $0x0, 0x20(%rbx)
    0.00 :   ffffffff81958493:       jne     0xffffffff819584da <__napi_poll+0xda>
    0.00 :   ffffffff81958495:       movl    0x118(%rbx), %eax
    0.00 :   ffffffff8195849b:       testl   %eax, %eax
    0.00 :   ffffffff8195849d:       jne     0xffffffff819584b1 <__napi_poll+0xb1>
    0.00 :   ffffffff8195849f:       movq    (%rbx), %rax
    0.00 :   ffffffff819584a2:       cmpq    %rax, %rbx
    0.00 :   ffffffff819584a5:       jne     0xffffffff81958555 <__napi_poll+0x155>
    0.00 :   ffffffff819584ab:       movb    $0x1, (%r14)
    0.00 :   ffffffff819584af:       jmp     0xffffffff81958446 <__napi_poll+0x46>
    0.00 :   ffffffff819584b1:       leaq    0x108(%rbx), %r13
    0.00 :   ffffffff819584b8:       movq    %r13, %rdi
    0.00 :   ffffffff819584bb:       callq   0xffffffff81957b60 <netif_receive_skb_list_internal>
    0.00 :   ffffffff819584c0:       movq    %r13, 0x108(%rbx)
    0.00 :   ffffffff819584c7:       movl    $0x0, 0x118(%rbx)
    0.00 :   ffffffff819584d1:       movq    %r13, 0x110(%rbx)
    0.00 :   ffffffff819584d8:       jmp     0xffffffff8195849f <__napi_poll+0x9f>
    0.00 :   ffffffff819584da:       movl    $0x1, %esi
    0.00 :   ffffffff819584df:       movq    %rbx, %rdi
    0.00 :   ffffffff819584e2:       callq   0xffffffff81992040 <napi_gro_flush>
    0.00 :   ffffffff819584e7:       jmp     0xffffffff81958495 <__napi_poll+0x95>
    0.00 :   ffffffff819584e9:       movq    0x28(%rbx), %rcx
    0.00 :   ffffffff819584ed:       movq    0x38(%rbx), %rsi
    0.00 :   ffffffff819584f1:       movl    %r13d, %r9d
    0.00 :   ffffffff819584f4:       movl    %r12d, %r8d
    0.00 :   ffffffff819584f7:       movq    $-0x7deef7e0, %rdx # imm = 0x82110820
    0.00 :   ffffffff819584fe:       movq    $-0x7df85970, %rdi # imm = 0x8207A690
    0.00 :   ffffffff81958505:       movb    $0x1, 0xa0b8a3(%rip) # 0xffffffff82363daf <__print_once.58>
    0.00 :   ffffffff8195850c:       callq   0xffffffff819513c0 <netdev_printk>
    0.00 :   ffffffff81958511:       jmp     0xffffffff81958441 <__napi_poll+0x41>
    0.00 :   ffffffff81958516:       movl    %r12d, %esi
    0.00 :   ffffffff81958519:       movq    %rbx, %rdi
    0.00 :   ffffffff8195851c:       callq   0xffffffff81958250 <napi_complete_done>
    0.00 :   ffffffff81958521:       testb   %al, %al
    0.00 :   ffffffff81958523:       je      0xffffffff81958446 <__napi_poll+0x46>
    0.00 :   ffffffff81958529:       movq    %rbx, %rdi
    0.00 :   ffffffff8195852c:       callq   0xffffffff81949250 <napi_schedule_prep>
    0.00 :   ffffffff81958531:       testb   %al, %al
    0.00 :   ffffffff81958533:       je      0xffffffff81958446 <__napi_poll+0x46>
    0.00 :   ffffffff81958539:       movq    %rbx, %rdi
    0.00 :   ffffffff8195853c:       callq   0xffffffff81951150 <__napi_schedule>
    0.00 :   ffffffff81958541:       jmp     0xffffffff81958446 <__napi_poll+0x46>
    0.00 :   ffffffff81958546:       xorl    %esi, %esi
    0.00 :   ffffffff81958548:       movq    %rbx, %rdi
    0.00 :   ffffffff8195854b:       callq   0xffffffff81958250 <napi_complete_done>
    0.00 :   ffffffff81958550:       jmp     0xffffffff81958446 <__napi_poll+0x46>
    0.00 :   ffffffff81958555:       cmpb    $0x0, 0xa0b852(%rip) # 0xffffffff82363dae <__already_done.57>
    0.00 :   ffffffff8195855c:       jne     0xffffffff81958446 <__napi_poll+0x46>
    0.00 :   ffffffff81958562:       movq    0x38(%rbx), %rax
    0.00 :   ffffffff81958566:       movq    $-0x7deeb5f6, %rdx # imm = 0x82114A0A
    0.00 :   ffffffff8195856d:       movq    $-0x7deef798, %rdi # imm = 0x82110868
    0.00 :   ffffffff81958574:       movb    $0x1, 0xa0b833(%rip) # 0xffffffff82363dae <__already_done.57>
    0.00 :   ffffffff8195857b:       testq   %rax, %rax
    0.00 :   ffffffff8195857e:       cmovneq %rax, %rdx
    0.00 :   ffffffff81958582:       movq    %rdx, %rsi
    0.00 :   ffffffff81958585:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff8195858a:       jmp     0xffffffff81958446 <__napi_poll+0x46>
 Percent |	Source code & Disassembly of elf for cycles (5 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811160b0 <ktime_get>:
         : 5                ; ktime_get():
    0.00 :   ffffffff811160b0:       pushq   %rbp
    0.00 :   ffffffff811160b1:       movq    %rsp, %rbp
    0.00 :   ffffffff811160b4:       pushq   %r13
    0.00 :   ffffffff811160b6:       pushq   %r12
    0.00 :   ffffffff811160b8:       pushq   %rbx
    0.00 :   ffffffff811160b9:       movl    0x125096d(%rip), %eax # 0xffffffff82366a2c <timekeeping_suspended>
    0.00 :   ffffffff811160bf:       testl   %eax, %eax
    0.00 :   ffffffff811160c1:       jne     0xffffffff8111614b <ktime_get+0x9b>
    0.00 :   ffffffff811160c7:       xorl    %r13d, %r13d
    0.00 :   ffffffff811160ca:       jmp     0xffffffff811160ce <ktime_get+0x1e>
   35.36 :   ffffffff811160cc:       pause
    0.00 :   ffffffff811160ce:       movl    0x15b89ec(%rip), %ebx # 0xffffffff826ceac0 <tk_core>
    0.00 :   ffffffff811160d4:       testb   $0x1, %bl
    0.00 :   ffffffff811160d7:       jne     0xffffffff811160cc <ktime_get+0x1c>
   28.34 :   ffffffff811160d9:       movq    0x15b89e8(%rip), %rdi # 0xffffffff826ceac8 <tk_core+0x8>
    0.00 :   ffffffff811160e0:       movq    0x15b8a09(%rip), %r12 # 0xffffffff826ceaf0 <tk_core+0x30>
    0.00 :   ffffffff811160e7:       movq    (%rdi), %rax
    0.00 :   ffffffff811160ea:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
   22.40 :   ffffffff811160ef:       subq    0x15b89e2(%rip), %rax # 0xffffffff826cead8 <tk_core+0x18>
    0.00 :   ffffffff811160f6:       movq    0x15b89d3(%rip), %rdx # 0xffffffff826cead0 <tk_core+0x10>
    0.00 :   ffffffff811160fd:       movq    0x15b89e4(%rip), %rdi # 0xffffffff826ceae8 <tk_core+0x28>
    0.00 :   ffffffff81116104:       movl    0x15b89da(%rip), %ecx # 0xffffffff826ceae4 <tk_core+0x24>
    0.00 :   ffffffff8111610a:       andq    %rdx, %rax
    0.00 :   ffffffff8111610d:       shrq    %rdx
    0.00 :   ffffffff81116110:       notq    %rdx
    0.00 :   ffffffff81116113:       testq   %rax, %rdx
    0.00 :   ffffffff81116116:       movl    0x15b89c4(%rip), %edx # 0xffffffff826ceae0 <tk_core+0x20>
    0.00 :   ffffffff8111611c:       cmovneq %r13, %rax
    0.00 :   ffffffff81116120:       movl    0x15b899a(%rip), %esi # 0xffffffff826ceac0 <tk_core>
    0.00 :   ffffffff81116126:       cmpl    %ebx, %esi
    0.00 :   ffffffff81116128:       jne     0xffffffff811160ce <ktime_get+0x1e>
    0.00 :   ffffffff8111612a:       imulq   %rax, %rdx
    0.00 :   ffffffff8111612e:       popq    %rbx
    0.00 :   ffffffff8111612f:       leaq    (%rdx,%rdi), %rax
    0.00 :   ffffffff81116133:       shrq    %cl, %rax
    0.00 :   ffffffff81116136:       addq    %r12, %rax
    0.00 :   ffffffff81116139:       popq    %r12
    0.00 :   ffffffff8111613b:       popq    %r13
    0.00 :   ffffffff8111613d:       popq    %rbp
    0.00 :   ffffffff8111613e:       xorl    %edx, %edx
    0.00 :   ffffffff81116140:       xorl    %ecx, %ecx
    0.00 :   ffffffff81116142:       xorl    %esi, %esi
   13.89 :   ffffffff81116144:       xorl    %edi, %edi
    0.00 :   ffffffff81116146:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8111614b:       ud2
    0.00 :   ffffffff8111614d:       jmp     0xffffffff811160c7 <ktime_get+0x17>
 Percent |	Source code & Disassembly of elf for cycles (5 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c00eb0 <asm_sysvec_irq_work>:
         : 5                ; asm_sysvec_irq_work():
  100.00 :   ffffffff81c00eb0:       nop
    0.00 :   ffffffff81c00eb1:       nop
    0.00 :   ffffffff81c00eb2:       nop
    0.00 :   ffffffff81c00eb3:       cld
    0.00 :   ffffffff81c00eb4:       pushq   $-0x1
    0.00 :   ffffffff81c00eb6:       callq   0xffffffff81c012a0 <error_entry>
    0.00 :   ffffffff81c00ebb:       movq    %rax, %rsp
    0.00 :   ffffffff81c00ebe:       leaq    0x1(%rsp), %rbp
    0.00 :   ffffffff81c00ec3:       movq    %rsp, %rdi
    0.00 :   ffffffff81c00ec6:       callq   0xffffffff81b68640 <sysvec_irq_work>
    0.00 :   ffffffff81c00ecb:       jmp     0xffffffff81c013f0 <error_return>
 Percent |	Source code & Disassembly of elf for cycles (6 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810d61b0 <psi_task_switch>:
         : 5                ; psi_task_switch():
    0.00 :   ffffffff810d61b0:       pushq   %rbp
    0.00 :   ffffffff810d61b1:       movq    %rsp, %rbp
    0.00 :   ffffffff810d61b4:       pushq   %r15
    0.00 :   ffffffff810d61b6:       movq    %rsi, %r15
    0.00 :   ffffffff810d61b9:       pushq   %r14
    0.00 :   ffffffff810d61bb:       pushq   %r13
    0.00 :   ffffffff810d61bd:       pushq   %r12
    0.00 :   ffffffff810d61bf:       movl    %edx, %r12d
    0.00 :   ffffffff810d61c2:       pushq   %rbx
    0.00 :   ffffffff810d61c3:       subq    $0x20, %rsp
    0.00 :   ffffffff810d61c7:       movq    %rdi, -0x40(%rbp)
    0.00 :   ffffffff810d61cb:       movq    %rsi, -0x48(%rbp)
    0.00 :   ffffffff810d61cf:       movb    %dl, -0x35(%rbp)
    0.00 :   ffffffff810d61d2:       movl    0x14(%rdi), %ebx
    0.00 :   ffffffff810d61d5:       movl    %ebx, %edi
    0.00 :   ffffffff810d61d7:       callq   0xffffffff810d0c80 <sched_clock_cpu>
    0.00 :   ffffffff810d61dc:       movl    0x2e0(%r15), %edx
    0.00 :   ffffffff810d61e3:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff810d61e7:       testl   %edx, %edx
    0.00 :   ffffffff810d61e9:       jne     0xffffffff810d6349 <psi_task_switch+0x199>
    0.00 :   ffffffff810d61ef:       xorl    %r15d, %r15d
    0.00 :   ffffffff810d61f2:       movq    -0x40(%rbp), %rcx
    0.00 :   ffffffff810d61f6:       movl    0x2e0(%rcx), %eax
    0.00 :   ffffffff810d61fc:       testl   %eax, %eax
    0.00 :   ffffffff810d61fe:       je      0xffffffff810d62d5 <psi_task_switch+0x125>
    0.00 :   ffffffff810d6204:       testb   %r12b, %r12b
    0.00 :   ffffffff810d6207:       jne     0xffffffff810d62f8 <psi_task_switch+0x148>
    0.00 :   ffffffff810d620d:       movb    $0x1, -0x35(%rbp)
    0.00 :   ffffffff810d6211:       xorl    %r13d, %r13d
    0.00 :   ffffffff810d6214:       movl    $0x10, %r12d
    0.00 :   ffffffff810d621a:       movq    -0x40(%rbp), %r14
    0.00 :   ffffffff810d621e:       movl    %r13d, %edx
    0.00 :   ffffffff810d6221:       movl    %r12d, %esi
    0.00 :   ffffffff810d6224:       movq    %r14, %rdi
  100.00 :   ffffffff810d6227:       callq   0xffffffff810ce7a0 <psi_flags_change>
    0.00 :   ffffffff810d622c:       nopl    (%rax,%rax)
    0.00 :   ffffffff810d6231:       movq    0x5f0(%r14), %rax
    0.00 :   ffffffff810d6238:       movq    $-0x7ddc91c0, %r14 # imm = 0x82236E40
    0.00 :   ffffffff810d623f:       movq    0x78(%rax), %rdx
    0.00 :   ffffffff810d6243:       movq    0xf8(%rdx), %rcx
    0.00 :   ffffffff810d624a:       cmpq    $0x1, 0x68(%rcx)
    0.00 :   ffffffff810d624f:       je      0xffffffff810d6258 <psi_task_switch+0xa8>
    0.00 :   ffffffff810d6251:       movq    0x458(%rdx), %r14
    0.00 :   ffffffff810d6258:       movzbl  -0x35(%rbp), %eax
    0.00 :   ffffffff810d625c:       movl    %eax, -0x34(%rbp)
    0.00 :   ffffffff810d625f:       jmp     0xffffffff810d6281 <psi_task_switch+0xd1>
    0.00 :   ffffffff810d6261:       movl    -0x34(%rbp), %r9d
    0.00 :   ffffffff810d6265:       movq    -0x30(%rbp), %r8
    0.00 :   ffffffff810d6269:       movq    %r14, %rdi
    0.00 :   ffffffff810d626c:       movl    %r13d, %ecx
    0.00 :   ffffffff810d626f:       movl    %r12d, %edx
    0.00 :   ffffffff810d6272:       movl    %ebx, %esi
    0.00 :   ffffffff810d6274:       callq   0xffffffff810cef00 <psi_group_change>
    0.00 :   ffffffff810d6279:       movq    (%r14), %r14
    0.00 :   ffffffff810d627c:       testq   %r14, %r14
    0.00 :   ffffffff810d627f:       je      0xffffffff810d62d5 <psi_task_switch+0x125>
    0.00 :   ffffffff810d6281:       cmpq    %r15, %r14
    0.00 :   ffffffff810d6284:       jne     0xffffffff810d6261 <psi_task_switch+0xb1>
    0.00 :   ffffffff810d6286:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff810d628a:       movq    -0x48(%rbp), %rsi
    0.00 :   ffffffff810d628e:       movl    0xf4(%rax), %eax
    0.00 :   ffffffff810d6294:       xorl    0xf4(%rsi), %eax
    0.00 :   ffffffff810d629a:       andl    $-0x11, %eax
    0.00 :   ffffffff810d629d:       je      0xffffffff810d62d5 <psi_task_switch+0x125>
    0.00 :   ffffffff810d629f:       andl    $-0x11, %r12d
    0.00 :   ffffffff810d62a3:       testq   %r15, %r15
    0.00 :   ffffffff810d62a6:       je      0xffffffff810d62d5 <psi_task_switch+0x125>
    0.00 :   ffffffff810d62a8:       movzbl  -0x35(%rbp), %r14d
    0.00 :   ffffffff810d62ad:       movl    %r14d, %eax
    0.00 :   ffffffff810d62b0:       movq    %r15, %r14
    0.00 :   ffffffff810d62b3:       movl    %eax, %r15d
    0.00 :   ffffffff810d62b6:       movq    -0x30(%rbp), %r8
    0.00 :   ffffffff810d62ba:       movq    %r14, %rdi
    0.00 :   ffffffff810d62bd:       movl    %r15d, %r9d
    0.00 :   ffffffff810d62c0:       movl    %r13d, %ecx
    0.00 :   ffffffff810d62c3:       movl    %r12d, %edx
    0.00 :   ffffffff810d62c6:       movl    %ebx, %esi
    0.00 :   ffffffff810d62c8:       callq   0xffffffff810cef00 <psi_group_change>
    0.00 :   ffffffff810d62cd:       movq    (%r14), %r14
    0.00 :   ffffffff810d62d0:       testq   %r14, %r14
    0.00 :   ffffffff810d62d3:       jne     0xffffffff810d62b6 <psi_task_switch+0x106>
    0.00 :   ffffffff810d62d5:       addq    $0x20, %rsp
    0.00 :   ffffffff810d62d9:       popq    %rbx
    0.00 :   ffffffff810d62da:       popq    %r12
    0.00 :   ffffffff810d62dc:       popq    %r13
    0.00 :   ffffffff810d62de:       popq    %r14
    0.00 :   ffffffff810d62e0:       popq    %r15
    0.00 :   ffffffff810d62e2:       popq    %rbp
    0.00 :   ffffffff810d62e3:       xorl    %eax, %eax
    0.00 :   ffffffff810d62e5:       xorl    %edx, %edx
    0.00 :   ffffffff810d62e7:       xorl    %ecx, %ecx
    0.00 :   ffffffff810d62e9:       xorl    %esi, %esi
    0.00 :   ffffffff810d62eb:       xorl    %edi, %edi
    0.00 :   ffffffff810d62ed:       xorl    %r8d, %r8d
    0.00 :   ffffffff810d62f0:       xorl    %r9d, %r9d
    0.00 :   ffffffff810d62f3:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810d62f8:       movzbl  0x295(%rcx), %eax
    0.00 :   ffffffff810d62ff:       movzbl  0x294(%rcx), %esi
    0.00 :   ffffffff810d6306:       andl    $0x1, %eax
    0.00 :   ffffffff810d6309:       movl    %esi, %r13d
    0.00 :   ffffffff810d630c:       movb    %sil, -0x34(%rbp)
    0.00 :   ffffffff810d6310:       cmpb    $0x1, %al
    0.00 :   ffffffff810d6312:       sbbl    %r12d, %r12d
    0.00 :   ffffffff810d6315:       shrb    $0x2, %r13b
    0.00 :   ffffffff810d6319:       andl    $-0x8, %r12d
    0.00 :   ffffffff810d631d:       andl    $0x1, %r13d
    0.00 :   ffffffff810d6321:       addl    $0x1c, %r12d
    0.00 :   ffffffff810d6325:       testb   $0x20, 0x354(%rcx)
    0.00 :   ffffffff810d632c:       je      0xffffffff810d621a <psi_task_switch+0x6a>
    0.00 :   ffffffff810d6332:       movq    %rcx, %rdi
    0.00 :   ffffffff810d6335:       callq   0xffffffff81091690 <wq_worker_last_func>
    0.00 :   ffffffff810d633a:       cmpq    $-0x7ef2dd20, %rax # imm = 0x810D22E0
    0.00 :   ffffffff810d6340:       setne   -0x35(%rbp)
    0.00 :   ffffffff810d6344:       jmp     0xffffffff810d621a <psi_task_switch+0x6a>
    0.00 :   ffffffff810d6349:       movq    -0x48(%rbp), %r15
    0.00 :   ffffffff810d634d:       movl    $0x10, %edx
    0.00 :   ffffffff810d6352:       xorl    %esi, %esi
    0.00 :   ffffffff810d6354:       movq    %r15, %rdi
    0.00 :   ffffffff810d6357:       callq   0xffffffff810ce7a0 <psi_flags_change>
    0.00 :   ffffffff810d635c:       nop
    0.00 :   ffffffff810d635e:       movq    0x5f0(%r15), %rax
    0.00 :   ffffffff810d6365:       movq    $-0x7ddc91c0, %r15 # imm = 0x82236E40
    0.00 :   ffffffff810d636c:       movq    0x78(%rax), %rax
    0.00 :   ffffffff810d6370:       movq    0xf8(%rax), %rdx
    0.00 :   ffffffff810d6377:       cmpq    $0x1, 0x68(%rdx)
    0.00 :   ffffffff810d637c:       je      0xffffffff810d6385 <psi_task_switch+0x1d5>
    0.00 :   ffffffff810d637e:       movq    0x458(%rax), %r15
    0.00 :   ffffffff810d6385:       movq    -0x30(%rbp), %r14
    0.00 :   ffffffff810d6389:       movslq  %ebx, %r13
    0.00 :   ffffffff810d638c:       jmp     0xffffffff810d63b4 <psi_task_switch+0x204>
    0.00 :   ffffffff810d638e:       xorl    %edx, %edx
    0.00 :   ffffffff810d6390:       movq    %r15, %rdi
    0.00 :   ffffffff810d6393:       movl    $0x1, %r9d
    0.00 :   ffffffff810d6399:       movq    %r14, %r8
    0.00 :   ffffffff810d639c:       movl    $0x10, %ecx
    0.00 :   ffffffff810d63a1:       movl    %ebx, %esi
    0.00 :   ffffffff810d63a3:       callq   0xffffffff810cef00 <psi_group_change>
    0.00 :   ffffffff810d63a8:       movq    (%r15), %r15
    0.00 :   ffffffff810d63ab:       testq   %r15, %r15
    0.00 :   ffffffff810d63ae:       je      0xffffffff810d61ef <psi_task_switch+0x3f>
    0.00 :   ffffffff810d63b4:       movq    -0x7dedc720(,%r13,8), %rdx
    0.00 :   ffffffff810d63bc:       movq    0x30(%r15), %rax
    0.00 :   ffffffff810d63c0:       testb   $-0x80, 0x14(%rax,%rdx)
    0.00 :   ffffffff810d63c5:       je      0xffffffff810d638e <psi_task_switch+0x1de>
    0.00 :   ffffffff810d63c7:       jmp     0xffffffff810d61f2 <psi_task_switch+0x42>
    0.00 :   ffffffff810d63cc:       movq    $-0x7ddc91c0, %r14 # imm = 0x82236E40
    0.00 :   ffffffff810d63d3:       jmp     0xffffffff810d6258 <psi_task_switch+0xa8>
    0.00 :   ffffffff810d63d8:       movq    $-0x7ddc91c0, %r15 # imm = 0x82236E40
    0.00 :   ffffffff810d63df:       jmp     0xffffffff810d6385 <psi_task_switch+0x1d5>
 Percent |	Source code & Disassembly of elf for cycles (5 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81116450 <timekeeping_advance>:
         : 5                ; timekeeping_advance():
    0.00 :   ffffffff81116450:       pushq   %rbp
    0.00 :   ffffffff81116451:       movq    %rsp, %rbp
    0.00 :   ffffffff81116454:       pushq   %r15
    0.00 :   ffffffff81116456:       pushq   %r14
    0.00 :   ffffffff81116458:       pushq   %r13
   49.10 :   ffffffff8111645a:       movl    %edi, %r13d
    0.00 :   ffffffff8111645d:       pushq   %r12
    0.00 :   ffffffff8111645f:       pushq   %rbx
    0.00 :   ffffffff81116460:       subq    $0x30, %rsp
    0.00 :   ffffffff81116464:       movq    %gs:0x28, %rax
    0.00 :   ffffffff8111646d:       movq    %rax, 0x28(%rsp)
    0.00 :   ffffffff81116472:       xorl    %eax, %eax
    0.00 :   ffffffff81116474:       movq    $-0x7d9316fc, %rdi # imm = 0x826CE904
    0.00 :   ffffffff8111647b:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff81116480:       movl    0x12505a6(%rip), %esi # 0xffffffff82366a2c <timekeeping_suspended>
    0.00 :   ffffffff81116486:       movq    %rax, 0x8(%rsp)
    0.00 :   ffffffff8111648b:       testl   %esi, %esi
    0.00 :   ffffffff8111648d:       jne     0xffffffff81116920 <timekeeping_advance+0x4d0>
    0.00 :   ffffffff81116493:       movq    0x15b8516(%rip), %r14 # 0xffffffff826ce9b0 <shadow_timekeeper+0x10>
    0.00 :   ffffffff8111649a:       movq    0x15b84ff(%rip), %rdi # 0xffffffff826ce9a0 <shadow_timekeeper>
    0.00 :   ffffffff811164a1:       movq    0x15b8500(%rip), %rbx # 0xffffffff826ce9a8 <shadow_timekeeper+0x8>
    0.00 :   ffffffff811164a8:       movq    (%rdi), %rax
    0.00 :   ffffffff811164ab:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811164b0:       subq    %r14, %rax
    0.00 :   ffffffff811164b3:       movq    %rax, %r12
    0.00 :   ffffffff811164b6:       xorl    %eax, %eax
    0.00 :   ffffffff811164b8:       andq    %rbx, %r12
    0.00 :   ffffffff811164bb:       shrq    %rbx
    0.00 :   ffffffff811164be:       notq    %rbx
    0.00 :   ffffffff811164c1:       testq   %r12, %rbx
    0.00 :   ffffffff811164c4:       cmovneq %rax, %r12
    0.00 :   ffffffff811164c8:       cmpq    0x15b86d1(%rip), %r12 # 0xffffffff826ceba0 <tk_core+0xe0>
    0.00 :   ffffffff811164cf:       jae     0xffffffff811164db <timekeeping_advance+0x8b>
    0.00 :   ffffffff811164d1:       andl    $0x1, %r13d
    0.00 :   ffffffff811164d5:       je      0xffffffff81116920 <timekeeping_advance+0x4d0>
    0.00 :   ffffffff811164db:       movl    $0xffffffff, %r13d # imm = 0xFFFFFFFF
    0.00 :   ffffffff811164e1:       movl    %r13d, %ebx
    0.00 :   ffffffff811164e4:       movl    %r13d, %r14d
    0.00 :   ffffffff811164e7:       bsrq    %r12, %rbx
    0.00 :   ffffffff811164eb:       bsrq    0x15b8585(%rip), %r14 # 0xffffffff826cea78 <shadow_timekeeper+0xd8>
    0.00 :   ffffffff811164f3:       callq   0xffffffff81117860 <ntp_tick_length>
    0.00 :   ffffffff811164f8:       bsrq    %rax, %r13
    0.00 :   ffffffff811164fc:       subl    %r14d, %ebx
    0.00 :   ffffffff811164ff:       movl    $0x0, %eax
    0.00 :   ffffffff81116504:       movq    0x15b856d(%rip), %rdi # 0xffffffff826cea78 <shadow_timekeeper+0xd8>
    0.00 :   ffffffff8111650b:       cmovsl  %eax, %ebx
    0.00 :   ffffffff8111650e:       movl    $0x3e, %eax
    0.00 :   ffffffff81116513:       movq    $-0x7d931660, (%rsp) # imm = 0x826CE9A0
    0.00 :   ffffffff8111651b:       subl    %r13d, %eax
    0.00 :   ffffffff8111651e:       cmpl    %eax, %ebx
    0.00 :   ffffffff81116520:       cmovgl  %eax, %ebx
    0.00 :   ffffffff81116523:       xorl    %r13d, %r13d
    0.00 :   ffffffff81116526:       cmpq    %rdi, %r12
    0.00 :   ffffffff81116529:       jb      0xffffffff8111666c <timekeeping_advance+0x21c>
    0.00 :   ffffffff8111652f:       movq    %rdi, %rax
    0.00 :   ffffffff81116532:       movl    %ebx, %ecx
    0.00 :   ffffffff81116534:       shlq    %cl, %rax
    0.00 :   ffffffff81116537:       cmpq    %rax, %r12
    0.00 :   ffffffff8111653a:       jb      0xffffffff81116655 <timekeeping_advance+0x205>
    0.00 :   ffffffff81116540:       movq    0x15b8539(%rip), %rsi # 0xffffffff826cea80 <shadow_timekeeper+0xe0>
    0.00 :   ffffffff81116547:       addq    %rax, 0x15b8462(%rip) # 0xffffffff826ce9b0 <shadow_timekeeper+0x10>
   12.79 :   ffffffff8111654e:       subq    %rax, %r12
    0.00 :   ffffffff81116551:       addq    %rax, 0x15b8490(%rip) # 0xffffffff826ce9e8 <shadow_timekeeper+0x48>
    0.00 :   ffffffff81116558:       movl    $0x3b9aca00, %r15d # imm = 0x3B9ACA00
    0.00 :   ffffffff8111655e:       movq    %rsi, %rax
    0.00 :   ffffffff81116561:       shlq    %cl, %rax
    0.00 :   ffffffff81116564:       movl    0x15b8452(%rip), %ecx # 0xffffffff826ce9bc <shadow_timekeeper+0x1c>
    0.00 :   ffffffff8111656a:       addq    0x15b844f(%rip), %rax # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff81116571:       shlq    %cl, %r15
    0.00 :   ffffffff81116574:       cmpq    %r15, %rax
    0.00 :   ffffffff81116577:       movq    %rax, 0x15b8442(%rip) # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff8111657e:       jb      0xffffffff811165d7 <timekeeping_advance+0x187>
    0.00 :   ffffffff81116580:       xorl    %r14d, %r14d
    0.00 :   ffffffff81116583:       movq    0x15b8486(%rip), %rsi # 0xffffffff826cea10 <shadow_timekeeper+0x70>
    0.00 :   ffffffff8111658a:       movl    0x15b8520(%rip), %ecx # 0xffffffff826ceab0 <shadow_timekeeper+0x110>
    0.00 :   ffffffff81116590:       subq    %r15, %rax
    0.00 :   ffffffff81116593:       movq    %rax, 0x15b8426(%rip) # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff8111659a:       leaq    0x1(%rsi), %rdi
    0.00 :   ffffffff8111659e:       testl   %ecx, %ecx
    0.00 :   ffffffff811165a0:       movq    %rdi, 0x15b8469(%rip) # 0xffffffff826cea10 <shadow_timekeeper+0x70>
    0.00 :   ffffffff811165a7:       jne     0xffffffff811167f2 <timekeeping_advance+0x3a2>
    0.00 :   ffffffff811165ad:       callq   0xffffffff81117900 <second_overflow>
    0.00 :   ffffffff811165b2:       testl   %eax, %eax
    0.00 :   ffffffff811165b4:       jne     0xffffffff81116801 <timekeeping_advance+0x3b1>
    0.00 :   ffffffff811165ba:       movq    0x15b83ff(%rip), %rax # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff811165c1:       cmpq    %r15, %rax
    0.00 :   ffffffff811165c4:       jae     0xffffffff81116583 <timekeeping_advance+0x133>
    0.00 :   ffffffff811165c6:       movq    0x15b84b3(%rip), %rsi # 0xffffffff826cea80 <shadow_timekeeper+0xe0>
    0.00 :   ffffffff811165cd:       movq    0x15b84a4(%rip), %rdi # 0xffffffff826cea78 <shadow_timekeeper+0xd8>
    0.00 :   ffffffff811165d4:       orl     %r14d, %r13d
    0.00 :   ffffffff811165d7:       movq    0x15b84b2(%rip), %rax # 0xffffffff826cea90 <shadow_timekeeper+0xf0>
    0.00 :   ffffffff811165de:       movl    %ebx, %ecx
    0.00 :   ffffffff811165e0:       movl    $0x3b9aca00, %edx # imm = 0x3B9ACA00
    0.00 :   ffffffff811165e5:       shlq    %cl, %rax
    0.00 :   ffffffff811165e8:       movl    0x15b8406(%rip), %ecx # 0xffffffff826ce9f4 <shadow_timekeeper+0x54>
    0.00 :   ffffffff811165ee:       addq    0x15b8403(%rip), %rax # 0xffffffff826ce9f8 <shadow_timekeeper+0x58>
    0.00 :   ffffffff811165f5:       shlq    %cl, %rdx
    0.00 :   ffffffff811165f8:       cmpq    %rdx, %rax
    0.00 :   ffffffff811165fb:       movq    %rax, 0x15b83f6(%rip) # 0xffffffff826ce9f8 <shadow_timekeeper+0x58>
    0.00 :   ffffffff81116602:       movq    %rdx, %rcx
    0.00 :   ffffffff81116605:       jb      0xffffffff8111662d <timekeeping_advance+0x1dd>
    0.00 :   ffffffff81116607:       movq    0x15b8452(%rip), %rdx # 0xffffffff826cea60 <shadow_timekeeper+0xc0>
    0.00 :   ffffffff8111660e:       incq    %rdx
    0.00 :   ffffffff81116611:       subq    %rcx, %rax
    0.00 :   ffffffff81116614:       movq    %rdx, %r8
    0.00 :   ffffffff81116617:       incq    %rdx
    0.00 :   ffffffff8111661a:       cmpq    %rcx, %rax
    0.00 :   ffffffff8111661d:       jae     0xffffffff81116611 <timekeeping_advance+0x1c1>
    0.00 :   ffffffff8111661f:       movq    %rax, 0x15b83d2(%rip) # 0xffffffff826ce9f8 <shadow_timekeeper+0x58>
    0.00 :   ffffffff81116626:       movq    %r8, 0x15b8433(%rip) # 0xffffffff826cea60 <shadow_timekeeper+0xc0>
    0.00 :   ffffffff8111662d:       movq    0x15b8464(%rip), %rax # 0xffffffff826cea98 <shadow_timekeeper+0xf8>
    0.00 :   ffffffff81116634:       movl    %ebx, %ecx
    0.00 :   ffffffff81116636:       addq    0x15b844b(%rip), %rsi # 0xffffffff826cea88 <shadow_timekeeper+0xe8>
    0.00 :   ffffffff8111663d:       shlq    %cl, %rax
    0.00 :   ffffffff81116640:       movl    0x15b8462(%rip), %ecx # 0xffffffff826ceaa8 <shadow_timekeeper+0x108>
    0.00 :   ffffffff81116646:       addl    %ebx, %ecx
    0.00 :   ffffffff81116648:       shlq    %cl, %rsi
    0.00 :   ffffffff8111664b:       subq    %rsi, %rax
    0.00 :   ffffffff8111664e:       addq    %rax, 0x15b844b(%rip) # 0xffffffff826ceaa0 <shadow_timekeeper+0x100>
    0.00 :   ffffffff81116655:       movl    %ebx, %ecx
    0.00 :   ffffffff81116657:       movq    %rdi, %rax
    0.00 :   ffffffff8111665a:       shlq    %cl, %rax
    0.00 :   ffffffff8111665d:       cmpq    %rax, %r12
    0.00 :   ffffffff81116660:       sbbl    $0x0, %ebx
    0.00 :   ffffffff81116663:       cmpq    %rdi, %r12
    0.00 :   ffffffff81116666:       jae     0xffffffff8111652f <timekeeping_advance+0xdf>
    0.00 :   ffffffff8111666c:       movq    0x15b8425(%rip), %rbx # 0xffffffff826cea98 <shadow_timekeeper+0xf8>
    0.00 :   ffffffff81116673:       callq   0xffffffff81117860 <ntp_tick_length>
    0.00 :   ffffffff81116678:       cmpq    %rax, %rbx
    0.00 :   ffffffff8111667b:       jne     0xffffffff811169a6 <timekeeping_advance+0x556>
    0.00 :   ffffffff81116681:       movl    0x15b8331(%rip), %ecx # 0xffffffff826ce9b8 <shadow_timekeeper+0x18>
    0.00 :   ffffffff81116687:       movq    0x15b83ea(%rip), %rsi # 0xffffffff826cea78 <shadow_timekeeper+0xd8>
    0.00 :   ffffffff8111668e:       movl    %ecx, %eax
    0.00 :   ffffffff81116690:       subl    0x15b8416(%rip), %eax # 0xffffffff826ceaac <shadow_timekeeper+0x10c>
   20.53 :   ffffffff81116696:       xorl    %edx, %edx
    0.00 :   ffffffff81116698:       cmpq    $0x0, 0x15b8400(%rip) # 0xffffffff826ceaa0 <shadow_timekeeper+0x100>
    0.00 :   ffffffff811166a0:       setg    %dl
    0.00 :   ffffffff811166a3:       addl    %edx, %eax
    0.00 :   ffffffff811166a5:       movl    %edx, 0x15b8401(%rip) # 0xffffffff826ceaac <shadow_timekeeper+0x10c>
    0.00 :   ffffffff811166ab:       movl    %eax, %edi
    0.00 :   ffffffff811166ad:       subl    %ecx, %edi
    0.00 :   ffffffff811166af:       setb    %cl
    0.00 :   ffffffff811166b2:       testl   %edi, %edi
    0.00 :   ffffffff811166b4:       movzbl  %cl, %ecx
    0.00 :   ffffffff811166b7:       je      0xffffffff811166f5 <timekeeping_advance+0x2a5>
    0.00 :   ffffffff811166b9:       cmpl    $-0x1, %edi
    0.00 :   ffffffff811166bc:       movq    %rsi, %rdx
    0.00 :   ffffffff811166bf:       je      0xffffffff8111692e <timekeeping_advance+0x4de>
    0.00 :   ffffffff811166c5:       cmpl    $0x1, %edi
    0.00 :   ffffffff811166c8:       je      0xffffffff811166d9 <timekeeping_advance+0x289>
    0.00 :   ffffffff811166ca:       movslq  %edi, %rsi
    0.00 :   ffffffff811166cd:       imulq   %rsi, %rdx
    0.00 :   ffffffff811166d1:       imulq   %rsi, %r12
    0.00 :   ffffffff811166d5:       testl   %edi, %edi
    0.00 :   ffffffff811166d7:       jle     0xffffffff811166e1 <timekeeping_advance+0x291>
    0.00 :   ffffffff811166d9:       testl   %ecx, %ecx
    0.00 :   ffffffff811166db:       jne     0xffffffff81116927 <timekeeping_advance+0x4d7>
    0.00 :   ffffffff811166e1:       addq    %rdx, 0x15b8398(%rip) # 0xffffffff826cea80 <shadow_timekeeper+0xe0>
    0.00 :   ffffffff811166e8:       subq    %r12, 0x15b82d1(%rip) # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff811166ef:       movl    %eax, 0x15b82c3(%rip) # 0xffffffff826ce9b8 <shadow_timekeeper+0x18>
    0.00 :   ffffffff811166f5:       movq    0x15b82a4(%rip), %rdx # 0xffffffff826ce9a0 <shadow_timekeeper>
    0.00 :   ffffffff811166fc:       movl    0x20(%rdx), %eax
    0.00 :   ffffffff811166ff:       testl   %eax, %eax
    0.00 :   ffffffff81116701:       jne     0xffffffff81116939 <timekeeping_advance+0x4e9>
    0.00 :   ffffffff81116707:       movq    0x15b82b2(%rip), %rax # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff8111670e:       movl    0x15b82a8(%rip), %ecx # 0xffffffff826ce9bc <shadow_timekeeper+0x1c>
    0.00 :   ffffffff81116714:       movl    $0x3b9aca00, %r14d # imm = 0x3B9ACA00
    0.00 :   ffffffff8111671a:       shlq    %cl, %r14
    0.00 :   ffffffff8111671d:       testq   %rax, %rax
    0.00 :   ffffffff81116720:       js      0xffffffff81116986 <timekeeping_advance+0x536>
    0.00 :   ffffffff81116726:       cmpq    %r14, %rax
    0.00 :   ffffffff81116729:       jb      0xffffffff81116776 <timekeeping_advance+0x326>
    0.00 :   ffffffff8111672b:       xorl    %ebx, %ebx
    0.00 :   ffffffff8111672d:       movq    0x15b82dc(%rip), %rdx # 0xffffffff826cea10 <shadow_timekeeper+0x70>
    0.00 :   ffffffff81116734:       subq    %r14, %rax
    0.00 :   ffffffff81116737:       movq    %rax, 0x15b8282(%rip) # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff8111673e:       leaq    0x1(%rdx), %rdi
    0.00 :   ffffffff81116742:       movl    0x15b8368(%rip), %edx # 0xffffffff826ceab0 <shadow_timekeeper+0x110>
    0.00 :   ffffffff81116748:       movq    %rdi, 0x15b82c1(%rip) # 0xffffffff826cea10 <shadow_timekeeper+0x70>
    0.00 :   ffffffff8111674f:       testl   %edx, %edx
    0.00 :   ffffffff81116751:       jne     0xffffffff8111688e <timekeeping_advance+0x43e>
    0.00 :   ffffffff81116757:       callq   0xffffffff81117900 <second_overflow>
    0.00 :   ffffffff8111675c:       testl   %eax, %eax
    0.00 :   ffffffff8111675e:       movl    %eax, %r12d
    0.00 :   ffffffff81116761:       jne     0xffffffff8111689d <timekeeping_advance+0x44d>
    0.00 :   ffffffff81116767:       movq    0x15b8252(%rip), %rax # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff8111676e:       cmpq    %r14, %rax
    0.00 :   ffffffff81116771:       jae     0xffffffff8111672d <timekeeping_advance+0x2dd>
    0.00 :   ffffffff81116773:       orl     %ebx, %r13d
    0.00 :   ffffffff81116776:       incl    0x15b8344(%rip) # 0xffffffff826ceac0 <tk_core>
    0.00 :   ffffffff8111677c:       movq    $-0x7d931660, %rdi # imm = 0x826CE9A0
    0.00 :   ffffffff81116783:       movl    %r13d, %esi
    0.00 :   ffffffff81116786:       callq   0xffffffff811153d0 <timekeeping_update>
    0.00 :   ffffffff8111678b:       movq    $-0x7d931538, %rax # imm = 0x826CEAC8
    0.00 :   ffffffff81116792:       movq    (%rsp), %rsi
    0.00 :   ffffffff81116796:       movl    $0x23, %ecx
    0.00 :   ffffffff8111679b:       movq    %rax, %rdi
   17.58 :   ffffffff8111679e:       rep             movsq   (%rsi), %es:(%rdi)
    0.00 :   ffffffff811167a1:       incl    0x15b8319(%rip) # 0xffffffff826ceac0 <tk_core>
    0.00 :   ffffffff811167a7:       testl   %r13d, %r13d
    0.00 :   ffffffff811167aa:       setne   %bl
    0.00 :   ffffffff811167ad:       movq    0x8(%rsp), %rsi
    0.00 :   ffffffff811167b2:       movq    $-0x7d9316fc, %rdi # imm = 0x826CE904
    0.00 :   ffffffff811167b9:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff811167be:       movq    0x28(%rsp), %rax
    0.00 :   ffffffff811167c3:       subq    %gs:0x28, %rax
    0.00 :   ffffffff811167cc:       jne     0xffffffff811169d9 <timekeeping_advance+0x589>
    0.00 :   ffffffff811167d2:       addq    $0x30, %rsp
    0.00 :   ffffffff811167d6:       movl    %ebx, %eax
    0.00 :   ffffffff811167d8:       popq    %rbx
    0.00 :   ffffffff811167d9:       popq    %r12
    0.00 :   ffffffff811167db:       popq    %r13
    0.00 :   ffffffff811167dd:       popq    %r14
    0.00 :   ffffffff811167df:       popq    %r15
    0.00 :   ffffffff811167e1:       popq    %rbp
    0.00 :   ffffffff811167e2:       xorl    %edx, %edx
    0.00 :   ffffffff811167e4:       xorl    %ecx, %ecx
    0.00 :   ffffffff811167e6:       xorl    %esi, %esi
    0.00 :   ffffffff811167e8:       xorl    %edi, %edi
    0.00 :   ffffffff811167ea:       xorl    %r8d, %r8d
    0.00 :   ffffffff811167ed:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff811167f2:       movl    $0x0, 0x15b82b4(%rip) # 0xffffffff826ceab0 <shadow_timekeeper+0x110>
    0.00 :   ffffffff811167fc:       jmp     0xffffffff811165c1 <timekeeping_advance+0x171>
    0.00 :   ffffffff81116801:       movq    0x15b8218(%rip), %rsi # 0xffffffff826cea20 <shadow_timekeeper+0x80>
    0.00 :   ffffffff81116808:       movslq  %eax, %rdx
    0.00 :   ffffffff8111680b:       addq    %rdx, 0x15b81fe(%rip) # 0xffffffff826cea10 <shadow_timekeeper+0x70>
    0.00 :   ffffffff81116812:       leaq    0x18(%rsp), %rdi
    0.00 :   ffffffff81116817:       movl    %eax, 0x14(%rsp)
    0.00 :   ffffffff8111681b:       movq    $0x0, 0x18(%rsp)
    0.00 :   ffffffff81116824:       movq    $0x0, 0x20(%rsp)
    0.00 :   ffffffff8111682d:       movl    $0x4, %r14d
    0.00 :   ffffffff81116833:       subq    %rdx, %rsi
    0.00 :   ffffffff81116836:       movq    0x15b81eb(%rip), %rdx # 0xffffffff826cea28 <shadow_timekeeper+0x88>
    0.00 :   ffffffff8111683d:       callq   0xffffffff8110ed40 <set_normalized_timespec64>
    0.00 :   ffffffff81116842:       movq    0x20(%rsp), %rdx
    0.00 :   ffffffff81116847:       movq    0x18(%rsp), %rsi
    0.00 :   ffffffff8111684c:       movq    $-0x7d931660, %rdi # imm = 0x826CE9A0
    0.00 :   ffffffff81116853:       callq   0xffffffff81114cd0 <tk_set_wall_to_mono>
    0.00 :   ffffffff81116858:       movl    0x15b81ea(%rip), %edx # 0xffffffff826cea48 <shadow_timekeeper+0xa8>
    0.00 :   ffffffff8111685e:       movl    0x14(%rsp), %eax
    0.00 :   ffffffff81116862:       subl    %eax, %edx
    0.00 :   ffffffff81116864:       movq    0x15b8155(%rip), %rax # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff8111686b:       movl    %edx, 0x15b81d7(%rip) # 0xffffffff826cea48 <shadow_timekeeper+0xa8>
    0.00 :   ffffffff81116871:       movslq  %edx, %rdx
    0.00 :   ffffffff81116874:       imulq   $0x3b9aca00, %rdx, %rdx # imm = 0x3B9ACA00
    0.00 :   ffffffff8111687b:       addq    0x15b81ae(%rip), %rdx # 0xffffffff826cea30 <shadow_timekeeper+0x90>
    0.00 :   ffffffff81116882:       movq    %rdx, 0x15b81b7(%rip) # 0xffffffff826cea40 <shadow_timekeeper+0xa0>
    0.00 :   ffffffff81116889:       jmp     0xffffffff811165c1 <timekeeping_advance+0x171>
    0.00 :   ffffffff8111688e:       movl    $0x0, 0x15b8218(%rip) # 0xffffffff826ceab0 <shadow_timekeeper+0x110>
    0.00 :   ffffffff81116898:       jmp     0xffffffff8111676e <timekeeping_advance+0x31e>
    0.00 :   ffffffff8111689d:       movq    0x15b817c(%rip), %rsi # 0xffffffff826cea20 <shadow_timekeeper+0x80>
    0.00 :   ffffffff811168a4:       movq    0x15b817d(%rip), %rdx # 0xffffffff826cea28 <shadow_timekeeper+0x88>
    0.00 :   ffffffff811168ab:       cltq
    0.00 :   ffffffff811168ad:       leaq    0x18(%rsp), %rdi
    0.00 :   ffffffff811168b2:       addq    %rax, 0x15b8157(%rip) # 0xffffffff826cea10 <shadow_timekeeper+0x70>
    0.00 :   ffffffff811168b9:       movq    $0x0, 0x18(%rsp)
    0.00 :   ffffffff811168c2:       movq    $0x0, 0x20(%rsp)
    0.00 :   ffffffff811168cb:       movl    $0x4, %ebx
    0.00 :   ffffffff811168d0:       subq    %rax, %rsi
    0.00 :   ffffffff811168d3:       callq   0xffffffff8110ed40 <set_normalized_timespec64>
    0.00 :   ffffffff811168d8:       movq    0x18(%rsp), %rsi
    0.00 :   ffffffff811168dd:       movq    $-0x7d931660, %rdi # imm = 0x826CE9A0
    0.00 :   ffffffff811168e4:       movq    0x20(%rsp), %rdx
    0.00 :   ffffffff811168e9:       callq   0xffffffff81114cd0 <tk_set_wall_to_mono>
    0.00 :   ffffffff811168ee:       movl    0x15b8154(%rip), %eax # 0xffffffff826cea48 <shadow_timekeeper+0xa8>
    0.00 :   ffffffff811168f4:       subl    %r12d, %eax
    0.00 :   ffffffff811168f7:       movl    %eax, 0x15b814b(%rip) # 0xffffffff826cea48 <shadow_timekeeper+0xa8>
    0.00 :   ffffffff811168fd:       cltq
    0.00 :   ffffffff811168ff:       imulq   $0x3b9aca00, %rax, %rax # imm = 0x3B9ACA00
    0.00 :   ffffffff81116906:       addq    0x15b8123(%rip), %rax # 0xffffffff826cea30 <shadow_timekeeper+0x90>
    0.00 :   ffffffff8111690d:       movq    %rax, 0x15b812c(%rip) # 0xffffffff826cea40 <shadow_timekeeper+0xa0>
    0.00 :   ffffffff81116914:       movq    0x15b80a5(%rip), %rax # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff8111691b:       jmp     0xffffffff8111676e <timekeeping_advance+0x31e>
    0.00 :   ffffffff81116920:       xorl    %ebx, %ebx
    0.00 :   ffffffff81116922:       jmp     0xffffffff811167ad <timekeeping_advance+0x35d>
    0.00 :   ffffffff81116927:       ud2
    0.00 :   ffffffff81116929:       jmp     0xffffffff811166f5 <timekeeping_advance+0x2a5>
    0.00 :   ffffffff8111692e:       negq    %rdx
    0.00 :   ffffffff81116931:       negq    %r12
    0.00 :   ffffffff81116934:       jmp     0xffffffff811166e1 <timekeeping_advance+0x291>
    0.00 :   ffffffff81116939:       movl    0x15b8078(%rip), %r8d # 0xffffffff826ce9b8 <shadow_timekeeper+0x18>
    0.00 :   ffffffff81116940:       movl    0x10(%rdx), %ecx
    0.00 :   ffffffff81116943:       movl    %r8d, %edi
    0.00 :   ffffffff81116946:       subl    %ecx, %edi
    0.00 :   ffffffff81116948:       movl    %edi, %esi
    0.00 :   ffffffff8111694a:       negl    %esi
    0.00 :   ffffffff8111694c:       cmovsl  %edi, %esi
    0.00 :   ffffffff8111694f:       cmpl    %esi, %eax
    0.00 :   ffffffff81116951:       jae     0xffffffff81116707 <timekeeping_advance+0x2b7>
    0.00 :   ffffffff81116957:       cmpb    $0x0, 0x124d310(%rip) # 0xffffffff82363c6e <__already_done.5>
    0.00 :   ffffffff8111695e:       jne     0xffffffff81116707 <timekeeping_advance+0x2b7>
    0.00 :   ffffffff81116964:       movq    0x30(%rdx), %rsi
    0.00 :   ffffffff81116968:       addq    %rax, %rcx
    0.00 :   ffffffff8111696b:       movq    %r8, %rdx
    0.00 :   ffffffff8111696e:       movq    $-0x7df77dc0, %rdi # imm = 0x82088240
    0.00 :   ffffffff81116975:       movb    $0x1, 0x124d2f2(%rip) # 0xffffffff82363c6e <__already_done.5>
    0.00 :   ffffffff8111697c:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81116981:       jmp     0xffffffff81116707 <timekeeping_advance+0x2b7>
    0.00 :   ffffffff81116986:       addq    %r14, %rax
    0.00 :   ffffffff81116989:       decq    0x15b8080(%rip) # 0xffffffff826cea10 <shadow_timekeeper+0x70>
    0.00 :   ffffffff81116990:       movl    $0x1, 0x15b8116(%rip) # 0xffffffff826ceab0 <shadow_timekeeper+0x110>
    0.00 :   ffffffff8111699a:       movq    %rax, 0x15b801f(%rip) # 0xffffffff826ce9c0 <shadow_timekeeper+0x20>
    0.00 :   ffffffff811169a1:       jmp     0xffffffff81116726 <timekeeping_advance+0x2d6>
    0.00 :   ffffffff811169a6:       callq   0xffffffff81117860 <ntp_tick_length>
    0.00 :   ffffffff811169ab:       movl    0x15b80f7(%rip), %ecx # 0xffffffff826ceaa8 <shadow_timekeeper+0x108>
    0.00 :   ffffffff811169b1:       movq    %rax, 0x15b80e0(%rip) # 0xffffffff826cea98 <shadow_timekeeper+0xf8>
    0.00 :   ffffffff811169b8:       xorl    %edx, %edx
    0.00 :   ffffffff811169ba:       movq    0x15b80b7(%rip), %rsi # 0xffffffff826cea78 <shadow_timekeeper+0xd8>
    0.00 :   ffffffff811169c1:       shrq    %cl, %rax
    0.00 :   ffffffff811169c4:       subq    0x15b80bd(%rip), %rax # 0xffffffff826cea88 <shadow_timekeeper+0xe8>
    0.00 :   ffffffff811169cb:       movl    0x15b7fe7(%rip), %ecx # 0xffffffff826ce9b8 <shadow_timekeeper+0x18>
    0.00 :   ffffffff811169d1:       divq    %rsi
    0.00 :   ffffffff811169d4:       jmp     0xffffffff81116696 <timekeeping_advance+0x246>
    0.00 :   ffffffff811169d9:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of nf_conntrack.ko for cycles (4 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    00000000000017c0 <__nf_conntrack_find_get.isra.0>:
         : 5    ; __nf_conntrack_find_get.isra.0():
    0.00 :   17c0:           pushq   %rbp
    0.00 :   17c1:           movq    %rsp, %rbp
    0.00 :   17c4:           pushq   %r15
    0.00 :   17c6:           movq    %rsi, %r15
    0.00 :   17c9:           pushq   %r14
    0.00 :   17cb:           movq    %rdi, %r14
    0.00 :   17ce:           pushq   %r13
    0.00 :   17d0:           pushq   %r12
    0.00 :   17d2:           pushq   %rbx
    0.00 :   17d3:           subq    $0x10, %rsp
    0.00 :   17d7:           movl    %edx, %eax
    0.00 :   17d9:           movq    $-0x10, %r13
    0.00 :   17e0:           movq    %rax, -0x30(%rbp)
    0.00 :   17e4:           jmp     0x17e8 <__nf_conntrack_find_get.isra.0+0x28>
    0.00 :   17e6:           pause
    0.00 :   17e8:           movl    (%rip), %eax            # 0x17ee <__nf_conntrack_find_get.isra.0+0x2e>
    0.00 :   17ee:           testb   $0x1, %al
    0.00 :   17f0:           jne     0x17e6 <__nf_conntrack_find_get.isra.0+0x26>
    0.00 :   17f2:           movl    (%rip), %r12d           # 0x17f9 <__nf_conntrack_find_get.isra.0+0x39>
    0.00 :   17f9:           movq    (%rip), %rsi            # 0x1800 <__nf_conntrack_find_get.isra.0+0x40>
    0.00 :   1800:           movl    (%rip), %ecx            # 0x1806 <__nf_conntrack_find_get.isra.0+0x46>
    0.00 :   1806:           cmpl    %eax, %ecx
    0.00 :   1808:           jne     0x17e8 <__nf_conntrack_find_get.isra.0+0x28>
    0.00 :   180a:           movq    -0x30(%rbp), %rax
    0.00 :   180e:           imulq   %rax, %r12
    0.00 :   1812:           shrq    $0x20, %r12
    0.00 :   1816:           leaq    (%rsi,%r12,8), %rax
    0.00 :   181a:           movq    (%rax), %rbx
    0.00 :   181d:           testb   $0x1, %bl
    0.00 :   1820:           je      0x1850 <__nf_conntrack_find_get.isra.0+0x90>
    0.00 :   1822:           jmp     0x18ae <__nf_conntrack_find_get.isra.0+0xee>
    0.00 :   1827:           movq    (%r15), %rax
    0.00 :   182a:           movq    0x8(%r15), %rcx
    0.00 :   182e:           xorq    0x10(%rbx), %rax
    0.00 :   1832:           xorq    0x18(%rbx), %rcx
    0.00 :   1836:           orq     %rcx, %rax
    0.00 :   1839:           jne     0x1848 <__nf_conntrack_find_get.isra.0+0x88>
    0.00 :   183b:           movl    0x20(%rbx), %eax
    0.00 :   183e:           cmpl    %eax, 0x10(%r15)
    0.00 :   1842:           je      0x18ca <__nf_conntrack_find_get.isra.0+0x10a>
    0.00 :   1848:           movq    (%rbx), %rbx
    0.00 :   184b:           testb   $0x1, %bl
    0.00 :   184e:           jne     0x18ae <__nf_conntrack_find_get.isra.0+0xee>
    0.00 :   1850:           movzbl  0x37(%rbx), %ecx
    0.00 :   1854:           movq    %r13, %rdi
    0.00 :   1857:           leaq    (,%rcx,8), %rax
    0.00 :   185f:           subq    %rcx, %rax
    0.00 :   1862:           shlq    $0x3, %rax
    0.00 :   1866:           subq    %rax, %rdi
    0.00 :   1869:           addq    %rbx, %rdi
    0.00 :   186c:           movl    0x8(%rdi), %eax
    0.00 :   186f:           movq    (%rip), %rcx            # 0x1876 <__nf_conntrack_find_get.isra.0+0xb6>
    0.00 :   1876:           subl    %ecx, %eax
    0.00 :   1878:           testl   %eax, %eax
    0.00 :   187a:           jg      0x1827 <__nf_conntrack_find_get.isra.0+0x67>
    0.00 :   187c:           movl    (%rdi), %ecx
    0.00 :   187e:           testl   %ecx, %ecx
    0.00 :   1880:           je      0x1848 <__nf_conntrack_find_get.isra.0+0x88>
    0.00 :   1882:           leal    0x1(%rcx), %esi
    0.00 :   1885:           movl    %ecx, %eax
    0.00 :   1887:           lock
    0.00 :   1888:           cmpxchgl        %esi, (%rdi)
    0.00 :   188b:           jne     0x19af <__nf_conntrack_find_get.isra.0+0x1ef>
    0.00 :   1891:           testl   %ecx, %ecx
    0.00 :   1893:           js      0x199b <__nf_conntrack_find_get.isra.0+0x1db>
    0.00 :   1899:           testl   %esi, %esi
    0.00 :   189b:           js      0x199b <__nf_conntrack_find_get.isra.0+0x1db>
    0.00 :   18a1:           callq   0x1710 <nf_ct_gc_expired.part.0>
    0.00 :   18a6:           movq    (%rbx), %rbx
    0.00 :   18a9:           testb   $0x1, %bl
    0.00 :   18ac:           je      0x1850 <__nf_conntrack_find_get.isra.0+0x90>
    0.00 :   18ae:           shrq    %rbx
    0.00 :   18b1:           cmpq    %rbx, %r12
    0.00 :   18b4:           je      0x197b <__nf_conntrack_find_get.isra.0+0x1bb>
    0.00 :   18ba:           movq    0x9c0(%r14), %rax
    0.00 :   18c1:           incl    %gs:0x2c(%rax)
    0.00 :   18c5:           jmp     0x17e8 <__nf_conntrack_find_get.isra.0+0x28>
    0.00 :   18ca:           movq    0x14(%r15), %rax
    0.00 :   18ce:           movq    0x1c(%r15), %rcx
    0.00 :   18d2:           xorq    0x24(%rbx), %rax
    0.00 :   18d6:           xorq    0x2c(%rbx), %rcx
    0.00 :   18da:           orq     %rcx, %rax
    0.00 :   18dd:           jne     0x1848 <__nf_conntrack_find_get.isra.0+0x88>
    0.00 :   18e3:           movl    0x24(%r15), %eax
    0.00 :   18e7:           xorl    0x34(%rbx), %eax
    0.00 :   18ea:           testl   $0xffffff, %eax         # imm = 0xFFFFFF
    0.00 :   18ef:           jne     0x1848 <__nf_conntrack_find_get.isra.0+0x88>
    0.00 :   18f5:           movq    0x80(%rdi), %rax
    0.00 :   18fc:           testb   $0x8, %al
   21.99 :   18fe:           je      0x1848 <__nf_conntrack_find_get.isra.0+0x88>
    0.00 :   1904:           cmpq    0x88(%rdi), %r14
    0.00 :   190b:           jne     0x1848 <__nf_conntrack_find_get.isra.0+0x88>
    0.00 :   1911:           testq   %rbx, %rbx
    0.00 :   1914:           je      0x197b <__nf_conntrack_find_get.isra.0+0x1bb>
    0.00 :   1916:           movl    (%rdi), %edx
    0.00 :   1918:           testl   %edx, %edx
    0.00 :   191a:           je      0x197b <__nf_conntrack_find_get.isra.0+0x1bb>
    0.00 :   191c:           leal    0x1(%rdx), %ecx
    0.00 :   191f:           movl    %edx, %eax
    0.00 :   1921:           lock
    0.00 :   1922:           cmpxchgl        %ecx, (%rdi)
    0.00 :   1925:           jne     0x1a25 <__nf_conntrack_find_get.isra.0+0x265>
    0.00 :   192b:           testl   %edx, %edx
    0.00 :   192d:           js      0x1a11 <__nf_conntrack_find_get.isra.0+0x251>
    0.00 :   1933:           testl   %ecx, %ecx
    0.00 :   1935:           js      0x1a11 <__nf_conntrack_find_get.isra.0+0x251>
    0.00 :   193b:           movq    (%r15), %rax
    0.00 :   193e:           movq    0x8(%r15), %rdx
    0.00 :   1942:           xorq    0x10(%rbx), %rax
    0.00 :   1946:           xorq    0x18(%rbx), %rdx
    0.00 :   194a:           movzbl  0x37(%rbx), %ecx
    0.00 :   194e:           orq     %rdx, %rax
    0.00 :   1951:           jne     0x195c <__nf_conntrack_find_get.isra.0+0x19c>
    0.00 :   1953:           movl    0x20(%rbx), %eax
    0.00 :   1956:           cmpl    %eax, 0x10(%r15)
    0.00 :   195a:           je      0x19b6 <__nf_conntrack_find_get.isra.0+0x1f6>
    0.00 :   195c:           testq   %rdi, %rdi
    0.00 :   195f:           je      0x197b <__nf_conntrack_find_get.isra.0+0x1bb>
    0.00 :   1961:           movl    $0xffffffff, %eax       # imm = 0xFFFFFFFF
    0.00 :   1966:           lock
    0.00 :   1967:           xaddl   %eax, (%rdi)
    0.00 :   196a:           cmpl    $0x1, %eax
    0.00 :   196d:           je      0x1a3d <__nf_conntrack_find_get.isra.0+0x27d>
    0.00 :   1973:           testl   %eax, %eax
    0.00 :   1975:           jle     0x1a2c <__nf_conntrack_find_get.isra.0+0x26c>
    0.00 :   197b:           xorl    %ebx, %ebx
    0.00 :   197d:           addq    $0x10, %rsp
    0.00 :   1981:           movq    %rbx, %rax
    0.00 :   1984:           popq    %rbx
    0.00 :   1985:           popq    %r12
    0.00 :   1987:           popq    %r13
    0.00 :   1989:           popq    %r14
    0.00 :   198b:           popq    %r15
    0.00 :   198d:           popq    %rbp
    0.00 :   198e:           xorl    %edx, %edx
    0.00 :   1990:           xorl    %ecx, %ecx
    0.00 :   1992:           xorl    %esi, %esi
    0.00 :   1994:           xorl    %edi, %edi
    0.00 :   1996:           jmp     0x199b <__nf_conntrack_find_get.isra.0+0x1db>
    0.00 :   199b:           xorl    %esi, %esi
    0.00 :   199d:           movq    %rdi, -0x38(%rbp)
    0.00 :   19a1:           callq   0x19a6 <__nf_conntrack_find_get.isra.0+0x1e6>
    0.00 :   19a6:           movq    -0x38(%rbp), %rdi
    0.00 :   19aa:           jmp     0x18a1 <__nf_conntrack_find_get.isra.0+0xe1>
    0.00 :   19af:           movl    %eax, %ecx
    0.00 :   19b1:           jmp     0x187e <__nf_conntrack_find_get.isra.0+0xbe>
    0.00 :   19b6:           movq    0x14(%r15), %rax
    0.00 :   19ba:           movq    0x1c(%r15), %rdx
    0.00 :   19be:           xorq    0x24(%rbx), %rax
    0.00 :   19c2:           xorq    0x2c(%rbx), %rdx
    0.00 :   19c6:           orq     %rdx, %rax
    0.00 :   19c9:           jne     0x195c <__nf_conntrack_find_get.isra.0+0x19c>
    0.00 :   19cb:           movl    0x24(%r15), %eax
    0.00 :   19cf:           xorl    0x34(%rbx), %eax
    0.00 :   19d2:           testl   $0xffffff, %eax         # imm = 0xFFFFFF
    0.00 :   19d7:           jne     0x195c <__nf_conntrack_find_get.isra.0+0x19c>
    0.00 :   19d9:           leaq    (,%rcx,8), %rax
    0.00 :   19e1:           movq    %rbx, %rdx
    0.00 :   19e4:           subq    %rcx, %rax
    0.00 :   19e7:           shlq    $0x3, %rax
    0.00 :   19eb:           subq    %rax, %rdx
    0.00 :   19ee:           leaq    -0x10(%rdx), %rax
    0.00 :   19f2:           movq    0x70(%rdx), %rdx
    0.00 :   19f6:           andl    $0x8, %edx
   78.01 :   19f9:           je      0x195c <__nf_conntrack_find_get.isra.0+0x19c>
    0.00 :   19ff:           cmpq    0x88(%rax), %r14
    0.00 :   1a06:           jne     0x195c <__nf_conntrack_find_get.isra.0+0x19c>
    0.00 :   1a0c:           jmp     0x197d <__nf_conntrack_find_get.isra.0+0x1bd>
    0.00 :   1a11:           xorl    %esi, %esi
    0.00 :   1a13:           movq    %rdi, -0x30(%rbp)
    0.00 :   1a17:           callq   0x1a1c <__nf_conntrack_find_get.isra.0+0x25c>
    0.00 :   1a1c:           movq    -0x30(%rbp), %rdi
    0.00 :   1a20:           jmp     0x193b <__nf_conntrack_find_get.isra.0+0x17b>
    0.00 :   1a25:           movl    %eax, %edx
    0.00 :   1a27:           jmp     0x1918 <__nf_conntrack_find_get.isra.0+0x158>
    0.00 :   1a2c:           movl    $0x3, %esi
    0.00 :   1a31:           xorl    %ebx, %ebx
    0.00 :   1a33:           callq   0x1a38 <__nf_conntrack_find_get.isra.0+0x278>
    0.00 :   1a38:           jmp     0x197d <__nf_conntrack_find_get.isra.0+0x1bd>
    0.00 :   1a3d:           xorl    %ebx, %ebx
    0.00 :   1a3f:           callq   0x1a44 <__nf_conntrack_find_get.isra.0+0x284>
    0.00 :   1a44:           jmp     0x197d <__nf_conntrack_find_get.isra.0+0x1bd>
 Percent |	Source code & Disassembly of elf for cycles (4 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b77f20 <__do_softirq>:
         : 5                ; __do_softirq():
   23.43 :   ffffffff81b77f20:       pushq   %rbp
    0.00 :   ffffffff81b77f21:       movq    %rsp, %rbp
    0.00 :   ffffffff81b77f24:       pushq   %r15
    0.00 :   ffffffff81b77f26:       pushq   %r14
    0.00 :   ffffffff81b77f28:       pushq   %r13
    0.00 :   ffffffff81b77f2a:       pushq   %r12
    0.00 :   ffffffff81b77f2c:       pushq   %rbx
    0.00 :   ffffffff81b77f2d:       subq    $0x28, %rsp
    0.00 :   ffffffff81b77f31:       movq    0x68fa88(%rip), %r15 # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81b77f38:       movq    %gs:0x22700, %r13
    0.00 :   ffffffff81b77f41:       movw    %gs:0x7e4aa7df(%rip), %dx
    0.00 :   ffffffff81b77f49:       movl    0x354(%r13), %r12d
    0.00 :   ffffffff81b77f50:       addq    $0x2, %r15
    0.00 :   ffffffff81b77f54:       andl    $0xfffff7ff, 0x354(%r13) # imm = 0xFFFFF7FF
    0.00 :   ffffffff81b77f5f:       movzwl  %dx, %ebx
    0.00 :   ffffffff81b77f62:       addl    $0x100, %gs:0x7e4aa79b(%rip) # imm = 0x100
    0.00 :   ffffffff81b77f6d:       movl    $0xa, %r14d
    0.00 :   ffffffff81b77f73:       movl    %r12d, -0x50(%rbp)
    0.00 :   ffffffff81b77f77:       movl    %ebx, %esi
    0.00 :   ffffffff81b77f79:       movl    %r14d, -0x4c(%rbp)
    0.00 :   ffffffff81b77f7d:       movq    %r15, -0x48(%rbp)
    0.00 :   ffffffff81b77f81:       movq    %r13, -0x40(%rbp)
    0.00 :   ffffffff81b77f85:       movw    $0x0, %gs:0x7e4aa799(%rip)
    0.00 :   ffffffff81b77f8f:       sti
    0.00 :   ffffffff81b77f90:       movq    $-0x7ddf9f40, %r12 # imm = 0x822060C0
    0.00 :   ffffffff81b77f97:       movl    $0xffffffff, %ebx # imm = 0xFFFFFFFF
    0.00 :   ffffffff81b77f9c:       bsfl    %esi, %ebx
    0.00 :   ffffffff81b77f9f:       incl    %ebx
    0.00 :   ffffffff81b77fa1:       movq    %r12, %r11
    0.00 :   ffffffff81b77fa4:       movl    %esi, %r12d
    0.00 :   ffffffff81b77fa7:       je      0xffffffff81b78022 <__do_softirq+0x102>
    0.00 :   ffffffff81b77fa9:       leal    -0x1(%rbx), %eax
    0.00 :   ffffffff81b77fac:       movl    %gs:0x7e4aa754(%rip), %r8d
    0.00 :   ffffffff81b77fb4:       cltq
    0.00 :   ffffffff81b77fb6:       andl    $0x7fffffff, %r8d # imm = 0x7FFFFFFF
    0.00 :   ffffffff81b77fbd:       leaq    (%r11,%rax,8), %r14
    0.00 :   ffffffff81b77fc1:       movl    %r8d, %r15d
    0.00 :   ffffffff81b77fc4:       movq    %r14, %r13
    0.00 :   ffffffff81b77fc7:       movq    (%r14), %rdx
    0.00 :   ffffffff81b77fca:       movq    %r14, %rdi
    0.00 :   ffffffff81b77fcd:       subq    $-0x7ddf9f40, %r13 # imm = 0x822060C0
    0.00 :   ffffffff81b77fd4:       sarq    $0x3, %r13
    0.00 :   ffffffff81b77fd8:       movl    %r13d, %eax
    0.00 :   ffffffff81b77fdb:       movq    %rax, -0x38(%rbp)
    0.00 :   ffffffff81b77fdf:       incl    %gs:0x1b148(,%rax,4)
    0.00 :   ffffffff81b77fe7:       callq   0xffffffff81b781c0 <__x86_indirect_thunk_rdx>
    0.00 :   ffffffff81b77fec:       movl    %gs:0x7e4aa714(%rip), %r9d
    0.00 :   ffffffff81b77ff4:       andl    $0x7fffffff, %r9d # imm = 0x7FFFFFFF
    0.00 :   ffffffff81b77ffb:       movq    -0x38(%rbp), %rax
    0.00 :   ffffffff81b77fff:       cmpl    %r9d, %r15d
    0.00 :   ffffffff81b78002:       jne     0xffffffff81b780f4 <__do_softirq+0x1d4>
    0.00 :   ffffffff81b78008:       movl    %ebx, %ecx
    0.00 :   ffffffff81b7800a:       movl    $0xffffffff, %r10d # imm = 0xFFFFFFFF
    0.00 :   ffffffff81b78010:       leaq    0x8(%r14), %r11
    0.00 :   ffffffff81b78014:       shrl    %cl, %r12d
    0.00 :   ffffffff81b78017:       bsfl    %r12d, %r10d
    0.00 :   ffffffff81b7801b:       movl    %r10d, %ebx
    0.00 :   ffffffff81b7801e:       incl    %ebx
    0.00 :   ffffffff81b78020:       jne     0xffffffff81b77fa9 <__do_softirq+0x89>
    0.00 :   ffffffff81b78022:       movq    -0x40(%rbp), %rsi
    0.00 :   ffffffff81b78026:       movq    %gs:0x7e4a3052(%rip), %rax
    0.00 :   ffffffff81b7802e:       cmpq    %rsi, %rax
    0.00 :   ffffffff81b78031:       je      0xffffffff81b78136 <__do_softirq+0x216>
    0.00 :   ffffffff81b78037:       cli
    0.00 :   ffffffff81b78038:       movw    %gs:0x7e4aa6e8(%rip), %si
    0.00 :   ffffffff81b78040:       movzwl  %si, %esi
    0.00 :   ffffffff81b78043:       testl   %esi, %esi
    0.00 :   ffffffff81b78045:       je      0xffffffff81b78155 <__do_softirq+0x235>
    0.00 :   ffffffff81b7804b:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81b7804f:       movq    $0x0, -0x30(%rbp)
    0.00 :   ffffffff81b78057:       movq    0x68f962(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81b7805e:       cmpq    %rdi, %rax
    0.00 :   ffffffff81b78061:       jns     0xffffffff81b78077 <__do_softirq+0x157>
    0.00 :   ffffffff81b78063:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff81b78067:       movq    (%rax), %rax
    0.00 :   ffffffff81b7806a:       testb   $0x8, %al
    0.00 :   ffffffff81b7806c:       jne     0xffffffff81b78077 <__do_softirq+0x157>
    0.00 :   ffffffff81b7806e:       decl    -0x4c(%rbp)
    0.00 :   ffffffff81b78071:       jne     0xffffffff81b77f85 <__do_softirq+0x65>
    0.00 :   ffffffff81b78077:       movq    %gs:0x7e4a3001(%rip), %rdi
    0.00 :   ffffffff81b7807f:       testq   %rdi, %rdi
    0.00 :   ffffffff81b78082:       movl    -0x50(%rbp), %r12d
    0.00 :   ffffffff81b78086:       jne     0xffffffff81b78145 <__do_softirq+0x225>
    0.00 :   ffffffff81b7808c:       addl    $0xffffff00, %gs:0x7e4aa671(%rip) # imm = 0xFFFFFF00
    0.00 :   ffffffff81b78097:       movl    %gs:0x7e4aa66a(%rip), %eax
    0.00 :   ffffffff81b7809e:       testl   $0xffff00, %eax # imm = 0xFFFF00
    0.00 :   ffffffff81b780a3:       jne     0xffffffff81b7815e <__do_softirq+0x23e>
    0.00 :   ffffffff81b780a9:       movl    %r12d, %edx
    0.00 :   ffffffff81b780ac:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81b780b5:       andl    $0xfffff7ff, 0x354(%rax) # imm = 0xFFFFF7FF
   21.08 :   ffffffff81b780bf:       andl    $0x800, %edx    # imm = 0x800
    0.00 :   ffffffff81b780c5:       orl     %edx, 0x354(%rax)
    0.00 :   ffffffff81b780cb:       addq    $0x28, %rsp
    0.00 :   ffffffff81b780cf:       popq    %rbx
    0.00 :   ffffffff81b780d0:       popq    %r12
    0.00 :   ffffffff81b780d2:       popq    %r13
    0.00 :   ffffffff81b780d4:       popq    %r14
    0.00 :   ffffffff81b780d6:       popq    %r15
    0.00 :   ffffffff81b780d8:       popq    %rbp
    0.00 :   ffffffff81b780d9:       xorl    %eax, %eax
    0.00 :   ffffffff81b780db:       xorl    %edx, %edx
    0.00 :   ffffffff81b780dd:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b780df:       xorl    %esi, %esi
    0.00 :   ffffffff81b780e1:       xorl    %edi, %edi
    0.00 :   ffffffff81b780e3:       xorl    %r8d, %r8d
    0.00 :   ffffffff81b780e6:       xorl    %r9d, %r9d
    0.00 :   ffffffff81b780e9:       xorl    %r10d, %r10d
    0.00 :   ffffffff81b780ec:       xorl    %r11d, %r11d
    0.00 :   ffffffff81b780ef:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b780f4:       movq    (%r14), %rcx
    0.00 :   ffffffff81b780f7:       movq    -0x7e1f5fe0(,%rax,8), %rdx
    0.00 :   ffffffff81b780ff:       movl    %r13d, %esi
    0.00 :   ffffffff81b78102:       movl    %r15d, %r8d
    0.00 :   ffffffff81b78105:       movq    $-0x7df7f4f0, %rdi # imm = 0x82080B10
    0.00 :   ffffffff81b7810c:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81b78111:       movl    %gs:0x7e4aa5f0(%rip), %ecx
    0.00 :   ffffffff81b78118:       movl    %ecx, %edx
    0.00 :   ffffffff81b7811a:       movl    %ecx, %eax
    0.00 :   ffffffff81b7811c:       andl    $0x80000000, %edx # imm = 0x80000000
    0.00 :   ffffffff81b78122:       orl     %r15d, %edx
    0.00 :   ffffffff81b78125:       cmpxchgl        %edx, %gs:0x7e4aa5db(%rip)
    0.00 :   ffffffff81b7812d:       cmpl    %eax, %ecx
    0.00 :   ffffffff81b7812f:       jne     0xffffffff81b78111 <__do_softirq+0x1f1>
    0.00 :   ffffffff81b78131:       jmp     0xffffffff81b78008 <__do_softirq+0xe8>
    0.00 :   ffffffff81b78136:       callq   0xffffffff810fdda0 <rcu_softirq_qs>
    0.00 :   ffffffff81b7813b:       nopl    (%rax,%rax)
    0.00 :   ffffffff81b78140:       jmp     0xffffffff81b78037 <__do_softirq+0x117>
    0.00 :   ffffffff81b78145:       callq   0xffffffff810b25c0 <wake_up_process>
    0.00 :   ffffffff81b7814a:       nopw    (%rax,%rax)
    0.00 :   ffffffff81b78150:       jmp     0xffffffff81b7808c <__do_softirq+0x16c>
   23.71 :   ffffffff81b78155:       movl    -0x50(%rbp), %r12d
   31.78 :   ffffffff81b78159:       jmp     0xffffffff81b7808c <__do_softirq+0x16c>
    0.00 :   ffffffff81b7815e:       ud2
    0.00 :   ffffffff81b78160:       jmp     0xffffffff81b780a9 <__do_softirq+0x189>
 Percent |	Source code & Disassembly of elf for cycles (4 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b622f0 <clear_page_rep>:
         : 5                ; clear_page_rep():
    0.00 :   ffffffff81b622f0:       movl    $0x200, %ecx    # imm = 0x200
    0.00 :   ffffffff81b622f5:       xorl    %eax, %eax
  100.00 :   ffffffff81b622f7:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff81b622fa:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81226f00 <unmap_page_range>:
         : 5                ; unmap_page_range():
    0.00 :   ffffffff81226f00:       pushq   %rbp
    0.00 :   ffffffff81226f01:       movq    %rsp, %rbp
    0.00 :   ffffffff81226f04:       pushq   %r15
    0.00 :   ffffffff81226f06:       pushq   %r14
    0.00 :   ffffffff81226f08:       pushq   %r13
    0.00 :   ffffffff81226f0a:       pushq   %r12
    0.00 :   ffffffff81226f0c:       pushq   %rbx
    0.00 :   ffffffff81226f0d:       subq    $0xb8, %rsp
    0.00 :   ffffffff81226f14:       movq    %gs:0x28, %rax
    0.00 :   ffffffff81226f1d:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff81226f21:       xorl    %eax, %eax
    0.00 :   ffffffff81226f23:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff81226f28:       cmpq    %rcx, %rdx
    0.00 :   ffffffff81226f2b:       jae     0xffffffff81227fa3 <unmap_page_range+0x10a3>
    0.00 :   ffffffff81226f31:       testb   $0x1, 0x18(%rdi)
    0.00 :   ffffffff81226f35:       movq    %rdi, %r15
    0.00 :   ffffffff81226f38:       movq    %rsi, %r12
    0.00 :   ffffffff81226f3b:       movq    %rdx, %r14
    0.00 :   ffffffff81226f3e:       movq    %r8, %r13
    0.00 :   ffffffff81226f41:       jne     0xffffffff81226f85 <unmap_page_range+0x85>
    0.00 :   ffffffff81226f43:       movq    0x10(%rsi), %rdx
    0.00 :   ffffffff81226f47:       movzbl  0x19(%rdi), %eax
    0.00 :   ffffffff81226f4b:       shrq    $0x16, %rdx
    0.00 :   ffffffff81226f4f:       andl    $0x1, %edx
    0.00 :   ffffffff81226f52:       andl    $-0x3, %eax
    0.00 :   ffffffff81226f55:       addl    %edx, %edx
    0.00 :   ffffffff81226f57:       orl     %edx, %eax
    0.00 :   ffffffff81226f59:       movb    %al, 0x19(%rdi)
    0.00 :   ffffffff81226f5c:       movq    0x10(%rsi), %rdx
    0.00 :   ffffffff81226f60:       andl    $-0x2, %eax
    0.00 :   ffffffff81226f63:       shrq    $0x2, %rdx
    0.00 :   ffffffff81226f67:       andl    $0x1, %edx
    0.00 :   ffffffff81226f6a:       orl     %edx, %eax
    0.00 :   ffffffff81226f6c:       movb    %al, 0x19(%rdi)
    0.00 :   ffffffff81226f6f:       testq   $0x10000400, 0x10(%rsi) # imm = 0x10000400
    0.00 :   ffffffff81226f77:       setne   %dl
    0.00 :   ffffffff81226f7a:       andl    $-0x5, %eax
    0.00 :   ffffffff81226f7d:       shll    $0x2, %edx
    0.00 :   ffffffff81226f80:       orl     %edx, %eax
    0.00 :   ffffffff81226f82:       movb    %al, 0x19(%rdi)
    0.00 :   ffffffff81226f85:       movq    0x20(%r12), %rdx
    0.00 :   ffffffff81226f8a:       movq    %r14, %rax
    0.00 :   ffffffff81226f8d:       leaq    -0x1(%rcx), %rbx
    0.00 :   ffffffff81226f91:       shrq    $0x24, %rax
    0.00 :   ffffffff81226f95:       movq    %r12, -0xd0(%rbp)
    0.00 :   ffffffff81226f9c:       movq    %r13, %r12
    0.00 :   ffffffff81226f9f:       andl    $0xff8, %eax    # imm = 0xFF8
    0.00 :   ffffffff81226fa4:       movq    %rbx, -0xc8(%rbp)
    0.00 :   ffffffff81226fab:       movq    %r14, %r13
    0.00 :   ffffffff81226fae:       addq    0x210(%rdx), %rax
    0.00 :   ffffffff81226fb5:       movq    %rcx, %rbx
    0.00 :   ffffffff81226fb8:       movq    %rax, %rcx
    0.00 :   ffffffff81226fbb:       movabsq $0x8000000000, %rax # imm = 0x8000000000
    0.00 :   ffffffff81226fc5:       movq    -0xc8(%rbp), %rdi
    0.00 :   ffffffff81226fcc:       movabsq $-0x8000000000, %rdx # imm = 0xFFFFFF8000000000
    0.00 :   ffffffff81226fd6:       addq    %r13, %rax
    0.00 :   ffffffff81226fd9:       andq    %rdx, %rax
    0.00 :   ffffffff81226fdc:       movq    %rax, -0xb0(%rbp)
    0.00 :   ffffffff81226fe3:       decq    %rax
    0.00 :   ffffffff81226fe6:       cmpq    %rdi, %rax
    0.00 :   ffffffff81226fe9:       movq    (%rcx), %rax
    0.00 :   ffffffff81226fec:       jae     0xffffffff81227059 <unmap_page_range+0x159>
    0.00 :   ffffffff81226fee:       testq   $-0x61, %rax
    0.00 :   ffffffff81226ff4:       jne     0xffffffff81227068 <unmap_page_range+0x168>
    0.00 :   ffffffff81226ff6:       movq    -0xb0(%rbp), %r13
    0.00 :   ffffffff81226ffd:       addq    $0x8, %rcx
    0.00 :   ffffffff81227001:       cmpq    %r13, %rbx
    0.00 :   ffffffff81227004:       jne     0xffffffff81226fbb <unmap_page_range+0xbb>
    0.00 :   ffffffff81227006:       movzbl  0x18(%r15), %eax
    0.00 :   ffffffff8122700b:       testb   $0x1, %al
    0.00 :   ffffffff8122700d:       jne     0xffffffff8122701a <unmap_page_range+0x11a>
    0.00 :   ffffffff8122700f:       testb   $0x4, 0x19(%r15)
    0.00 :   ffffffff81227014:       jne     0xffffffff81227fb7 <unmap_page_range+0x10b7>
    0.00 :   ffffffff8122701a:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff8122701e:       subq    %gs:0x28, %rax
    0.00 :   ffffffff81227027:       jne     0xffffffff81228036 <unmap_page_range+0x1136>
    0.00 :   ffffffff8122702d:       addq    $0xb8, %rsp
    0.00 :   ffffffff81227034:       popq    %rbx
    0.00 :   ffffffff81227035:       popq    %r12
    0.00 :   ffffffff81227037:       popq    %r13
    0.00 :   ffffffff81227039:       popq    %r14
    0.00 :   ffffffff8122703b:       popq    %r15
    0.00 :   ffffffff8122703d:       popq    %rbp
    0.00 :   ffffffff8122703e:       xorl    %eax, %eax
    0.00 :   ffffffff81227040:       xorl    %edx, %edx
    0.00 :   ffffffff81227042:       xorl    %ecx, %ecx
    0.00 :   ffffffff81227044:       xorl    %esi, %esi
    0.00 :   ffffffff81227046:       xorl    %edi, %edi
    0.00 :   ffffffff81227048:       xorl    %r8d, %r8d
    0.00 :   ffffffff8122704b:       xorl    %r9d, %r9d
    0.00 :   ffffffff8122704e:       xorl    %r10d, %r10d
    0.00 :   ffffffff81227051:       xorl    %r11d, %r11d
    0.00 :   ffffffff81227054:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81227059:       testq   $-0x61, %rax
    0.00 :   ffffffff8122705f:       je      0xffffffff81227006 <unmap_page_range+0x106>
    0.00 :   ffffffff81227061:       movq    %rbx, -0xb0(%rbp)
    0.00 :   ffffffff81227068:       movabsq $0x7ff0000000000f98, %rdx # imm = 0x7FF0000000000F98
    0.00 :   ffffffff81227072:       testq   %rdx, %rax
    0.00 :   ffffffff81227075:       jne     0xffffffff81226ff6 <unmap_page_range+0xf6>
    0.00 :   ffffffff8122707b:       movabsq $0xffffffffff000, %rdx # imm = 0xFFFFFFFFFF000
    0.00 :   ffffffff81227085:       movq    %rbx, -0xe0(%rbp)
    0.00 :   ffffffff8122708c:       movq    -0xd0(%rbp), %rbx
    0.00 :   ffffffff81227093:       andq    %rdx, %rax
    0.00 :   ffffffff81227096:       addq    0xefb15b(%rip), %rax # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff8122709d:       movq    %r13, %rdx
    0.00 :   ffffffff812270a0:       shrq    $0x1b, %rdx
    0.00 :   ffffffff812270a4:       movq    %r13, %r14
    0.00 :   ffffffff812270a7:       movq    %rcx, -0xd8(%rbp)
    0.00 :   ffffffff812270ae:       andl    $0xff8, %edx    # imm = 0xFF8
    0.00 :   ffffffff812270b4:       movq    %r12, %r13
    0.00 :   ffffffff812270b7:       movq    %r15, %r12
    0.00 :   ffffffff812270ba:       leaq    (%rax,%rdx), %r8
    0.00 :   ffffffff812270be:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff812270c5:       decq    %rax
    0.00 :   ffffffff812270c8:       movq    %rax, -0xb8(%rbp)
    0.00 :   ffffffff812270cf:       leaq    0x40000000(%r14), %rax
    0.00 :   ffffffff812270d6:       movq    -0xb8(%rbp), %rdi
    0.00 :   ffffffff812270dd:       movabsq $0x400000000000080, %rdx # imm = 0x400000000000080
    0.00 :   ffffffff812270e7:       andq    $-0x40000000, %rax # imm = 0xC0000000
    0.00 :   ffffffff812270ed:       movq    %rax, %r10
    0.00 :   ffffffff812270f0:       leaq    -0x1(%rax), %rax
    0.00 :   ffffffff812270f4:       cmpq    %rdi, %rax
    0.00 :   ffffffff812270f7:       movq    (%r8), %rax
    0.00 :   ffffffff812270fa:       cmovaeq -0xb0(%rbp), %r10
    0.00 :   ffffffff81227102:       andq    %rax, %rdx
    0.00 :   ffffffff81227105:       addq    $-0x80, %rdx
    0.00 :   ffffffff81227109:       je      0xffffffff81227112 <unmap_page_range+0x212>
    0.00 :   ffffffff8122710b:       btq     $0x3a, %rax
    0.00 :   ffffffff81227110:       jae     0xffffffff81227145 <unmap_page_range+0x245>
    0.00 :   ffffffff81227112:       movq    %r10, %rax
    0.00 :   ffffffff81227115:       movq    %r10, -0x50(%rbp)
    0.00 :   ffffffff81227119:       subq    %r14, %rax
    0.00 :   ffffffff8122711c:       cmpq    $0x40000000, %rax # imm = 0x40000000
    0.00 :   ffffffff81227122:       je      0xffffffff81227e9f <unmap_page_range+0xf9f>
    0.00 :   ffffffff81227128:       movq    %r8, %rsi
    0.00 :   ffffffff8122712b:       movq    %r14, %rdx
    0.00 :   ffffffff8122712e:       movq    %rbx, %rdi
    0.00 :   ffffffff81227131:       movq    %r8, -0x48(%rbp)
    0.00 :   ffffffff81227135:       callq   0xffffffff81287b80 <__split_huge_pud>
    0.00 :   ffffffff8122713a:       movq    -0x48(%rbp), %r8
    0.00 :   ffffffff8122713e:       movq    -0x50(%rbp), %r10
    0.00 :   ffffffff81227142:       movq    (%r8), %rax
    0.00 :   ffffffff81227145:       testq   $-0x61, %rax
    0.00 :   ffffffff8122714b:       je      0xffffffff81227ecf <unmap_page_range+0xfcf>
    0.00 :   ffffffff81227151:       testb   $-0x80, %al
    0.00 :   ffffffff81227153:       je      0xffffffff81227df4 <unmap_page_range+0xef4>
    0.00 :   ffffffff81227159:       movabsq $-0xfffffc0000068, %rdx # imm = 0xFFF000003FFFFF98
    0.00 :   ffffffff81227163:       testq   %rdx, %rax
    0.00 :   ffffffff81227166:       jne     0xffffffff81227f17 <unmap_page_range+0x1017>
    0.00 :   ffffffff8122716c:       movabsq $0xfffffc0000000, %rdx # imm = 0xFFFFFC0000000
    0.00 :   ffffffff81227176:       andq    %rax, %rdx
    0.00 :   ffffffff81227179:       addq    0xefb078(%rip), %rdx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff81227180:       movq    %r14, %rax
    0.00 :   ffffffff81227183:       shrq    $0x12, %rax
    0.00 :   ffffffff81227187:       movq    %r13, %r15
    0.00 :   ffffffff8122718a:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff81227191:       andl    $0xff8, %eax    # imm = 0xFF8
    0.00 :   ffffffff81227196:       movq    %r8, -0xc0(%rbp)
    0.00 :   ffffffff8122719d:       movq    %rbx, %r13
    0.00 :   ffffffff812271a0:       addq    %rdx, %rax
    0.00 :   ffffffff812271a3:       movq    %rax, -0x90(%rbp)
    0.00 :   ffffffff812271aa:       leaq    -0x1(%r10), %rax
    0.00 :   ffffffff812271ae:       movq    %rax, -0xa8(%rbp)
    0.00 :   ffffffff812271b5:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff812271be:       movq    %rax, -0x50(%rbp)
    0.00 :   ffffffff812271c2:       leaq    0x200000(%r14), %rax
    0.00 :   ffffffff812271c9:       movq    -0xa8(%rbp), %rdi
    0.00 :   ffffffff812271d0:       andq    $-0x200000, %rax # imm = 0xFFE00000
    0.00 :   ffffffff812271d6:       movq    %rax, %r11
    0.00 :   ffffffff812271d9:       leaq    -0x1(%rax), %rax
    0.00 :   ffffffff812271dd:       cmpq    %rdi, %rax
    0.00 :   ffffffff812271e0:       movq    -0x90(%rbp), %rax
    0.00 :   ffffffff812271e7:       cmovaeq -0xa0(%rbp), %r11
    0.00 :   ffffffff812271ef:       movq    (%rax), %rax
    0.00 :   ffffffff812271f2:       movq    %rax, %rcx
    0.00 :   ffffffff812271f5:       andq    $-0x61, %rcx
    0.00 :   ffffffff812271f9:       jne     0xffffffff81227bc8 <unmap_page_range+0xcc8>
   44.59 :   ffffffff812271ff:       testq   %r15, %r15
    0.00 :   ffffffff81227202:       je      0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff81227204:       movq    (%r15), %rax
    0.00 :   ffffffff81227207:       testq   %rax, %rax
    0.00 :   ffffffff8122720a:       je      0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff8122720c:       movq    (%rax), %rdx
    0.00 :   ffffffff8122720f:       testl   $0x10000, %edx  # imm = 0x10000
    0.00 :   ffffffff81227215:       je      0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff81227217:       cmpb    $0x8, 0x51(%rax)
    0.00 :   ffffffff8122721b:       jbe     0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff8122721d:       movq    %r11, %rax
    0.00 :   ffffffff81227220:       subq    %r14, %rax
    0.00 :   ffffffff81227223:       cmpq    $0x200000, %rax # imm = 0x200000
    0.00 :   ffffffff81227229:       je      0xffffffff81227f3f <unmap_page_range+0x103f>
    0.00 :   ffffffff8122722f:       movq    -0x90(%rbp), %rax
    0.00 :   ffffffff81227236:       movq    (%rax), %rax
    0.00 :   ffffffff81227239:       testq   $-0x61, %rax
    0.00 :   ffffffff8122723f:       je      0xffffffff81227d23 <unmap_page_range+0xe23>
    0.00 :   ffffffff81227245:       movabsq $0x400000000000080, %rdx # imm = 0x400000000000080
    0.00 :   ffffffff8122724f:       andq    %rax, %rdx
    0.00 :   ffffffff81227252:       addq    $-0x80, %rdx
    0.00 :   ffffffff81227256:       je      0xffffffff81227d23 <unmap_page_range+0xe23>
    0.00 :   ffffffff8122725c:       testb   $-0x80, %al
    0.00 :   ffffffff8122725e:       movabsq $-0xfffffffe00001, %rdx # imm = 0xFFF00000001FFFFF
    0.00 :   ffffffff81227268:       movabsq $-0xffffffffff001, %rdi # imm = 0xFFF0000000000FFF
    0.00 :   ffffffff81227272:       cmoveq  %rdi, %rdx
    0.00 :   ffffffff81227276:       andq    %rdx, %rax
    0.00 :   ffffffff81227279:       testl   $0x181, %eax    # imm = 0x181
    0.00 :   ffffffff8122727e:       je      0xffffffff81227d23 <unmap_page_range+0xe23>
    0.00 :   ffffffff81227284:       andq    $-0x25, %rax
    0.00 :   ffffffff81227288:       cmpq    $0x43, %rax
    0.00 :   ffffffff8122728c:       jne     0xffffffff81227ed7 <unmap_page_range+0xfd7>
    0.00 :   ffffffff81227292:       movq    (%r12), %rax
    0.00 :   ffffffff81227296:       movq    %r11, -0x68(%rbp)
    0.00 :   ffffffff8122729a:       movq    %rax, -0x80(%rbp)
    0.00 :   ffffffff8122729e:       movq    -0x90(%rbp), %rax
    0.00 :   ffffffff812272a5:       movq    $0x0, -0x40(%rbp)
    0.00 :   ffffffff812272ad:       movq    %r14, %rbx
    0.00 :   ffffffff812272b0:       movq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff812272b8:       shrq    $0x9, %rbx
    0.00 :   ffffffff812272bc:       movq    0xefaf25(%rip), %rdx # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff812272c3:       andl    $0xff8, %ebx    # imm = 0xFF8
    0.00 :   ffffffff812272c9:       movq    (%rax), %rcx
    0.00 :   ffffffff812272cc:       testq   %rcx, %rcx
    0.00 :   ffffffff812272cf:       je      0xffffffff81227818 <unmap_page_range+0x918>
    0.00 :   ffffffff812272d5:       movq    %rcx, %rax
    0.00 :   ffffffff812272d8:       andl    $0x1, %eax
    0.00 :   ffffffff812272db:       decq    %rax
    0.00 :   ffffffff812272de:       xorq    %rcx, %rax
    0.00 :   ffffffff812272e1:       shrq    $0xc, %rax
    0.00 :   ffffffff812272e5:       testb   $-0x80, %cl
    0.00 :   ffffffff812272e8:       je      0xffffffff81227c91 <unmap_page_range+0xd91>
    0.00 :   ffffffff812272ee:       movabsq $0xfffffffe00, %rsi # imm = 0xFFFFFFFE00
    0.00 :   ffffffff812272f8:       andq    %rsi, %rax
    0.00 :   ffffffff812272fb:       shlq    $0x6, %rax
    0.00 :   ffffffff812272ff:       addq    %rax, %rdx
    0.00 :   ffffffff81227302:       movabsq $0xfffffffe00000, %rax # imm = 0xFFFFFFFE00000
    0.00 :   ffffffff8122730c:       addq    0xefaee5(%rip), %rbx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff81227313:       andq    %rcx, %rax
    0.00 :   ffffffff81227316:       addq    %rax, %rbx
    0.00 :   ffffffff81227319:       leaq    0x28(%rdx), %rax
    0.00 :   ffffffff8122731d:       movq    %rax, %rdi
    0.00 :   ffffffff81227320:       movq    %rax, -0x88(%rbp)
    0.00 :   ffffffff81227327:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff8122732c:       movq    -0x80(%rbp), %rdi
    0.00 :   ffffffff81227330:       callq   0xffffffff81240ea0 <flush_tlb_batched_pending>
    0.00 :   ffffffff81227335:       movq    %r13, -0x48(%rbp)
    0.00 :   ffffffff81227339:       movq    %r15, %r9
    0.00 :   ffffffff8122733c:       movl    $0x0, -0x74(%rbp)
    0.00 :   ffffffff81227343:       movq    %r12, %r13
    0.00 :   ffffffff81227346:       movq    %r14, %r8
    0.00 :   ffffffff81227349:       movq    %rbx, %r15
    0.00 :   ffffffff8122734c:       jmp     0xffffffff81227454 <unmap_page_range+0x554>
    0.00 :   ffffffff81227351:       movq    -0x50(%rbp), %rax
    0.00 :   ffffffff81227355:       movq    (%rax), %rax
    0.00 :   ffffffff81227358:       testb   $0x8, %al
    0.00 :   ffffffff8122735a:       jne     0xffffffff81227475 <unmap_page_range+0x575>
    0.00 :   ffffffff81227360:       movabsq $-0xffffffffff001, %r12 # imm = 0xFFF0000000000FFF
    0.00 :   ffffffff8122736a:       andq    %rbx, %r12
    0.00 :   ffffffff8122736d:       movl    %r12d, %ecx
    0.00 :   ffffffff81227370:       andl    $0x101, %ecx    # imm = 0x101
    0.00 :   ffffffff81227376:       jne     0xffffffff81227552 <unmap_page_range+0x652>
    0.00 :   ffffffff8122737c:       testb   $0x8, %r12b
    0.00 :   ffffffff81227380:       movq    %rbx, %rdx
    0.00 :   ffffffff81227383:       movl    %r12d, %eax
    0.00 :   ffffffff81227386:       je      0xffffffff81227393 <unmap_page_range+0x493>
    0.00 :   ffffffff81227388:       movl    %ebx, %eax
    0.00 :   ffffffff8122738a:       andq    $-0x9, %rbx
    0.00 :   ffffffff8122738e:       andl    $0xff7, %eax    # imm = 0xFF7
    0.00 :   ffffffff81227393:       movq    %rbx, %rsi
    0.00 :   ffffffff81227396:       andq    $-0x5, %rsi
    0.00 :   ffffffff8122739a:       testb   $0x4, %al
    0.00 :   ffffffff8122739c:       cmovneq %rsi, %rbx
    0.00 :   ffffffff812273a0:       movq    %rbx, %r14
    0.00 :   ffffffff812273a3:       shrq    $0x3b, %rbx
    0.00 :   ffffffff812273a7:       notq    %r14
    0.00 :   ffffffff812273aa:       shlq    $0x3a, %rbx
    0.00 :   ffffffff812273ae:       shlq    $0x5, %r14
    0.00 :   ffffffff812273b2:       shrq    $0xe, %r14
    0.00 :   ffffffff812273b6:       orq     %rbx, %r14
    0.00 :   ffffffff812273b9:       shrq    $0x3a, %rbx
    0.00 :   ffffffff812273bd:       cmpq    $0x1b, %rbx
    0.00 :   ffffffff812273c1:       ja      0xffffffff812274e5 <unmap_page_range+0x5e5>
    0.00 :   ffffffff812273c7:       testq   %r9, %r9
    0.00 :   ffffffff812273ca:       je      0xffffffff812273d7 <unmap_page_range+0x4d7>
    0.00 :   ffffffff812273cc:       cmpb    $0x0, 0x8(%r9)
    0.00 :   ffffffff812273d1:       je      0xffffffff81227464 <unmap_page_range+0x564>
    0.00 :   ffffffff812273d7:       movq    %r14, %rdi
    0.00 :   ffffffff812273da:       decl    -0x38(%rbp)
    0.00 :   ffffffff812273dd:       movq    %r9, -0x70(%rbp)
    0.00 :   ffffffff812273e1:       movq    %r8, -0x60(%rbp)
    0.00 :   ffffffff812273e5:       movq    %rdx, -0x58(%rbp)
    0.00 :   ffffffff812273e9:       callq   0xffffffff81260580 <free_swap_and_cache>
    0.00 :   ffffffff812273ee:       movq    -0x60(%rbp), %r8
    0.00 :   ffffffff812273f2:       movl    %eax, %ecx
    0.00 :   ffffffff812273f4:       testl   %ecx, %ecx
    0.00 :   ffffffff812273f6:       movq    -0x58(%rbp), %rdx
    0.00 :   ffffffff812273fa:       movq    -0x70(%rbp), %r9
    0.00 :   ffffffff812273fe:       leaq    0x1000(%r8), %rax
    0.00 :   ffffffff81227405:       je      0xffffffff81227c3a <unmap_page_range+0xd3a>
    0.00 :   ffffffff8122740b:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff8122740f:       movq    $0x0, (%r15)
    0.00 :   ffffffff81227416:       cmpq    $0x0, 0x58(%rdi)
    0.00 :   ffffffff8122741b:       je      0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff8122741d:       testq   %r9, %r9
    0.00 :   ffffffff81227420:       je      0xffffffff81227429 <unmap_page_range+0x529>
    0.00 :   ffffffff81227422:       testb   $0x1, 0xc(%r9)
    0.00 :   ffffffff81227427:       jne     0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227429:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff8122742d:       testb   $0x10, 0x11(%rdi)
    0.00 :   ffffffff81227431:       je      0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227433:       andl    $0x4, %r12d
    0.00 :   ffffffff81227437:       jne     0xffffffff81227cb8 <unmap_page_range+0xdb8>
    0.00 :   ffffffff8122743d:       cmpq    $0x1f, %rbx
    0.00 :   ffffffff81227441:       je      0xffffffff81227cae <unmap_page_range+0xdae>
    0.00 :   ffffffff81227447:       movq    %rax, %r8
    0.00 :   ffffffff8122744a:       addq    $0x8, %r15
    0.00 :   ffffffff8122744e:       cmpq    %r8, -0x68(%rbp)
    0.00 :   ffffffff81227452:       je      0xffffffff81227475 <unmap_page_range+0x575>
   30.47 :   ffffffff81227454:       movq    (%r15), %rbx
    0.00 :   ffffffff81227457:       testq   $-0x61, %rbx
    0.00 :   ffffffff8122745e:       jne     0xffffffff81227351 <unmap_page_range+0x451>
    0.00 :   ffffffff81227464:       addq    $0x1000, %r8    # imm = 0x1000
    0.00 :   ffffffff8122746b:       addq    $0x8, %r15
    0.00 :   ffffffff8122746f:       cmpq    %r8, -0x68(%rbp)
    0.00 :   ffffffff81227473:       jne     0xffffffff81227454 <unmap_page_range+0x554>
    0.00 :   ffffffff81227475:       movq    %r13, %r12
    0.00 :   ffffffff81227478:       movq    -0x48(%rbp), %r13
    0.00 :   ffffffff8122747c:       movq    %r8, %r14
    0.00 :   ffffffff8122747f:       movq    %r9, %r15
    0.00 :   ffffffff81227482:       movq    -0x80(%rbp), %rax
    0.00 :   ffffffff81227486:       leaq    -0x40(%rbp), %rbx
    0.00 :   ffffffff8122748a:       leaq    -0x30(%rbp), %r8
    0.00 :   ffffffff8122748e:       movq    %r12, -0x48(%rbp)
    0.00 :   ffffffff81227492:       leaq    0x300(%rax), %rcx
    0.00 :   ffffffff81227499:       movq    %rcx, %r12
    0.00 :   ffffffff8122749c:       movslq  (%rbx), %rsi
    0.00 :   ffffffff8122749f:       testl   %esi, %esi
    0.00 :   ffffffff812274a1:       jne     0xffffffff81227785 <unmap_page_range+0x885>
    0.00 :   ffffffff812274a7:       addq    $0x4, %rbx
    0.00 :   ffffffff812274ab:       addq    $0x28, %r12
    0.00 :   ffffffff812274af:       cmpq    %rbx, %r8
    0.00 :   ffffffff812274b2:       jne     0xffffffff8122749c <unmap_page_range+0x59c>
    0.00 :   ffffffff812274b4:       movl    -0x74(%rbp), %eax
    0.00 :   ffffffff812274b7:       movq    -0x48(%rbp), %r12
    0.00 :   ffffffff812274bb:       testl   %eax, %eax
    0.00 :   ffffffff812274bd:       jne     0xffffffff812279b7 <unmap_page_range+0xab7>
    0.00 :   ffffffff812274c3:       movq    -0x88(%rbp), %rdi
    0.00 :   ffffffff812274ca:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff812274cf:       cmpq    %r14, -0x68(%rbp)
    0.00 :   ffffffff812274d3:       je      0xffffffff81227a79 <unmap_page_range+0xb79>
    0.00 :   ffffffff812274d9:       callq   0xffffffff81b789b0 <__SCT__cond_resched>
    0.00 :   ffffffff812274de:       nop
    0.00 :   ffffffff812274e0:       jmp     0xffffffff8122729e <unmap_page_range+0x39e>
    0.00 :   ffffffff812274e5:       cmpq    $0x1c, %rbx
    0.00 :   ffffffff812274e9:       je      0xffffffff8122782c <unmap_page_range+0x92c>
    0.00 :   ffffffff812274ef:       cmpq    $0x1d, %rbx
    0.00 :   ffffffff812274f3:       je      0xffffffff8122782c <unmap_page_range+0x92c>
    0.00 :   ffffffff812274f9:       cmpq    $0x1e, %rbx
    0.00 :   ffffffff812274fd:       je      0xffffffff8122782c <unmap_page_range+0x92c>
    0.00 :   ffffffff81227503:       testb   $0x1, %r14b
    0.00 :   ffffffff81227507:       leaq    0x1000(%r8), %rax
    0.00 :   ffffffff8122750e:       je      0xffffffff81227969 <unmap_page_range+0xa69>
    0.00 :   ffffffff81227514:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81227518:       cmpq    $0x0, 0x58(%rdi)
    0.00 :   ffffffff8122751d:       je      0xffffffff8122740b <unmap_page_range+0x50b>
    0.00 :   ffffffff81227523:       testq   %r9, %r9
    0.00 :   ffffffff81227526:       je      0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff8122752c:       testb   $0x1, 0xc(%r9)
    0.00 :   ffffffff81227531:       je      0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227537:       movq    $0x0, (%r15)
    0.00 :   ffffffff8122753e:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81227542:       cmpq    $0x0, 0x58(%rdi)
    0.00 :   ffffffff81227547:       jne     0xffffffff81227422 <unmap_page_range+0x522>
    0.00 :   ffffffff8122754d:       jmp     0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227552:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81227556:       movq    %rbx, %rdx
    0.00 :   ffffffff81227559:       movq    %r8, %rsi
    0.00 :   ffffffff8122755c:       movq    %r9, -0x60(%rbp)
    0.00 :   ffffffff81227560:       movq    %r8, -0x58(%rbp)
    0.00 :   ffffffff81227564:       callq   0xffffffff81226bb0 <vm_normal_page>
    0.00 :   ffffffff81227569:       movq    -0x60(%rbp), %r9
    0.00 :   ffffffff8122756d:       movq    -0x58(%rbp), %r8
    0.00 :   ffffffff81227571:       movq    %rax, %rbx
    0.00 :   ffffffff81227574:       testq   %r9, %r9
    0.00 :   ffffffff81227577:       je      0xffffffff812275a3 <unmap_page_range+0x6a3>
    0.00 :   ffffffff81227579:       testq   %rax, %rax
    0.00 :   ffffffff8122757c:       je      0xffffffff812275a3 <unmap_page_range+0x6a3>
    0.00 :   ffffffff8122757e:       cmpb    $0x0, 0x8(%r9)
    0.00 :   ffffffff81227583:       jne     0xffffffff812275a3 <unmap_page_range+0x6a3>
    0.00 :   ffffffff81227585:       movq    0x8(%rax), %rax
    0.00 :   ffffffff81227589:       testb   $0x1, %al
    0.00 :   ffffffff8122758b:       jne     0xffffffff81227d33 <unmap_page_range+0xe33>
    0.00 :   ffffffff81227591:       nopl    (%rax,%rax)
    0.00 :   ffffffff81227596:       movq    %rbx, %rax
    0.00 :   ffffffff81227599:       testb   $0x1, 0x18(%rax)
    0.00 :   ffffffff8122759d:       jne     0xffffffff81227464 <unmap_page_range+0x564>
    0.00 :   ffffffff812275a3:       testb   $0x1, 0x18(%r13)
    0.00 :   ffffffff812275a8:       je      0xffffffff8122779c <unmap_page_range+0x89c>
    0.00 :   ffffffff812275ae:       movq    (%r15), %r12
    0.00 :   ffffffff812275b1:       movq    $0x0, (%r15)
    0.00 :   ffffffff812275b8:       movq    0x8(%r13), %rax
    0.00 :   ffffffff812275bc:       leaq    0x1000(%r8), %r14
    0.00 :   ffffffff812275c3:       cmpq    %r8, %rax
    0.00 :   ffffffff812275c6:       cmovaq  %r8, %rax
    0.00 :   ffffffff812275ca:       movq    %rax, 0x8(%r13)
    0.00 :   ffffffff812275ce:       movq    0x10(%r13), %rax
    0.00 :   ffffffff812275d2:       cmpq    %r14, %rax
    0.00 :   ffffffff812275d5:       cmovbq  %r14, %rax
    0.00 :   ffffffff812275d9:       orb     $0x10, 0x18(%r13)
    0.00 :   ffffffff812275de:       movq    %rax, 0x10(%r13)
    0.00 :   ffffffff812275e2:       movq    -0x48(%rbp), %rax
    0.00 :   ffffffff812275e6:       cmpq    $0x0, 0x58(%rax)
    0.00 :   ffffffff812275eb:       je      0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff812275f1:       testq   %r9, %r9
    0.00 :   ffffffff812275f4:       je      0xffffffff812275fd <unmap_page_range+0x6fd>
    0.00 :   ffffffff812275f6:       testb   $0x1, 0xc(%r9)
    0.00 :   ffffffff812275fb:       jne     0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff812275fd:       testq   $-0x61, (%r15)
    0.00 :   ffffffff81227604:       jne     0xffffffff81227ca7 <unmap_page_range+0xda7>
    0.00 :   ffffffff8122760a:       movq    -0x48(%rbp), %rax
    0.00 :   ffffffff8122760e:       testb   $0x10, 0x11(%rax)
    0.00 :   ffffffff81227612:       je      0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff81227614:       movabsq $-0xffffffffff001, %rax # imm = 0xFFF0000000000FFF
    0.00 :   ffffffff8122761e:       andq    %r12, %rax
    0.00 :   ffffffff81227621:       testl   $0x101, %eax    # imm = 0x101
    0.00 :   ffffffff81227626:       jne     0xffffffff81227db0 <unmap_page_range+0xeb0>
    0.00 :   ffffffff8122762c:       testq   $-0x61, %r12
    0.00 :   ffffffff81227633:       je      0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff81227635:       testb   $0x4, %al
    0.00 :   ffffffff81227637:       jne     0xffffffff81227dbd <unmap_page_range+0xebd>
    0.00 :   ffffffff8122763d:       testb   $0x8, %al
    0.00 :   ffffffff8122763f:       movq    %r12, %rdx
    0.00 :   ffffffff81227642:       je      0xffffffff81227652 <unmap_page_range+0x752>
    0.00 :   ffffffff81227644:       testb   $0x4, %r12b
    0.00 :   ffffffff81227648:       je      0xffffffff81227fae <unmap_page_range+0x10ae>
    0.00 :   ffffffff8122764e:       andq    $-0xd, %rdx
    0.00 :   ffffffff81227652:       movq    %rdx, %rax
    0.00 :   ffffffff81227655:       shrq    $0x3b, %rdx
    0.00 :   ffffffff81227659:       notq    %rax
    0.00 :   ffffffff8122765c:       shlq    $0x3a, %rdx
    0.00 :   ffffffff81227660:       shlq    $0x5, %rax
    0.00 :   ffffffff81227664:       shrq    $0xe, %rax
    0.00 :   ffffffff81227668:       orq     %rdx, %rax
    0.00 :   ffffffff8122766b:       shrq    $0x3a, %rdx
    0.00 :   ffffffff8122766f:       cmpq    $0x1f, %rdx
    0.00 :   ffffffff81227673:       je      0xffffffff81227ef3 <unmap_page_range+0xff3>
    0.00 :   ffffffff81227679:       testq   %rbx, %rbx
    0.00 :   ffffffff8122767c:       je      0xffffffff8122777d <unmap_page_range+0x87d>
    0.00 :   ffffffff81227682:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff81227686:       testb   $0x1, %al
    0.00 :   ffffffff81227688:       jne     0xffffffff81227baa <unmap_page_range+0xcaa>
    0.00 :   ffffffff8122768e:       nopl    (%rax,%rax)
    0.00 :   ffffffff81227693:       movq    %rbx, %rax
    0.00 :   ffffffff81227696:       testb   $0x1, 0x18(%rax)
    0.00 :   ffffffff8122769a:       jne     0xffffffff812277a7 <unmap_page_range+0x8a7>
    0.00 :   ffffffff812276a0:       movabsq $-0xffffffffff001, %rdx # imm = 0xFFF0000000000FFF
    0.00 :   ffffffff812276aa:       xorl    %ecx, %ecx
    0.00 :   ffffffff812276ac:       movq    %rbx, %rax
    0.00 :   ffffffff812276af:       andq    %r12, %rdx
    0.00 :   ffffffff812276b2:       testb   $0x40, %dl
    0.00 :   ffffffff812276b5:       jne     0xffffffff81227b6d <unmap_page_range+0xc6d>
    0.00 :   ffffffff812276bb:       andl    $0x20, %edx
    0.00 :   ffffffff812276be:       je      0xffffffff81227709 <unmap_page_range+0x809>
    0.00 :   ffffffff812276c0:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff812276c4:       testq   $0x18000, 0x10(%rdi) # imm = 0x18000
    0.00 :   ffffffff812276cc:       jne     0xffffffff81227709 <unmap_page_range+0x809>
    0.00 :   ffffffff812276ce:       movq    0x48(%rdi), %rdx
    0.00 :   ffffffff812276d2:       testq   %rdx, %rdx
    0.00 :   ffffffff812276d5:       je      0xffffffff812276dd <unmap_page_range+0x7dd>
    0.00 :   ffffffff812276d7:       testb   $-0x80, 0x5a(%rdx)
    0.00 :   ffffffff812276db:       jne     0xffffffff81227709 <unmap_page_range+0x809>
    0.00 :   ffffffff812276dd:       movq    %rbx, %rdi
    0.00 :   ffffffff812276e0:       movq    %r9, -0x98(%rbp)
    0.00 :   ffffffff812276e7:       movq    %r8, -0x70(%rbp)
    0.00 :   ffffffff812276eb:       movq    %rax, -0x60(%rbp)
    0.00 :   ffffffff812276ef:       movl    %ecx, -0x58(%rbp)
    0.00 :   ffffffff812276f2:       callq   0xffffffff811f7a50 <mark_page_accessed>
    0.00 :   ffffffff812276f7:       movl    -0x58(%rbp), %ecx
    0.00 :   ffffffff812276fa:       movq    -0x60(%rbp), %rax
    0.00 :   ffffffff812276fe:       movq    -0x70(%rbp), %r8
    0.00 :   ffffffff81227702:       movq    -0x98(%rbp), %r9
    0.00 :   ffffffff81227709:       movq    0x8(%rbx), %rdx
    0.00 :   ffffffff8122770d:       testb   $0x1, %dl
    0.00 :   ffffffff81227710:       leaq    -0x1(%rdx), %rsi
    0.00 :   ffffffff81227714:       jne     0xffffffff8122771e <unmap_page_range+0x81e>
    0.00 :   ffffffff81227716:       nopl    (%rax,%rax)
    0.00 :   ffffffff8122771b:       movq    %rbx, %rsi
    0.00 :   ffffffff8122771e:       testb   $0x1, 0x18(%rsi)
    0.00 :   ffffffff81227722:       movl    $0x1, %edx
    0.00 :   ffffffff81227727:       jne     0xffffffff8122774e <unmap_page_range+0x84e>
    0.00 :   ffffffff81227729:       movq    0x8(%rbx), %rdx
    0.00 :   ffffffff8122772d:       testb   $0x1, %dl
    0.00 :   ffffffff81227730:       jne     0xffffffff81227d2b <unmap_page_range+0xe2b>
    0.00 :   ffffffff81227736:       nopl    (%rax,%rax)
    0.00 :   ffffffff8122773b:       movq    %rbx, %rdx
    0.00 :   ffffffff8122773e:       movq    (%rdx), %rdx
    0.00 :   ffffffff81227741:       shrq    $0x13, %rdx
    0.00 :   ffffffff81227745:       shll    $0x1f, %edx
    0.00 :   ffffffff81227748:       sarl    $0x1f, %edx
    0.00 :   ffffffff8122774b:       andl    $0x3, %edx
    0.00 :   ffffffff8122774e:       movslq  %edx, %rdx
    0.00 :   ffffffff81227751:       decl    -0x40(%rbp,%rdx,4)
    0.00 :   ffffffff81227755:       testl   %ecx, %ecx
    0.00 :   ffffffff81227757:       je      0xffffffff812278fb <unmap_page_range+0x9fb>
    0.00 :   ffffffff8122775d:       movl    $0x1000, %edx   # imm = 0x1000
    0.00 :   ffffffff81227762:       movq    %rax, %rsi
    0.00 :   ffffffff81227765:       movq    %r13, %rdi
    0.00 :   ffffffff81227768:       movq    %r9, -0x58(%rbp)
    0.00 :   ffffffff8122776c:       callq   0xffffffff81239800 <__tlb_remove_page_size>
    0.00 :   ffffffff81227771:       testb   %al, %al
    0.00 :   ffffffff81227773:       movq    -0x58(%rbp), %r9
    0.00 :   ffffffff81227777:       jne     0xffffffff81227bb2 <unmap_page_range+0xcb2>
    0.00 :   ffffffff8122777d:       movq    %r14, %r8
    0.00 :   ffffffff81227780:       jmp     0xffffffff8122744a <unmap_page_range+0x54a>
    0.00 :   ffffffff81227785:       movl    0x1141d09(%rip), %edx # 0xffffffff82369494 <percpu_counter_batch>
    0.00 :   ffffffff8122778b:       movq    %r12, %rdi
    0.00 :   ffffffff8122778e:       callq   0xffffffff815e7af0 <percpu_counter_add_batch>
    0.00 :   ffffffff81227793:       leaq    -0x30(%rbp), %r8
    0.00 :   ffffffff81227797:       jmp     0xffffffff812274a7 <unmap_page_range+0x5a7>
    0.00 :   ffffffff8122779c:       xorl    %r12d, %r12d
    0.00 :   ffffffff8122779f:       xchgq   %r12, (%r15)
    0.00 :   ffffffff812277a2:       jmp     0xffffffff812275b8 <unmap_page_range+0x6b8>
    0.00 :   ffffffff812277a7:       movq    %rbx, %rax
    0.00 :   ffffffff812277aa:       xorl    %ecx, %ecx
    0.00 :   ffffffff812277ac:       jmp     0xffffffff81227709 <unmap_page_range+0x809>
    0.00 :   ffffffff812277b1:       testl   $0xfff, %ebx    # imm = 0xFFF
    0.00 :   ffffffff812277b7:       movq    %rbx, %rax
    0.00 :   ffffffff812277ba:       jne     0xffffffff81227696 <unmap_page_range+0x796>
    0.00 :   ffffffff812277c0:       movq    (%rbx), %rdx
    0.00 :   ffffffff812277c3:       testl   $0x10000, %edx  # imm = 0x10000
    0.00 :   ffffffff812277c9:       je      0xffffffff81227696 <unmap_page_range+0x796>
    0.00 :   ffffffff812277cf:       movq    0x48(%rbx), %rdx
    0.00 :   ffffffff812277d3:       leaq    -0x1(%rdx), %rax
    0.00 :   ffffffff812277d7:       andl    $0x1, %edx
    0.00 :   ffffffff812277da:       cmoveq  %rbx, %rax
    0.00 :   ffffffff812277de:       jmp     0xffffffff81227696 <unmap_page_range+0x796>
    0.00 :   ffffffff812277e3:       testl   $0xfff, %ebx    # imm = 0xFFF
    0.00 :   ffffffff812277e9:       movq    %rbx, %rsi
    0.00 :   ffffffff812277ec:       jne     0xffffffff8122771e <unmap_page_range+0x81e>
    0.00 :   ffffffff812277f2:       movq    (%rbx), %rdx
    0.00 :   ffffffff812277f5:       testl   $0x10000, %edx  # imm = 0x10000
    0.00 :   ffffffff812277fb:       je      0xffffffff8122771e <unmap_page_range+0x81e>
    0.00 :   ffffffff81227801:       movq    0x48(%rbx), %rsi
    0.00 :   ffffffff81227805:       leaq    -0x1(%rsi), %rdx
    0.00 :   ffffffff81227809:       andl    $0x1, %esi
    0.00 :   ffffffff8122780c:       movq    %rdx, %rsi
    0.00 :   ffffffff8122780f:       cmoveq  %rbx, %rsi
    0.00 :   ffffffff81227813:       jmp     0xffffffff8122771e <unmap_page_range+0x81e>
    0.00 :   ffffffff81227818:       xorl    %eax, %eax
    0.00 :   ffffffff8122781a:       addq    %rax, %rdx
    0.00 :   ffffffff8122781d:       movabsq $0xffffffffff000, %rax # imm = 0xFFFFFFFFFF000
    0.00 :   ffffffff81227827:       jmp     0xffffffff8122730c <unmap_page_range+0x40c>
    0.00 :   ffffffff8122782c:       movabsq $0x3ffffffff, %rdx # imm = 0x3FFFFFFFF
    0.00 :   ffffffff81227836:       andq    %r14, %rdx
    0.00 :   ffffffff81227839:       shlq    $0x6, %rdx
    0.00 :   ffffffff8122783d:       addq    0xefa9a4(%rip), %rdx # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff81227844:       movq    0x8(%rdx), %rax
    0.00 :   ffffffff81227848:       movq    %rdx, %rdi
    0.00 :   ffffffff8122784b:       testb   $0x1, %al
    0.00 :   ffffffff8122784d:       jne     0xffffffff81227f07 <unmap_page_range+0x1007>
    0.00 :   ffffffff81227853:       nopl    (%rax,%rax)
    0.00 :   ffffffff81227858:       movq    %rdx, %rax
    0.00 :   ffffffff8122785b:       movq    (%rax), %rax
    0.00 :   ffffffff8122785e:       testb   $0x1, %al
    0.00 :   ffffffff81227860:       je      0xffffffff81227e4e <unmap_page_range+0xf4e>
    0.00 :   ffffffff81227866:       testq   %r9, %r9
    0.00 :   ffffffff81227869:       je      0xffffffff81227b0f <unmap_page_range+0xc0f>
    0.00 :   ffffffff8122786f:       cmpb    $0x0, 0x8(%r9)
    0.00 :   ffffffff81227874:       jne     0xffffffff81227b0f <unmap_page_range+0xc0f>
    0.00 :   ffffffff8122787a:       testq   %rdx, %rdx
    0.00 :   ffffffff8122787d:       je      0xffffffff81227b0f <unmap_page_range+0xc0f>
    0.00 :   ffffffff81227883:       movq    0x8(%rdx), %rax
    0.00 :   ffffffff81227887:       testb   $0x1, %al
    0.00 :   ffffffff81227889:       leaq    -0x1(%rax), %rsi
    0.00 :   ffffffff8122788d:       jne     0xffffffff81227897 <unmap_page_range+0x997>
    0.00 :   ffffffff8122788f:       nopl    (%rax,%rax)
    0.00 :   ffffffff81227894:       movq    %rdx, %rsi
    0.00 :   ffffffff81227897:       testb   $0x1, 0x18(%rsi)
    0.00 :   ffffffff8122789b:       leaq    0x1000(%r8), %rax
    0.00 :   ffffffff812278a2:       movq    %rax, %r8
    0.00 :   ffffffff812278a5:       jne     0xffffffff8122744a <unmap_page_range+0x54a>
    0.00 :   ffffffff812278ab:       movq    0x8(%rdx), %rsi
    0.00 :   ffffffff812278af:       testb   $0x1, %sil
    0.00 :   ffffffff812278b3:       jne     0xffffffff81227b24 <unmap_page_range+0xc24>
    0.00 :   ffffffff812278b9:       nopl    (%rax,%rax)
    0.00 :   ffffffff812278be:       movq    %rdx, %rsi
    0.00 :   ffffffff812278c1:       testb   $0x1, 0x18(%rsi)
    0.00 :   ffffffff812278c5:       jne     0xffffffff81227b31 <unmap_page_range+0xc31>
    0.00 :   ffffffff812278cb:       movq    0x8(%rdx), %rsi
    0.00 :   ffffffff812278cf:       testb   $0x1, %sil
    0.00 :   ffffffff812278d3:       jne     0xffffffff81227e96 <unmap_page_range+0xf96>
    0.00 :   ffffffff812278d9:       nopl    (%rax,%rax)
    0.00 :   ffffffff812278de:       movq    (%rdi), %rdx
    0.00 :   ffffffff812278e1:       testl   $0x80000, %edx  # imm = 0x80000
    0.00 :   ffffffff812278e7:       movl    $0x3, %edx
    0.00 :   ffffffff812278ec:       cmovnel %edx, %ecx
    0.00 :   ffffffff812278ef:       movslq  %ecx, %rcx
    0.00 :   ffffffff812278f2:       decl    -0x40(%rbp,%rcx,4)
    0.00 :   ffffffff812278f6:       jmp     0xffffffff8122740b <unmap_page_range+0x50b>
    0.00 :   ffffffff812278fb:       movq    -0x48(%rbp), %rsi
    0.00 :   ffffffff812278ff:       xorl    %edx, %edx
    0.00 :   ffffffff81227901:       movq    %rbx, %rdi
    0.00 :   ffffffff81227904:       movq    %r9, -0x70(%rbp)
    0.00 :   ffffffff81227908:       movq    %r8, -0x60(%rbp)
    0.00 :   ffffffff8122790c:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff81227910:       callq   0xffffffff81241990 <page_remove_rmap>
    0.00 :   ffffffff81227915:       movl    0x30(%rbx), %edx
    0.00 :   ffffffff81227918:       movq    (%rbx), %rcx
    0.00 :   ffffffff8122791b:       movq    -0x58(%rbp), %rax
    0.00 :   ffffffff8122791f:       movq    -0x60(%rbp), %r8
    0.00 :   ffffffff81227923:       movq    -0x70(%rbp), %r9
    0.00 :   ffffffff81227927:       testl   $0x10000, %ecx  # imm = 0x10000
    0.00 :   ffffffff8122792d:       jne     0xffffffff81227995 <unmap_page_range+0xa95>
    0.00 :   ffffffff8122792f:       movq    0x8(%rbx), %rcx
    0.00 :   ffffffff81227933:       andl    $0x1, %ecx
    0.00 :   ffffffff81227936:       jne     0xffffffff81227995 <unmap_page_range+0xa95>
    0.00 :   ffffffff81227938:       incl    %edx
    0.00 :   ffffffff8122793a:       testl   %edx, %edx
    0.00 :   ffffffff8122793c:       jns     0xffffffff8122775d <unmap_page_range+0x85d>
    0.00 :   ffffffff81227942:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81227946:       movq    %rbx, %rcx
    0.00 :   ffffffff81227949:       movq    %r12, %rdx
    0.00 :   ffffffff8122794c:       movq    %r8, %rsi
    0.00 :   ffffffff8122794f:       movq    %r9, -0x60(%rbp)
    0.00 :   ffffffff81227953:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff81227957:       callq   0xffffffff812252a0 <print_bad_pte>
    0.00 :   ffffffff8122795c:       movq    -0x60(%rbp), %r9
    0.00 :   ffffffff81227960:       movq    -0x58(%rbp), %rax
    0.00 :   ffffffff81227964:       jmp     0xffffffff8122775d <unmap_page_range+0x85d>
    0.00 :   ffffffff81227969:       testb   $0x2, %r14b
    0.00 :   ffffffff8122796d:       je      0xffffffff81227988 <unmap_page_range+0xa88>
    0.00 :   ffffffff8122796f:       testq   %r9, %r9
    0.00 :   ffffffff81227972:       je      0xffffffff81227dd9 <unmap_page_range+0xed9>
    0.00 :   ffffffff81227978:       cmpb    $0x0, 0x8(%r9)
    0.00 :   ffffffff8122797d:       jne     0xffffffff81227537 <unmap_page_range+0x637>
    0.00 :   ffffffff81227983:       jmp     0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227988:       ud2
    0.00 :   ffffffff8122798a:       nopw    (%rax,%rax)
    0.00 :   ffffffff81227990:       jmp     0xffffffff8122740b <unmap_page_range+0x50b>
    0.00 :   ffffffff81227995:       movq    0x8(%rbx), %rcx
    0.00 :   ffffffff81227999:       testb   $0x1, %cl
    0.00 :   ffffffff8122799c:       nopl    (%rax)
    0.00 :   ffffffff812279a0:       jne     0xffffffff81227f0f <unmap_page_range+0x100f>
    0.00 :   ffffffff812279a6:       nopl    (%rax,%rax)
    0.00 :   ffffffff812279ab:       movq    %rbx, %rcx
    0.00 :   ffffffff812279ae:       movl    0x54(%rcx), %ecx
    0.00 :   ffffffff812279b1:       leal    0x2(%rdx,%rcx), %edx
    0.00 :   ffffffff812279b5:       jmp     0xffffffff8122793a <unmap_page_range+0xa3a>
    0.00 :   ffffffff812279b7:       movzbl  0x18(%r12), %r8d
    0.00 :   ffffffff812279bd:       testb   $-0xc, %r8b
    0.00 :   ffffffff812279c1:       je      0xffffffff81227a50 <unmap_page_range+0xb50>
    0.00 :   ffffffff812279c7:       testb   $0x10, %r8b
    0.00 :   ffffffff812279cb:       movl    $0xc, %ecx
    0.00 :   ffffffff812279d0:       jne     0xffffffff812279f5 <unmap_page_range+0xaf5>
    0.00 :   ffffffff812279d2:       testb   $0x20, %r8b
    0.00 :   ffffffff812279d6:       movl    $0x15, %ecx
    0.00 :   ffffffff812279db:       jne     0xffffffff812279f5 <unmap_page_range+0xaf5>
    0.00 :   ffffffff812279dd:       testb   $0x40, %r8b
    0.00 :   ffffffff812279e1:       movl    $0x1e, %ecx
    0.00 :   ffffffff812279e6:       jne     0xffffffff812279f5 <unmap_page_range+0xaf5>
    0.00 :   ffffffff812279e8:       movsbl  %r8b, %ecx
    0.00 :   ffffffff812279ec:       sarl    $0x1f, %ecx
    0.00 :   ffffffff812279ef:       andl    $0x1b, %ecx
    0.00 :   ffffffff812279f2:       addl    $0xc, %ecx
    0.00 :   ffffffff812279f5:       testb   $0x3, %r8b
    0.00 :   ffffffff812279f9:       jne     0xffffffff81227cc4 <unmap_page_range+0xdc4>
    0.00 :   ffffffff812279ff:       movq    0x8(%r12), %rsi
    0.00 :   ffffffff81227a04:       movq    0x10(%r12), %rdx
    0.00 :   ffffffff81227a09:       movq    (%r12), %rdi
    0.00 :   ffffffff81227a0d:       shrb    $0x2, %r8b
    0.00 :   ffffffff81227a11:       andl    $0x1, %r8d
    0.00 :   ffffffff81227a15:       callq   0xffffffff8105c520 <flush_tlb_mm_range>
    0.00 :   ffffffff81227a1a:       movq    (%r12), %rdi
    0.00 :   ffffffff81227a1e:       cmpq    $0x0, 0x410(%rdi)
    0.00 :   ffffffff81227a26:       jne     0xffffffff81227e82 <unmap_page_range+0xf82>
    0.00 :   ffffffff81227a2c:       testb   $0x1, 0x18(%r12)
    0.00 :   ffffffff81227a32:       je      0xffffffff81227d3b <unmap_page_range+0xe3b>
    0.00 :   ffffffff81227a38:       movq    $-0x1, 0x10(%r12)
    0.00 :   ffffffff81227a41:       movq    $-0x1, 0x8(%r12)
    0.00 :   ffffffff81227a4a:       andb    $0xb, 0x18(%r12)
    0.00 :   ffffffff81227a50:       movq    %r13, %rsi
    0.00 :   ffffffff81227a53:       movq    %r12, %rdi
    0.00 :   ffffffff81227a56:       callq   0xffffffff81239710 <tlb_flush_rmaps>
    0.00 :   ffffffff81227a5b:       movq    -0x88(%rbp), %rdi
    0.00 :   ffffffff81227a62:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff81227a67:       movq    %r12, %rdi
    0.00 :   ffffffff81227a6a:       callq   0xffffffff812398b0 <tlb_flush_mmu>
    0.00 :   ffffffff81227a6f:       cmpq    %r14, -0x68(%rbp)
    0.00 :   ffffffff81227a73:       jne     0xffffffff812274d9 <unmap_page_range+0x5d9>
   24.93 :   ffffffff81227a79:       callq   0xffffffff81b789b0 <__SCT__cond_resched>
    0.00 :   ffffffff81227a7e:       addq    $0x8, -0x90(%rbp)
    0.00 :   ffffffff81227a86:       cmpq    %r14, -0xa0(%rbp)
    0.00 :   ffffffff81227a8d:       jne     0xffffffff812271c2 <unmap_page_range+0x2c2>
    0.00 :   ffffffff81227a93:       movq    -0xc0(%rbp), %r8
    0.00 :   ffffffff81227a9a:       movq    %r13, %rbx
    0.00 :   ffffffff81227a9d:       movq    %r15, %r13
    0.00 :   ffffffff81227aa0:       movq    %r8, -0x48(%rbp)
    0.00 :   ffffffff81227aa4:       callq   0xffffffff81b789b0 <__SCT__cond_resched>
    0.00 :   ffffffff81227aa9:       movq    -0x48(%rbp), %r8
    0.00 :   ffffffff81227aad:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff81227ab4:       addq    $0x8, %r8
    0.00 :   ffffffff81227ab8:       cmpq    %rax, %r14
    0.00 :   ffffffff81227abb:       jne     0xffffffff812270cf <unmap_page_range+0x1cf>
    0.00 :   ffffffff81227ac1:       movq    %r12, %r15
    0.00 :   ffffffff81227ac4:       movq    -0xd8(%rbp), %rcx
    0.00 :   ffffffff81227acb:       movq    %r13, %r12
    0.00 :   ffffffff81227ace:       movq    -0xe0(%rbp), %rbx
    0.00 :   ffffffff81227ad5:       movq    %r14, %r13
    0.00 :   ffffffff81227ad8:       jmp     0xffffffff81226ffd <unmap_page_range+0xfd>
    0.00 :   ffffffff81227add:       testl   $0xfff, %ebx    # imm = 0xFFF
    0.00 :   ffffffff81227ae3:       movq    %rbx, %rdx
    0.00 :   ffffffff81227ae6:       jne     0xffffffff8122773e <unmap_page_range+0x83e>
    0.00 :   ffffffff81227aec:       movq    (%rbx), %rsi
    0.00 :   ffffffff81227aef:       testl   $0x10000, %esi  # imm = 0x10000
    0.00 :   ffffffff81227af5:       je      0xffffffff8122773e <unmap_page_range+0x83e>
    0.00 :   ffffffff81227afb:       movq    0x48(%rbx), %rsi
    0.00 :   ffffffff81227aff:       leaq    -0x1(%rsi), %rdx
    0.00 :   ffffffff81227b03:       andl    $0x1, %esi
    0.00 :   ffffffff81227b06:       cmoveq  %rbx, %rdx
    0.00 :   ffffffff81227b0a:       jmp     0xffffffff8122773e <unmap_page_range+0x83e>
    0.00 :   ffffffff81227b0f:       movq    0x8(%rdx), %rsi
    0.00 :   ffffffff81227b13:       leaq    0x1000(%r8), %rax
    0.00 :   ffffffff81227b1a:       testb   $0x1, %sil
    0.00 :   ffffffff81227b1e:       je      0xffffffff812278b9 <unmap_page_range+0x9b9>
    0.00 :   ffffffff81227b24:       decq    %rsi
    0.00 :   ffffffff81227b27:       testb   $0x1, 0x18(%rsi)
    0.00 :   ffffffff81227b2b:       je      0xffffffff812278cb <unmap_page_range+0x9cb>
    0.00 :   ffffffff81227b31:       movl    $0x1, %ecx
    0.00 :   ffffffff81227b36:       jmp     0xffffffff812278ef <unmap_page_range+0x9ef>
    0.00 :   ffffffff81227b3b:       testl   $0xfff, %ebx    # imm = 0xFFF
    0.00 :   ffffffff81227b41:       movq    %rbx, %rax
    0.00 :   ffffffff81227b44:       jne     0xffffffff81227599 <unmap_page_range+0x699>
    0.00 :   ffffffff81227b4a:       movq    (%rbx), %rdx
    0.00 :   ffffffff81227b4d:       testl   $0x10000, %edx  # imm = 0x10000
    0.00 :   ffffffff81227b53:       je      0xffffffff81227599 <unmap_page_range+0x699>
    0.00 :   ffffffff81227b59:       movq    0x48(%rbx), %rdx
    0.00 :   ffffffff81227b5d:       leaq    -0x1(%rdx), %rax
    0.00 :   ffffffff81227b61:       andl    $0x1, %edx
    0.00 :   ffffffff81227b64:       cmoveq  %rbx, %rax
    0.00 :   ffffffff81227b68:       jmp     0xffffffff81227599 <unmap_page_range+0x699>
    0.00 :   ffffffff81227b6d:       movq    %rbx, %rdi
    0.00 :   ffffffff81227b70:       movq    %r9, -0x70(%rbp)
    0.00 :   ffffffff81227b74:       movq    %r8, -0x60(%rbp)
    0.00 :   ffffffff81227b78:       movq    %rdx, -0x58(%rbp)
    0.00 :   ffffffff81227b7c:       callq   0xffffffff811f7b30 <set_page_dirty>
    0.00 :   ffffffff81227b81:       movq    %rbx, %rax
    0.00 :   ffffffff81227b84:       orb     $0x8, 0x18(%r13)
    0.00 :   ffffffff81227b89:       movq    -0x70(%rbp), %r9
    0.00 :   ffffffff81227b8d:       movq    -0x60(%rbp), %r8
    0.00 :   ffffffff81227b91:       movq    -0x58(%rbp), %rdx
    0.00 :   ffffffff81227b95:       orq     $0x1, %rax
    0.00 :   ffffffff81227b99:       movl    $0x1, %ecx
    0.00 :   ffffffff81227b9e:       movl    $0x1, -0x74(%rbp)
    0.00 :   ffffffff81227ba5:       jmp     0xffffffff812276bb <unmap_page_range+0x7bb>
    0.00 :   ffffffff81227baa:       decq    %rax
    0.00 :   ffffffff81227bad:       jmp     0xffffffff81227696 <unmap_page_range+0x796>
    0.00 :   ffffffff81227bb2:       movq    %r13, %r12
    0.00 :   ffffffff81227bb5:       movq    %r9, %r15
    0.00 :   ffffffff81227bb8:       movq    -0x48(%rbp), %r13
    0.00 :   ffffffff81227bbc:       movl    $0x1, -0x74(%rbp)
    0.00 :   ffffffff81227bc3:       jmp     0xffffffff81227482 <unmap_page_range+0x582>
    0.00 :   ffffffff81227bc8:       testb   $-0x80, %al
    0.00 :   ffffffff81227bca:       movabsq $-0xfffffffe00001, %rdx # imm = 0xFFF00000001FFFFF
    0.00 :   ffffffff81227bd4:       movabsq $-0xffffffffff001, %rdi # imm = 0xFFF0000000000FFF
    0.00 :   ffffffff81227bde:       cmoveq  %rdi, %rdx
    0.00 :   ffffffff81227be2:       andq    %rax, %rdx
    0.00 :   ffffffff81227be5:       testl   $0x181, %edx    # imm = 0x181
    0.00 :   ffffffff81227beb:       je      0xffffffff81227c04 <unmap_page_range+0xd04>
    0.00 :   ffffffff81227bed:       movabsq $0x400000000000080, %rdx # imm = 0x400000000000080
    0.00 :   ffffffff81227bf7:       andq    %rax, %rdx
    0.00 :   ffffffff81227bfa:       addq    $-0x80, %rdx
    0.00 :   ffffffff81227bfe:       jne     0xffffffff81227dc9 <unmap_page_range+0xec9>
    0.00 :   ffffffff81227c04:       movq    %r11, %rax
    0.00 :   ffffffff81227c07:       movq    %r11, -0x48(%rbp)
    0.00 :   ffffffff81227c0b:       subq    %r14, %rax
    0.00 :   ffffffff81227c0e:       cmpq    $0x200000, %rax # imm = 0x200000
    0.00 :   ffffffff81227c14:       je      0xffffffff81227d02 <unmap_page_range+0xe02>
    0.00 :   ffffffff81227c1a:       movq    -0x90(%rbp), %rsi
    0.00 :   ffffffff81227c21:       xorl    %r8d, %r8d
    0.00 :   ffffffff81227c24:       xorl    %ecx, %ecx
    0.00 :   ffffffff81227c26:       movq    %r14, %rdx
    0.00 :   ffffffff81227c29:       movq    %r13, %rdi
    0.00 :   ffffffff81227c2c:       callq   0xffffffff81287d00 <__split_huge_pmd>
    0.00 :   ffffffff81227c31:       movq    -0x48(%rbp), %r11
    0.00 :   ffffffff81227c35:       jmp     0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff81227c3a:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81227c3e:       xorl    %ecx, %ecx
    0.00 :   ffffffff81227c40:       movq    %r8, %rsi
    0.00 :   ffffffff81227c43:       movq    %r9, -0x60(%rbp)
    0.00 :   ffffffff81227c47:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff81227c4b:       callq   0xffffffff812252a0 <print_bad_pte>
    0.00 :   ffffffff81227c50:       movq    -0x58(%rbp), %rax
    0.00 :   ffffffff81227c54:       movq    -0x60(%rbp), %r9
    0.00 :   ffffffff81227c58:       jmp     0xffffffff8122740b <unmap_page_range+0x50b>
    0.00 :   ffffffff81227c5d:       testl   $0xfff, %edx    # imm = 0xFFF
    0.00 :   ffffffff81227c63:       movq    %rdx, %rsi
    0.00 :   ffffffff81227c66:       jne     0xffffffff812278c1 <unmap_page_range+0x9c1>
    0.00 :   ffffffff81227c6c:       movq    (%rdx), %r8
    0.00 :   ffffffff81227c6f:       testl   $0x10000, %r8d  # imm = 0x10000
    0.00 :   ffffffff81227c76:       je      0xffffffff812278c1 <unmap_page_range+0x9c1>
    0.00 :   ffffffff81227c7c:       movq    0x48(%rdx), %r8
    0.00 :   ffffffff81227c80:       leaq    -0x1(%r8), %rsi
    0.00 :   ffffffff81227c84:       andl    $0x1, %r8d
    0.00 :   ffffffff81227c88:       cmoveq  %rdx, %rsi
    0.00 :   ffffffff81227c8c:       jmp     0xffffffff812278c1 <unmap_page_range+0x9c1>
    0.00 :   ffffffff81227c91:       movabsq $0xffffffffff, %rsi # imm = 0xFFFFFFFFFF
    0.00 :   ffffffff81227c9b:       andq    %rsi, %rax
    0.00 :   ffffffff81227c9e:       shlq    $0x6, %rax
    0.00 :   ffffffff81227ca2:       jmp     0xffffffff8122781a <unmap_page_range+0x91a>
    0.00 :   ffffffff81227ca7:       ud2
    0.00 :   ffffffff81227ca9:       jmp     0xffffffff8122760a <unmap_page_range+0x70a>
    0.00 :   ffffffff81227cae:       andl    $0x1, %r14d
    0.00 :   ffffffff81227cb2:       je      0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227cb8:       movq    $-0x400, (%r15) # imm = 0xFC00
    0.00 :   ffffffff81227cbf:       jmp     0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227cc4:       xorl    %esi, %esi
    0.00 :   ffffffff81227cc6:       movq    $-0x1, %rdx
    0.00 :   ffffffff81227ccd:       jmp     0xffffffff81227a09 <unmap_page_range+0xb09>
    0.00 :   ffffffff81227cd2:       testl   $0xfff, %edx    # imm = 0xFFF
    0.00 :   ffffffff81227cd8:       movq    %rdx, %rsi
    0.00 :   ffffffff81227cdb:       jne     0xffffffff81227897 <unmap_page_range+0x997>
    0.00 :   ffffffff81227ce1:       movq    (%rdx), %rax
    0.00 :   ffffffff81227ce4:       testl   $0x10000, %eax  # imm = 0x10000
    0.00 :   ffffffff81227ce9:       je      0xffffffff81227897 <unmap_page_range+0x997>
    0.00 :   ffffffff81227cef:       movq    0x48(%rdx), %rax
    0.00 :   ffffffff81227cf3:       leaq    -0x1(%rax), %rsi
    0.00 :   ffffffff81227cf7:       testb   $0x1, %al
    0.00 :   ffffffff81227cf9:       cmoveq  %rdx, %rsi
    0.00 :   ffffffff81227cfd:       jmp     0xffffffff81227897 <unmap_page_range+0x997>
    0.00 :   ffffffff81227d02:       movq    -0x90(%rbp), %rdx
    0.00 :   ffffffff81227d09:       movq    %r14, %rcx
    0.00 :   ffffffff81227d0c:       movq    %r13, %rsi
    0.00 :   ffffffff81227d0f:       movq    %r12, %rdi
    0.00 :   ffffffff81227d12:       callq   0xffffffff81286d10 <zap_huge_pmd>
    0.00 :   ffffffff81227d17:       testl   %eax, %eax
    0.00 :   ffffffff81227d19:       movq    -0x48(%rbp), %r11
    0.00 :   ffffffff81227d1d:       je      0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff81227d23:       movq    %r11, %r14
    0.00 :   ffffffff81227d26:       jmp     0xffffffff81227a79 <unmap_page_range+0xb79>
    0.00 :   ffffffff81227d2b:       decq    %rdx
    0.00 :   ffffffff81227d2e:       jmp     0xffffffff8122773e <unmap_page_range+0x83e>
    0.00 :   ffffffff81227d33:       decq    %rax
    0.00 :   ffffffff81227d36:       jmp     0xffffffff81227599 <unmap_page_range+0x699>
    0.00 :   ffffffff81227d3b:       movq    %gs:0x22700, %rdx
    0.00 :   ffffffff81227d44:       movq    (%rdx), %rcx
    0.00 :   ffffffff81227d47:       movabsq $0x7ffffffff000, %rax # imm = 0x7FFFFFFFF000
    0.00 :   ffffffff81227d51:       testl   $0x20000000, %ecx # imm = 0x20000000
    0.00 :   ffffffff81227d57:       je      0xffffffff81227d6e <unmap_page_range+0xe6e>
    0.00 :   ffffffff81227d59:       testb   $0x8, 0x253(%rdx)
    0.00 :   ffffffff81227d60:       movl    $0xffffe000, %eax # imm = 0xFFFFE000
    0.00 :   ffffffff81227d65:       movl    $0xc0000000, %edx # imm = 0xC0000000
    0.00 :   ffffffff81227d6a:       cmovneq %rdx, %rax
    0.00 :   ffffffff81227d6e:       movq    %rax, 0x8(%r12)
    0.00 :   ffffffff81227d73:       movq    $0x0, 0x10(%r12)
    0.00 :   ffffffff81227d7c:       jmp     0xffffffff81227a4a <unmap_page_range+0xb4a>
    0.00 :   ffffffff81227d81:       testl   $0xfff, %edx    # imm = 0xFFF
    0.00 :   ffffffff81227d87:       jne     0xffffffff812278de <unmap_page_range+0x9de>
    0.00 :   ffffffff81227d8d:       movq    (%rdx), %rsi
    0.00 :   ffffffff81227d90:       testl   $0x10000, %esi  # imm = 0x10000
    0.00 :   ffffffff81227d96:       je      0xffffffff812278de <unmap_page_range+0x9de>
    0.00 :   ffffffff81227d9c:       movq    0x48(%rdx), %rsi
    0.00 :   ffffffff81227da0:       leaq    -0x1(%rsi), %rdi
    0.00 :   ffffffff81227da4:       andl    $0x1, %esi
    0.00 :   ffffffff81227da7:       cmoveq  %rdx, %rdi
    0.00 :   ffffffff81227dab:       jmp     0xffffffff812278de <unmap_page_range+0x9de>
    0.00 :   ffffffff81227db0:       testl   $0x400, %r12d   # imm = 0x400
    0.00 :   ffffffff81227db7:       je      0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff81227dbd:       movq    $-0x400, (%r15) # imm = 0xFC00
    0.00 :   ffffffff81227dc4:       jmp     0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff81227dc9:       btq     $0x3a, %rax
    0.00 :   ffffffff81227dce:       jb      0xffffffff81227c04 <unmap_page_range+0xd04>
    0.00 :   ffffffff81227dd4:       jmp     0xffffffff812271ff <unmap_page_range+0x2ff>
    0.00 :   ffffffff81227dd9:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81227ddd:       movq    $0x0, (%r15)
    0.00 :   ffffffff81227de4:       cmpq    $0x0, 0x58(%rdi)
    0.00 :   ffffffff81227de9:       jne     0xffffffff81227429 <unmap_page_range+0x529>
    0.00 :   ffffffff81227def:       jmp     0xffffffff81227447 <unmap_page_range+0x547>
    0.00 :   ffffffff81227df4:       movabsq $-0xffffffffff068, %rdx # imm = 0xFFF0000000000F98
    0.00 :   ffffffff81227dfe:       testq   %rdx, %rax
    0.00 :   ffffffff81227e01:       jne     0xffffffff81227f17 <unmap_page_range+0x1017>
    0.00 :   ffffffff81227e07:       movabsq $0xffffffffff000, %rdx # imm = 0xFFFFFFFFFF000
    0.00 :   ffffffff81227e11:       jmp     0xffffffff81227176 <unmap_page_range+0x276>
    0.00 :   ffffffff81227e16:       testl   $0xfff, %edx    # imm = 0xFFF
    0.00 :   ffffffff81227e1c:       movq    %rdx, %rax
    0.00 :   ffffffff81227e1f:       jne     0xffffffff8122785b <unmap_page_range+0x95b>
    0.00 :   ffffffff81227e25:       movq    (%rdx), %rsi
    0.00 :   ffffffff81227e28:       testl   $0x10000, %esi  # imm = 0x10000
    0.00 :   ffffffff81227e2e:       je      0xffffffff8122785b <unmap_page_range+0x95b>
    0.00 :   ffffffff81227e34:       movq    0x48(%rdx), %rsi
    0.00 :   ffffffff81227e38:       leaq    -0x1(%rsi), %rax
    0.00 :   ffffffff81227e3c:       andl    $0x1, %esi
    0.00 :   ffffffff81227e3f:       cmoveq  %rdx, %rax
    0.00 :   ffffffff81227e43:       movq    (%rax), %rax
    0.00 :   ffffffff81227e46:       testb   $0x1, %al
    0.00 :   ffffffff81227e48:       jne     0xffffffff81227866 <unmap_page_range+0x966>
    0.00 :   ffffffff81227e4e:       ud2
    0.00 :   ffffffff81227e50:       testl   $0xfff, %ebx    # imm = 0xFFF
    0.00 :   ffffffff81227e56:       movq    %rbx, %rcx
    0.00 :   ffffffff81227e59:       jne     0xffffffff812279ae <unmap_page_range+0xaae>
    0.00 :   ffffffff81227e5f:       movq    (%rbx), %rsi
    0.00 :   ffffffff81227e62:       testl   $0x10000, %esi  # imm = 0x10000
    0.00 :   ffffffff81227e68:       je      0xffffffff812279ae <unmap_page_range+0xaae>
    0.00 :   ffffffff81227e6e:       movq    0x48(%rbx), %rsi
    0.00 :   ffffffff81227e72:       leaq    -0x1(%rsi), %rcx
    0.00 :   ffffffff81227e76:       andl    $0x1, %esi
    0.00 :   ffffffff81227e79:       cmoveq  %rbx, %rcx
    0.00 :   ffffffff81227e7d:       jmp     0xffffffff812279ae <unmap_page_range+0xaae>
    0.00 :   ffffffff81227e82:       movq    0x10(%r12), %rdx
    0.00 :   ffffffff81227e87:       movq    0x8(%r12), %rsi
    0.00 :   ffffffff81227e8c:       callq   0xffffffff812757d0 <__mmu_notifier_invalidate_range>
    0.00 :   ffffffff81227e91:       jmp     0xffffffff81227a2c <unmap_page_range+0xb2c>
    0.00 :   ffffffff81227e96:       leaq    -0x1(%rsi), %rdi
    0.00 :   ffffffff81227e9a:       jmp     0xffffffff812278de <unmap_page_range+0x9de>
    0.00 :   ffffffff81227e9f:       movq    %r8, %rdx
    0.00 :   ffffffff81227ea2:       movq    %r14, %rcx
    0.00 :   ffffffff81227ea5:       movq    %rbx, %rsi
    0.00 :   ffffffff81227ea8:       movq    %r12, %rdi
    0.00 :   ffffffff81227eab:       movq    %r8, -0x48(%rbp)
    0.00 :   ffffffff81227eaf:       callq   0xffffffff81287a80 <zap_huge_pud>
    0.00 :   ffffffff81227eb4:       testl   %eax, %eax
    0.00 :   ffffffff81227eb6:       movq    -0x48(%rbp), %r8
    0.00 :   ffffffff81227eba:       movq    -0x50(%rbp), %r10
    0.00 :   ffffffff81227ebe:       jne     0xffffffff81227f37 <unmap_page_range+0x1037>
    0.00 :   ffffffff81227ec0:       movq    (%r8), %rax
    0.00 :   ffffffff81227ec3:       testq   $-0x61, %rax
    0.00 :   ffffffff81227ec9:       jne     0xffffffff81227151 <unmap_page_range+0x251>
    0.00 :   ffffffff81227ecf:       movq    %r10, %r14
    0.00 :   ffffffff81227ed2:       jmp     0xffffffff81227aad <unmap_page_range+0xbad>
    0.00 :   ffffffff81227ed7:       movq    -0x90(%rbp), %rdi
    0.00 :   ffffffff81227ede:       movq    %r11, -0x48(%rbp)
    0.00 :   ffffffff81227ee2:       callq   0xffffffff8123fa70 <pmd_clear_bad>
    0.00 :   ffffffff81227ee7:       movq    -0x48(%rbp), %r11
    0.00 :   ffffffff81227eeb:       movq    %r11, %r14
    0.00 :   ffffffff81227eee:       jmp     0xffffffff81227a79 <unmap_page_range+0xb79>
    0.00 :   ffffffff81227ef3:       testb   $0x1, %al
    0.00 :   ffffffff81227ef5:       je      0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff81227efb:       movq    $-0x400, (%r15) # imm = 0xFC00
    0.00 :   ffffffff81227f02:       jmp     0xffffffff81227679 <unmap_page_range+0x779>
    0.00 :   ffffffff81227f07:       decq    %rax
    0.00 :   ffffffff81227f0a:       jmp     0xffffffff8122785b <unmap_page_range+0x95b>
    0.00 :   ffffffff81227f0f:       decq    %rcx
    0.00 :   ffffffff81227f12:       jmp     0xffffffff812279ae <unmap_page_range+0xaae>
    0.00 :   ffffffff81227f17:       movq    %r8, %rdi
    0.00 :   ffffffff81227f1a:       movq    %r10, -0x50(%rbp)
    0.00 :   ffffffff81227f1e:       movq    %r8, -0x48(%rbp)
    0.00 :   ffffffff81227f22:       callq   0xffffffff8123fa10 <pud_clear_bad>
    0.00 :   ffffffff81227f27:       movq    -0x50(%rbp), %r10
    0.00 :   ffffffff81227f2b:       movq    -0x48(%rbp), %r8
    0.00 :   ffffffff81227f2f:       movq    %r10, %r14
    0.00 :   ffffffff81227f32:       jmp     0xffffffff81227aad <unmap_page_range+0xbad>
    0.00 :   ffffffff81227f37:       movq    %r10, %r14
    0.00 :   ffffffff81227f3a:       jmp     0xffffffff81227aa0 <unmap_page_range+0xba0>
    0.00 :   ffffffff81227f3f:       testq   %rcx, %rcx
    0.00 :   ffffffff81227f42:       jne     0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff81227f48:       movq    -0x90(%rbp), %rax
    0.00 :   ffffffff81227f4f:       movl    $0x80000000, %edx # imm = 0x80000000
    0.00 :   ffffffff81227f54:       andq    $-0x1000, %rax  # imm = 0xF000
    0.00 :   ffffffff81227f5a:       addq    %rdx, %rax
    0.00 :   ffffffff81227f5d:       movq    %rax, %rbx
    0.00 :   ffffffff81227f60:       jb      0xffffffff81227fa5 <unmap_page_range+0x10a5>
    0.00 :   ffffffff81227f62:       movq    $-0x80000000, %rax # imm = 0x80000000
    0.00 :   ffffffff81227f69:       subq    0xefa288(%rip), %rax # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff81227f70:       addq    %rax, %rbx
    0.00 :   ffffffff81227f73:       movq    %r11, -0x48(%rbp)
    0.00 :   ffffffff81227f77:       shrq    $0xc, %rbx
    0.00 :   ffffffff81227f7b:       shlq    $0x6, %rbx
    0.00 :   ffffffff81227f7f:       addq    0xefa262(%rip), %rbx # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff81227f86:       addq    $0x28, %rbx
    0.00 :   ffffffff81227f8a:       movq    %rbx, %rdi
    0.00 :   ffffffff81227f8d:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff81227f92:       movq    %rbx, %rdi
    0.00 :   ffffffff81227f95:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff81227f9a:       movq    -0x48(%rbp), %r11
    0.00 :   ffffffff81227f9e:       jmp     0xffffffff8122722f <unmap_page_range+0x32f>
    0.00 :   ffffffff81227fa3:       ud2
    0.00 :   ffffffff81227fa5:       movq    0xff5064(%rip), %rax # 0xffffffff8221d010 <phys_base>
    0.00 :   ffffffff81227fac:       jmp     0xffffffff81227f70 <unmap_page_range+0x1070>
    0.00 :   ffffffff81227fae:       andq    $-0x9, %rdx
    0.00 :   ffffffff81227fb2:       jmp     0xffffffff81227652 <unmap_page_range+0x752>
    0.00 :   ffffffff81227fb7:       testb   $-0xc, %al
    0.00 :   ffffffff81227fb9:       je      0xffffffff8122701a <unmap_page_range+0x11a>
    0.00 :   ffffffff81227fbf:       testb   $0x10, %al
    0.00 :   ffffffff81227fc1:       movl    $0xc, %ecx
    0.00 :   ffffffff81227fc6:       jne     0xffffffff81227fe6 <unmap_page_range+0x10e6>
    0.00 :   ffffffff81227fc8:       testb   $0x20, %al
    0.00 :   ffffffff81227fca:       movl    $0x15, %ecx
    0.00 :   ffffffff81227fcf:       jne     0xffffffff81227fe6 <unmap_page_range+0x10e6>
    0.00 :   ffffffff81227fd1:       testb   $0x40, %al
    0.00 :   ffffffff81227fd3:       movl    $0x1e, %ecx
    0.00 :   ffffffff81227fd8:       jne     0xffffffff81227fe6 <unmap_page_range+0x10e6>
    0.00 :   ffffffff81227fda:       movsbl  %al, %ecx
    0.00 :   ffffffff81227fdd:       sarl    $0x1f, %ecx
    0.00 :   ffffffff81227fe0:       andl    $0x1b, %ecx
    0.00 :   ffffffff81227fe3:       addl    $0xc, %ecx
    0.00 :   ffffffff81227fe6:       testb   $0x3, %al
    0.00 :   ffffffff81227fe8:       jne     0xffffffff8122808b <unmap_page_range+0x118b>
    0.00 :   ffffffff81227fee:       movq    0x8(%r15), %rsi
    0.00 :   ffffffff81227ff2:       movq    0x10(%r15), %rdx
    0.00 :   ffffffff81227ff6:       shrb    $0x2, %al
    0.00 :   ffffffff81227ff9:       movq    (%r15), %rdi
    0.00 :   ffffffff81227ffc:       movl    %eax, %r8d
    0.00 :   ffffffff81227fff:       andl    $0x1, %r8d
    0.00 :   ffffffff81228003:       callq   0xffffffff8105c520 <flush_tlb_mm_range>
    0.00 :   ffffffff81228008:       movq    (%r15), %rdi
    0.00 :   ffffffff8122800b:       cmpq    $0x0, 0x410(%rdi)
    0.00 :   ffffffff81228013:       jne     0xffffffff8122807c <unmap_page_range+0x117c>
    0.00 :   ffffffff81228015:       testb   $0x1, 0x18(%r15)
    0.00 :   ffffffff8122801a:       je      0xffffffff8122803b <unmap_page_range+0x113b>
    0.00 :   ffffffff8122801c:       movq    $-0x1, 0x10(%r15)
    0.00 :   ffffffff81228024:       movq    $-0x1, 0x8(%r15)
    0.00 :   ffffffff8122802c:       andb    $0xb, 0x18(%r15)
    0.00 :   ffffffff81228031:       jmp     0xffffffff8122701a <unmap_page_range+0x11a>
    0.00 :   ffffffff81228036:       callq   0xffffffff81b6af40 <__stack_chk_fail>
    0.00 :   ffffffff8122803b:       movq    %gs:0x22700, %rdx
    0.00 :   ffffffff81228044:       movq    (%rdx), %rcx
    0.00 :   ffffffff81228047:       movabsq $0x7ffffffff000, %rax # imm = 0x7FFFFFFFF000
    0.00 :   ffffffff81228051:       testl   $0x20000000, %ecx # imm = 0x20000000
    0.00 :   ffffffff81228057:       je      0xffffffff8122806e <unmap_page_range+0x116e>
    0.00 :   ffffffff81228059:       testb   $0x8, 0x253(%rdx)
    0.00 :   ffffffff81228060:       movl    $0xffffe000, %eax # imm = 0xFFFFE000
    0.00 :   ffffffff81228065:       movl    $0xc0000000, %edx # imm = 0xC0000000
    0.00 :   ffffffff8122806a:       cmovneq %rdx, %rax
    0.00 :   ffffffff8122806e:       movq    %rax, 0x8(%r15)
    0.00 :   ffffffff81228072:       movq    $0x0, 0x10(%r15)
    0.00 :   ffffffff8122807a:       jmp     0xffffffff8122802c <unmap_page_range+0x112c>
    0.00 :   ffffffff8122807c:       movq    0x10(%r15), %rdx
    0.00 :   ffffffff81228080:       movq    0x8(%r15), %rsi
    0.00 :   ffffffff81228084:       callq   0xffffffff812757d0 <__mmu_notifier_invalidate_range>
    0.00 :   ffffffff81228089:       jmp     0xffffffff81228015 <unmap_page_range+0x1115>
    0.00 :   ffffffff8122808b:       movq    $-0x1, %rdx
    0.00 :   ffffffff81228092:       xorl    %esi, %esi
    0.00 :   ffffffff81228094:       jmp     0xffffffff81227ff6 <unmap_page_range+0x10f6>
 Percent |	Source code & Disassembly of elf for cycles (4 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b54340 <rb_next>:
         : 5                ; rb_next():
    0.00 :   ffffffff81b54340:       pushq   %rbp
   32.55 :   ffffffff81b54341:       movq    %rsp, %rbp
    0.00 :   ffffffff81b54344:       movq    (%rdi), %rcx
    0.00 :   ffffffff81b54347:       cmpq    %rcx, %rdi
    0.00 :   ffffffff81b5434a:       je      0xffffffff81b54392 <rb_next+0x52>
   34.75 :   ffffffff81b5434c:       movq    0x8(%rdi), %rdx
    0.00 :   ffffffff81b54350:       testq   %rdx, %rdx
    0.00 :   ffffffff81b54353:       je      0xffffffff81b54379 <rb_next+0x39>
    0.00 :   ffffffff81b54355:       movq    %rdx, %rax
    0.32 :   ffffffff81b54358:       movq    0x10(%rdx), %rdx
   32.39 :   ffffffff81b5435c:       testq   %rdx, %rdx
    0.00 :   ffffffff81b5435f:       jne     0xffffffff81b54355 <rb_next+0x15>
    0.00 :   ffffffff81b54361:       popq    %rbp
    0.00 :   ffffffff81b54362:       xorl    %edx, %edx
    0.00 :   ffffffff81b54364:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b54366:       xorl    %edi, %edi
    0.00 :   ffffffff81b54368:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b5436d:       cmpq    0x8(%rax), %rdi
    0.00 :   ffffffff81b54371:       jne     0xffffffff81b54361 <rb_next+0x21>
    0.00 :   ffffffff81b54373:       movq    (%rax), %rcx
    0.00 :   ffffffff81b54376:       movq    %rax, %rdi
    0.00 :   ffffffff81b54379:       movq    %rcx, %rax
    0.00 :   ffffffff81b5437c:       andq    $-0x4, %rax
    0.00 :   ffffffff81b54380:       cmpq    $0x3, %rcx
    0.00 :   ffffffff81b54384:       ja      0xffffffff81b5436d <rb_next+0x2d>
    0.00 :   ffffffff81b54386:       popq    %rbp
    0.00 :   ffffffff81b54387:       xorl    %edx, %edx
    0.00 :   ffffffff81b54389:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b5438b:       xorl    %edi, %edi
    0.00 :   ffffffff81b5438d:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b54392:       xorl    %eax, %eax
    0.00 :   ffffffff81b54394:       popq    %rbp
    0.00 :   ffffffff81b54395:       xorl    %edx, %edx
    0.00 :   ffffffff81b54397:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b54399:       xorl    %edi, %edi
    0.00 :   ffffffff81b5439b:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (4 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810fba90 <note_gp_changes>:
         : 5                ; note_gp_changes():
    0.00 :   ffffffff810fba90:       pushq   %rbp
    0.00 :   ffffffff810fba91:       movq    %rsp, %rbp
    0.00 :   ffffffff810fba94:       subq    $0x18, %rsp
    0.00 :   ffffffff810fba98:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff810fba9c:       movq    %r12, -0x10(%rbp)
    0.00 :   ffffffff810fbaa0:       movq    %rdi, %rbx
    0.00 :   ffffffff810fbaa3:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff810fbaa7:       pushfq
    0.00 :   ffffffff810fbaa8:       popq    %r13
   23.35 :   ffffffff810fbaaa:       cli
    0.00 :   ffffffff810fbaab:       movq    0x18(%rdi), %r12
    0.00 :   ffffffff810fbaaf:       movq    0x8(%r12), %rax
    0.00 :   ffffffff810fbab4:       cmpq    %rax, (%rdi)
    0.00 :   ffffffff810fbab7:       jne     0xffffffff810fbae3 <note_gp_changes+0x53>
    0.00 :   ffffffff810fbab9:       movzbl  0x14(%rdi), %eax
    0.00 :   ffffffff810fbabd:       testb   %al, %al
    0.00 :   ffffffff810fbabf:       jne     0xffffffff810fbae3 <note_gp_changes+0x53>
    0.00 :   ffffffff810fbac1:       testl   $0x200, %r13d   # imm = 0x200
    0.00 :   ffffffff810fbac8:       je      0xffffffff810fbacb <note_gp_changes+0x3b>
    0.00 :   ffffffff810fbaca:       sti
    0.00 :   ffffffff810fbacb:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff810fbacf:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff810fbad3:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff810fbad7:       leave
    0.00 :   ffffffff810fbad8:       xorl    %eax, %eax
    0.00 :   ffffffff810fbada:       xorl    %esi, %esi
   15.98 :   ffffffff810fbadc:       xorl    %edi, %edi
    0.00 :   ffffffff810fbade:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
   30.42 :   ffffffff810fbae3:       movq    %r12, %rdi
   30.24 :   ffffffff810fbae6:       callq   0xffffffff81b77350 <_raw_spin_trylock>
    0.00 :   ffffffff810fbaeb:       testl   %eax, %eax
    0.00 :   ffffffff810fbaed:       je      0xffffffff810fbac1 <note_gp_changes+0x31>
    0.00 :   ffffffff810fbaef:       movq    %rbx, %rsi
    0.00 :   ffffffff810fbaf2:       movq    %r12, %rdi
    0.00 :   ffffffff810fbaf5:       callq   0xffffffff810fb8e0 <__note_gp_changes>
    0.00 :   ffffffff810fbafa:       movq    %r13, %rsi
    0.00 :   ffffffff810fbafd:       movl    %eax, %ebx
    0.00 :   ffffffff810fbaff:       movq    %r12, %rdi
    0.00 :   ffffffff810fbb02:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810fbb07:       testb   %bl, %bl
    0.00 :   ffffffff810fbb09:       je      0xffffffff810fbacb <note_gp_changes+0x3b>
    0.00 :   ffffffff810fbb0b:       callq   0xffffffff810f6cc0 <rcu_gp_kthread_wake>
    0.00 :   ffffffff810fbb10:       jmp     0xffffffff810fbacb <note_gp_changes+0x3b>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81071200 <irq_exit_rcu>:
         : 5                ; irq_exit_rcu():
    0.00 :   ffffffff81071200:       pushq   %rbp
   25.29 :   ffffffff81071201:       movq    %rsp, %rbp
   31.92 :   ffffffff81071204:       cli
    0.00 :   ffffffff81071205:       addl    $0xffff0000, %gs:0x7efb14f8(%rip) # imm = 0xFFFF0000
    0.00 :   ffffffff81071210:       movl    %gs:0x7efb14f1(%rip), %eax
    0.00 :   ffffffff81071217:       testl   $0xffff00, %eax # imm = 0xFFFF00
    0.00 :   ffffffff8107121c:       jne     0xffffffff8107122b <irq_exit_rcu+0x2b>
    0.00 :   ffffffff8107121e:       movw    %gs:0x7efb1502(%rip), %ax
    0.00 :   ffffffff81071226:       testw   %ax, %ax
    0.00 :   ffffffff81071229:       jne     0xffffffff81071263 <irq_exit_rcu+0x63>
    0.00 :   ffffffff8107122b:       movl    %gs:0x7efb14da(%rip), %edi
    0.00 :   ffffffff81071232:       callq   0xffffffff810acf60 <idle_cpu>
    0.00 :   ffffffff81071237:       testl   %eax, %eax
    0.00 :   ffffffff81071239:       je      0xffffffff81071259 <irq_exit_rcu+0x59>
    0.00 :   ffffffff8107123b:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81071244:       movq    (%rax), %rax
    0.00 :   ffffffff81071247:       testb   $0x8, %al
    0.00 :   ffffffff81071249:       jne     0xffffffff81071259 <irq_exit_rcu+0x59>
    0.00 :   ffffffff8107124b:       movl    %gs:0x7efb14b6(%rip), %eax
    0.00 :   ffffffff81071252:       testl   $0xf0000, %eax  # imm = 0xF0000
    0.00 :   ffffffff81071257:       je      0xffffffff81071284 <irq_exit_rcu+0x84>
    0.00 :   ffffffff81071259:       popq    %rbp
    0.00 :   ffffffff8107125a:       xorl    %eax, %eax
    0.00 :   ffffffff8107125c:       xorl    %edi, %edi
    0.00 :   ffffffff8107125e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81071263:       movq    %gs:0x7efa9e15(%rip), %rdi
    0.00 :   ffffffff8107126b:       testb   $0x41, %al
    0.00 :   ffffffff8107126d:       jne     0xffffffff8107127b <irq_exit_rcu+0x7b>
    0.00 :   ffffffff8107126f:       testq   %rdi, %rdi
    0.00 :   ffffffff81071272:       je      0xffffffff8107127b <irq_exit_rcu+0x7b>
    0.00 :   ffffffff81071274:       movl    0x18(%rdi), %eax
    0.00 :   ffffffff81071277:       testl   %eax, %eax
    0.00 :   ffffffff81071279:       je      0xffffffff810712a9 <irq_exit_rcu+0xa9>
   42.79 :   ffffffff8107127b:       nop
    0.00 :   ffffffff8107127d:       callq   0xffffffff81b77f20 <__do_softirq>
    0.00 :   ffffffff81071282:       jmp     0xffffffff8107122b <irq_exit_rcu+0x2b>
    0.00 :   ffffffff81071284:       callq   0xffffffff81128860 <tick_nohz_irq_exit>
    0.00 :   ffffffff81071289:       popq    %rbp
    0.00 :   ffffffff8107128a:       xorl    %eax, %eax
    0.00 :   ffffffff8107128c:       xorl    %edi, %edi
    0.00 :   ffffffff8107128e:       nop
    0.00 :   ffffffff81071290:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81071295:       movq    %gs:0x7efa9de3(%rip), %rdi
    0.00 :   ffffffff8107129d:       testq   %rdi, %rdi
    0.00 :   ffffffff810712a0:       je      0xffffffff8107127d <irq_exit_rcu+0x7d>
    0.00 :   ffffffff810712a2:       callq   0xffffffff810b25c0 <wake_up_process>
    0.00 :   ffffffff810712a7:       jmp     0xffffffff8107122b <irq_exit_rcu+0x2b>
    0.00 :   ffffffff810712a9:       nopl    (%rax)
    0.00 :   ffffffff810712b0:       callq   0xffffffff810968c0 <__kthread_should_park>
    0.00 :   ffffffff810712b5:       testb   %al, %al
    0.00 :   ffffffff810712b7:       jne     0xffffffff8107127b <irq_exit_rcu+0x7b>
    0.00 :   ffffffff810712b9:       jmp     0xffffffff8107122b <irq_exit_rcu+0x2b>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b69c0 <update_load_avg>:
         : 5                ; update_load_avg():
   41.71 :   ffffffff810b69c0:       pushq   %rbp
   21.57 :   ffffffff810b69c1:       movq    %rsp, %rbp
    0.00 :   ffffffff810b69c4:       pushq   %r15
    0.00 :   ffffffff810b69c6:       pushq   %r14
    0.00 :   ffffffff810b69c8:       movl    %edx, %r14d
    0.00 :   ffffffff810b69cb:       pushq   %r13
    0.00 :   ffffffff810b69cd:       pushq   %r12
    0.00 :   ffffffff810b69cf:       movq    %rsi, %r12
    0.00 :   ffffffff810b69d2:       pushq   %rbx
    0.00 :   ffffffff810b69d3:       movq    %rdi, %rbx
    0.00 :   ffffffff810b69d6:       subq    $0x20, %rsp
    0.00 :   ffffffff810b69da:       movl    0x18c(%rdi), %eax
    0.00 :   ffffffff810b69e0:       movq    0x180(%rdi), %rdx
    0.00 :   ffffffff810b69e7:       testl   %eax, %eax
    0.00 :   ffffffff810b69e9:       jne     0xffffffff810b7019 <update_load_avg+0x659>
    0.00 :   ffffffff810b69ef:       movq    0x130(%rdi), %rax
    0.00 :   ffffffff810b69f6:       movq    0x9c8(%rax), %r13
    0.00 :   ffffffff810b69fd:       subq    %rdx, %r13
    0.00 :   ffffffff810b6a00:       subq    0x9d0(%rax), %r13
    0.00 :   ffffffff810b6a07:       cmpq    $0x0, 0xc0(%r12)
    0.00 :   ffffffff810b6a10:       je      0xffffffff810b6a20 <update_load_avg+0x60>
    0.00 :   ffffffff810b6a12:       movq    %r12, %rdx
    0.00 :   ffffffff810b6a15:       movq    %rbx, %rsi
    0.00 :   ffffffff810b6a18:       movq    %r13, %rdi
    0.00 :   ffffffff810b6a1b:       callq   0xffffffff810c9e10 <__update_load_avg_se>
    0.00 :   ffffffff810b6a20:       movl    0xc4(%rbx), %r15d
    0.00 :   ffffffff810b6a27:       testl   %r15d, %r15d
    0.00 :   ffffffff810b6a2a:       jne     0xffffffff810b6de1 <update_load_avg+0x421>
    0.00 :   ffffffff810b6a30:       movq    %rbx, %rsi
    0.00 :   ffffffff810b6a33:       movq    %r13, %rdi
    0.00 :   ffffffff810b6a36:       callq   0xffffffff810ca1b0 <__update_load_avg_cfs_rq>
    0.00 :   ffffffff810b6a3b:       movq    0x80(%r12), %rdx
    0.00 :   ffffffff810b6a43:       orl     %r15d, %eax
    0.00 :   ffffffff810b6a46:       movl    %eax, %esi
    0.00 :   ffffffff810b6a48:       testq   %rdx, %rdx
    0.00 :   ffffffff810b6a4b:       je      0xffffffff810b6a57 <update_load_avg+0x97>
    0.00 :   ffffffff810b6a4d:       cmpq    $0x0, 0x108(%rdx)
    0.00 :   ffffffff810b6a55:       jne     0xffffffff810b6aa4 <update_load_avg+0xe4>
    0.00 :   ffffffff810b6a57:       cmpq    $0x0, 0xc0(%r12)
    0.00 :   ffffffff810b6a60:       jne     0xffffffff810b6a6c <update_load_avg+0xac>
    0.00 :   ffffffff810b6a62:       testb   $0x4, %r14b
    0.00 :   ffffffff810b6a66:       jne     0xffffffff810b6f6f <update_load_avg+0x5af>
    0.00 :   ffffffff810b6a6c:       testb   $0x8, %r14b
    0.00 :   ffffffff810b6a70:       jne     0xffffffff810b6d5e <update_load_avg+0x39e>
    0.00 :   ffffffff810b6a76:       testl   %esi, %esi
    0.00 :   ffffffff810b6a78:       jne     0xffffffff810b6d1b <update_load_avg+0x35b>
    0.00 :   ffffffff810b6a7e:       addq    $0x20, %rsp
    0.00 :   ffffffff810b6a82:       popq    %rbx
    0.00 :   ffffffff810b6a83:       popq    %r12
    0.00 :   ffffffff810b6a85:       popq    %r13
    0.00 :   ffffffff810b6a87:       popq    %r14
    0.00 :   ffffffff810b6a89:       popq    %r15
    0.00 :   ffffffff810b6a8b:       popq    %rbp
    0.00 :   ffffffff810b6a8c:       xorl    %eax, %eax
    0.00 :   ffffffff810b6a8e:       xorl    %edx, %edx
    0.00 :   ffffffff810b6a90:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b6a92:       xorl    %esi, %esi
    0.00 :   ffffffff810b6a94:       xorl    %edi, %edi
    0.00 :   ffffffff810b6a96:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b6a99:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b6a9c:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b6a9f:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b6aa4:       movq    $0x0, 0x108(%rdx)
    0.00 :   ffffffff810b6aaf:       movq    0x78(%r12), %rcx
    0.00 :   ffffffff810b6ab4:       movq    0x110(%rdx), %rax
    0.00 :   ffffffff810b6abb:       addq    %rax, 0x110(%rcx)
    0.00 :   ffffffff810b6ac2:       movq    $0x1, 0x108(%rcx)
    0.00 :   ffffffff810b6acd:       movq    0xb0(%rdx), %rdi
    0.00 :   ffffffff810b6ad4:       movq    %rdi, %r8
    0.00 :   ffffffff810b6ad7:       subq    0xf0(%r12), %r8
    0.00 :   ffffffff810b6adf:       je      0xffffffff810b6b65 <update_load_avg+0x1a5>
    0.00 :   ffffffff810b6ae5:       movl    0x9c(%rcx), %eax
    0.00 :   ffffffff810b6aeb:       movl    0xd8(%r12), %r9d
    0.00 :   ffffffff810b6af3:       movq    %rdi, 0xf0(%r12)
    0.00 :   ffffffff810b6afb:       addl    $0xb67e, %eax   # imm = 0xB67E
    0.00 :   ffffffff810b6b00:       imull   %edi, %eax
    0.00 :   ffffffff810b6b03:       movl    %eax, %edi
    0.00 :   ffffffff810b6b05:       movl    %eax, 0xd8(%r12)
    0.00 :   ffffffff810b6b0d:       subq    %r9, %rdi
    0.00 :   ffffffff810b6b10:       movq    0xb0(%rcx), %r9
    0.00 :   ffffffff810b6b17:       testq   %r8, %r8
    0.00 :   ffffffff810b6b1a:       leaq    (%r8,%r9), %rax
    0.00 :   ffffffff810b6b1e:       jns     0xffffffff810b6fc6 <update_load_avg+0x606>
    0.00 :   ffffffff810b6b24:       cmpq    %rax, %r9
    0.00 :   ffffffff810b6b27:       jae     0xffffffff810b6fc6 <update_load_avg+0x606>
    0.00 :   ffffffff810b6b2d:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b6b30:       xorl    %eax, %eax
    0.00 :   ffffffff810b6b32:       movq    %rax, 0xb0(%rcx)
    0.00 :   ffffffff810b6b39:       movl    0x98(%rcx), %r9d
    0.00 :   ffffffff810b6b40:       testq   %rdi, %rdi
    0.00 :   ffffffff810b6b43:       leal    (%r9,%rdi), %eax
    0.00 :   ffffffff810b6b47:       jns     0xffffffff810b7003 <update_load_avg+0x643>
    0.00 :   ffffffff810b6b4d:       cmpl    %eax, %r9d
    0.00 :   ffffffff810b6b50:       jae     0xffffffff810b7003 <update_load_avg+0x643>
    0.00 :   ffffffff810b6b56:       xorl    %eax, %eax
    0.00 :   ffffffff810b6b58:       movl    %eax, 0x98(%rcx)
    0.00 :   ffffffff810b6b5e:       movl    %r8d, 0x98(%rcx)
    0.00 :   ffffffff810b6b65:       movq    0xa8(%rdx), %rdi
    0.00 :   ffffffff810b6b6c:       movq    %rdi, %r8
    0.00 :   ffffffff810b6b6f:       subq    0xe8(%r12), %r8
    0.00 :   ffffffff810b6b77:       je      0xffffffff810b6bfd <update_load_avg+0x23d>
    0.00 :   ffffffff810b6b7d:       movl    0x9c(%rcx), %eax
    0.00 :   ffffffff810b6b83:       movq    %rdi, 0xe8(%r12)
    0.00 :   ffffffff810b6b8b:       addl    $0xb67e, %eax   # imm = 0xB67E
    0.00 :   ffffffff810b6b90:       imull   %edi, %eax
    0.00 :   ffffffff810b6b93:       movq    %rax, %r9
    0.00 :   ffffffff810b6b96:       subq    0xd0(%r12), %r9
    0.00 :   ffffffff810b6b9e:       movq    %rax, 0xd0(%r12)
    0.00 :   ffffffff810b6ba6:       movq    0xa8(%rcx), %rdi
    0.00 :   ffffffff810b6bad:       testq   %r8, %r8
    0.00 :   ffffffff810b6bb0:       leaq    (%r8,%rdi), %rax
    0.00 :   ffffffff810b6bb4:       jns     0xffffffff810b6fbb <update_load_avg+0x5fb>
    0.00 :   ffffffff810b6bba:       cmpq    %rax, %rdi
    0.00 :   ffffffff810b6bbd:       jae     0xffffffff810b6fbb <update_load_avg+0x5fb>
    0.00 :   ffffffff810b6bc3:       xorl    %edi, %edi
    0.00 :   ffffffff810b6bc5:       xorl    %eax, %eax
    0.00 :   ffffffff810b6bc7:       movq    %rax, 0xa8(%rcx)
    0.00 :   ffffffff810b6bce:       movq    0x90(%rcx), %r8
    0.00 :   ffffffff810b6bd5:       testq   %r9, %r9
    0.00 :   ffffffff810b6bd8:       leaq    (%r9,%r8), %rax
    0.00 :   ffffffff810b6bdc:       jns     0xffffffff810b6ff9 <update_load_avg+0x639>
    0.00 :   ffffffff810b6be2:       cmpq    %rax, %r8
    0.00 :   ffffffff810b6be5:       jae     0xffffffff810b6ff9 <update_load_avg+0x639>
    0.00 :   ffffffff810b6beb:       xorl    %eax, %eax
    0.00 :   ffffffff810b6bed:       movq    %rax, 0x90(%rcx)
    0.00 :   ffffffff810b6bf4:       movl    %edi, %eax
    0.00 :   ffffffff810b6bf6:       movq    %rax, 0x90(%rcx)
    0.00 :   ffffffff810b6bfd:       movq    0x110(%rdx), %rax
    0.00 :   ffffffff810b6c04:       orl     $0x1, %esi
    0.00 :   ffffffff810b6c07:       testq   %rax, %rax
    0.00 :   ffffffff810b6c0a:       je      0xffffffff810b6f56 <update_load_avg+0x596>
    0.00 :   ffffffff810b6c10:       movq    $0x0, 0x110(%rdx)
    0.00 :   ffffffff810b6c1b:       movl    0x9c(%rcx), %edi
    0.00 :   ffffffff810b6c21:       addl    $0xb67e, %edi   # imm = 0xB67E
    0.00 :   ffffffff810b6c27:       testq   %rax, %rax
    0.00 :   ffffffff810b6c2a:       js      0xffffffff810b6f7f <update_load_avg+0x5bf>
    0.00 :   ffffffff810b6c30:       addq    0xc8(%r12), %rax
    0.00 :   ffffffff810b6c38:       movl    %edi, %edx
    0.00 :   ffffffff810b6c3a:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b6c3d:       cmovgq  %rdx, %rax
    0.00 :   ffffffff810b6c41:       movl    0xd8(%r12), %edx
    0.00 :   ffffffff810b6c49:       movq    (%r12), %r9
    0.00 :   ffffffff810b6c4d:       shrl    $0xa, %edx
    0.00 :   ffffffff810b6c50:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b6c53:       cmovgeq %rdx, %rax
    0.00 :   ffffffff810b6c57:       testq   %r9, %r9
    0.00 :   ffffffff810b6c5a:       movq    %rax, %r8
    0.00 :   ffffffff810b6c5d:       je      0xffffffff810b700f <update_load_avg+0x64f>
    0.00 :   ffffffff810b6c63:       movl    $0x2, %eax
    0.00 :   ffffffff810b6c68:       shrq    $0xa, %r9
    0.00 :   ffffffff810b6c6c:       cmpq    %rax, %r9
    0.00 :   ffffffff810b6c6f:       cmovbq  %rax, %r9
    0.00 :   ffffffff810b6c73:       xorl    %edx, %edx
    0.00 :   ffffffff810b6c75:       movq    %r9, %r10
    0.00 :   ffffffff810b6c78:       imulq   %r8, %r10
    0.00 :   ffffffff810b6c7c:       movq    %r10, %rax
    0.00 :   ffffffff810b6c7f:       divq    %rdi
    0.00 :   ffffffff810b6c82:       movq    %rax, %rdx
    0.00 :   ffffffff810b6c85:       subq    0xe0(%r12), %rdx
    0.00 :   ffffffff810b6c8d:       je      0xffffffff810b7028 <update_load_avg+0x668>
    0.00 :   ffffffff810b6c93:       imulq   0xc8(%r12), %r9
    0.00 :   ffffffff810b6c9c:       movq    %rax, 0xe0(%r12)
    0.00 :   ffffffff810b6ca4:       movq    %r8, 0xc8(%r12)
    0.00 :   ffffffff810b6cac:       movq    0xa0(%rcx), %rdi
    0.00 :   ffffffff810b6cb3:       leaq    (%rdx,%rdi), %rax
    0.00 :   ffffffff810b6cb7:       subq    %r9, %r10
    0.00 :   ffffffff810b6cba:       testq   %rdx, %rdx
    0.00 :   ffffffff810b6cbd:       jns     0xffffffff810b7046 <update_load_avg+0x686>
    0.00 :   ffffffff810b6cc3:       cmpq    %rax, %rdi
    0.00 :   ffffffff810b6cc6:       jae     0xffffffff810b7046 <update_load_avg+0x686>
    0.00 :   ffffffff810b6ccc:       xorl    %edx, %edx
    0.00 :   ffffffff810b6cce:       xorl    %eax, %eax
    0.00 :   ffffffff810b6cd0:       movq    %rax, 0xa0(%rcx)
    0.00 :   ffffffff810b6cd7:       movq    0x88(%rcx), %rdi
    0.00 :   ffffffff810b6cde:       testq   %r10, %r10
    0.00 :   ffffffff810b6ce1:       leaq    (%r10,%rdi), %rax
    0.00 :   ffffffff810b6ce5:       jns     0xffffffff810b703c <update_load_avg+0x67c>
    0.00 :   ffffffff810b6ceb:       cmpq    %rax, %rdi
    0.00 :   ffffffff810b6cee:       jae     0xffffffff810b703c <update_load_avg+0x67c>
    0.00 :   ffffffff810b6cf4:       xorl    %eax, %eax
    0.00 :   ffffffff810b6cf6:       movq    %rax, 0x88(%rcx)
    0.00 :   ffffffff810b6cfd:       movl    %edx, %eax
    0.00 :   ffffffff810b6cff:       movq    %rax, 0x88(%rcx)
    0.00 :   ffffffff810b6d06:       cmpq    $0x0, 0xc0(%r12)
    0.00 :   ffffffff810b6d0f:       je      0xffffffff810b6a62 <update_load_avg+0xa2>
    0.00 :   ffffffff810b6d15:       testb   $0x8, %r14b
    0.00 :   ffffffff810b6d19:       jne     0xffffffff810b6d5e <update_load_avg+0x39e>
    0.00 :   ffffffff810b6d1b:       movq    0x130(%rbx), %rax
    0.00 :   ffffffff810b6d22:       leaq    0x80(%rax), %rdx
    0.00 :   ffffffff810b6d29:       cmpq    %rdx, %rbx
    0.00 :   ffffffff810b6d2c:       je      0xffffffff810b7051 <update_load_avg+0x691>
   36.72 :   ffffffff810b6d32:       andl    $0x1, %r14d
    0.00 :   ffffffff810b6d36:       jne     0xffffffff810b6d69 <update_load_avg+0x3a9>
    0.00 :   ffffffff810b6d38:       addq    $0x20, %rsp
    0.00 :   ffffffff810b6d3c:       popq    %rbx
    0.00 :   ffffffff810b6d3d:       popq    %r12
    0.00 :   ffffffff810b6d3f:       popq    %r13
    0.00 :   ffffffff810b6d41:       popq    %r14
    0.00 :   ffffffff810b6d43:       popq    %r15
    0.00 :   ffffffff810b6d45:       popq    %rbp
    0.00 :   ffffffff810b6d46:       xorl    %eax, %eax
    0.00 :   ffffffff810b6d48:       xorl    %edx, %edx
    0.00 :   ffffffff810b6d4a:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b6d4c:       xorl    %esi, %esi
    0.00 :   ffffffff810b6d4e:       xorl    %edi, %edi
    0.00 :   ffffffff810b6d50:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b6d53:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b6d56:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b6d59:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b6d5e:       movq    %r12, %rsi
    0.00 :   ffffffff810b6d61:       movq    %rbx, %rdi
    0.00 :   ffffffff810b6d64:       callq   0xffffffff810b6070 <detach_entity_load_avg>
    0.00 :   ffffffff810b6d69:       movq    0x100(%rbx), %rdx
    0.00 :   ffffffff810b6d70:       movq    0xa0(%rbx), %rax
    0.00 :   ffffffff810b6d77:       movq    0x150(%rbx), %rsi
    0.00 :   ffffffff810b6d7e:       subq    %rdx, %rax
    0.00 :   ffffffff810b6d81:       cmpq    $-0x7d9748c0, %rsi # imm = 0x8268B740
    0.00 :   ffffffff810b6d88:       je      0xffffffff810b6a7e <update_load_avg+0xbe>
    0.00 :   ffffffff810b6d8e:       movq    %rax, %rcx
    0.00 :   ffffffff810b6d91:       negq    %rcx
    0.00 :   ffffffff810b6d94:       cmovsq  %rax, %rcx
    0.00 :   ffffffff810b6d98:       shrq    $0x6, %rdx
    0.00 :   ffffffff810b6d9c:       cmpq    %rcx, %rdx
    0.00 :   ffffffff810b6d9f:       jae     0xffffffff810b6a7e <update_load_avg+0xbe>
    0.00 :   ffffffff810b6da5:       lock
    0.00 :   ffffffff810b6da6:       addq    %rax, 0x100(%rsi)
    0.00 :   ffffffff810b6dad:       movq    0xa0(%rbx), %rax
    0.00 :   ffffffff810b6db4:       movq    %rax, 0x100(%rbx)
    0.00 :   ffffffff810b6dbb:       addq    $0x20, %rsp
    0.00 :   ffffffff810b6dbf:       popq    %rbx
    0.00 :   ffffffff810b6dc0:       popq    %r12
    0.00 :   ffffffff810b6dc2:       popq    %r13
    0.00 :   ffffffff810b6dc4:       popq    %r14
    0.00 :   ffffffff810b6dc6:       popq    %r15
    0.00 :   ffffffff810b6dc8:       popq    %rbp
    0.00 :   ffffffff810b6dc9:       xorl    %eax, %eax
    0.00 :   ffffffff810b6dcb:       xorl    %edx, %edx
    0.00 :   ffffffff810b6dcd:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b6dcf:       xorl    %esi, %esi
    0.00 :   ffffffff810b6dd1:       xorl    %edi, %edi
    0.00 :   ffffffff810b6dd3:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b6dd6:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b6dd9:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b6ddc:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b6de1:       movl    0x9c(%rbx), %eax
    0.00 :   ffffffff810b6de7:       leaq    0xc0(%rbx), %rdi
    0.00 :   ffffffff810b6dee:       movq    %rdi, -0x40(%rbp)
    0.00 :   ffffffff810b6df2:       leal    0xb67e(%rax), %edx
    0.00 :   ffffffff810b6df8:       movl    %edx, -0x44(%rbp)
    0.00 :   ffffffff810b6dfb:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff810b6e00:       movq    0xd0(%rbx), %rsi
    0.00 :   ffffffff810b6e07:       movq    0xc8(%rbx), %r8
    0.00 :   ffffffff810b6e0e:       movq    -0x40(%rbp), %rdi
    0.00 :   ffffffff810b6e12:       movq    0xd8(%rbx), %r15
    0.00 :   ffffffff810b6e19:       movq    $0x0, 0xd0(%rbx)
    0.00 :   ffffffff810b6e24:       movq    $0x0, 0xc8(%rbx)
    0.00 :   ffffffff810b6e2f:       movq    $0x0, 0xd8(%rbx)
    0.00 :   ffffffff810b6e3a:       movl    $0x0, 0xc4(%rbx)
    0.00 :   ffffffff810b6e44:       movq    %rsi, -0x38(%rbp)
    0.00 :   ffffffff810b6e48:       movq    %r8, -0x30(%rbp)
    0.00 :   ffffffff810b6e4c:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff810b6e51:       movq    0xa0(%rbx), %rax
    0.00 :   ffffffff810b6e58:       movq    -0x30(%rbp), %r8
    0.00 :   ffffffff810b6e5c:       movq    -0x38(%rbp), %rsi
    0.00 :   ffffffff810b6e60:       movl    -0x44(%rbp), %edx
    0.00 :   ffffffff810b6e63:       subq    %r8, %rax
    0.00 :   ffffffff810b6e66:       jb      0xffffffff810b6f4d <update_load_avg+0x58d>
    0.00 :   ffffffff810b6e6c:       imull   $0xb67e, %eax, %edi # imm = 0xB67E
    0.00 :   ffffffff810b6e72:       movl    %edx, %ecx
    0.00 :   ffffffff810b6e74:       movq    %rax, 0xa0(%rbx)
    0.00 :   ffffffff810b6e7b:       movq    0x88(%rbx), %rax
    0.00 :   ffffffff810b6e82:       imulq   %rcx, %r8
    0.00 :   ffffffff810b6e86:       subq    %r8, %rax
    0.00 :   ffffffff810b6e89:       jb      0xffffffff810b6ff2 <update_load_avg+0x632>
    0.00 :   ffffffff810b6e8f:       cmpl    %eax, %edi
    0.00 :   ffffffff810b6e91:       cmovbl  %eax, %edi
    0.00 :   ffffffff810b6e94:       movq    %rax, 0x88(%rbx)
    0.00 :   ffffffff810b6e9b:       movl    %edi, %eax
    0.00 :   ffffffff810b6e9d:       movq    %rax, 0x88(%rbx)
    0.00 :   ffffffff810b6ea4:       movq    0xb0(%rbx), %rax
    0.00 :   ffffffff810b6eab:       subq    %rsi, %rax
    0.00 :   ffffffff810b6eae:       jb      0xffffffff810b6fe9 <update_load_avg+0x629>
    0.00 :   ffffffff810b6eb4:       imull   $0xb67e, %eax, %edi # imm = 0xB67E
    0.00 :   ffffffff810b6eba:       imull   %esi, %edx
    0.00 :   ffffffff810b6ebd:       movq    %rax, 0xb0(%rbx)
    0.00 :   ffffffff810b6ec4:       movl    0x98(%rbx), %eax
    0.00 :   ffffffff810b6eca:       subl    %edx, %eax
    0.00 :   ffffffff810b6ecc:       jb      0xffffffff810b6fe2 <update_load_avg+0x622>
    0.00 :   ffffffff810b6ed2:       cmpl    %eax, %edi
    0.00 :   ffffffff810b6ed4:       cmovbl  %eax, %edi
    0.00 :   ffffffff810b6ed7:       movl    %eax, 0x98(%rbx)
    0.00 :   ffffffff810b6edd:       movq    0xa8(%rbx), %rax
    0.00 :   ffffffff810b6ee4:       movl    %edi, 0x98(%rbx)
    0.00 :   ffffffff810b6eea:       subq    %r15, %rax
    0.00 :   ffffffff810b6eed:       jb      0xffffffff810b6fd9 <update_load_avg+0x619>
    0.00 :   ffffffff810b6ef3:       imull   $0xb67e, %eax, %edx # imm = 0xB67E
    0.00 :   ffffffff810b6ef9:       imulq   %rcx, %r15
    0.00 :   ffffffff810b6efd:       movq    %rax, 0xa8(%rbx)
    0.00 :   ffffffff810b6f04:       movq    0x90(%rbx), %rax
    0.00 :   ffffffff810b6f0b:       subq    %r15, %rax
    0.00 :   ffffffff810b6f0e:       jb      0xffffffff810b6fd2 <update_load_avg+0x612>
    0.00 :   ffffffff810b6f14:       cmpl    %eax, %edx
    0.00 :   ffffffff810b6f16:       cmovbl  %eax, %edx
    0.00 :   ffffffff810b6f19:       movq    %rax, 0x90(%rbx)
    0.00 :   ffffffff810b6f20:       negq    %r15
    0.00 :   ffffffff810b6f23:       movl    %edx, %eax
    0.00 :   ffffffff810b6f25:       sarq    $0xa, %r15
    0.00 :   ffffffff810b6f29:       movq    %rax, 0x90(%rbx)
    0.00 :   ffffffff810b6f30:       addq    %r15, 0x110(%rbx)
    0.00 :   ffffffff810b6f37:       movq    $0x1, 0x108(%rbx)
    0.00 :   ffffffff810b6f42:       movl    $0x1, %r15d
    0.00 :   ffffffff810b6f48:       jmp     0xffffffff810b6a30 <update_load_avg+0x70>
    0.00 :   ffffffff810b6f4d:       xorl    %edi, %edi
    0.00 :   ffffffff810b6f4f:       xorl    %eax, %eax
    0.00 :   ffffffff810b6f51:       jmp     0xffffffff810b6e72 <update_load_avg+0x4b2>
    0.00 :   ffffffff810b6f56:       cmpq    $0x0, 0xc0(%r12)
    0.00 :   ffffffff810b6f5f:       jne     0xffffffff810b6d15 <update_load_avg+0x355>
    0.00 :   ffffffff810b6f65:       testb   $0x4, %r14b
    0.00 :   ffffffff810b6f69:       je      0xffffffff810b6d15 <update_load_avg+0x355>
    0.00 :   ffffffff810b6f6f:       movq    %r12, %rsi
    0.00 :   ffffffff810b6f72:       movq    %rbx, %rdi
    0.00 :   ffffffff810b6f75:       callq   0xffffffff810b6240 <attach_entity_load_avg>
    0.00 :   ffffffff810b6f7a:       jmp     0xffffffff810b6d69 <update_load_avg+0x3a9>
    0.00 :   ffffffff810b6f7f:       movq    (%rdx), %rax
    0.00 :   ffffffff810b6f82:       testq   %rax, %rax
    0.00 :   ffffffff810b6f85:       je      0xffffffff810b6fa7 <update_load_avg+0x5e7>
    0.00 :   ffffffff810b6f87:       movl    $0x2, %r8d
    0.00 :   ffffffff810b6f8d:       shrq    $0xa, %rax
    0.00 :   ffffffff810b6f91:       cmpq    %r8, %rax
    0.00 :   ffffffff810b6f94:       cmovbq  %r8, %rax
    0.00 :   ffffffff810b6f98:       movl    %eax, %r8d
    0.00 :   ffffffff810b6f9b:       movq    0x88(%rdx), %rax
    0.00 :   ffffffff810b6fa2:       xorl    %edx, %edx
    0.00 :   ffffffff810b6fa4:       divq    %r8
    0.00 :   ffffffff810b6fa7:       movq    0xc8(%r12), %rdx
    0.00 :   ffffffff810b6faf:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b6fb2:       cmovaq  %rdx, %rax
    0.00 :   ffffffff810b6fb6:       jmp     0xffffffff810b6c41 <update_load_avg+0x281>
    0.00 :   ffffffff810b6fbb:       imull   $0xb67e, %eax, %edi # imm = 0xB67E
    0.00 :   ffffffff810b6fc1:       jmp     0xffffffff810b6bc7 <update_load_avg+0x207>
    0.00 :   ffffffff810b6fc6:       imull   $0xb67e, %eax, %r8d # imm = 0xB67E
    0.00 :   ffffffff810b6fcd:       jmp     0xffffffff810b6b32 <update_load_avg+0x172>
    0.00 :   ffffffff810b6fd2:       xorl    %eax, %eax
    0.00 :   ffffffff810b6fd4:       jmp     0xffffffff810b6f19 <update_load_avg+0x559>
    0.00 :   ffffffff810b6fd9:       xorl    %edx, %edx
    0.00 :   ffffffff810b6fdb:       xorl    %eax, %eax
    0.00 :   ffffffff810b6fdd:       jmp     0xffffffff810b6ef9 <update_load_avg+0x539>
    0.00 :   ffffffff810b6fe2:       xorl    %eax, %eax
    0.00 :   ffffffff810b6fe4:       jmp     0xffffffff810b6ed7 <update_load_avg+0x517>
    0.00 :   ffffffff810b6fe9:       xorl    %edi, %edi
    0.00 :   ffffffff810b6feb:       xorl    %eax, %eax
    0.00 :   ffffffff810b6fed:       jmp     0xffffffff810b6eba <update_load_avg+0x4fa>
    0.00 :   ffffffff810b6ff2:       xorl    %eax, %eax
    0.00 :   ffffffff810b6ff4:       jmp     0xffffffff810b6e94 <update_load_avg+0x4d4>
    0.00 :   ffffffff810b6ff9:       cmpl    %eax, %edi
    0.00 :   ffffffff810b6ffb:       cmovbl  %eax, %edi
    0.00 :   ffffffff810b6ffe:       jmp     0xffffffff810b6bed <update_load_avg+0x22d>
    0.00 :   ffffffff810b7003:       cmpl    %eax, %r8d
    0.00 :   ffffffff810b7006:       cmovbl  %eax, %r8d
    0.00 :   ffffffff810b700a:       jmp     0xffffffff810b6b58 <update_load_avg+0x198>
    0.00 :   ffffffff810b700f:       xorl    %eax, %eax
    0.00 :   ffffffff810b7011:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b7014:       jmp     0xffffffff810b6c82 <update_load_avg+0x2c2>
    0.00 :   ffffffff810b7019:       movq    0x178(%rdi), %r13
    0.00 :   ffffffff810b7020:       subq    %rdx, %r13
    0.00 :   ffffffff810b7023:       jmp     0xffffffff810b6a07 <update_load_avg+0x47>
    0.00 :   ffffffff810b7028:       cmpq    $0x0, 0xc0(%r12)
    0.00 :   ffffffff810b7031:       je      0xffffffff810b6a62 <update_load_avg+0xa2>
    0.00 :   ffffffff810b7037:       jmp     0xffffffff810b6d15 <update_load_avg+0x355>
    0.00 :   ffffffff810b703c:       cmpl    %eax, %edx
    0.00 :   ffffffff810b703e:       cmovbl  %eax, %edx
    0.00 :   ffffffff810b7041:       jmp     0xffffffff810b6cf6 <update_load_avg+0x336>
    0.00 :   ffffffff810b7046:       imull   $0xb67e, %eax, %edx # imm = 0xB67E
    0.00 :   ffffffff810b704c:       jmp     0xffffffff810b6cd0 <update_load_avg+0x310>
    0.00 :   ffffffff810b7051:       movslq  0xa60(%rax), %rcx
    0.00 :   ffffffff810b7058:       movq    $0x1b288, %rdx  # imm = 0x1B288
    0.00 :   ffffffff810b705f:       addq    -0x7dedc720(,%rcx,8), %rdx
    0.00 :   ffffffff810b7067:       movq    (%rdx), %rdi
    0.00 :   ffffffff810b706a:       testq   %rdi, %rdi
    0.00 :   ffffffff810b706d:       je      0xffffffff810b6d32 <update_load_avg+0x372>
    0.00 :   ffffffff810b7073:       movq    0x9a0(%rax), %rsi
    0.00 :   ffffffff810b707a:       xorl    %edx, %edx
    0.00 :   ffffffff810b707c:       movq    (%rdi), %rax
    0.00 :   ffffffff810b707f:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff810b7084:       jmp     0xffffffff810b6d32 <update_load_avg+0x372>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8108da20 <__queue_work>:
         : 5                ; __queue_work():
    0.00 :   ffffffff8108da20:       pushq   %rbp
    0.00 :   ffffffff8108da21:       movq    %rsp, %rbp
    0.00 :   ffffffff8108da24:       pushq   %r15
    0.00 :   ffffffff8108da26:       pushq   %r14
    0.00 :   ffffffff8108da28:       pushq   %r13
    0.00 :   ffffffff8108da2a:       movl    %edi, %r13d
    0.00 :   ffffffff8108da2d:       pushq   %r12
    0.00 :   ffffffff8108da2f:       movq    %rsi, %r12
    0.00 :   ffffffff8108da32:       pushq   %rbx
    0.00 :   ffffffff8108da33:       movq    %rdx, %rbx
    0.00 :   ffffffff8108da36:       subq    $0x8, %rsp
    0.00 :   ffffffff8108da3a:       testl   $0x18000, 0x100(%rsi) # imm = 0x18000
    0.00 :   ffffffff8108da44:       movl    %edi, %r14d
    0.00 :   ffffffff8108da47:       jne     0xffffffff8108dcee <__queue_work+0x2ce>
    0.00 :   ffffffff8108da4d:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff8108da52:       testb   $0x2, 0x100(%r12)
    0.00 :   ffffffff8108da5b:       je      0xffffffff8108daa2 <__queue_work+0x82>
    0.00 :   ffffffff8108da5d:       cmpl    $0x80, %r14d
    0.00 :   ffffffff8108da64:       je      0xffffffff8108dc90 <__queue_work+0x270>
    0.00 :   ffffffff8108da6a:       movslq  %r13d, %rdx
    0.00 :   ffffffff8108da6d:       movq    $0x20740, %rax  # imm = 0x20740
    0.00 :   ffffffff8108da74:       movq    -0x7dedc720(,%rdx,8), %rdx
    0.00 :   ffffffff8108da7c:       movslq  (%rdx,%rax), %rax
    0.00 :   ffffffff8108da80:       cmpl    $-0x1, %eax
    0.00 :   ffffffff8108da83:       je      0xffffffff8108dcd9 <__queue_work+0x2b9>
    0.00 :   ffffffff8108da89:       addq    $0x22, %rax
    0.00 :   ffffffff8108da8d:       movq    (%r12,%rax,8), %r15
    0.00 :   ffffffff8108da91:       movq    (%rbx), %rsi
    0.00 :   ffffffff8108da94:       testb   $0x4, %sil
    0.00 :   ffffffff8108da98:       je      0xffffffff8108dacb <__queue_work+0xab>
    0.00 :   ffffffff8108da9a:       xorb    %sil, %sil
    0.00 :   ffffffff8108da9d:       movq    (%rsi), %rdi
    0.00 :   ffffffff8108daa0:       jmp     0xffffffff8108daed <__queue_work+0xcd>
    0.00 :   ffffffff8108daa2:       cmpl    $0x80, %r14d
    0.00 :   ffffffff8108daa9:       je      0xffffffff8108dc83 <__queue_work+0x263>
    0.00 :   ffffffff8108daaf:       movslq  %r13d, %rax
    0.00 :   ffffffff8108dab2:       movq    0x108(%r12), %r15
    0.00 :   ffffffff8108daba:       addq    -0x7dedc720(,%rax,8), %r15
    0.00 :   ffffffff8108dac2:       movq    (%rbx), %rsi
    0.00 :   ffffffff8108dac5:       testb   $0x4, %sil
    0.00 :   ffffffff8108dac9:       jne     0xffffffff8108da9a <__queue_work+0x7a>
    0.00 :   ffffffff8108dacb:       shrq    $0x5, %rsi
    0.00 :   ffffffff8108dacf:       cmpl    $0x7fffffff, %esi # imm = 0x7FFFFFFF
    0.00 :   ffffffff8108dad5:       je      0xffffffff8108db89 <__queue_work+0x169>
    0.00 :   ffffffff8108dadb:       movq    $-0x7ddcb440, %rdi # imm = 0x82234BC0
    0.00 :   ffffffff8108dae2:       movslq  %esi, %rsi
   26.74 :   ffffffff8108dae5:       callq   0xffffffff81b3fa80 <idr_find>
    0.00 :   ffffffff8108daea:       movq    %rax, %rdi
    0.00 :   ffffffff8108daed:       testq   %rdi, %rdi
    0.00 :   ffffffff8108daf0:       movq    (%r15), %rax
    0.00 :   ffffffff8108daf3:       je      0xffffffff8108ddba <__queue_work+0x39a>
    0.00 :   ffffffff8108daf9:       cmpq    %rdi, %rax
    0.00 :   ffffffff8108dafc:       je      0xffffffff8108db8c <__queue_work+0x16c>
    0.00 :   ffffffff8108db02:       movq    %rdi, -0x30(%rbp)
    0.00 :   ffffffff8108db06:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff8108db0b:       movabsq $0x61c8864680b583eb, %rax # imm = 0x61C8864680B583EB
    0.00 :   ffffffff8108db15:       movq    -0x30(%rbp), %rdi
    0.00 :   ffffffff8108db19:       imulq   %rbx, %rax
    0.00 :   ffffffff8108db1d:       shrq    $0x3a, %rax
    0.00 :   ffffffff8108db21:       movq    0xc0(%rdi,%rax,8), %rdx
    0.00 :   ffffffff8108db29:       testq   %rdx, %rdx
    0.00 :   ffffffff8108db2c:       jne     0xffffffff8108db38 <__queue_work+0x118>
    0.00 :   ffffffff8108db2e:       jmp     0xffffffff8108db56 <__queue_work+0x136>
    0.00 :   ffffffff8108db30:       movq    (%rdx), %rdx
    0.00 :   ffffffff8108db33:       testq   %rdx, %rdx
    0.00 :   ffffffff8108db36:       je      0xffffffff8108db56 <__queue_work+0x136>
    0.00 :   ffffffff8108db38:       cmpq    0x10(%rdx), %rbx
    0.00 :   ffffffff8108db3c:       jne     0xffffffff8108db30 <__queue_work+0x110>
    0.00 :   ffffffff8108db3e:       movq    0x18(%rbx), %rax
    0.00 :   ffffffff8108db42:       cmpq    %rax, 0x18(%rdx)
    0.00 :   ffffffff8108db46:       jne     0xffffffff8108db30 <__queue_work+0x110>
    0.00 :   ffffffff8108db48:       movq    0x20(%rdx), %rax
    0.00 :   ffffffff8108db4c:       cmpq    %r12, 0x8(%rax)
    0.00 :   ffffffff8108db50:       je      0xffffffff8108dce6 <__queue_work+0x2c6>
    0.00 :   ffffffff8108db56:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff8108db5b:       movq    (%r15), %rdi
    0.00 :   ffffffff8108db5e:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff8108db63:       movl    0x18(%r15), %edx
    0.00 :   ffffffff8108db67:       testl   %edx, %edx
    0.00 :   ffffffff8108db69:       jne     0xffffffff8108db99 <__queue_work+0x179>
    0.00 :   ffffffff8108db6b:       testb   $0x2, 0x100(%r12)
    0.00 :   ffffffff8108db74:       je      0xffffffff8108dde7 <__queue_work+0x3c7>
    0.00 :   ffffffff8108db7a:       movq    (%r15), %rdi
    0.00 :   ffffffff8108db7d:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff8108db82:       pause
    0.00 :   ffffffff8108db84:       jmp     0xffffffff8108da52 <__queue_work+0x32>
    0.00 :   ffffffff8108db89:       movq    (%r15), %rdi
    0.00 :   ffffffff8108db8c:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff8108db91:       movl    0x18(%r15), %edx
    0.00 :   ffffffff8108db95:       testl   %edx, %edx
    0.00 :   ffffffff8108db97:       je      0xffffffff8108db6b <__queue_work+0x14b>
    0.00 :   ffffffff8108db99:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff8108db9d:       movq    (%r15), %rdi
    0.00 :   ffffffff8108dba0:       leaq    0x8(%rbx), %rsi
    0.00 :   ffffffff8108dba4:       cmpq    %rax, %rsi
    0.00 :   ffffffff8108dba7:       movq    %rdi, %rdx
    0.00 :   ffffffff8108dbaa:       jne     0xffffffff8108dd31 <__queue_work+0x311>
    0.00 :   ffffffff8108dbb0:       movslq  0x10(%r15), %rcx
    0.00 :   ffffffff8108dbb4:       incl    0x1c(%r15,%rcx,4)
    0.00 :   ffffffff8108dbb9:       movq    %rcx, %rax
    0.00 :   ffffffff8108dbbc:       shll    $0x4, %eax
    0.00 :   ffffffff8108dbbf:       movl    0x5c(%r15), %ecx
    0.00 :   ffffffff8108dbc3:       cmpl    0x60(%r15), %ecx
    0.00 :   ffffffff8108dbc7:       jge     0xffffffff8108dd38 <__queue_work+0x318>
    0.00 :   ffffffff8108dbcd:       incl    %ecx
    0.00 :   ffffffff8108dbcf:       movl    %ecx, 0x5c(%r15)
    0.00 :   ffffffff8108dbd3:       leaq    0x28(%rdi), %rcx
    0.00 :   ffffffff8108dbd7:       movq    0x28(%rdi), %rdi
    0.00 :   ffffffff8108dbdb:       cmpq    %rdi, %rcx
    0.00 :   ffffffff8108dbde:       je      0xffffffff8108dc70 <__queue_work+0x250>
    0.00 :   ffffffff8108dbe4:       movq    (%rbx), %rdi
    0.00 :   ffffffff8108dbe7:       orl     $0x5, %eax
    0.00 :   ffffffff8108dbea:       andl    $0x1, %edi
    0.00 :   ffffffff8108dbed:       je      0xffffffff8108dd44 <__queue_work+0x324>
    0.00 :   ffffffff8108dbf3:       orq     %r15, %rax
    0.00 :   ffffffff8108dbf6:       movq    %rax, (%rbx)
    0.00 :   ffffffff8108dbf9:       movq    0x8(%rcx), %rax
    0.00 :   ffffffff8108dbfd:       movq    %rsi, 0x8(%rcx)
    0.00 :   ffffffff8108dc01:       movq    %rcx, 0x8(%rbx)
    0.00 :   ffffffff8108dc05:       movq    %rax, 0x10(%rbx)
    0.00 :   ffffffff8108dc09:       movq    %rsi, (%rax)
    0.00 :   ffffffff8108dc0c:       movl    0x18(%r15), %eax
    0.00 :   ffffffff8108dc10:       testl   %eax, %eax
    0.00 :   ffffffff8108dc12:       jle     0xffffffff8108dd4b <__queue_work+0x32b>
    0.00 :   ffffffff8108dc18:       incl    %eax
    0.00 :   ffffffff8108dc1a:       movl    %eax, 0x18(%r15)
    0.00 :   ffffffff8108dc1e:       movl    0x24(%rdx), %eax
    0.00 :   ffffffff8108dc21:       testl   %eax, %eax
    0.00 :   ffffffff8108dc23:       je      0xffffffff8108dc4f <__queue_work+0x22f>
    0.00 :   ffffffff8108dc25:       movq    (%r15), %rdi
    0.00 :   ffffffff8108dc28:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff8108dc2d:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff8108dc32:       addq    $0x8, %rsp
    0.00 :   ffffffff8108dc36:       popq    %rbx
    0.00 :   ffffffff8108dc37:       popq    %r12
    0.00 :   ffffffff8108dc39:       popq    %r13
    0.00 :   ffffffff8108dc3b:       popq    %r14
    0.00 :   ffffffff8108dc3d:       popq    %r15
    0.00 :   ffffffff8108dc3f:       popq    %rbp
    0.00 :   ffffffff8108dc40:       xorl    %eax, %eax
    0.00 :   ffffffff8108dc42:       xorl    %edx, %edx
    0.00 :   ffffffff8108dc44:       xorl    %ecx, %ecx
    0.00 :   ffffffff8108dc46:       xorl    %esi, %esi
    0.00 :   ffffffff8108dc48:       xorl    %edi, %edi
    0.00 :   ffffffff8108dc4a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8108dc4f:       movq    0x40(%rdx), %rcx
    0.00 :   ffffffff8108dc53:       leaq    0x40(%rdx), %rax
    0.00 :   ffffffff8108dc57:       cmpq    %rax, %rcx
    0.00 :   ffffffff8108dc5a:       je      0xffffffff8108dc25 <__queue_work+0x205>
    0.00 :   ffffffff8108dc5c:       movq    0x40(%rdx), %rax
   39.16 :   ffffffff8108dc60:       testq   %rax, %rax
    0.00 :   ffffffff8108dc63:       je      0xffffffff8108dc25 <__queue_work+0x205>
   34.10 :   ffffffff8108dc65:       movq    0x40(%rax), %rdi
    0.00 :   ffffffff8108dc69:       callq   0xffffffff810b25c0 <wake_up_process>
    0.00 :   ffffffff8108dc6e:       jmp     0xffffffff8108dc25 <__queue_work+0x205>
    0.00 :   ffffffff8108dc70:       movq    0x1179d49(%rip), %rdi # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff8108dc77:       movq    %rdi, 0x18(%rdx)
    0.00 :   ffffffff8108dc7b:       movq    (%r15), %rdx
    0.00 :   ffffffff8108dc7e:       jmp     0xffffffff8108dbe4 <__queue_work+0x1c4>
    0.00 :   ffffffff8108dc83:       movl    %gs:0x7ef94a81(%rip), %r13d
    0.00 :   ffffffff8108dc8b:       jmp     0xffffffff8108daaf <__queue_work+0x8f>
    0.00 :   ffffffff8108dc90:       movl    %gs:0x7ef94a74(%rip), %r15d
    0.00 :   ffffffff8108dc98:       cmpb    $0x0, 0x15fb861(%rip) # 0xffffffff82689500 <wq_debug_force_rr_cpu>
    0.00 :   ffffffff8108dc9f:       jne     0xffffffff8108ddc2 <__queue_work+0x3a2>
    0.00 :   ffffffff8108dca5:       movl    %r15d, %eax
    0.00 :   ffffffff8108dca8:       btq     %rax, 0x15fb860(%rip) # 0xffffffff82689510 <wq_unbound_cpumask>
    0.00 :   ffffffff8108dcb0:       jb      0xffffffff8108dcd1 <__queue_work+0x2b1>
    0.00 :   ffffffff8108dcb2:       movl    0x12d8da7(%rip), %r13d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8108dcb9:       movq    $-0x7d976af0, %rdi # imm = 0x82689510
    0.00 :   ffffffff8108dcc0:       movq    %r13, %rsi
    0.00 :   ffffffff8108dcc3:       callq   0xffffffff815a0660 <_find_first_bit>
    0.00 :   ffffffff8108dcc8:       cmpq    %rax, %r13
    0.00 :   ffffffff8108dccb:       jne     0xffffffff8108dd55 <__queue_work+0x335>
    0.00 :   ffffffff8108dcd1:       movl    %r15d, %r13d
    0.00 :   ffffffff8108dcd4:       jmp     0xffffffff8108da6a <__queue_work+0x4a>
    0.00 :   ffffffff8108dcd9:       movq    0xa0(%r12), %r15
    0.00 :   ffffffff8108dce1:       jmp     0xffffffff8108dac2 <__queue_work+0xa2>
    0.00 :   ffffffff8108dce6:       movq    %rax, %r15
    0.00 :   ffffffff8108dce9:       jmp     0xffffffff8108db91 <__queue_work+0x171>
    0.00 :   ffffffff8108dcee:       movl    %gs:0x7ef94a13(%rip), %eax
    0.00 :   ffffffff8108dcf5:       testl   $0xff0100, %eax # imm = 0xFF0100
    0.00 :   ffffffff8108dcfa:       jne     0xffffffff8108dd12 <__queue_work+0x2f2>
    0.00 :   ffffffff8108dcfc:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff8108dd05:       testb   $0x20, 0x354(%rdi)
    0.00 :   ffffffff8108dd0c:       jne     0xffffffff8108dd99 <__queue_work+0x379>
    0.00 :   ffffffff8108dd12:       ud2
    0.00 :   ffffffff8108dd14:       addq    $0x8, %rsp
    0.00 :   ffffffff8108dd18:       popq    %rbx
    0.00 :   ffffffff8108dd19:       popq    %r12
    0.00 :   ffffffff8108dd1b:       popq    %r13
    0.00 :   ffffffff8108dd1d:       popq    %r14
    0.00 :   ffffffff8108dd1f:       popq    %r15
    0.00 :   ffffffff8108dd21:       popq    %rbp
    0.00 :   ffffffff8108dd22:       xorl    %eax, %eax
    0.00 :   ffffffff8108dd24:       xorl    %edx, %edx
    0.00 :   ffffffff8108dd26:       xorl    %ecx, %ecx
    0.00 :   ffffffff8108dd28:       xorl    %esi, %esi
    0.00 :   ffffffff8108dd2a:       xorl    %edi, %edi
    0.00 :   ffffffff8108dd2c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8108dd31:       ud2
    0.00 :   ffffffff8108dd33:       jmp     0xffffffff8108dc28 <__queue_work+0x208>
    0.00 :   ffffffff8108dd38:       leaq    0x68(%r15), %rcx
    0.00 :   ffffffff8108dd3c:       orl     $0x2, %eax
    0.00 :   ffffffff8108dd3f:       jmp     0xffffffff8108dbe4 <__queue_work+0x1c4>
    0.00 :   ffffffff8108dd44:       ud2
    0.00 :   ffffffff8108dd46:       jmp     0xffffffff8108dbf3 <__queue_work+0x1d3>
    0.00 :   ffffffff8108dd4b:       ud2
    0.00 :   ffffffff8108dd4d:       nopl    (%rax)
    0.00 :   ffffffff8108dd50:       jmp     0xffffffff8108dc18 <__queue_work+0x1f8>
    0.00 :   ffffffff8108dd55:       movl    0x12d8d05(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8108dd5b:       movq    $-0x7dc99790, %rsi # imm = 0x82366870
    0.00 :   ffffffff8108dd62:       movq    $-0x7d976af0, %rdi # imm = 0x82689510
    0.00 :   ffffffff8108dd69:       movl    %gs:0x7ef8d318(%rip), %ecx
    0.00 :   ffffffff8108dd70:       incl    %ecx
    0.00 :   ffffffff8108dd72:       movslq  %ecx, %rcx
    0.00 :   ffffffff8108dd75:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff8108dd7a:       movl    0x12d8ce0(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8108dd80:       movl    %eax, %ecx
    0.00 :   ffffffff8108dd82:       movl    %eax, %r13d
    0.00 :   ffffffff8108dd85:       cmpl    %edx, %eax
    0.00 :   ffffffff8108dd87:       jae     0xffffffff8108de19 <__queue_work+0x3f9>
    0.00 :   ffffffff8108dd8d:       movl    %ecx, %gs:0x7ef8d2f4(%rip)
    0.00 :   ffffffff8108dd94:       jmp     0xffffffff8108da6a <__queue_work+0x4a>
    0.00 :   ffffffff8108dd99:       callq   0xffffffff81096950 <kthread_data>
    0.00 :   ffffffff8108dd9e:       testq   %rax, %rax
    0.00 :   ffffffff8108dda1:       je      0xffffffff8108dd12 <__queue_work+0x2f2>
    0.00 :   ffffffff8108dda7:       movq    0x20(%rax), %rax
    0.00 :   ffffffff8108ddab:       cmpq    0x8(%rax), %r12
    0.00 :   ffffffff8108ddaf:       jne     0xffffffff8108dd12 <__queue_work+0x2f2>
    0.00 :   ffffffff8108ddb5:       jmp     0xffffffff8108da4d <__queue_work+0x2d>
    0.00 :   ffffffff8108ddba:       movq    %rax, %rdi
    0.00 :   ffffffff8108ddbd:       jmp     0xffffffff8108db8c <__queue_work+0x16c>
    0.00 :   ffffffff8108ddc2:       cmpb    $0x0, 0x12d5e7e(%rip) # 0xffffffff82363c47 <__already_done.17>
    0.00 :   ffffffff8108ddc9:       jne     0xffffffff8108dcb2 <__queue_work+0x292>
    0.00 :   ffffffff8108ddcf:       movq    $-0x7df7e608, %rdi # imm = 0x820819F8
    0.00 :   ffffffff8108ddd6:       movb    $0x1, 0x12d5e6a(%rip) # 0xffffffff82363c47 <__already_done.17>
    0.00 :   ffffffff8108dddd:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff8108dde2:       jmp     0xffffffff8108dcb2 <__queue_work+0x292>
    0.00 :   ffffffff8108dde7:       cmpb    $0x0, 0x12d5e58(%rip) # 0xffffffff82363c46 <__already_done.16>
    0.00 :   ffffffff8108ddee:       jne     0xffffffff8108db99 <__queue_work+0x179>
    0.00 :   ffffffff8108ddf4:       leaq    0xb0(%r12), %rsi
    0.00 :   ffffffff8108ddfc:       movl    %r13d, %edx
    0.00 :   ffffffff8108ddff:       movq    $-0x7df7e5b8, %rdi # imm = 0x82081A48
    0.00 :   ffffffff8108de06:       movb    $0x1, 0x12d5e39(%rip) # 0xffffffff82363c46 <__already_done.16>
    0.00 :   ffffffff8108de0d:       callq   0xffffffff81069e90 <__warn_printk>
    0.00 :   ffffffff8108de12:       ud2
    0.00 :   ffffffff8108de14:       jmp     0xffffffff8108db99 <__queue_work+0x179>
    0.00 :   ffffffff8108de19:       movq    $-0x7dc99790, %rsi # imm = 0x82366870
    0.00 :   ffffffff8108de20:       movq    $-0x7d976af0, %rdi # imm = 0x82689510
    0.00 :   ffffffff8108de27:       callq   0xffffffff815a06c0 <_find_first_and_bit>
    0.00 :   ffffffff8108de2c:       cmpl    0x12d8c2e(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8108de32:       movl    %eax, %ecx
    0.00 :   ffffffff8108de34:       movl    %eax, %r13d
    0.00 :   ffffffff8108de37:       jb      0xffffffff8108dd8d <__queue_work+0x36d>
    0.00 :   ffffffff8108de3d:       jmp     0xffffffff8108dcd1 <__queue_work+0x2b1>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b9850 <select_task_rq_fair>:
         : 5                ; select_task_rq_fair():
   70.85 :   ffffffff810b9850:       pushq   %rbp
    0.00 :   ffffffff810b9851:       movq    %rsp, %rbp
    0.00 :   ffffffff810b9854:       pushq   %r15
    0.00 :   ffffffff810b9856:       movl    %edx, %r15d
    0.00 :   ffffffff810b9859:       pushq   %r14
    0.00 :   ffffffff810b985b:       pushq   %r13
    0.00 :   ffffffff810b985d:       pushq   %r12
    0.00 :   ffffffff810b985f:       movq    %rdi, %r12
    0.00 :   ffffffff810b9862:       pushq   %rbx
    0.00 :   ffffffff810b9863:       movl    %esi, %ebx
    0.00 :   ffffffff810b9865:       subq    $0x68, %rsp
    0.00 :   ffffffff810b9869:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff810b986e:       movl    %edx, %eax
    0.00 :   ffffffff810b9870:       andl    $0x10, %eax
    0.00 :   ffffffff810b9873:       movl    %eax, -0x58(%rbp)
    0.00 :   ffffffff810b9876:       je      0xffffffff810b9893 <select_task_rq_fair+0x43>
    0.00 :   ffffffff810b9878:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810b9881:       movl    0x354(%rax), %eax
    0.00 :   ffffffff810b9887:       shrl    $0x2, %eax
    0.00 :   ffffffff810b988a:       xorl    $0x1, %eax
    0.00 :   ffffffff810b988d:       andl    $0x1, %eax
    0.00 :   ffffffff810b9890:       movl    %eax, -0x58(%rbp)
    0.00 :   ffffffff810b9893:       movl    %r15d, %r8d
    0.00 :   ffffffff810b9896:       movl    %r15d, %eax
    0.00 :   ffffffff810b9899:       movl    %gs:0x7ef68e6b(%rip), %r13d
    0.00 :   ffffffff810b98a1:       andl    $0xf, %r8d
    0.00 :   ffffffff810b98a5:       andl    $0x8, %eax
    0.00 :   ffffffff810b98a8:       movl    %r13d, -0x3c(%rbp)
    0.00 :   ffffffff810b98ac:       movl    %eax, -0x50(%rbp)
    0.00 :   ffffffff810b98af:       je      0xffffffff810b993c <select_task_rq_fair+0xec>
    0.00 :   ffffffff810b98b5:       movq    $0x0, -0x30(%rbp)
    0.00 :   ffffffff810b98bd:       movq    0x114e0fc(%rip), %rcx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810b98c4:       movl    $0x3e8, %eax    # imm = 0x3E8
    0.00 :   ffffffff810b98c9:       movq    %gs:0x22700, %rdx
    0.00 :   ffffffff810b98d2:       subq    %rcx, %rax
    0.00 :   ffffffff810b98d5:       addq    0x918(%rdx), %rax
    0.00 :   ffffffff810b98dc:       js      0xffffffff810b9a27 <select_task_rq_fair+0x1d7>
    0.00 :   ffffffff810b98e2:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810b98eb:       cmpq    0x198(%rax), %r12
    0.00 :   ffffffff810b98f2:       je      0xffffffff810b9901 <select_task_rq_fair+0xb1>
    0.00 :   ffffffff810b98f4:       incl    0x110(%rax)
    0.00 :   ffffffff810b98fa:       movq    %r12, 0x198(%rax)
    0.00 :   ffffffff810b9901:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810b990a:       movl    0x110(%rax), %edx
    0.00 :   ffffffff810b9910:       movl    0x110(%r12), %eax
    0.00 :   ffffffff810b9918:       movl    %gs:0x7ef61995(%rip), %ecx
    0.00 :   ffffffff810b991f:       movl    %edx, %esi
    0.00 :   ffffffff810b9921:       cmpl    %eax, %edx
    0.00 :   ffffffff810b9923:       cmovbl  %eax, %edx
    0.00 :   ffffffff810b9926:       cmovbl  %esi, %eax
    0.00 :   ffffffff810b9929:       cmpl    %ecx, %eax
    0.00 :   ffffffff810b992b:       jb      0xffffffff810b9a40 <select_task_rq_fair+0x1f0>
    0.00 :   ffffffff810b9931:       imull   %eax, %ecx
    0.00 :   ffffffff810b9934:       cmpl    %ecx, %edx
    0.00 :   ffffffff810b9936:       jb      0xffffffff810b9a40 <select_task_rq_fair+0x1f0>
    0.00 :   ffffffff810b993c:       xorl    %esi, %esi
    0.00 :   ffffffff810b993e:       movl    %r8d, -0x48(%rbp)
    0.00 :   ffffffff810b9942:       movl    %esi, -0x38(%rbp)
    0.00 :   ffffffff810b9945:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff810b994a:       movslq  %r13d, %rdx
    0.00 :   ffffffff810b994d:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810b9954:       addq    -0x7dedc720(,%rdx,8), %rax
    0.00 :   ffffffff810b995c:       movq    0x9f8(%rax), %r14
    0.00 :   ffffffff810b9963:       testq   %r14, %r14
    0.00 :   ffffffff810b9966:       je      0xffffffff810b9987 <select_task_rq_fair+0x137>
    0.00 :   ffffffff810b9968:       movl    -0x38(%rbp), %esi
    0.00 :   ffffffff810b996b:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b996d:       movl    -0x48(%rbp), %r8d
    0.00 :   ffffffff810b9971:       movl    0x3c(%r14), %eax
    0.00 :   ffffffff810b9975:       testl   %esi, %esi
    0.00 :   ffffffff810b9977:       jne     0xffffffff810b99da <select_task_rq_fair+0x18a>
    0.00 :   ffffffff810b9979:       testl   %eax, %r8d
    0.00 :   ffffffff810b997c:       jne     0xffffffff810b99c4 <select_task_rq_fair+0x174>
    0.00 :   ffffffff810b997e:       testq   %rcx, %rcx
    0.00 :   ffffffff810b9981:       jne     0xffffffff810ba230 <select_task_rq_fair+0x9e0>
    0.00 :   ffffffff810b9987:       movl    %ebx, -0x3c(%rbp)
    0.00 :   ffffffff810b998a:       movl    -0x50(%rbp), %esi
    0.00 :   ffffffff810b998d:       testl   %esi, %esi
    0.00 :   ffffffff810b998f:       jne     0xffffffff810b9a5a <select_task_rq_fair+0x20a>
    0.00 :   ffffffff810b9995:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff810b999a:       movl    -0x3c(%rbp), %eax
    0.00 :   ffffffff810b999d:       addq    $0x68, %rsp
    0.00 :   ffffffff810b99a1:       popq    %rbx
    0.00 :   ffffffff810b99a2:       popq    %r12
    0.00 :   ffffffff810b99a4:       popq    %r13
    0.00 :   ffffffff810b99a6:       popq    %r14
    0.00 :   ffffffff810b99a8:       popq    %r15
    0.00 :   ffffffff810b99aa:       popq    %rbp
    0.00 :   ffffffff810b99ab:       xorl    %edx, %edx
    0.00 :   ffffffff810b99ad:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b99af:       xorl    %esi, %esi
    0.00 :   ffffffff810b99b1:       xorl    %edi, %edi
    0.00 :   ffffffff810b99b3:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b99b6:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b99b9:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b99bc:       xorl    %r11d, %r11d
    0.00 :   ffffffff810b99bf:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b99c4:       movq    (%r14), %rax
    0.00 :   ffffffff810b99c7:       movq    %r14, %rcx
    0.00 :   ffffffff810b99ca:       testq   %rax, %rax
    0.00 :   ffffffff810b99cd:       je      0xffffffff810b997e <select_task_rq_fair+0x12e>
    0.00 :   ffffffff810b99cf:       movq    %rax, %r14
    0.00 :   ffffffff810b99d2:       testl   %esi, %esi
    0.00 :   ffffffff810b99d4:       movl    0x3c(%r14), %eax
    0.00 :   ffffffff810b99d8:       je      0xffffffff810b9979 <select_task_rq_fair+0x129>
    0.00 :   ffffffff810b99da:       movl    %ebx, %edi
    0.00 :   ffffffff810b99dc:       testb   $0x10, %al
    0.00 :   ffffffff810b99de:       je      0xffffffff810b9a0b <select_task_rq_fair+0x1bb>
    0.00 :   ffffffff810b99e0:       btq     %rdi, 0x90(%r14)
    0.00 :   ffffffff810b99e8:       jb      0xffffffff810b9f59 <select_task_rq_fair+0x709>
    0.00 :   ffffffff810b99ee:       movl    %r8d, %eax
    0.00 :   ffffffff810b99f1:       andl    0x3c(%r14), %eax
    0.00 :   ffffffff810b99f5:       jne     0xffffffff810b9a10 <select_task_rq_fair+0x1c0>
    0.00 :   ffffffff810b99f7:       movq    (%r14), %r14
    0.00 :   ffffffff810b99fa:       testq   %r14, %r14
    0.00 :   ffffffff810b99fd:       je      0xffffffff810b997e <select_task_rq_fair+0x12e>
    0.00 :   ffffffff810b9a03:       movl    0x3c(%r14), %eax
    0.00 :   ffffffff810b9a07:       testb   $0x10, %al
    0.00 :   ffffffff810b9a09:       jne     0xffffffff810b99e0 <select_task_rq_fair+0x190>
    0.00 :   ffffffff810b9a0b:       testl   %eax, %r8d
    0.00 :   ffffffff810b9a0e:       je      0xffffffff810b99f7 <select_task_rq_fair+0x1a7>
    0.00 :   ffffffff810b9a10:       movq    (%r14), %rsi
    0.00 :   ffffffff810b9a13:       testq   %rsi, %rsi
    0.00 :   ffffffff810b9a16:       je      0xffffffff810ba579 <select_task_rq_fair+0xd29>
    0.00 :   ffffffff810b9a1c:       movq    %r14, %rcx
    0.00 :   ffffffff810b9a1f:       movl    0x3c(%rsi), %eax
    0.00 :   ffffffff810b9a22:       movq    %rsi, %r14
    0.00 :   ffffffff810b9a25:       jmp     0xffffffff810b99dc <select_task_rq_fair+0x18c>
    0.00 :   ffffffff810b9a27:       movq    0x114df92(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810b9a2e:       shrl    0x110(%rdx)
    0.00 :   ffffffff810b9a34:       movq    %rax, 0x918(%rdx)
    0.00 :   ffffffff810b9a3b:       jmp     0xffffffff810b98e2 <select_task_rq_fair+0x92>
    0.00 :   ffffffff810b9a40:       movq    0x2e8(%r12), %rax
    0.00 :   ffffffff810b9a48:       movl    %r13d, %edx
    0.00 :   ffffffff810b9a4b:       xorl    %esi, %esi
    0.00 :   ffffffff810b9a4d:       btq     %rdx, (%rax)
    0.00 :   ffffffff810b9a51:       setb    %sil
    0.00 :   ffffffff810b9a55:       jmp     0xffffffff810b993e <select_task_rq_fair+0xee>
    0.00 :   ffffffff810b9a5a:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b9a5f:       xorl    %r14d, %r14d
    0.00 :   ffffffff810b9a62:       movl    -0x3c(%rbp), %r15d
    0.00 :   ffffffff810b9a66:       movl    %r15d, %edi
    0.00 :   ffffffff810b9a69:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810b9a6e:       testl   %eax, %eax
    0.00 :   ffffffff810b9a70:       jne     0xffffffff810b9f0a <select_task_rq_fair+0x6ba>
    0.00 :   ffffffff810b9a76:       movslq  %r15d, %rsi
    0.00 :   ffffffff810b9a79:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810b9a80:       addq    -0x7dedc720(,%rsi,8), %rax
    0.00 :   ffffffff810b9a88:       movq    %rsi, -0x78(%rbp)
    0.00 :   ffffffff810b9a8c:       movl    0x4(%rax), %edx
    0.00 :   ffffffff810b9a8f:       cmpl    %edx, 0x9c(%rax)
    0.00 :   ffffffff810b9a95:       jne     0xffffffff810b9a9f <select_task_rq_fair+0x24f>
    0.00 :   ffffffff810b9a97:       testl   %edx, %edx
    0.00 :   ffffffff810b9a99:       jne     0xffffffff810b9f0a <select_task_rq_fair+0x6ba>
    0.00 :   ffffffff810b9a9f:       movl    -0x3c(%rbp), %eax
    0.00 :   ffffffff810b9aa2:       cmpl    %eax, %ebx
    0.00 :   ffffffff810b9aa4:       je      0xffffffff810b9ab8 <select_task_rq_fair+0x268>
    0.00 :   ffffffff810b9aa6:       movl    -0x3c(%rbp), %esi
    0.00 :   ffffffff810b9aa9:       movl    %ebx, %edi
    0.00 :   ffffffff810b9aab:       callq   0xffffffff810abe00 <cpus_share_cache>
    0.00 :   ffffffff810b9ab0:       testb   %al, %al
    0.00 :   ffffffff810b9ab2:       jne     0xffffffff810ba6ed <select_task_rq_fair+0xe9d>
    0.00 :   ffffffff810b9ab8:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810b9ac1:       testb   $0x20, 0x356(%rax)
    0.00 :   ffffffff810b9ac8:       je      0xffffffff810b9b97 <select_task_rq_fair+0x347>
    0.00 :   ffffffff810b9ace:       cmpl    $0x1, 0x6d8(%rax)
    0.00 :   ffffffff810b9ad5:       jne     0xffffffff810b9b97 <select_task_rq_fair+0x347>
    0.00 :   ffffffff810b9adb:       movl    %gs:0x7ef68c26(%rip), %eax
    0.00 :   ffffffff810b9ae2:       testl   $0xff0100, %eax # imm = 0xFF0100
    0.00 :   ffffffff810b9ae7:       jne     0xffffffff810b9b97 <select_task_rq_fair+0x347>
    0.00 :   ffffffff810b9aed:       movl    %gs:0x7ef68c18(%rip), %eax
    0.00 :   ffffffff810b9af4:       cmpl    %eax, %ebx
    0.00 :   ffffffff810b9af6:       jne     0xffffffff810b9b97 <select_task_rq_fair+0x347>
    0.00 :   ffffffff810b9afc:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810b9b03:       addq    %gs:0x7ef5bf25(%rip), %rax
    0.00 :   ffffffff810b9b0b:       cmpl    $0x1, 0x4(%rax)
    0.00 :   ffffffff810b9b0f:       ja      0xffffffff810b9b97 <select_task_rq_fair+0x347>
    0.00 :   ffffffff810b9b15:       nop
    0.00 :   ffffffff810b9b17:       movl    %ebx, -0x3c(%rbp)
    0.00 :   ffffffff810b9b1a:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810b9b1f:       movq    0x478(%r12), %rax
    0.00 :   ffffffff810b9b27:       leaq    0x400(%r12), %rsi
    0.00 :   ffffffff810b9b2f:       movq    0x80(%rax), %rdi
    0.00 :   ffffffff810b9b36:       callq   0xffffffff810c9c00 <__update_load_avg_blocked_se>
    0.00 :   ffffffff810b9b3b:       movq    0x4f0(%r12), %rcx
    0.00 :   ffffffff810b9b43:       movq    0x4f8(%r12), %rdx
    0.00 :   ffffffff810b9b4b:       movl    %edx, %eax
    0.00 :   ffffffff810b9b4d:       shrq    $0x20, %rdx
    0.00 :   ffffffff810b9b51:       andl    $0x7fffffff, %eax # imm = 0x7FFFFFFF
    0.00 :   ffffffff810b9b56:       cmpl    %edx, %eax
    0.00 :   ffffffff810b9b58:       cmovbl  %edx, %eax
    0.00 :   ffffffff810b9b5b:       movl    %eax, %eax
    0.00 :   ffffffff810b9b5d:       cmpq    %rcx, %rax
    0.00 :   ffffffff810b9b60:       cmovaeq %rax, %rcx
    0.00 :   ffffffff810b9b64:       movq    %rcx, %r14
    0.00 :   ffffffff810b9b67:       jmp     0xffffffff810b9a62 <select_task_rq_fair+0x212>
    0.00 :   ffffffff810b9b6c:       movslq  %ebx, %r15
    0.00 :   ffffffff810b9b6f:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810b9b76:       leaq    (%r14,%r14,4), %rdx
    0.00 :   ffffffff810b9b7a:       movq    -0x7dedc720(,%r15,8), %rcx
    0.00 :   ffffffff810b9b82:       shlq    $0x8, %rdx
    0.00 :   ffffffff810b9b86:       movq    0xa00(%rcx,%rax), %rax
    0.00 :   ffffffff810b9b8e:       shlq    $0xa, %rax
    0.00 :   ffffffff810b9b92:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b9b95:       jb      0xffffffff810b9b17 <select_task_rq_fair+0x2c7>
    0.00 :   ffffffff810b9b97:       movl    0xa8(%r12), %r13d
    0.00 :   ffffffff810b9b9f:       movl    %ebx, 0xa8(%r12)
    0.00 :   ffffffff810b9ba7:       cmpl    %r13d, %ebx
    0.00 :   ffffffff810b9baa:       je      0xffffffff810b9bc7 <select_task_rq_fair+0x377>
    0.00 :   ffffffff810b9bac:       movl    -0x3c(%rbp), %eax
    0.00 :   ffffffff810b9baf:       cmpl    %eax, %r13d
    0.00 :   ffffffff810b9bb2:       je      0xffffffff810b9bc7 <select_task_rq_fair+0x377>
    0.00 :   ffffffff810b9bb4:       movl    -0x3c(%rbp), %esi
    0.00 :   ffffffff810b9bb7:       movl    %r13d, %edi
    0.00 :   ffffffff810b9bba:       callq   0xffffffff810abe00 <cpus_share_cache>
    0.00 :   ffffffff810b9bbf:       testb   %al, %al
    0.00 :   ffffffff810b9bc1:       jne     0xffffffff810ba5c5 <select_task_rq_fair+0xd75>
    0.00 :   ffffffff810b9bc7:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b9bcc:       movq    -0x78(%rbp), %rax
    0.00 :   ffffffff810b9bd0:       movq    -0x7dedc720(,%rax,8), %rdx
    0.00 :   ffffffff810b9bd8:       movq    $0x1b2b8, %rax  # imm = 0x1B2B8
    0.00 :   ffffffff810b9bdf:       addq    %rdx, %rax
    0.00 :   ffffffff810b9be2:       movq    (%rax), %rcx
    0.00 :   ffffffff810b9be5:       testq   %rcx, %rcx
    0.00 :   ffffffff810b9be8:       je      0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810b9bee:       jmp     0xffffffff810ba53e <select_task_rq_fair+0xcee>
    0.00 :   ffffffff810b9bf3:       movq    $0x1b2a8, %rax  # imm = 0x1B2A8
    0.00 :   ffffffff810b9bfa:       movq    %rax, -0x80(%rbp)
    0.00 :   ffffffff810b9bfe:       addq    %rax, %rdx
    0.00 :   ffffffff810b9c01:       movq    (%rdx), %rax
    0.00 :   ffffffff810b9c04:       testq   %rax, %rax
    0.00 :   ffffffff810b9c07:       je      0xffffffff810b9c14 <select_task_rq_fair+0x3c4>
    0.00 :   ffffffff810b9c09:       movl    0x8(%rax), %eax
    0.00 :   ffffffff810b9c0c:       testl   %eax, %eax
    0.00 :   ffffffff810b9c0e:       jne     0xffffffff810ba5b6 <select_task_rq_fair+0xd66>
    0.00 :   ffffffff810b9c14:       movl    -0x3c(%rbp), %esi
    0.00 :   ffffffff810b9c17:       movl    %ebx, %edi
    0.00 :   ffffffff810b9c19:       movq    %rcx, -0x38(%rbp)
    0.00 :   ffffffff810b9c1d:       callq   0xffffffff810abe00 <cpus_share_cache>
    0.00 :   ffffffff810b9c22:       testb   %al, %al
    0.00 :   ffffffff810b9c24:       movb    %al, -0x60(%rbp)
    0.00 :   ffffffff810b9c27:       movq    -0x38(%rbp), %rcx
    0.00 :   ffffffff810b9c2b:       movl    0x12ace2f(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9c31:       jne     0xffffffff810ba75c <select_task_rq_fair+0xf0c>
    0.00 :   ffffffff810b9c37:       movq    0x2e8(%r12), %rdx
    0.00 :   ffffffff810b9c3f:       leaq    0x90(%rcx), %rsi
    0.00 :   ffffffff810b9c46:       movl    %eax, %ecx
    0.00 :   ffffffff810b9c48:       movq    $0x1b170, %rdi  # imm = 0x1B170
    0.00 :   ffffffff810b9c4f:       addq    %gs:0x7ef5bdd9(%rip), %rdi
    0.00 :   ffffffff810b9c57:       movq    %rdi, -0x58(%rbp)
    0.00 :   ffffffff810b9c5b:       callq   0xffffffff81595e80 <__bitmap_and>
    0.00 :   ffffffff810b9c60:       movq    -0x78(%rbp), %rbx
    0.00 :   ffffffff810b9c64:       movq    -0x80(%rbp), %rax
    0.00 :   ffffffff810b9c68:       addq    -0x7dedc720(,%rbx,8), %rax
    0.00 :   ffffffff810b9c70:       movq    (%rax), %rax
    0.00 :   ffffffff810b9c73:       testq   %rax, %rax
    0.00 :   ffffffff810b9c76:       je      0xffffffff810ba7f5 <select_task_rq_fair+0xfa5>
    0.00 :   ffffffff810b9c7c:       movl    0xc(%rax), %eax
    0.00 :   ffffffff810b9c7f:       leal    0x1(%rax), %ebx
    0.00 :   ffffffff810b9c82:       testl   %eax, %eax
    0.00 :   ffffffff810b9c84:       movl    %ebx, -0x40(%rbp)
    0.00 :   ffffffff810b9c87:       je      0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810b9c8d:       movl    -0x3c(%rbp), %eax
    0.00 :   ffffffff810b9c90:       movl    0x12acdca(%rip), %ebx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9c96:       movq    -0x58(%rbp), %rdi
    0.00 :   ffffffff810b9c9a:       incl    %eax
    0.00 :   ffffffff810b9c9c:       cltq
    0.00 :   ffffffff810b9c9e:       movq    %rbx, %rsi
    0.00 :   ffffffff810b9ca1:       movq    %rbx, %r14
    0.00 :   ffffffff810b9ca4:       movq    %rax, %rdx
    0.00 :   ffffffff810b9ca7:       movq    %rax, -0x50(%rbp)
    0.00 :   ffffffff810b9cab:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810b9cb0:       cmpq    %rbx, %rax
    0.00 :   ffffffff810b9cb3:       movq    %rax, %r8
    0.00 :   ffffffff810b9cb6:       jae     0xffffffff810ba555 <select_task_rq_fair+0xd05>
    0.00 :   ffffffff810b9cbc:       movl    %r8d, %r14d
    0.00 :   ffffffff810b9cbf:       cmpl    0x12acd9a(%rip), %r14d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9cc6:       jae     0xffffffff810ba894 <select_task_rq_fair+0x1044>
    0.00 :   ffffffff810b9ccc:       movq    $0x22f40, %r9   # imm = 0x22F40
    0.00 :   ffffffff810b9cd3:       movq    $0x158e0, %r14  # imm = 0x158E0
    0.00 :   ffffffff810b9cda:       movl    $0xffffffff, %ebx # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b9cdf:       movq    %r9, -0x68(%rbp)
    0.00 :   ffffffff810b9ce3:       jmp     0xffffffff810b9da0 <select_task_rq_fair+0x550>
    0.00 :   ffffffff810b9ce8:       decl    -0x40(%rbp)
    0.00 :   ffffffff810b9ceb:       je      0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810b9cf1:       movl    %r8d, %edi
    0.00 :   ffffffff810b9cf4:       movl    %r8d, -0x38(%rbp)
    0.00 :   ffffffff810b9cf8:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810b9cfd:       movl    -0x38(%rbp), %r8d
    0.00 :   ffffffff810b9d01:       testl   %eax, %eax
    0.00 :   ffffffff810b9d03:       movl    0x12acd57(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9d09:       movslq  %r8d, %rax
    0.00 :   ffffffff810b9d0c:       movq    -0x7dedc720(,%rax,8), %rax
    0.00 :   ffffffff810b9d14:       jne     0xffffffff810b9e96 <select_task_rq_fair+0x646>
    0.00 :   ffffffff810b9d1a:       movq    -0x68(%rbp), %rbx
    0.00 :   ffffffff810b9d1e:       movl    0x12acd3c(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9d24:       leaq    (%rbx,%rax), %rsi
    0.00 :   ffffffff810b9d28:       movl    %edx, %ecx
    0.00 :   ffffffff810b9d2a:       movl    0x4(%rsi), %edi
    0.00 :   ffffffff810b9d2d:       cmpl    %edi, 0x9c(%rsi)
    0.00 :   ffffffff810b9d33:       jne     0xffffffff810b9d3d <select_task_rq_fair+0x4ed>
    0.00 :   ffffffff810b9d35:       testl   %edi, %edi
    0.00 :   ffffffff810b9d37:       jne     0xffffffff810b9e96 <select_task_rq_fair+0x646>
    0.00 :   ffffffff810b9d3d:       movl    $0xffffffff, %ebx # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b9d42:       leal    0x1(%r8), %edx
    0.00 :   ffffffff810b9d46:       movl    %ecx, %r15d
    0.00 :   ffffffff810b9d49:       movslq  %edx, %rdx
    0.00 :   ffffffff810b9d4c:       cmpq    %rdx, -0x50(%rbp)
    0.00 :   ffffffff810b9d50:       jae     0xffffffff810b9d6f <select_task_rq_fair+0x51f>
    0.00 :   ffffffff810b9d52:       movq    -0x58(%rbp), %rdi
    0.00 :   ffffffff810b9d56:       movq    %r15, %rsi
    0.00 :   ffffffff810b9d59:       movl    %ecx, -0x38(%rbp)
    0.00 :   ffffffff810b9d5c:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810b9d61:       xorl    %edx, %edx
    0.00 :   ffffffff810b9d63:       cmpq    %r15, %rax
    0.00 :   ffffffff810b9d66:       movl    -0x38(%rbp), %ecx
    0.00 :   ffffffff810b9d69:       jb      0xffffffff810b9f00 <select_task_rq_fair+0x6b0>
    0.00 :   ffffffff810b9d6f:       movq    -0x50(%rbp), %r13
    0.00 :   ffffffff810b9d73:       movq    -0x58(%rbp), %rdi
    0.00 :   ffffffff810b9d77:       movl    %ecx, -0x38(%rbp)
    0.00 :   ffffffff810b9d7a:       movq    %r13, %rsi
    0.00 :   ffffffff810b9d7d:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810b9d82:       movl    -0x38(%rbp), %ecx
    0.00 :   ffffffff810b9d85:       cmpq    %r13, %rax
    0.00 :   ffffffff810b9d88:       cmovbq  %rax, %r15
    0.00 :   ffffffff810b9d8c:       cmovbl  %eax, %ecx
    0.00 :   ffffffff810b9d8f:       movl    0x12acccb(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9d95:       movl    %r15d, %r8d
    0.00 :   ffffffff810b9d98:       cmpl    %eax, %ecx
    0.00 :   ffffffff810b9d9a:       jae     0xffffffff810ba581 <select_task_rq_fair+0xd31>
    0.00 :   ffffffff810b9da0:       cmpb    $0x0, -0x60(%rbp)
    0.00 :   ffffffff810b9da4:       je      0xffffffff810b9ce8 <select_task_rq_fair+0x498>
    0.00 :   ffffffff810b9daa:       movzbl  -0x60(%rbp), %r10d
    0.00 :   ffffffff810b9daf:       movq    $0x22f40, %r9   # imm = 0x22F40
    0.00 :   ffffffff810b9db6:       xorl    %edx, %edx
    0.00 :   ffffffff810b9db8:       movslq  %r8d, %r13
    0.00 :   ffffffff810b9dbb:       movl    %r8d, -0x6c(%rbp)
    0.00 :   ffffffff810b9dbf:       movq    %r9, -0x48(%rbp)
    0.00 :   ffffffff810b9dc3:       movb    %r10b, -0x38(%rbp)
    0.00 :   ffffffff810b9dc7:       jmp     0xffffffff810b9dfb <select_task_rq_fair+0x5ab>
    0.00 :   ffffffff810b9dc9:       cmpl    $-0x1, %ebx
    0.00 :   ffffffff810b9dcc:       jne     0xffffffff810b9f4a <select_task_rq_fair+0x6fa>
    0.00 :   ffffffff810b9dd2:       movslq  %r15d, %rax
    0.00 :   ffffffff810b9dd5:       movq    -0x48(%rbp), %rcx
    0.00 :   ffffffff810b9dd9:       addq    -0x7dedc720(,%rax,8), %rcx
    0.00 :   ffffffff810b9de1:       movq    %rcx, %rax
    0.00 :   ffffffff810b9de4:       movl    0x4(%rcx), %ecx
    0.00 :   ffffffff810b9de7:       cmpl    %ecx, 0x9c(%rax)
    0.00 :   ffffffff810b9ded:       jne     0xffffffff810b9df3 <select_task_rq_fair+0x5a3>
    0.00 :   ffffffff810b9def:       testl   %ecx, %ecx
    0.00 :   ffffffff810b9df1:       jne     0xffffffff810b9e4a <select_task_rq_fair+0x5fa>
    0.00 :   ffffffff810b9df3:       movb    $0x0, -0x38(%rbp)
    0.00 :   ffffffff810b9df7:       leal    0x1(%r15), %edx
    0.00 :   ffffffff810b9dfb:       movq    -0x7dedc720(,%r13,8), %rdi
    0.00 :   ffffffff810b9e03:       movl    0x12acc57(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9e09:       movslq  %edx, %rdx
    0.00 :   ffffffff810b9e0c:       addq    %r14, %rdi
    0.00 :   ffffffff810b9e0f:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810b9e14:       movl    0x12acc46(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9e1a:       movq    %rax, %r15
    0.00 :   ffffffff810b9e1d:       movl    %eax, %edi
    0.00 :   ffffffff810b9e1f:       cmpl    %ecx, %eax
    0.00 :   ffffffff810b9e21:       jae     0xffffffff810b9edc <select_task_rq_fair+0x68c>
    0.00 :   ffffffff810b9e27:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810b9e2c:       testl   %eax, %eax
    0.00 :   ffffffff810b9e2e:       je      0xffffffff810b9dc9 <select_task_rq_fair+0x579>
    0.00 :   ffffffff810b9e30:       cmpl    $-0x1, %ebx
    0.00 :   ffffffff810b9e33:       jne     0xffffffff810b9df7 <select_task_rq_fair+0x5a7>
    0.00 :   ffffffff810b9e35:       movq    0x2e8(%r12), %rax
    0.00 :   ffffffff810b9e3d:       movl    %r15d, %ecx
    0.00 :   ffffffff810b9e40:       btq     %rcx, (%rax)
    0.00 :   ffffffff810b9e44:       cmovbl  %r15d, %ebx
    0.00 :   ffffffff810b9e48:       jmp     0xffffffff810b9df7 <select_task_rq_fair+0x5a7>
    0.00 :   ffffffff810b9e4a:       movq    0x2e8(%r12), %rax
    0.00 :   ffffffff810b9e52:       movl    %r15d, %ecx
    0.00 :   ffffffff810b9e55:       btq     %rcx, (%rax)
    0.00 :   ffffffff810b9e59:       jae     0xffffffff810b9df3 <select_task_rq_fair+0x5a3>
    0.00 :   ffffffff810b9e5b:       movl    -0x6c(%rbp), %r8d
    0.00 :   ffffffff810b9e5f:       movl    0x12acbfb(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9e65:       movl    %r15d, %ebx
    0.00 :   ffffffff810b9e68:       movq    -0x58(%rbp), %rsi
    0.00 :   ffffffff810b9e6c:       movq    $0x158e0, %rdx  # imm = 0x158E0
    0.00 :   ffffffff810b9e73:       movl    %r8d, -0x38(%rbp)
    0.00 :   ffffffff810b9e77:       addq    -0x7dedc720(,%r13,8), %rdx
    0.00 :   ffffffff810b9e7f:       movq    %rsi, %rdi
    0.00 :   ffffffff810b9e82:       callq   0xffffffff81595fb0 <__bitmap_andnot>
    0.00 :   ffffffff810b9e87:       movl    0x12acbd3(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9e8d:       movl    -0x38(%rbp), %r8d
    0.00 :   ffffffff810b9e91:       jmp     0xffffffff810b9d42 <select_task_rq_fair+0x4f2>
    0.00 :   ffffffff810b9e96:       nop
    0.00 :   ffffffff810b9e98:       cmpl    %edx, %r8d
    0.00 :   ffffffff810b9e9b:       movl    %edx, %ecx
    0.00 :   ffffffff810b9e9d:       jb      0xffffffff810b9ef7 <select_task_rq_fair+0x6a7>
    0.00 :   ffffffff810b9e9f:       movl    %r8d, %ebx
    0.00 :   ffffffff810b9ea2:       jmp     0xffffffff810b9d42 <select_task_rq_fair+0x4f2>
    0.00 :   ffffffff810b9ea7:       movq    -0x68(%rbp), %rbx
    0.00 :   ffffffff810b9eab:       addq    %rbx, %rax
    0.00 :   ffffffff810b9eae:       movl    0xbf8(%rax), %ecx
    0.00 :   ffffffff810b9eb4:       testl   %ecx, %ecx
    0.00 :   ffffffff810b9eb6:       je      0xffffffff810b9e98 <select_task_rq_fair+0x648>
    0.00 :   ffffffff810b9eb8:       movq    0xbe8(%rax), %rax
    0.00 :   ffffffff810b9ebf:       movq    0x8f0(%r12), %rbx
    0.00 :   ffffffff810b9ec7:       cmpq    %rbx, 0xc10(%rax)
    0.00 :   ffffffff810b9ece:       je      0xffffffff810b9e98 <select_task_rq_fair+0x648>
    0.00 :   ffffffff810b9ed0:       movl    %edx, %ecx
    0.00 :   ffffffff810b9ed2:       movl    $0xffffffff, %ebx # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b9ed7:       jmp     0xffffffff810b9d42 <select_task_rq_fair+0x4f2>
    0.00 :   ffffffff810b9edc:       movzbl  -0x38(%rbp), %r10d
    0.00 :   ffffffff810b9ee1:       movl    -0x6c(%rbp), %r8d
    0.00 :   ffffffff810b9ee5:       testb   %r10b, %r10b
    0.00 :   ffffffff810b9ee8:       je      0xffffffff810b9e68 <select_task_rq_fair+0x618>
    0.00 :   ffffffff810b9eee:       cmpl    %ecx, %r8d
    0.00 :   ffffffff810b9ef1:       jae     0xffffffff810b9d42 <select_task_rq_fair+0x4f2>
    0.00 :   ffffffff810b9ef7:       movl    %r8d, -0x3c(%rbp)
    0.00 :   ffffffff810b9efb:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810b9f00:       movl    %eax, %ecx
    0.00 :   ffffffff810b9f02:       movq    %rax, %r15
    0.00 :   ffffffff810b9f05:       jmp     0xffffffff810b9d8f <select_task_rq_fair+0x53f>
    0.00 :   ffffffff810b9f0a:       nop
    0.00 :   ffffffff810b9f0c:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810b9f11:       movslq  -0x3c(%rbp), %rcx
    0.00 :   ffffffff810b9f15:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810b9f1c:       leaq    (%r14,%r14,4), %rdx
    0.00 :   ffffffff810b9f20:       shlq    $0x8, %rdx
    0.00 :   ffffffff810b9f24:       movq    %rcx, -0x78(%rbp)
    0.00 :   ffffffff810b9f28:       movq    -0x7dedc720(,%rcx,8), %rcx
    0.00 :   ffffffff810b9f30:       movq    0xa00(%rcx,%rax), %rax
    0.00 :   ffffffff810b9f38:       shlq    $0xa, %rax
    0.00 :   ffffffff810b9f3c:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b9f3f:       jae     0xffffffff810b9a9f <select_task_rq_fair+0x24f>
    0.00 :   ffffffff810b9f45:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810b9f4a:       movl    -0x6c(%rbp), %r8d
    0.00 :   ffffffff810b9f4e:       movl    0x12acb0c(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9f54:       jmp     0xffffffff810b9e68 <select_task_rq_fair+0x618>
    0.00 :   ffffffff810b9f59:       cmpl    %ebx, %r13d
    0.00 :   ffffffff810b9f5c:       movq    %rdx, -0x38(%rbp)
    0.00 :   ffffffff810b9f60:       je      0xffffffff810b9987 <select_task_rq_fair+0x137>
    0.00 :   ffffffff810b9f66:       movl    %r13d, %edi
    0.00 :   ffffffff810b9f69:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810b9f6e:       testl   %eax, %eax
    0.00 :   ffffffff810b9f70:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810b9f74:       jne     0xffffffff810ba653 <select_task_rq_fair+0xe03>
    0.00 :   ffffffff810b9f7a:       movl    -0x58(%rbp), %r10d
    0.00 :   ffffffff810b9f7e:       testl   %r10d, %r10d
    0.00 :   ffffffff810b9f81:       je      0xffffffff810ba6ae <select_task_rq_fair+0xe5e>
    0.00 :   ffffffff810b9f87:       movq    -0x7dedc720(,%rdx,8), %rax
    0.00 :   ffffffff810b9f8f:       movq    $0x22f40, %r15  # imm = 0x22F40
    0.00 :   ffffffff810b9f96:       cmpl    $0x1, 0x4(%r15,%rax)
    0.00 :   ffffffff810b9f9c:       je      0xffffffff810ba855 <select_task_rq_fair+0x1005>
    0.00 :   ffffffff810b9fa2:       movl    %ebx, %edi
    0.00 :   ffffffff810b9fa4:       movq    %rdx, -0x38(%rbp)
    0.00 :   ffffffff810b9fa8:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810b9fad:       testl   %eax, %eax
    0.00 :   ffffffff810b9faf:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810b9fb3:       je      0xffffffff810b9fc1 <select_task_rq_fair+0x771>
    0.00 :   ffffffff810b9fb5:       cmpl    0x12acaa5(%rip), %ebx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b9fbb:       jne     0xffffffff810b9987 <select_task_rq_fair+0x137>
    0.00 :   ffffffff810b9fc1:       movq    -0x7dedc720(,%rdx,8), %rax
    0.00 :   ffffffff810b9fc9:       movq    0x120(%r15,%rax), %r15
    0.00 :   ffffffff810b9fd1:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff810b9fda:       movq    %rdx, -0x38(%rbp)
    0.00 :   ffffffff810b9fde:       callq   0xffffffff810b31a0 <task_h_load>
    0.00 :   ffffffff810b9fe3:       cmpq    %rax, %r15
    0.00 :   ffffffff810b9fe6:       jb      0xffffffff810b998a <select_task_rq_fair+0x13a>
    0.00 :   ffffffff810b9fec:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810b9ff0:       subq    %rax, %r15
    0.00 :   ffffffff810b9ff3:       movq    %r12, %rdi
    0.00 :   ffffffff810b9ff6:       movq    %rdx, -0x38(%rbp)
    0.00 :   ffffffff810b9ffa:       callq   0xffffffff810b31a0 <task_h_load>
    0.00 :   ffffffff810b9fff:       movq    %rax, %rcx
    0.00 :   ffffffff810ba002:       leaq    (%rax,%r15), %rax
    0.00 :   ffffffff810ba006:       movslq  %ebx, %r15
    0.00 :   ffffffff810ba009:       movq    -0x7dedc720(,%r15,8), %rdi
    0.00 :   ffffffff810ba011:       movl    $0x64, %r9d
    0.00 :   ffffffff810ba017:       movq    $0x22f40, %rsi  # imm = 0x22F40
    0.00 :   ffffffff810ba01e:       imulq   %r9, %rax
    0.00 :   ffffffff810ba022:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810ba026:       imulq   0xa00(%rsi,%rdi), %rax
    0.00 :   ffffffff810ba02f:       movq    0x120(%rdi,%rsi), %rdi
    0.00 :   ffffffff810ba037:       movq    -0x7dedc720(,%rdx,8), %rdx
    0.00 :   ffffffff810ba03f:       subq    %rcx, %rdi
    0.00 :   ffffffff810ba042:       movl    0x2c(%r14), %ecx
    0.00 :   ffffffff810ba046:       subl    $0x64, %ecx
    0.00 :   ffffffff810ba049:       shrl    %ecx
    0.00 :   ffffffff810ba04b:       addl    $0x64, %ecx
    0.00 :   ffffffff810ba04e:       imulq   %rdi, %rcx
    0.00 :   ffffffff810ba052:       imulq   0xa00(%rdx,%rsi), %rcx
    0.00 :   ffffffff810ba05b:       cmpl    $0x1, -0x58(%rbp)
    0.00 :   ffffffff810ba05f:       movq    %rcx, %rdx
    0.00 :   ffffffff810ba062:       sbbq    $-0x1, %rdx
    0.00 :   ffffffff810ba066:       cmpq    %rdx, %rax
    0.00 :   ffffffff810ba069:       jl      0xffffffff810b998a <select_task_rq_fair+0x13a>
    0.00 :   ffffffff810ba06f:       cmpl    0x12ac9ea(%rip), %r13d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba076:       jne     0xffffffff810b9987 <select_task_rq_fair+0x137>
    0.00 :   ffffffff810ba07c:       jmp     0xffffffff810b998a <select_task_rq_fair+0x13a>
    0.00 :   ffffffff810ba081:       movq    -0x78(%rbp), %rsi
    0.00 :   ffffffff810ba085:       movq    $0x1b290, %rax  # imm = 0x1B290
    0.00 :   ffffffff810ba08c:       movq    -0x7dedc720(,%rsi,8), %rdx
    0.00 :   ffffffff810ba094:       addq    %rdx, %rax
    0.00 :   ffffffff810ba097:       movq    (%rax), %rax
    0.00 :   ffffffff810ba09a:       testq   %rax, %rax
    0.00 :   ffffffff810ba09d:       je      0xffffffff810b9bd8 <select_task_rq_fair+0x388>
    0.00 :   ffffffff810ba0a3:       movq    0x2e8(%r12), %rdx
    0.00 :   ffffffff810ba0ab:       movl    0x12ac9af(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba0b1:       leaq    0x90(%rax), %rsi
    0.00 :   ffffffff810ba0b8:       movq    $0x1b170, %rbx  # imm = 0x1B170
    0.00 :   ffffffff810ba0bf:       addq    %gs:0x7ef5b969(%rip), %rbx
    0.00 :   ffffffff810ba0c7:       movq    %rbx, %rdi
    0.00 :   ffffffff810ba0ca:       movq    %rbx, -0x38(%rbp)
    0.00 :   ffffffff810ba0ce:       callq   0xffffffff81595e80 <__bitmap_and>
    0.00 :   ffffffff810ba0d3:       movq    0x4f0(%r12), %rcx
    0.00 :   ffffffff810ba0db:       movq    0x4f8(%r12), %rdx
    0.00 :   ffffffff810ba0e3:       movl    0x12ac976(%rip), %r14d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba0ea:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff810ba0ee:       movl    %edx, %eax
    0.00 :   ffffffff810ba0f0:       shrq    $0x20, %rdx
    0.00 :   ffffffff810ba0f4:       andl    $0x7fffffff, %eax # imm = 0x7FFFFFFF
    0.00 :   ffffffff810ba0f9:       cmpl    %edx, %eax
    0.00 :   ffffffff810ba0fb:       movq    %r14, %rsi
    0.00 :   ffffffff810ba0fe:       movq    %r14, %r15
    0.00 :   ffffffff810ba101:       cmovael %eax, %edx
    0.00 :   ffffffff810ba104:       movl    -0x3c(%rbp), %eax
    0.00 :   ffffffff810ba107:       movl    %edx, %r13d
    0.00 :   ffffffff810ba10a:       cmpq    %rcx, %r13
    0.00 :   ffffffff810ba10d:       leal    0x1(%rax), %ebx
    0.00 :   ffffffff810ba110:       cmovbq  %rcx, %r13
    0.00 :   ffffffff810ba114:       movslq  %ebx, %rbx
    0.00 :   ffffffff810ba117:       movq    %rbx, %rdx
    0.00 :   ffffffff810ba11a:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ba11f:       cmpq    %r14, %rax
    0.00 :   ffffffff810ba122:       movq    %rax, %rdx
    0.00 :   ffffffff810ba125:       jae     0xffffffff810ba905 <select_task_rq_fair+0x10b5>
    0.00 :   ffffffff810ba12b:       movl    %edx, %r15d
    0.00 :   ffffffff810ba12e:       cmpl    0x12ac92b(%rip), %r15d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba135:       jae     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba13b:       leaq    (%r13,%r13,4), %r13
    0.00 :   ffffffff810ba140:       movl    $0xffffffff, %ecx # imm = 0xFFFFFFFF
    0.00 :   ffffffff810ba145:       movq    $0x22f40, %r15  # imm = 0x22F40
    0.00 :   ffffffff810ba14c:       movq    $0x0, -0x58(%rbp)
    0.00 :   ffffffff810ba154:       movl    %edx, %r14d
    0.00 :   ffffffff810ba157:       movl    %ecx, -0x50(%rbp)
    0.00 :   ffffffff810ba15a:       shlq    $0x8, %r13
    0.00 :   ffffffff810ba15e:       movq    %r13, -0x48(%rbp)
    0.00 :   ffffffff810ba162:       jmp     0xffffffff810ba1d1 <select_task_rq_fair+0x981>
    0.00 :   ffffffff810ba164:       movq    -0x7dedc720(,%r12,8), %rax
    0.00 :   ffffffff810ba16c:       addq    %r15, %rax
    0.00 :   ffffffff810ba16f:       movl    0x4(%rax), %esi
    0.00 :   ffffffff810ba172:       cmpl    %esi, 0x9c(%rax)
    0.00 :   ffffffff810ba178:       jne     0xffffffff810ba17e <select_task_rq_fair+0x92e>
    0.00 :   ffffffff810ba17a:       testl   %esi, %esi
    0.00 :   ffffffff810ba17c:       jne     0xffffffff810ba1f4 <select_task_rq_fair+0x9a4>
    0.00 :   ffffffff810ba17e:       leal    0x1(%r14), %edx
    0.00 :   ffffffff810ba182:       movl    0x12ac8d7(%rip), %r14d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba189:       movslq  %edx, %rdx
    0.00 :   ffffffff810ba18c:       cmpq    %rdx, %rbx
    0.00 :   ffffffff810ba18f:       movq    %r14, %r13
    0.00 :   ffffffff810ba192:       jae     0xffffffff810ba1ab <select_task_rq_fair+0x95b>
    0.00 :   ffffffff810ba194:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff810ba198:       movq    %r14, %rsi
    0.00 :   ffffffff810ba19b:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ba1a0:       xorl    %edx, %edx
    0.00 :   ffffffff810ba1a2:       cmpq    %r14, %rax
    0.00 :   ffffffff810ba1a5:       jb      0xffffffff810ba81b <select_task_rq_fair+0xfcb>
    0.00 :   ffffffff810ba1ab:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff810ba1af:       movq    %rbx, %rsi
    0.00 :   ffffffff810ba1b2:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ba1b7:       cmpq    %rbx, %rax
    0.00 :   ffffffff810ba1ba:       cmovbl  %eax, %r13d
    0.00 :   ffffffff810ba1be:       cmovbq  %rax, %r14
    0.00 :   ffffffff810ba1c2:       movl    0x12ac898(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba1c8:       cmpl    %eax, %r13d
    0.00 :   ffffffff810ba1cb:       jae     0xffffffff810ba883 <select_task_rq_fair+0x1033>
    0.00 :   ffffffff810ba1d1:       movslq  %r14d, %r12
    0.00 :   ffffffff810ba1d4:       movl    %r14d, %edi
    0.00 :   ffffffff810ba1d7:       movq    -0x7dedc720(,%r12,8), %rax
    0.00 :   ffffffff810ba1df:       movq    0xa00(%rax,%r15), %r13
    0.00 :   ffffffff810ba1e7:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba1ec:       testl   %eax, %eax
    0.00 :   ffffffff810ba1ee:       je      0xffffffff810ba164 <select_task_rq_fair+0x914>
    0.00 :   ffffffff810ba1f4:       movq    -0x7dedc720(,%r12,8), %rax
    0.00 :   ffffffff810ba1fc:       movq    0xa00(%r15,%rax), %rax
    0.00 :   ffffffff810ba204:       shlq    $0xa, %rax
    0.00 :   ffffffff810ba208:       cmpq    %rax, -0x48(%rbp)
    0.00 :   ffffffff810ba20c:       jb      0xffffffff810ba8fa <select_task_rq_fair+0x10aa>
    0.00 :   ffffffff810ba212:       movq    -0x58(%rbp), %rax
    0.00 :   ffffffff810ba216:       movl    -0x50(%rbp), %esi
    0.00 :   ffffffff810ba219:       cmpq    %r13, %rax
    0.00 :   ffffffff810ba21c:       cmovbl  %r14d, %esi
    0.00 :   ffffffff810ba220:       cmovaeq %rax, %r13
    0.00 :   ffffffff810ba224:       movl    %esi, -0x50(%rbp)
    0.00 :   ffffffff810ba227:       movq    %r13, -0x58(%rbp)
    0.00 :   ffffffff810ba22b:       jmp     0xffffffff810ba17e <select_task_rq_fair+0x92e>
    0.00 :   ffffffff810ba230:       movq    0x2e8(%r12), %rsi
    0.00 :   ffffffff810ba238:       movl    0x12ac822(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba23e:       leaq    0x90(%rcx), %rdi
    0.00 :   ffffffff810ba245:       movl    %r8d, -0x48(%rbp)
    0.00 :   ffffffff810ba249:       movq    %rcx, -0x38(%rbp)
    0.00 :   ffffffff810ba24d:       callq   0xffffffff815960c0 <__bitmap_intersects>
    0.00 :   ffffffff810ba252:       testb   %al, %al
    0.00 :   ffffffff810ba254:       movq    -0x38(%rbp), %rcx
    0.00 :   ffffffff810ba258:       movl    -0x48(%rbp), %r8d
    0.00 :   ffffffff810ba25c:       je      0xffffffff810b9b17 <select_task_rq_fair+0x2c7>
    0.00 :   ffffffff810ba262:       andl    $0x4, %r15d
    0.00 :   ffffffff810ba266:       je      0xffffffff810ba622 <select_task_rq_fair+0xdd2>
    0.00 :   ffffffff810ba26c:       movq    $0x22f40, %rbx  # imm = 0x22F40
    0.00 :   ffffffff810ba273:       movl    %r13d, -0x68(%rbp)
    0.00 :   ffffffff810ba277:       movq    %r12, -0x80(%rbp)
    0.00 :   ffffffff810ba27b:       movq    %rbx, -0x90(%rbp)
    0.00 :   ffffffff810ba282:       movl    %r8d, %ebx
    0.00 :   ffffffff810ba285:       movq    $0x158e0, %r15  # imm = 0x158E0
    0.00 :   ffffffff810ba28c:       movl    %ebx, %eax
    0.00 :   ffffffff810ba28e:       andl    0x3c(%rcx), %eax
    0.00 :   ffffffff810ba291:       je      0xffffffff810ba48b <select_task_rq_fair+0xc3b>
    0.00 :   ffffffff810ba297:       movl    -0x68(%rbp), %edx
    0.00 :   ffffffff810ba29a:       movq    -0x80(%rbp), %rsi
    0.00 :   ffffffff810ba29e:       movq    %rcx, %rdi
    0.00 :   ffffffff810ba2a1:       movq    %rcx, -0x38(%rbp)
    0.00 :   ffffffff810ba2a5:       callq   0xffffffff810b4f20 <find_idlest_group>
    0.00 :   ffffffff810ba2aa:       testq   %rax, %rax
    0.00 :   ffffffff810ba2ad:       movq    -0x38(%rbp), %rcx
    0.00 :   ffffffff810ba2b1:       je      0xffffffff810ba48b <select_task_rq_fair+0xc3b>
    0.00 :   ffffffff810ba2b7:       cmpl    $0x1, 0xc(%rax)
    0.00 :   ffffffff810ba2bb:       movl    0x12ac79f(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba2c1:       leaq    0x20(%rax), %r11
    0.00 :   ffffffff810ba2c5:       je      0xffffffff810ba801 <select_task_rq_fair+0xfb1>
    0.00 :   ffffffff810ba2cb:       movl    -0x68(%rbp), %eax
    0.00 :   ffffffff810ba2ce:       xorl    %edx, %edx
    0.00 :   ffffffff810ba2d0:       xorl    %r12d, %r12d
    0.00 :   ffffffff810ba2d3:       movq    $0x22f40, %r8   # imm = 0x22F40
    0.00 :   ffffffff810ba2da:       movq    %rcx, -0x88(%rbp)
    0.00 :   ffffffff810ba2e1:       movq    -0x80(%rbp), %r13
    0.00 :   ffffffff810ba2e5:       movl    %eax, -0x6c(%rbp)
    0.00 :   ffffffff810ba2e8:       movl    $0xffffffff, -0x3c(%rbp) # imm = 0xFFFFFFFF
    0.00 :   ffffffff810ba2ef:       movl    %edx, %ecx
    0.00 :   ffffffff810ba2f1:       movl    $0xffffffff, -0x40(%rbp) # imm = 0xFFFFFFFF
    0.00 :   ffffffff810ba2f8:       movq    $-0x1, -0x78(%rbp)
    0.00 :   ffffffff810ba300:       movl    %ebx, -0x70(%rbp)
    0.00 :   ffffffff810ba303:       movq    %r12, -0x60(%rbp)
    0.00 :   ffffffff810ba307:       movq    %r11, -0x50(%rbp)
    0.00 :   ffffffff810ba30b:       movq    %r8, -0x38(%rbp)
    0.00 :   ffffffff810ba30f:       jmp     0xffffffff810ba347 <select_task_rq_fair+0xaf7>
    0.00 :   ffffffff810ba311:       movq    0xba8(%r12), %rax
    0.00 :   ffffffff810ba319:       testq   %rax, %rax
    0.00 :   ffffffff810ba31c:       je      0xffffffff810ba4a6 <select_task_rq_fair+0xc56>
    0.00 :   ffffffff810ba322:       movl    0x44(%rax), %eax
    0.00 :   ffffffff810ba325:       movl    -0x40(%rbp), %ebx
    0.00 :   ffffffff810ba328:       cmpl    %ebx, %eax
    0.00 :   ffffffff810ba32a:       jae     0xffffffff810ba49d <select_task_rq_fair+0xc4d>
    0.00 :   ffffffff810ba330:       movq    0xb00(%r12), %rbx
    0.00 :   ffffffff810ba338:       movl    %r14d, -0x3c(%rbp)
    0.00 :   ffffffff810ba33c:       movl    %eax, -0x40(%rbp)
    0.00 :   ffffffff810ba33f:       movq    %rbx, -0x60(%rbp)
    0.00 :   ffffffff810ba343:       leal    0x1(%r14), %ecx
    0.00 :   ffffffff810ba347:       movl    0x12ac713(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba34d:       movq    -0x50(%rbp), %rdi
    0.00 :   ffffffff810ba351:       movslq  %ecx, %rcx
    0.00 :   ffffffff810ba354:       movq    0x2e8(%r13), %rsi
    0.00 :   ffffffff810ba35b:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff810ba360:       movq    %rax, %r14
    0.00 :   ffffffff810ba363:       movl    %eax, %edi
    0.00 :   ffffffff810ba365:       movl    0x12ac6f5(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba36b:       cmpl    %eax, %r14d
    0.00 :   ffffffff810ba36e:       jae     0xffffffff810ba4cc <select_task_rq_fair+0xc7c>
    0.00 :   ffffffff810ba374:       movslq  %r14d, %rcx
    0.00 :   ffffffff810ba377:       movq    -0x38(%rbp), %rbx
    0.00 :   ffffffff810ba37b:       movq    -0x7dedc720(,%rcx,8), %rdx
    0.00 :   ffffffff810ba383:       leaq    (%rbx,%rdx), %r12
    0.00 :   ffffffff810ba387:       nop
    0.00 :   ffffffff810ba389:       movq    -0x38(%rbp), %rax
    0.00 :   ffffffff810ba38d:       addq    %rax, %rdx
    0.00 :   ffffffff810ba390:       movl    0x4(%rdx), %eax
    0.00 :   ffffffff810ba393:       cmpl    %eax, 0x9c(%rdx)
    0.00 :   ffffffff810ba399:       jne     0xffffffff810ba3a3 <select_task_rq_fair+0xb53>
    0.00 :   ffffffff810ba39b:       testl   %eax, %eax
    0.00 :   ffffffff810ba39d:       jne     0xffffffff810ba826 <select_task_rq_fair+0xfd6>
    0.00 :   ffffffff810ba3a3:       movq    %rcx, -0x48(%rbp)
    0.00 :   ffffffff810ba3a7:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba3ac:       testl   %eax, %eax
    0.00 :   ffffffff810ba3ae:       movq    -0x48(%rbp), %rcx
    0.00 :   ffffffff810ba3b2:       jne     0xffffffff810ba311 <select_task_rq_fair+0xac1>
    0.00 :   ffffffff810ba3b8:       cmpl    $-0x1, -0x3c(%rbp)
    0.00 :   ffffffff810ba3bc:       jne     0xffffffff810ba343 <select_task_rq_fair+0xaf3>
    0.00 :   ffffffff810ba3be:       movq    -0x7dedc720(,%rcx,8), %rdx
    0.00 :   ffffffff810ba3c6:       movq    -0x78(%rbp), %rbx
    0.00 :   ffffffff810ba3ca:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba3d1:       movl    -0x6c(%rbp), %esi
    0.00 :   ffffffff810ba3d4:       movq    0x120(%rax,%rdx), %rax
    0.00 :   ffffffff810ba3dc:       cmpq    %rbx, %rax
    0.00 :   ffffffff810ba3df:       cmovbl  %r14d, %esi
    0.00 :   ffffffff810ba3e3:       cmovaeq %rbx, %rax
    0.00 :   ffffffff810ba3e7:       movl    %esi, -0x6c(%rbp)
    0.00 :   ffffffff810ba3ea:       movq    %rax, -0x78(%rbp)
    0.00 :   ffffffff810ba3ee:       jmp     0xffffffff810ba343 <select_task_rq_fair+0xaf3>
    0.00 :   ffffffff810ba3f3:       movl    0xbf8(%r12), %r8d
    0.00 :   ffffffff810ba3fb:       testl   %r8d, %r8d
    0.00 :   ffffffff810ba3fe:       je      0xffffffff810ba389 <select_task_rq_fair+0xb39>
    0.00 :   ffffffff810ba400:       xorl    %edx, %edx
    0.00 :   ffffffff810ba402:       movl    %edi, -0x48(%rbp)
    0.00 :   ffffffff810ba405:       movl    %eax, %esi
    0.00 :   ffffffff810ba407:       movq    %rcx, -0x58(%rbp)
    0.00 :   ffffffff810ba40b:       jmp     0xffffffff810ba41f <select_task_rq_fair+0xbcf>
    0.00 :   ffffffff810ba40d:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba412:       testl   %eax, %eax
    0.00 :   ffffffff810ba414:       je      0xffffffff810ba45b <select_task_rq_fair+0xc0b>
    0.00 :   ffffffff810ba416:       movl    0x12ac644(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba41c:       leal    0x1(%rbx), %edx
    0.00 :   ffffffff810ba41f:       movslq  0xa60(%r12), %rax
    0.00 :   ffffffff810ba427:       movslq  %edx, %rdx
    0.00 :   ffffffff810ba42a:       movq    -0x7dedc720(,%rax,8), %rdi
    0.00 :   ffffffff810ba432:       addq    %r15, %rdi
    0.00 :   ffffffff810ba435:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810ba43a:       cmpl    0x12ac620(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba440:       movq    %rax, %rbx
    0.00 :   ffffffff810ba443:       movl    %eax, %edi
    0.00 :   ffffffff810ba445:       jb      0xffffffff810ba40d <select_task_rq_fair+0xbbd>
    0.00 :   ffffffff810ba447:       movq    -0x58(%rbp), %rcx
    0.00 :   ffffffff810ba44b:       movl    -0x48(%rbp), %edi
    0.00 :   ffffffff810ba44e:       movq    -0x7dedc720(,%rcx,8), %rdx
    0.00 :   ffffffff810ba456:       jmp     0xffffffff810ba389 <select_task_rq_fair+0xb39>
    0.00 :   ffffffff810ba45b:       movq    0xbe8(%r12), %rax
    0.00 :   ffffffff810ba463:       movq    0x8f0(%r13), %rbx
    0.00 :   ffffffff810ba46a:       movl    -0x48(%rbp), %edi
    0.00 :   ffffffff810ba46d:       movq    -0x58(%rbp), %rcx
    0.00 :   ffffffff810ba471:       cmpq    %rbx, 0xc10(%rax)
    0.00 :   ffffffff810ba478:       jne     0xffffffff810ba343 <select_task_rq_fair+0xaf3>
    0.00 :   ffffffff810ba47e:       movq    -0x7dedc720(,%rcx,8), %rdx
    0.00 :   ffffffff810ba486:       jmp     0xffffffff810ba389 <select_task_rq_fair+0xb39>
    0.00 :   ffffffff810ba48b:       movq    0x8(%rcx), %rcx
    0.00 :   ffffffff810ba48f:       testq   %rcx, %rcx
    0.00 :   ffffffff810ba492:       jne     0xffffffff810ba28c <select_task_rq_fair+0xa3c>
    0.00 :   ffffffff810ba498:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba49d:       nopl    (%rax)
    0.00 :   ffffffff810ba4a0:       jne     0xffffffff810ba343 <select_task_rq_fair+0xaf3>
    0.00 :   ffffffff810ba4a6:       movq    -0x60(%rbp), %rbx
    0.00 :   ffffffff810ba4aa:       movq    0xb00(%r12), %rax
    0.00 :   ffffffff810ba4b2:       movl    -0x3c(%rbp), %esi
    0.00 :   ffffffff810ba4b5:       cmpq    %rax, %rbx
    0.00 :   ffffffff810ba4b8:       cmovbl  %r14d, %esi
    0.00 :   ffffffff810ba4bc:       cmovaeq %rbx, %rax
    0.00 :   ffffffff810ba4c0:       movl    %esi, -0x3c(%rbp)
    0.00 :   ffffffff810ba4c3:       movq    %rax, -0x60(%rbp)
    0.00 :   ffffffff810ba4c7:       jmp     0xffffffff810ba343 <select_task_rq_fair+0xaf3>
    0.00 :   ffffffff810ba4cc:       movl    -0x3c(%rbp), %eax
    0.00 :   ffffffff810ba4cf:       movl    -0x6c(%rbp), %esi
    0.00 :   ffffffff810ba4d2:       movl    -0x70(%rbp), %ebx
    0.00 :   ffffffff810ba4d5:       movq    -0x88(%rbp), %rcx
    0.00 :   ffffffff810ba4dc:       cmpl    $-0x1, %eax
    0.00 :   ffffffff810ba4df:       cmovnel %eax, %esi
    0.00 :   ffffffff810ba4e2:       movl    %esi, -0x3c(%rbp)
    0.00 :   ffffffff810ba4e5:       movl    -0x68(%rbp), %esi
    0.00 :   ffffffff810ba4e8:       cmpl    %esi, -0x3c(%rbp)
    0.00 :   ffffffff810ba4eb:       je      0xffffffff810ba48b <select_task_rq_fair+0xc3b>
    0.00 :   ffffffff810ba4ed:       movslq  -0x3c(%rbp), %rax
    0.00 :   ffffffff810ba4f1:       movl    0x88(%rcx), %esi
    0.00 :   ffffffff810ba4f7:       movq    -0x90(%rbp), %rcx
    0.00 :   ffffffff810ba4fe:       addq    -0x7dedc720(,%rax,8), %rcx
    0.00 :   ffffffff810ba506:       movq    0x9f8(%rcx), %rax
    0.00 :   ffffffff810ba50d:       testq   %rax, %rax
    0.00 :   ffffffff810ba510:       je      0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba516:       xorl    %ecx, %ecx
    0.00 :   ffffffff810ba518:       jmp     0xffffffff810ba52b <select_task_rq_fair+0xcdb>
    0.00 :   ffffffff810ba51a:       movl    %ebx, %edx
    0.00 :   ffffffff810ba51c:       andl    0x3c(%rax), %edx
    0.00 :   ffffffff810ba51f:       cmovneq %rax, %rcx
    0.00 :   ffffffff810ba523:       movq    (%rax), %rax
    0.00 :   ffffffff810ba526:       testq   %rax, %rax
    0.00 :   ffffffff810ba529:       je      0xffffffff810ba533 <select_task_rq_fair+0xce3>
    0.00 :   ffffffff810ba52b:       cmpl    %esi, 0x88(%rax)
    0.00 :   ffffffff810ba531:       jb      0xffffffff810ba51a <select_task_rq_fair+0xcca>
    0.00 :   ffffffff810ba533:       movl    -0x3c(%rbp), %eax
    0.00 :   ffffffff810ba536:       movl    %eax, -0x68(%rbp)
    0.00 :   ffffffff810ba539:       jmp     0xffffffff810ba48f <select_task_rq_fair+0xc3f>
    0.00 :   ffffffff810ba53e:       movl    0x12ac51c(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba544:       movb    $0x0, -0x60(%rbp)
    0.00 :   ffffffff810ba548:       movq    $0x1b2a8, -0x80(%rbp) # imm = 0x1B2A8
    0.00 :   ffffffff810ba550:       jmp     0xffffffff810b9c37 <select_task_rq_fair+0x3e7>
    0.00 :   ffffffff810ba555:       movq    -0x50(%rbp), %r15
    0.00 :   ffffffff810ba559:       movq    -0x58(%rbp), %rdi
    0.00 :   ffffffff810ba55d:       movq    %r15, %rsi
    0.00 :   ffffffff810ba560:       callq   0xffffffff815a0660 <_find_first_bit>
    0.00 :   ffffffff810ba565:       cmpq    %r15, %rax
    0.00 :   ffffffff810ba568:       movq    %rax, %r8
    0.00 :   ffffffff810ba56b:       jb      0xffffffff810b9cbc <select_task_rq_fair+0x46c>
    0.00 :   ffffffff810ba571:       movq    %rbx, %r8
    0.00 :   ffffffff810ba574:       jmp     0xffffffff810b9cbf <select_task_rq_fair+0x46f>
    0.00 :   ffffffff810ba579:       movq    %r14, %rcx
    0.00 :   ffffffff810ba57c:       jmp     0xffffffff810b997e <select_task_rq_fair+0x12e>
    0.00 :   ffffffff810ba581:       cmpb    $0x0, -0x60(%rbp)
    0.00 :   ffffffff810ba585:       je      0xffffffff810ba5a6 <select_task_rq_fair+0xd56>
    0.00 :   ffffffff810ba587:       movq    -0x78(%rbp), %rsi
    0.00 :   ffffffff810ba58b:       movq    -0x80(%rbp), %rdx
    0.00 :   ffffffff810ba58f:       addq    -0x7dedc720(,%rsi,8), %rdx
    0.00 :   ffffffff810ba597:       movq    (%rdx), %rdx
    0.00 :   ffffffff810ba59a:       testq   %rdx, %rdx
    0.00 :   ffffffff810ba59d:       je      0xffffffff810ba5a6 <select_task_rq_fair+0xd56>
    0.00 :   ffffffff810ba59f:       movl    $0x0, 0x8(%rdx)
    0.00 :   ffffffff810ba5a6:       cmpl    %eax, %ebx
    0.00 :   ffffffff810ba5a8:       movl    %ebx, %r8d
    0.00 :   ffffffff810ba5ab:       jae     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba5b1:       jmp     0xffffffff810b9ef7 <select_task_rq_fair+0x6a7>
    0.00 :   ffffffff810ba5b6:       movl    0x12ac4a4(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba5bc:       movb    $0x1, -0x60(%rbp)
    0.00 :   ffffffff810ba5c0:       jmp     0xffffffff810b9c37 <select_task_rq_fair+0x3e7>
    0.00 :   ffffffff810ba5c5:       movl    %r13d, %edi
    0.00 :   ffffffff810ba5c8:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba5cd:       testl   %eax, %eax
    0.00 :   ffffffff810ba5cf:       jne     0xffffffff810ba5fa <select_task_rq_fair+0xdaa>
    0.00 :   ffffffff810ba5d1:       movslq  %r13d, %rdx
    0.00 :   ffffffff810ba5d4:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba5db:       addq    -0x7dedc720(,%rdx,8), %rax
    0.00 :   ffffffff810ba5e3:       movl    0x4(%rax), %edx
    0.00 :   ffffffff810ba5e6:       cmpl    %edx, 0x9c(%rax)
    0.00 :   ffffffff810ba5ec:       jne     0xffffffff810b9bc7 <select_task_rq_fair+0x377>
    0.00 :   ffffffff810ba5f2:       testl   %edx, %edx
    0.00 :   ffffffff810ba5f4:       je      0xffffffff810b9bc7 <select_task_rq_fair+0x377>
    0.00 :   ffffffff810ba5fa:       movl    0xa8(%r12), %edx
    0.00 :   ffffffff810ba602:       movq    0x2e8(%r12), %rax
    0.00 :   ffffffff810ba60a:       btq     %rdx, (%rax)
    0.00 :   ffffffff810ba60e:       jae     0xffffffff810b9bc7 <select_task_rq_fair+0x377>
    0.00 :   ffffffff810ba614:       nopl    (%rax,%rax)
    0.00 :   ffffffff810ba619:       movl    %r13d, -0x3c(%rbp)
    0.00 :   ffffffff810ba61d:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba622:       movq    0x478(%r12), %rax
    0.00 :   ffffffff810ba62a:       leaq    0x400(%r12), %rsi
    0.00 :   ffffffff810ba632:       movq    %rcx, -0x48(%rbp)
    0.00 :   ffffffff810ba636:       movl    %r8d, -0x38(%rbp)
    0.00 :   ffffffff810ba63a:       movq    0x80(%rax), %rdi
    0.00 :   ffffffff810ba641:       callq   0xffffffff810c9c00 <__update_load_avg_blocked_se>
    0.00 :   ffffffff810ba646:       movl    -0x38(%rbp), %r8d
    0.00 :   ffffffff810ba64a:       movq    -0x48(%rbp), %rcx
    0.00 :   ffffffff810ba64e:       jmp     0xffffffff810ba26c <select_task_rq_fair+0xa1c>
    0.00 :   ffffffff810ba653:       movl    %ebx, %esi
    0.00 :   ffffffff810ba655:       movl    %r13d, %edi
    0.00 :   ffffffff810ba658:       callq   0xffffffff810abe00 <cpus_share_cache>
    0.00 :   ffffffff810ba65d:       testb   %al, %al
    0.00 :   ffffffff810ba65f:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810ba663:       je      0xffffffff810b9f7a <select_task_rq_fair+0x72a>
    0.00 :   ffffffff810ba669:       movl    %ebx, %edi
    0.00 :   ffffffff810ba66b:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba670:       testl   %eax, %eax
    0.00 :   ffffffff810ba672:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810ba676:       je      0xffffffff810ba92e <select_task_rq_fair+0x10de>
    0.00 :   ffffffff810ba67c:       cmpl    0x12ac3de(%rip), %ebx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba682:       jne     0xffffffff810b9987 <select_task_rq_fair+0x137>
    0.00 :   ffffffff810ba688:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba68f:       movq    -0x7dedc720(,%rdx,8), %rsi
    0.00 :   ffffffff810ba697:       cmpl    $0x0, -0x58(%rbp)
    0.00 :   ffffffff810ba69b:       movq    0x120(%rax,%rsi), %r15
    0.00 :   ffffffff810ba6a3:       jne     0xffffffff810b9fd1 <select_task_rq_fair+0x781>
    0.00 :   ffffffff810ba6a9:       jmp     0xffffffff810b9ff3 <select_task_rq_fair+0x7a3>
    0.00 :   ffffffff810ba6ae:       movl    %ebx, %edi
    0.00 :   ffffffff810ba6b0:       movq    %rdx, -0x38(%rbp)
    0.00 :   ffffffff810ba6b4:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba6b9:       testl   %eax, %eax
    0.00 :   ffffffff810ba6bb:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810ba6bf:       je      0xffffffff810ba867 <select_task_rq_fair+0x1017>
    0.00 :   ffffffff810ba6c5:       cmpl    0x12ac395(%rip), %ebx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba6cb:       jne     0xffffffff810b9987 <select_task_rq_fair+0x137>
    0.00 :   ffffffff810ba6d1:       movq    -0x7dedc720(,%rdx,8), %rcx
    0.00 :   ffffffff810ba6d9:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba6e0:       movq    0x120(%rax,%rcx), %r15
    0.00 :   ffffffff810ba6e8:       jmp     0xffffffff810b9ff3 <select_task_rq_fair+0x7a3>
    0.00 :   ffffffff810ba6ed:       movl    %ebx, %edi
   29.15 :   ffffffff810ba6ef:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba6f4:       testl   %eax, %eax
    0.00 :   ffffffff810ba6f6:       jne     0xffffffff810ba721 <select_task_rq_fair+0xed1>
    0.00 :   ffffffff810ba6f8:       movslq  %ebx, %r15
    0.00 :   ffffffff810ba6fb:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba702:       addq    -0x7dedc720(,%r15,8), %rax
    0.00 :   ffffffff810ba70a:       movl    0x4(%rax), %edx
    0.00 :   ffffffff810ba70d:       cmpl    %edx, 0x9c(%rax)
    0.00 :   ffffffff810ba713:       jne     0xffffffff810b9ab8 <select_task_rq_fair+0x268>
    0.00 :   ffffffff810ba719:       testl   %edx, %edx
    0.00 :   ffffffff810ba71b:       je      0xffffffff810b9ab8 <select_task_rq_fair+0x268>
    0.00 :   ffffffff810ba721:       nop
    0.00 :   ffffffff810ba723:       jmp     0xffffffff810b9b17 <select_task_rq_fair+0x2c7>
    0.00 :   ffffffff810ba728:       movslq  %ebx, %r15
    0.00 :   ffffffff810ba72b:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba732:       leaq    (%r14,%r14,4), %rdx
    0.00 :   ffffffff810ba736:       movq    -0x7dedc720(,%r15,8), %rcx
    0.00 :   ffffffff810ba73e:       shlq    $0x8, %rdx
    0.00 :   ffffffff810ba742:       movq    0xa00(%rcx,%rax), %rax
    0.00 :   ffffffff810ba74a:       shlq    $0xa, %rax
    0.00 :   ffffffff810ba74e:       cmpq    %rax, %rdx
    0.00 :   ffffffff810ba751:       jae     0xffffffff810b9ab8 <select_task_rq_fair+0x268>
    0.00 :   ffffffff810ba757:       jmp     0xffffffff810b9b17 <select_task_rq_fair+0x2c7>
    0.00 :   ffffffff810ba75c:       xorl    %r13d, %r13d
    0.00 :   ffffffff810ba75f:       movq    $0x158e0, %r14  # imm = 0x158E0
    0.00 :   ffffffff810ba766:       movq    $0x22f40, %r8   # imm = 0x22F40
    0.00 :   ffffffff810ba76d:       movq    %rcx, -0x48(%rbp)
    0.00 :   ffffffff810ba771:       movslq  %ebx, %r15
    0.00 :   ffffffff810ba774:       movl    %r13d, %ecx
    0.00 :   ffffffff810ba777:       movq    %r8, -0x38(%rbp)
    0.00 :   ffffffff810ba77b:       jmp     0xffffffff810ba7bb <select_task_rq_fair+0xf6b>
    0.00 :   ffffffff810ba77d:       cmpl    %r13d, %ebx
    0.00 :   ffffffff810ba780:       je      0xffffffff810ba7b7 <select_task_rq_fair+0xf67>
    0.00 :   ffffffff810ba782:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810ba787:       testl   %eax, %eax
    0.00 :   ffffffff810ba789:       jne     0xffffffff810ba839 <select_task_rq_fair+0xfe9>
    0.00 :   ffffffff810ba78f:       movslq  %r13d, %rax
    0.00 :   ffffffff810ba792:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff810ba796:       addq    -0x7dedc720(,%rax,8), %rdx
    0.00 :   ffffffff810ba79e:       movl    0x12ac2bc(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba7a4:       movl    0x4(%rdx), %esi
    0.00 :   ffffffff810ba7a7:       cmpl    %esi, 0x9c(%rdx)
    0.00 :   ffffffff810ba7ad:       jne     0xffffffff810ba7b7 <select_task_rq_fair+0xf67>
    0.00 :   ffffffff810ba7af:       testl   %esi, %esi
    0.00 :   ffffffff810ba7b1:       jne     0xffffffff810ba925 <select_task_rq_fair+0x10d5>
    0.00 :   ffffffff810ba7b7:       leal    0x1(%r13), %ecx
    0.00 :   ffffffff810ba7bb:       movq    -0x7dedc720(,%r15,8), %rdi
    0.00 :   ffffffff810ba7c3:       movq    0x2e8(%r12), %rsi
    0.00 :   ffffffff810ba7cb:       movslq  %ecx, %rcx
    0.00 :   ffffffff810ba7ce:       movl    %eax, %edx
    0.00 :   ffffffff810ba7d0:       addq    %r14, %rdi
    0.00 :   ffffffff810ba7d3:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff810ba7d8:       movq    %rax, %r13
    0.00 :   ffffffff810ba7db:       movl    %eax, %edi
    0.00 :   ffffffff810ba7dd:       movl    0x12ac27d(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba7e3:       cmpl    %eax, %r13d
    0.00 :   ffffffff810ba7e6:       jb      0xffffffff810ba77d <select_task_rq_fair+0xf2d>
    0.00 :   ffffffff810ba7e8:       movq    -0x48(%rbp), %rcx
    0.00 :   ffffffff810ba7ec:       movb    $0x0, -0x60(%rbp)
    0.00 :   ffffffff810ba7f0:       jmp     0xffffffff810b9c37 <select_task_rq_fair+0x3e7>
    0.00 :   ffffffff810ba7f5:       movl    $0x7fffffff, -0x40(%rbp) # imm = 0x7FFFFFFF
    0.00 :   ffffffff810ba7fc:       jmp     0xffffffff810b9c8d <select_task_rq_fair+0x43d>
    0.00 :   ffffffff810ba801:       movl    %edx, %esi
    0.00 :   ffffffff810ba803:       movq    %r11, %rdi
    0.00 :   ffffffff810ba806:       movq    %rcx, -0x38(%rbp)
    0.00 :   ffffffff810ba80a:       callq   0xffffffff815a0660 <_find_first_bit>
    0.00 :   ffffffff810ba80f:       movq    -0x38(%rbp), %rcx
    0.00 :   ffffffff810ba813:       movl    %eax, -0x3c(%rbp)
    0.00 :   ffffffff810ba816:       jmp     0xffffffff810ba4e5 <select_task_rq_fair+0xc95>
    0.00 :   ffffffff810ba81b:       movl    %eax, %r13d
    0.00 :   ffffffff810ba81e:       movq    %rax, %r14
    0.00 :   ffffffff810ba821:       jmp     0xffffffff810ba1c2 <select_task_rq_fair+0x972>
    0.00 :   ffffffff810ba826:       movl    -0x70(%rbp), %ebx
    0.00 :   ffffffff810ba829:       movq    -0x88(%rbp), %rcx
    0.00 :   ffffffff810ba830:       movl    %r14d, -0x3c(%rbp)
    0.00 :   ffffffff810ba834:       jmp     0xffffffff810ba4e5 <select_task_rq_fair+0xc95>
    0.00 :   ffffffff810ba839:       movq    -0x48(%rbp), %rcx
    0.00 :   ffffffff810ba83d:       movl    0x12ac21d(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba843:       cmpl    %eax, %r13d
    0.00 :   ffffffff810ba846:       jb      0xffffffff810ba619 <select_task_rq_fair+0xdc9>
    0.00 :   ffffffff810ba84c:       movb    $0x0, -0x60(%rbp)
    0.00 :   ffffffff810ba850:       jmp     0xffffffff810b9c37 <select_task_rq_fair+0x3e7>
    0.00 :   ffffffff810ba855:       cmpl    0x12ac204(%rip), %r13d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba85c:       jne     0xffffffff810b998a <select_task_rq_fair+0x13a>
    0.00 :   ffffffff810ba862:       jmp     0xffffffff810b9fc9 <select_task_rq_fair+0x779>
    0.00 :   ffffffff810ba867:       movq    -0x7dedc720(,%rdx,8), %rsi
    0.00 :   ffffffff810ba86f:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba876:       movq    0x120(%rax,%rsi), %r15
    0.00 :   ffffffff810ba87e:       jmp     0xffffffff810b9ff3 <select_task_rq_fair+0x7a3>
    0.00 :   ffffffff810ba883:       movl    -0x50(%rbp), %ecx
    0.00 :   ffffffff810ba886:       cmpl    %eax, %ecx
    0.00 :   ffffffff810ba888:       cmovael -0x3c(%rbp), %ecx
    0.00 :   ffffffff810ba88c:       movl    %ecx, -0x3c(%rbp)
    0.00 :   ffffffff810ba88f:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba894:       cmpb    $0x0, -0x60(%rbp)
    0.00 :   ffffffff810ba898:       je      0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba89e:       movq    -0x78(%rbp), %rbx
    0.00 :   ffffffff810ba8a2:       movq    -0x80(%rbp), %rax
    0.00 :   ffffffff810ba8a6:       addq    -0x7dedc720(,%rbx,8), %rax
    0.00 :   ffffffff810ba8ae:       movq    (%rax), %rax
    0.00 :   ffffffff810ba8b1:       testq   %rax, %rax
    0.00 :   ffffffff810ba8b4:       je      0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba8ba:       movl    $0x0, 0x8(%rax)
    0.00 :   ffffffff810ba8c1:       jmp     0xffffffff810b9995 <select_task_rq_fair+0x145>
    0.00 :   ffffffff810ba8c6:       movslq  %r13d, %rcx
    0.00 :   ffffffff810ba8c9:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810ba8d0:       leaq    (%r14,%r14,4), %rdx
    0.00 :   ffffffff810ba8d4:       movq    -0x7dedc720(,%rcx,8), %rcx
    0.00 :   ffffffff810ba8dc:       shlq    $0x8, %rdx
    0.00 :   ffffffff810ba8e0:       movq    0xa00(%rcx,%rax), %rax
    0.00 :   ffffffff810ba8e8:       shlq    $0xa, %rax
    0.00 :   ffffffff810ba8ec:       cmpq    %rax, %rdx
    0.00 :   ffffffff810ba8ef:       jae     0xffffffff810b9bc7 <select_task_rq_fair+0x377>
    0.00 :   ffffffff810ba8f5:       jmp     0xffffffff810ba619 <select_task_rq_fair+0xdc9>
    0.00 :   ffffffff810ba8fa:       movl    0x12ac160(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba900:       movl    %r14d, %ecx
    0.00 :   ffffffff810ba903:       jmp     0xffffffff810ba886 <select_task_rq_fair+0x1036>
    0.00 :   ffffffff810ba905:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff810ba909:       movq    %rbx, %rsi
    0.00 :   ffffffff810ba90c:       callq   0xffffffff815a0660 <_find_first_bit>
    0.00 :   ffffffff810ba911:       cmpq    %rbx, %rax
    0.00 :   ffffffff810ba914:       movq    %rax, %rdx
    0.00 :   ffffffff810ba917:       jb      0xffffffff810ba12b <select_task_rq_fair+0x8db>
    0.00 :   ffffffff810ba91d:       movq    %r14, %rdx
    0.00 :   ffffffff810ba920:       jmp     0xffffffff810ba12e <select_task_rq_fair+0x8de>
    0.00 :   ffffffff810ba925:       movq    -0x48(%rbp), %rcx
    0.00 :   ffffffff810ba929:       jmp     0xffffffff810ba843 <select_task_rq_fair+0xff3>
    0.00 :   ffffffff810ba92e:       cmpl    0x12ac12b(%rip), %r13d # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810ba935:       jne     0xffffffff810b998a <select_task_rq_fair+0x13a>
    0.00 :   ffffffff810ba93b:       jmp     0xffffffff810ba688 <select_task_rq_fair+0xe38>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     000000000008fa38 <__default_morecore>:
    0.00 :   90d00:          testq   %rsi, %rsi
    0.00 :   90d03:          js      0x91308 <__default_morecore+0x18d0>
    0.00 :   90d09:          pushq   %r15
    0.00 :   90d0b:          pushq   %r14
    0.00 :   90d0d:          pushq   %r13
    0.00 :   90d0f:          pushq   %r12
    0.00 :   90d11:          movq    %rsi, %r12
    0.00 :   90d14:          pushq   %rbp
    0.00 :   90d15:          pushq   %rbx
    0.00 :   90d16:          movq    %rdi, %rbp
    0.00 :   90d19:          leaq    0x17(%rsi), %rbx
    0.00 :   90d1d:          subq    $0x28, %rsp
    0.00 :   90d21:          cmpq    $0x1f, %rbx
    0.00 :   90d25:          jbe     0x910f8 <__default_morecore+0x16c0>
    0.00 :   90d2b:          andq    $-0x10, %rbx
    0.00 :   90d2f:          testq   %rdi, %rdi
    0.00 :   90d32:          je      0x91325 <__default_morecore+0x18ed>
    0.00 :   90d38:          movzbl  0x141781(%rip), %eax    # 0x1d24c0 <__malloc_initialize_hook+0x40>
    0.00 :   90d3f:          cmpq    %rbx, %rax
    0.00 :   90d42:          jb      0x90eb8 <__default_morecore+0x1480>
    0.00 :   90d48:          movl    %ebx, %r13d
    0.00 :   90d4b:          shrl    $0x4, %r13d
    0.00 :   90d4f:          leal    -0x2(%r13), %eax
    0.00 :   90d53:          movl    %r13d, %esi
    0.00 :   90d56:          leaq    (%rbp,%rax,8), %r8
    0.00 :   90d5b:          shlq    $0x3, %rsi
    0.00 :   90d5f:          movq    0x10(%r8), %rdx
    0.00 :   90d63:          testq   %rdx, %rdx
    0.00 :   90d66:          je      0x91254 <__default_morecore+0x181c>
    0.00 :   90d6c:          testb   $0xf, %dl
    0.00 :   90d6f:          jne     0x91600 <__default_morecore+0x1bc8>
    0.00 :   90d75:          addq    %rbp, %rsi
    0.00 :   90d78:          cmpb    $0x0, 0x142859(%rip)    # 0x1d35d8 <__libc_single_threaded>
    0.00 :   90d7f:          je      0x90e98 <__default_morecore+0x1460>
    0.00 :   90d85:          leaq    0x10(%rdx), %rcx
    0.00 :   90d89:          movq    %rcx, %rax
    0.00 :   90d8c:          shrq    $0xc, %rax
    0.00 :   90d90:          xorq    0x10(%rdx), %rax
    0.00 :   90d94:          movq    %rax, 0x10(%r8)
    0.00 :   90d98:          movq    0x8(%rdx), %rax
    0.00 :   90d9c:          shrl    $0x4, %eax
    0.00 :   90d9f:          cmpl    %r13d, %eax
    0.00 :   90da2:          jne     0x91578 <__default_morecore+0x1b40>
    0.00 :   90da8:          movq    0x139fe9(%rip), %r14    # 0x1cad98
    0.00 :   90daf:          subq    $0x11, %rbx
    0.00 :   90db3:          shrq    $0x4, %rbx
    0.00 :   90db7:          movq    %fs:(%r14), %rax
    0.00 :   90dbb:          testq   %rax, %rax
    0.00 :   90dbe:          je      0x912c0 <__default_morecore+0x1888>
    0.00 :   90dc4:          cmpq    0x13a5fd(%rip), %rbx    # 0x1cb3c8 <__nptl_nthreads+0x120>
    0.00 :   90dcb:          jae     0x912c0 <__default_morecore+0x1888>
    0.00 :   90dd1:          movzwl  (%rax,%rbx,2), %eax
    0.00 :   90dd5:          leaq    0x10(%rbx), %r11
    0.00 :   90dd9:          cmpq    0x13a5f8(%rip), %rax    # 0x1cb3d8 <__nptl_nthreads+0x130>
    0.00 :   90de0:          jb      0x90e35 <__default_morecore+0x13fd>
    0.00 :   90de2:          jmp     0x912c0 <__default_morecore+0x1888>
    0.00 :   90de7:          nop
    0.00 :   90de8:          movq    0x10(%rdx), %rax
    0.00 :   90dec:          leaq    0x10(%rdx), %r10
    0.00 :   90df0:          movq    %r10, %rdi
    0.00 :   90df3:          shrq    $0xc, %rdi
    0.00 :   90df7:          xorq    %rdi, %rax
    0.00 :   90dfa:          movq    %rax, 0x10(%r8)
    0.00 :   90dfe:          movq    0x141693(%rip), %rax    # 0x1d2498 <__malloc_initialize_hook+0x18>
    0.00 :   90e05:          movq    %rax, 0x18(%rdx)
    0.00 :   90e09:          movq    %fs:(%r14), %r9
    0.00 :   90e0d:          movzwl  (%r9,%rbx,2), %eax
    0.00 :   90e12:          xorq    (%r9,%r11,8), %rdi
    0.00 :   90e16:          incl    %eax
    0.00 :   90e18:          movq    %rdi, 0x10(%rdx)
    0.00 :   90e1c:          movq    %r10, (%r9,%r11,8)
    0.00 :   90e20:          movw    %ax, (%r9,%rbx,2)
    0.00 :   90e25:          movzwl  %ax, %eax
    0.00 :   90e28:          cmpq    0x13a5a9(%rip), %rax    # 0x1cb3d8 <__nptl_nthreads+0x130>
    0.00 :   90e2f:          jae     0x912c0 <__default_morecore+0x1888>
    0.00 :   90e35:          movq    0x10(%r8), %rdx
    0.00 :   90e39:          testq   %rdx, %rdx
    0.00 :   90e3c:          je      0x912c0 <__default_morecore+0x1888>
    0.00 :   90e42:          testb   $0xf, %dl
    0.00 :   90e45:          jne     0x914d8 <__default_morecore+0x1aa0>
    0.00 :   90e4b:          cmpb    $0x0, 0x142786(%rip)    # 0x1d35d8 <__libc_single_threaded>
    0.00 :   90e52:          jne     0x90de8 <__default_morecore+0x13b0>
    0.00 :   90e54:          jmp     0x91210 <__default_morecore+0x17d8>
    0.00 :   90e59:          nopl    (%rax)
    0.00 :   90e60:          testb   $0xf, %dil
    0.00 :   90e64:          jne     0x91588 <__default_morecore+0x1b50>
    0.00 :   90e6a:          nopw    (%rax,%rax)
    0.00 :   90e70:          movq    %rdx, %rax
    0.00 :   90e73:          cmpl    $0x0, %fs:0x18
    0.00 :   90e7c:          je      0x90e7f <__default_morecore+0x1447>
    0.00 :   90e7e:          lock
    0.00 :   90e7f:          cmpxchgq        %rdi, (%rsi)
    0.00 :   90e83:          cmpq    %rdx, %rax
    0.00 :   90e86:          je      0x90d98 <__default_morecore+0x1360>
    0.00 :   90e8c:          testq   %rax, %rax
    0.00 :   90e8f:          je      0x91254 <__default_morecore+0x181c>
    0.00 :   90e95:          movq    %rax, %rdx
    0.00 :   90e98:          movq    0x10(%rdx), %rax
    0.00 :   90e9c:          leaq    0x10(%rdx), %rcx
    0.00 :   90ea0:          movq    %rcx, %r9
    0.00 :   90ea3:          shrq    $0xc, %r9
    0.00 :   90ea7:          movq    %r9, %rdi
    0.00 :   90eaa:          xorq    %rax, %rdi
    0.00 :   90ead:          cmpq    %rax, %r9
    0.00 :   90eb0:          je      0x90e70 <__default_morecore+0x1438>
    0.00 :   90eb2:          jmp     0x90e60 <__default_morecore+0x1428>
    0.00 :   90eb4:          nopl    (%rax)
    0.00 :   90eb8:          cmpq    $0x3ff, %rbx            # imm = 0x3FF
    0.00 :   90ebf:          jbe     0x916e4 <__default_morecore+0x1cac>
    0.00 :   90ec5:          movq    %rbx, %r13
    0.00 :   90ec8:          shrq    $0x6, %r13
    0.00 :   90ecc:          addl    $0x30, %r13d
    0.00 :   90ed0:          cmpq    $0xc3f, %rbx            # imm = 0xC3F
    0.00 :   90ed7:          jbe     0x90f30 <__default_morecore+0x14f8>
    0.00 :   90ed9:          movq    %rbx, %r13
    0.00 :   90edc:          shrq    $0x9, %r13
    0.00 :   90ee0:          addl    $0x5b, %r13d
    0.00 :   90ee4:          cmpq    $0x29ff, %rbx           # imm = 0x29FF
    0.00 :   90eeb:          jbe     0x90f30 <__default_morecore+0x14f8>
    0.00 :   90eed:          movq    %rbx, %r13
    0.00 :   90ef0:          shrq    $0xc, %r13
    0.00 :   90ef4:          addl    $0x6e, %r13d
    0.00 :   90ef8:          cmpq    $0xafff, %rbx           # imm = 0xAFFF
    0.00 :   90eff:          jbe     0x90f30 <__default_morecore+0x14f8>
    0.00 :   90f01:          movq    %rbx, %r13
    0.00 :   90f04:          shrq    $0xf, %r13
    0.00 :   90f08:          addl    $0x77, %r13d
    0.00 :   90f0c:          cmpq    $0x27fff, %rbx          # imm = 0x27FFF
    0.00 :   90f13:          jbe     0x90f30 <__default_morecore+0x14f8>
    0.00 :   90f15:          movq    %rbx, %r13
    0.00 :   90f18:          movl    $0x2, %eax
    0.00 :   90f1d:          shrq    $0x12, %r13
    0.00 :   90f21:          cmpq    %rax, %r13
    0.00 :   90f24:          cmovaq  %rax, %r13
    0.00 :   90f28:          addl    $0x7c, %r13d
    0.00 :   90f2c:          nopl    (%rax)
    0.00 :   90f30:          movl    0x8(%rbp), %eax
    0.00 :   90f33:          testl   %eax, %eax
    0.00 :   90f35:          jne     0x91268 <__default_morecore+0x1830>
    0.00 :   90f3b:          movq    0x139e56(%rip), %r14    # 0x1cad98
    0.00 :   90f42:          leaq    -0x11(%rbx), %rax
    0.00 :   90f46:          shrq    $0x4, %rax
    0.00 :   90f4a:          movq    %rax, %r11
   26.63 :   90f4d:          cmpq    $0x0, %fs:(%r14)
    0.00 :   90f52:          je      0x912e8 <__default_morecore+0x18b0>
    0.00 :   90f58:          xorl    %eax, %eax
    0.00 :   90f5a:          cmpq    0x13a467(%rip), %r11    # 0x1cb3c8 <__nptl_nthreads+0x120>
    0.00 :   90f61:          cmovbq  %rbx, %rax
    0.00 :   90f65:          movq    %rax, (%rsp)
    0.00 :   90f69:          movl    %r13d, 0x8(%rsp)
    0.00 :   90f6e:          leaq    0x60(%rbp), %r15
    0.00 :   90f72:          xorl    %r9d, %r9d
    0.00 :   90f75:          movq    %r12, %r8
    0.00 :   90f78:          movq    0x78(%rbp), %rdx
    0.00 :   90f7c:          cmpq    %r15, %rdx
    0.00 :   90f7f:          je      0x91406 <__default_morecore+0x19ce>
    0.00 :   90f85:          xorl    %r12d, %r12d
    0.00 :   90f88:          xorl    %r10d, %r10d
    0.00 :   90f8b:          movq    0x8(%rdx), %rax
    0.00 :   90f8f:          andq    $-0x8, %rax
    0.00 :   90f93:          leaq    (%rdx,%rax), %rsi
    0.00 :   90f97:          cmpq    $0x10, %rax
    0.00 :   90f9b:          jbe     0x912f8 <__default_morecore+0x18c0>
    0.00 :   90fa1:          movq    0x888(%rbp), %rdi
    0.00 :   90fa8:          cmpq    %rax, %rdi
    0.00 :   90fab:          jb      0x912f8 <__default_morecore+0x18c0>
    0.00 :   90fb1:          movq    0x8(%rsi), %rcx
    0.00 :   90fb5:          cmpq    $0xf, %rcx
    0.00 :   90fb9:          jbe     0x91340 <__default_morecore+0x1908>
    0.00 :   90fbf:          cmpq    %rcx, %rdi
    0.00 :   90fc2:          jb      0x91340 <__default_morecore+0x1908>
    0.00 :   90fc8:          movq    (%rsi), %rdi
    0.00 :   90fcb:          andq    $-0x8, %rdi
    0.00 :   90fcf:          cmpq    %rax, %rdi
    0.00 :   90fd2:          jne     0x91598 <__default_morecore+0x1b60>
    0.00 :   90fd8:          movq    0x18(%rdx), %rdi
    0.00 :   90fdc:          cmpq    0x10(%rdi), %rdx
    0.00 :   90fe0:          jne     0x914c8 <__default_morecore+0x1a90>
    0.00 :   90fe6:          cmpq    %r15, 0x10(%rdx)
    0.00 :   90fea:          jne     0x914c8 <__default_morecore+0x1a90>
    0.00 :   90ff0:          testb   $0x1, %cl
    0.00 :   90ff3:          jne     0x91610 <__default_morecore+0x1bd8>
    0.00 :   90ff9:          cmpq    $0x3ff, %rbx            # imm = 0x3FF
    0.00 :   91000:          ja      0x9100b <__default_morecore+0x15d3>
    0.00 :   91002:          cmpq    %r15, %rdi
    0.00 :   91005:          je      0x91530 <__default_morecore+0x1af8>
    0.00 :   9100b:          movq    %rdi, 0x78(%rbp)
    0.00 :   9100f:          movq    %r15, 0x10(%rdi)
    0.00 :   91013:          cmpq    %rax, %rbx
    0.00 :   91016:          je      0x91278 <__default_morecore+0x1840>
    0.00 :   9101c:          cmpq    $0x3ff, %rax            # imm = 0x3FF
    0.00 :   91022:          jbe     0x91350 <__default_morecore+0x1918>
    0.00 :   91028:          movq    %rax, %rcx
    0.00 :   9102b:          shrq    $0x6, %rcx
    0.00 :   9102f:          cmpq    $0xc3f, %rax            # imm = 0xC3F
    0.00 :   91035:          jbe     0x91570 <__default_morecore+0x1b38>
    0.00 :   9103b:          movq    %rax, %rcx
    0.00 :   9103e:          shrq    $0x9, %rcx
    0.00 :   91042:          addl    $0x5b, %ecx
    0.00 :   91045:          cmpq    $0x29ff, %rax           # imm = 0x29FF
    0.00 :   9104b:          jbe     0x91090 <__default_morecore+0x1658>
    0.00 :   9104d:          movq    %rax, %rcx
    0.00 :   91050:          shrq    $0xc, %rcx
    0.00 :   91054:          addl    $0x6e, %ecx
    0.00 :   91057:          cmpq    $0xafff, %rax           # imm = 0xAFFF
    0.00 :   9105d:          jbe     0x91090 <__default_morecore+0x1658>
    0.00 :   9105f:          movq    %rax, %rcx
    0.00 :   91062:          shrq    $0xf, %rcx
    0.00 :   91066:          addl    $0x77, %ecx
    0.00 :   91069:          cmpq    $0x27fff, %rax          # imm = 0x27FFF
    0.00 :   9106f:          jbe     0x91090 <__default_morecore+0x1658>
    0.00 :   91071:          movq    %rax, %rcx
    0.00 :   91074:          movl    $0x2, %esi
    0.00 :   91079:          shrq    $0x12, %rcx
    0.00 :   9107d:          cmpq    %rsi, %rcx
    0.00 :   91080:          cmovaq  %rsi, %rcx
    0.00 :   91084:          addl    $0x7c, %ecx
    0.00 :   91087:          nopw    (%rax,%rax)
    0.00 :   91090:          leal    0xc(%rcx,%rcx), %esi
    0.00 :   91094:          movslq  %esi, %rsi
    0.00 :   91097:          leaq    (%rbp,%rsi,8), %r13
    0.00 :   9109c:          movq    (%r13), %rsi
    0.00 :   910a0:          leaq    -0x10(%r13), %rdi
    0.00 :   910a4:          cmpq    %rsi, %rdi
    0.00 :   910a7:          je      0x91620 <__default_morecore+0x1be8>
    0.00 :   910ad:          movq    0x8(%r13), %r13
    0.00 :   910b1:          orq     $0x1, %rax
    0.00 :   910b5:          movq    %rax, 0x10(%rsp)
    0.00 :   910ba:          movq    0x8(%r13), %rax
    0.00 :   910be:          testb   $0x4, %al
    0.00 :   910c0:          jne     0x91b45 <__default_morecore+0x210d>
    0.00 :   910c6:          cmpq    %rax, 0x10(%rsp)
    0.00 :   910cb:          jae     0x916f0 <__default_morecore+0x1cb8>
    0.00 :   910d1:          movq    %rsi, 0x10(%rsp)
    0.00 :   910d6:          movq    0x28(%rsi), %rax
    0.00 :   910da:          vmovq   0x10(%rsp), %xmm1       # xmm1 = mem[0],zero
    0.00 :   910e0:          vpinsrq $0x1, %rax, %xmm1, %xmm0
    0.00 :   910e6:          vmovdqu %xmm0, 0x20(%rdx)
    0.00 :   910eb:          movq    %rdx, 0x20(%rax)
    0.00 :   910ef:          movq    %rdx, 0x28(%rsi)
    0.00 :   910f3:          jmp     0x91367 <__default_morecore+0x192f>
    0.00 :   910f8:          testq   %rdi, %rdi
    0.00 :   910fb:          je      0x91320 <__default_morecore+0x18e8>
    0.00 :   91101:          cmpb    $0x1f, 0x1413b8(%rip)   # 0x1d24c0 <__malloc_initialize_hook+0x40>
    0.00 :   91108:          ja      0x91230 <__default_morecore+0x17f8>
    0.00 :   9110e:          movl    $0x80, %eax
    0.00 :   91113:          movl    $0x2, %r13d
    0.00 :   91119:          movl    $0x20, %ebx
    0.00 :   9111e:          leaq    (%rbp,%rax), %rdx
    0.00 :   91123:          leaq    -0x10(%rbp,%rax), %rsi
    0.00 :   91128:          movq    0x8(%rdx), %rcx
    0.00 :   9112c:          cmpq    %rcx, %rsi
    0.00 :   9112f:          je      0x90f3b <__default_morecore+0x1503>
    0.00 :   91135:          movq    0x18(%rcx), %rax
    0.00 :   91139:          cmpq    %rcx, 0x10(%rax)
    0.00 :   9113d:          jne     0x916d8 <__default_morecore+0x1ca0>
    0.00 :   91143:          leaq    0x13ab36(%rip), %r11    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   9114a:          orq     $0x1, 0x8(%rcx,%rbx)
    0.00 :   91150:          movq    %rax, 0x8(%rdx)
    0.00 :   91154:          movq    %rsi, 0x10(%rax)
    0.00 :   91158:          cmpq    %r11, %rbp
    0.00 :   9115b:          je      0x91162 <__default_morecore+0x172a>
    0.00 :   9115d:          orq     $0x4, 0x8(%rcx)
    0.00 :   91162:          movq    0x139c2f(%rip), %rax    # 0x1cad98
    0.00 :   91169:          movq    %fs:(%rax), %r10
    0.00 :   9116d:          testq   %r10, %r10
    0.00 :   91170:          je      0x911b0 <__default_morecore+0x1778>
    0.00 :   91172:          leaq    -0x11(%rbx), %r9
    0.00 :   91176:          shrq    $0x4, %r9
    0.00 :   9117a:          cmpq    0x13a247(%rip), %r9     # 0x1cb3c8 <__nptl_nthreads+0x120>
    0.00 :   91181:          jae     0x911b0 <__default_morecore+0x1778>
    0.00 :   91183:          movzwl  (%r10,%r9,2), %r13d
    0.00 :   91188:          movq    0x13a249(%rip), %r8     # 0x1cb3d8 <__nptl_nthreads+0x130>
    0.00 :   9118f:          movzwl  %r13w, %edi
    0.00 :   91193:          jmp     0x911aa <__default_morecore+0x1772>
    0.00 :   91195:          nopl    (%rax)
    0.00 :   91198:          movq    0x8(%rdx), %rax
    0.00 :   9119c:          cmpq    %rax, %rsi
    0.00 :   9119f:          je      0x911b0 <__default_morecore+0x1778>
    0.00 :   911a1:          testq   %rax, %rax
    0.00 :   911a4:          jne     0x915a8 <__default_morecore+0x1b70>
    0.00 :   911aa:          cmpq    %r8, %rdi
    0.00 :   911ad:          jb      0x91198 <__default_morecore+0x1760>
    0.00 :   911af:          nop
    0.00 :   911b0:          movl    0x141306(%rip), %esi    # 0x1d24bc <__malloc_initialize_hook+0x3c>
    0.00 :   911b6:          addq    $0x10, %rcx
    0.00 :   911ba:          testl   %esi, %esi
    0.00 :   911bc:          jne     0x912ce <__default_morecore+0x1896>
    0.00 :   911c2:          addq    $0x28, %rsp
    0.00 :   911c6:          movq    %rcx, %rax
    0.00 :   911c9:          popq    %rbx
    0.00 :   911ca:          popq    %rbp
    0.00 :   911cb:          popq    %r12
    0.00 :   911cd:          popq    %r13
    0.00 :   911cf:          popq    %r14
    0.00 :   911d1:          popq    %r15
    0.00 :   911d3:          retq
    0.00 :   911d4:          nopl    (%rax)
    0.00 :   911d8:          testb   $0xf, %r9b
    0.00 :   911dc:          jne     0x91588 <__default_morecore+0x1b50>
    0.00 :   911e2:          nopw    (%rax,%rax)
    0.00 :   911e8:          movq    %rdx, %rax
    0.00 :   911eb:          cmpl    $0x0, %fs:0x18
    0.00 :   911f4:          je      0x911f7 <__default_morecore+0x17bf>
    0.00 :   911f6:          lock
    0.00 :   911f7:          cmpxchgq        %r9, (%rsi)
    0.00 :   911fb:          cmpq    %rax, %rdx
    0.00 :   911fe:          je      0x90dfe <__default_morecore+0x13c6>
    0.00 :   91204:          testq   %rax, %rax
    0.00 :   91207:          je      0x912c0 <__default_morecore+0x1888>
    0.00 :   9120d:          movq    %rax, %rdx
    0.00 :   91210:          movq    0x10(%rdx), %rax
    0.00 :   91214:          leaq    0x10(%rdx), %r10
    0.00 :   91218:          movq    %r10, %rdi
    0.00 :   9121b:          shrq    $0xc, %rdi
    0.00 :   9121f:          movq    %rdi, %r9
    0.00 :   91222:          xorq    %rax, %r9
    0.00 :   91225:          cmpq    %rax, %rdi
    0.00 :   91228:          je      0x911e8 <__default_morecore+0x17b0>
    0.00 :   9122a:          jmp     0x911d8 <__default_morecore+0x17a0>
    0.00 :   9122c:          nopl    (%rax)
    0.00 :   91230:          xorl    %eax, %eax
    0.00 :   91232:          movl    $0x10, %esi
    0.00 :   91237:          leaq    (%rbp,%rax,8), %r8
    0.00 :   9123c:          movl    $0x2, %r13d
    0.00 :   91242:          movl    $0x20, %ebx
    0.00 :   91247:          movq    0x10(%r8), %rdx
    0.00 :   9124b:          testq   %rdx, %rdx
    0.00 :   9124e:          jne     0x90d6c <__default_morecore+0x1334>
    0.00 :   91254:          leal    0xc(%r13,%r13), %eax
   35.44 :   91259:          shlq    $0x3, %rax
    0.00 :   9125d:          jmp     0x9111e <__default_morecore+0x16e6>
    0.00 :   91262:          nopw    (%rax,%rax)
    0.00 :   91268:          movq    %rbp, %rdi
    0.00 :   9126b:          callq   0x8eb80 <timer_settime+0xc10>
    0.00 :   91270:          jmp     0x90f3b <__default_morecore+0x1503>
    0.00 :   91275:          nopl    (%rax)
    0.00 :   91278:          orq     $0x1, %rcx
    0.00 :   9127c:          leaq    0x13a9fd(%rip), %rax    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   91283:          movq    %rcx, 0x8(%rsi)
    0.00 :   91287:          cmpq    %rax, %rbp
    0.00 :   9128a:          je      0x91291 <__default_morecore+0x1859>
    0.00 :   9128c:          orq     $0x4, 0x8(%rdx)
    0.00 :   91291:          cmpq    $0x0, (%rsp)
    0.00 :   91296:          leaq    0x10(%rdx), %rcx
    0.00 :   9129a:          je      0x912b5 <__default_morecore+0x187d>
    0.00 :   9129c:          movq    %fs:(%r14), %rax
    0.00 :   912a0:          movzwl  (%rax,%r11,2), %edi
    0.00 :   912a5:          cmpq    0x13a12c(%rip), %rdi    # 0x1cb3d8 <__nptl_nthreads+0x130>
    0.00 :   912ac:          movq    %rdi, %rsi
    0.00 :   912af:          jb      0x914e8 <__default_morecore+0x1ab0>
    0.00 :   912b5:          movq    %r8, %r12
    0.00 :   912b8:          nopl    (%rax,%rax)
    0.00 :   912c0:          movl    0x1411f6(%rip), %esi    # 0x1d24bc <__malloc_initialize_hook+0x3c>
    0.00 :   912c6:          testl   %esi, %esi
    0.00 :   912c8:          je      0x911c2 <__default_morecore+0x178a>
    0.00 :   912ce:          movq    %rcx, %rdi
    0.00 :   912d1:          xorb    $-0x1, %sil
    0.00 :   912d5:          movq    %r12, %rdx
    0.00 :   912d8:          callq   0x22310 <__tunable_get_val@plt+0x20>
    0.00 :   912dd:          movq    %rax, %rcx
    0.00 :   912e0:          jmp     0x911c2 <__default_morecore+0x178a>
    0.00 :   912e5:          nopl    (%rax)
    0.00 :   912e8:          movq    $0x0, (%rsp)
    0.00 :   912f0:          jmp     0x90f69 <__default_morecore+0x1531>
    0.00 :   912f5:          nopl    (%rax)
    0.00 :   912f8:          leaq    0x102759(%rip), %rdi    # 0x193a58 <_itoa_lower_digits+0x2298>
    0.00 :   912ff:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   91304:          nopl    (%rax)
    0.00 :   91308:          movq    0x139ae9(%rip), %rax    # 0x1cadf8
    0.00 :   9130f:          movl    $0xc, %fs:(%rax)
    0.00 :   91316:          xorl    %eax, %eax
    0.00 :   91318:          retq
    0.00 :   91319:          nopl    (%rax)
    0.00 :   91320:          movl    $0x20, %ebx
    0.00 :   91325:          xorl    %esi, %esi
    0.00 :   91327:          movq    %rbx, %rdi
    0.00 :   9132a:          callq   0x904e0 <__default_morecore+0xaa8>
    0.00 :   9132f:          movq    %rax, %rcx
    0.00 :   91332:          testq   %rax, %rax
    0.00 :   91335:          jne     0x912c0 <__default_morecore+0x1888>
    0.00 :   91337:          xorl    %ecx, %ecx
    0.00 :   91339:          jmp     0x911c2 <__default_morecore+0x178a>
    0.00 :   9133e:          nop
    0.00 :   91340:          leaq    0x102739(%rip), %rdi    # 0x193a80 <_itoa_lower_digits+0x22c0>
    0.00 :   91347:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   9134c:          nopl    (%rax)
    0.00 :   91350:          movl    %eax, %ecx
    0.00 :   91352:          shrl    $0x4, %ecx
    0.00 :   91355:          leal    0xc(%rcx,%rcx), %eax
    0.00 :   91359:          cltq
    0.00 :   9135b:          leaq    (%rbp,%rax,8), %rax
    0.00 :   91360:          movq    (%rax), %rdi
    0.00 :   91363:          leaq    -0x10(%rax), %r13
    0.00 :   91367:          movl    %ecx, %eax
    0.00 :   91369:          movl    $0x1, %esi
    0.00 :   9136e:          sarl    $0x5, %eax
    0.00 :   91371:          shll    %cl, %esi
    0.00 :   91373:          cltq
    0.00 :   91375:          incq    %r9
    0.00 :   91378:          orl     %esi, 0x860(%rbp,%rax,4)
    0.00 :   9137f:          movq    %r13, 0x18(%rdx)
    0.00 :   91383:          movq    %rdi, 0x10(%rdx)
    0.00 :   91387:          movq    %rdx, 0x18(%rdi)
    0.00 :   9138b:          movq    %rdx, 0x10(%r13)
    0.00 :   9138f:          testl   %r10d, %r10d
    0.00 :   91392:          je      0x914b0 <__default_morecore+0x1a78>
    0.00 :   91398:          movq    0x13a041(%rip), %rax    # 0x1cb3e0 <__nptl_nthreads+0x138>
    0.00 :   9139f:          testq   %rax, %rax
    0.00 :   913a2:          je      0x913e0 <__default_morecore+0x19a8>
    0.00 :   913a4:          cmpq    %r9, %rax
    0.00 :   913a7:          jae     0x913e0 <__default_morecore+0x19a8>
    0.00 :   913a9:          movq    %fs:(%r14), %rax
    0.00 :   913ad:          leaq    0x10(%r11), %rsi
    0.00 :   913b1:          movq    (%rax,%rsi,8), %rcx
    0.00 :   913b5:          testb   $0xf, %cl
    0.00 :   913b8:          jne     0x91b1a <__default_morecore+0x20e2>
    0.00 :   913be:          movq    %rcx, %rdx
    0.00 :   913c1:          xorl    %r8d, %r8d
    0.00 :   913c4:          shrq    $0xc, %rdx
    0.00 :   913c8:          xorq    (%rcx), %rdx
    0.00 :   913cb:          movq    %rdx, (%rax,%rsi,8)
    0.00 :   913cf:          decw    (%rax,%r11,2)
    0.00 :   913d4:          movq    %r8, 0x8(%rcx)
    0.00 :   913d8:          jmp     0x911c2 <__default_morecore+0x178a>
    0.00 :   913dd:          nopl    (%rax)
    0.00 :   913e0:          incl    %r12d
    0.00 :   913e3:          cmpl    $0x270f, %r12d          # imm = 0x270F
    0.00 :   913ea:          jg      0x9191e <__default_morecore+0x1ee6>
    0.00 :   913f0:          movq    0x78(%rbp), %rdx
    0.00 :   913f4:          cmpq    %r15, %rdx
    0.00 :   913f7:          jne     0x90f8b <__default_morecore+0x1553>
    0.00 :   913fd:          testl   %r10d, %r10d
    0.00 :   91400:          jne     0x9191e <__default_morecore+0x1ee6>
    0.00 :   91406:          cmpq    $0x3ff, %rbx            # imm = 0x3FF
    0.00 :   9140d:          jbe     0x91432 <__default_morecore+0x19fa>
    0.00 :   9140f:          movl    0x8(%rsp), %eax
    0.00 :   91413:          leal    0xc(%rax,%rax), %eax
    0.00 :   91417:          leaq    (%rbp,%rax,8), %rax
    0.00 :   9141c:          movq    (%rax), %rdx
    0.00 :   9141f:          leaq    -0x10(%rax), %rcx
    0.00 :   91423:          cmpq    %rcx, %rdx
    0.00 :   91426:          je      0x91432 <__default_morecore+0x19fa>
    0.00 :   91428:          cmpq    %rbx, 0x8(%rdx)
    0.00 :   9142c:          jae     0x91971 <__default_morecore+0x1f39>
    0.00 :   91432:          movl    0x8(%rsp), %eax
    0.00 :   91436:          leal    0x1(%rax), %ecx
    0.00 :   91439:          leal    0xe(%rax,%rax), %eax
    0.00 :   9143d:          movl    %ecx, %edi
    0.00 :   9143f:          leaq    -0x10(%rbp,%rax,8), %rdx
    0.00 :   91444:          shrl    $0x5, %edi
    0.00 :   91447:          movl    %edi, %eax
    0.00 :   91449:          movl    0x860(%rbp,%rax,4), %esi
    0.00 :   91450:          movl    $0x1, %eax
    0.00 :   91455:          shll    %cl, %eax
    0.00 :   91457:          nopw    (%rax,%rax)
    0.00 :   91460:          cmpl    %eax, %esi
    0.00 :   91462:          jb      0x91640 <__default_morecore+0x1c08>
    0.00 :   91468:          testl   %eax, %eax
    0.00 :   9146a:          jne     0x91484 <__default_morecore+0x1a4c>
    0.00 :   9146c:          jmp     0x91640 <__default_morecore+0x1c08>
    0.00 :   91471:          nopl    (%rax)
    0.00 :   91478:          addq    $0x10, %rdx
    0.00 :   9147c:          addl    %eax, %eax
    0.00 :   9147e:          je      0x918ff <__default_morecore+0x1ec7>
    0.00 :   91484:          testl   %esi, %eax
    0.00 :   91486:          je      0x91478 <__default_morecore+0x1a40>
    0.00 :   91488:          movq    0x18(%rdx), %r13
    0.00 :   9148c:          cmpq    %r13, %rdx
    0.00 :   9148f:          jne     0x9179e <__default_morecore+0x1d66>
    0.00 :   91495:          movl    %eax, %ecx
    0.00 :   91497:          addq    $0x10, %rdx
    0.00 :   9149b:          notl    %ecx
    0.00 :   9149d:          addl    %eax, %eax
    0.00 :   9149f:          andl    %ecx, %esi
    0.00 :   914a1:          movl    %edi, %ecx
    0.00 :   914a3:          movl    %esi, 0x860(%rbp,%rcx,4)
    0.00 :   914aa:          jmp     0x91460 <__default_morecore+0x1a28>
    0.00 :   914ac:          nopl    (%rax)
    0.00 :   914b0:          incl    %r12d
    0.00 :   914b3:          cmpl    $0x270f, %r12d          # imm = 0x270F
    0.00 :   914ba:          jle     0x913f0 <__default_morecore+0x19b8>
    0.00 :   914c0:          jmp     0x91406 <__default_morecore+0x19ce>
    0.00 :   914c5:          nopl    (%rax)
    0.00 :   914c8:          leaq    0x102611(%rip), %rdi    # 0x193ae0 <_itoa_lower_digits+0x2320>
    0.00 :   914cf:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   914d4:          nopl    (%rax)
    0.00 :   914d8:          leaq    0x102519(%rip), %rdi    # 0x1939f8 <_itoa_lower_digits+0x2238>
    0.00 :   914df:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   914e4:          nopl    (%rax)
    0.00 :   914e8:          movq    0x140fa9(%rip), %rdi    # 0x1d2498 <__malloc_initialize_hook+0x18>
    0.00 :   914ef:          leaq    0x10(%r11), %r10
    0.00 :   914f3:          incl    %esi
    0.00 :   914f5:          movq    %rdi, 0x18(%rdx)
    0.00 :   914f9:          movq    %rcx, %rdi
    0.00 :   914fc:          shrq    $0xc, %rdi
    0.00 :   91500:          xorq    0x80(%rax,%r11,8), %rdi
    0.00 :   91508:          movq    %rdi, 0x10(%rdx)
    0.00 :   9150c:          movq    0x78(%rbp), %rdx
    0.00 :   91510:          movq    %rcx, (%rax,%r10,8)
    0.00 :   91514:          movw    %si, (%rax,%r11,2)
    0.00 :   91519:          cmpq    %rdx, %r15
    0.00 :   9151c:          je      0x91922 <__default_morecore+0x1eea>
    0.00 :   91522:          movl    $0x1, %r10d
    0.00 :   91528:          jmp     0x90f8b <__default_morecore+0x1553>
    0.00 :   9152d:          nopl    (%rax)
    0.00 :   91530:          cmpq    0x68(%rbp), %rdx
    0.00 :   91534:          jne     0x9100b <__default_morecore+0x15d3>
    0.00 :   9153a:          leaq    0x20(%rbx), %r13
    0.00 :   9153e:          cmpq    %rax, %r13
    0.00 :   91541:          jb      0x91aa7 <__default_morecore+0x206f>
    0.00 :   91547:          movq    %rdi, 0x78(%rbp)
    0.00 :   9154b:          movq    %r15, 0x10(%rdi)
    0.00 :   9154f:          cmpq    %rax, %rbx
    0.00 :   91552:          je      0x91278 <__default_morecore+0x1840>
    0.00 :   91558:          cmpq    $0x3ff, %rax            # imm = 0x3FF
    0.00 :   9155e:          jbe     0x91350 <__default_morecore+0x1918>
    0.00 :   91564:          movl    $0x10, %ecx
    0.00 :   91569:          nopl    (%rax)
    0.00 :   91570:          addl    $0x30, %ecx
    0.00 :   91573:          jmp     0x91090 <__default_morecore+0x1658>
    0.00 :   91578:          leaq    0x102451(%rip), %rdi    # 0x1939d0 <_itoa_lower_digits+0x2210>
    0.00 :   9157f:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   91584:          nopl    (%rax)
    0.00 :   91588:          leaq    0x102411(%rip), %rdi    # 0x1939a0 <_itoa_lower_digits+0x21e0>
    0.00 :   9158f:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   91594:          nopl    (%rax)
    0.00 :   91598:          leaq    0x102509(%rip), %rdi    # 0x193aa8 <_itoa_lower_digits+0x22e8>
    0.00 :   9159f:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   915a4:          nopl    (%rax)
    0.00 :   915a8:          movq    0x18(%rax), %rdi
    0.00 :   915ac:          orq     $0x1, 0x8(%rax,%rbx)
    0.00 :   915b2:          cmpq    %r11, %rbp
    0.00 :   915b5:          je      0x915bc <__default_morecore+0x1b84>
    0.00 :   915b7:          orq     $0x4, 0x8(%rax)
    0.00 :   915bc:          movq    %rdi, 0x8(%rdx)
    0.00 :   915c0:          leaq    0x10(%rax), %r14
    0.00 :   915c4:          incl    %r13d
    0.00 :   915c7:          movq    %rsi, 0x10(%rdi)
    0.00 :   915cb:          movq    0x140ec6(%rip), %rdi    # 0x1d2498 <__malloc_initialize_hook+0x18>
    0.00 :   915d2:          movq    %rdi, 0x18(%rax)
    0.00 :   915d6:          movq    %r14, %rdi
    0.00 :   915d9:          shrq    $0xc, %rdi
    0.00 :   915dd:          xorq    0x80(%r10,%r9,8), %rdi
    0.00 :   915e5:          movq    %rdi, 0x10(%rax)
    0.00 :   915e9:          movq    %r14, 0x80(%r10,%r9,8)
    0.00 :   915f1:          movw    %r13w, (%r10,%r9,2)
    0.00 :   915f6:          jmp     0x9118f <__default_morecore+0x1757>
    0.00 :   915fb:          nopl    (%rax,%rax)
    0.00 :   91600:          leaq    0x102369(%rip), %rdi    # 0x193970 <_itoa_lower_digits+0x21b0>
    0.00 :   91607:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   9160c:          nopl    (%rax)
    0.00 :   91610:          leaq    0x1024f9(%rip), %rdi    # 0x193b10 <_itoa_lower_digits+0x2350>
    0.00 :   91617:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   9161c:          nopl    (%rax)
    0.00 :   91620:          movq    %rdx, 0x10(%rsp)
    0.00 :   91625:          movq    %rdi, %r13
    0.00 :   91628:          vmovq   0x10(%rsp), %xmm2       # xmm2 = mem[0],zero
    0.00 :   9162e:          vpunpcklqdq     %xmm2, %xmm2, %xmm0 # xmm0 = xmm2[0,0]
    0.00 :   91632:          vmovdqu %xmm0, 0x20(%rdx)
    0.00 :   91637:          jmp     0x91367 <__default_morecore+0x192f>
    0.00 :   9163c:          nopl    (%rax)
    0.00 :   91640:          leal    0x1(%rdi), %eax
    0.00 :   91643:          jmp     0x9165a <__default_morecore+0x1c22>
    0.00 :   91645:          nopl    (%rax)
    0.00 :   91648:          incq    %rax
   37.93 :   9164b:          movl    0x85c(%rbp,%rax,4), %esi
    0.00 :   91652:          testl   %esi, %esi
    0.00 :   91654:          jne     0x91760 <__default_morecore+0x1d28>
    0.00 :   9165a:          movl    %eax, %edi
    0.00 :   9165c:          cmpl    $0x4, %eax
    0.00 :   9165f:          jne     0x91648 <__default_morecore+0x1c10>
    0.00 :   91661:          movq    0x60(%rbp), %rcx
    0.00 :   91665:          movq    0x8(%rcx), %rax
    0.00 :   91669:          andq    $-0x8, %rax
    0.00 :   9166d:          cmpq    %rax, 0x888(%rbp)
    0.00 :   91674:          jb      0x918aa <__default_morecore+0x1e72>
    0.00 :   9167a:          leaq    0x20(%rbx), %rdx
    0.00 :   9167e:          cmpq    %rdx, %rax
    0.00 :   91681:          jae     0x91a4d <__default_morecore+0x2015>
    0.00 :   91687:          movq    %r11, 0x18(%rsp)
    0.00 :   9168c:          movq    %r9, 0x10(%rsp)
    0.00 :   91691:          movl    0x8(%rbp), %eax
    0.00 :   91694:          testl   %eax, %eax
    0.00 :   91696:          je      0x91b26 <__default_morecore+0x20ee>
    0.00 :   9169c:          movq    %rbp, %rdi
    0.00 :   9169f:          movq    %r8, 0x8(%rsp)
    0.00 :   916a4:          callq   0x8eb80 <timer_settime+0xc10>
    0.00 :   916a9:          cmpq    $0x3ff, %rbx            # imm = 0x3FF
    0.00 :   916b0:          movq    0x8(%rsp), %r8
    0.00 :   916b5:          movq    0x10(%rsp), %r9
    0.00 :   916ba:          movq    0x18(%rsp), %r11
    0.00 :   916bf:          ja      0x9177d <__default_morecore+0x1d45>
    0.00 :   916c5:          movl    %ebx, %eax
    0.00 :   916c7:          shrl    $0x4, %eax
    0.00 :   916ca:          movl    %eax, 0x8(%rsp)
    0.00 :   916ce:          jmp     0x90f78 <__default_morecore+0x1540>
    0.00 :   916d3:          nopl    (%rax,%rax)
    0.00 :   916d8:          leaq    0x102349(%rip), %rdi    # 0x193a28 <_itoa_lower_digits+0x2268>
    0.00 :   916df:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   916e4:          movl    %ebx, %r13d
    0.00 :   916e7:          shrl    $0x4, %r13d
    0.00 :   916eb:          jmp     0x91254 <__default_morecore+0x181c>
    0.00 :   916f0:          movq    0x8(%rsi), %rdi
    0.00 :   916f4:          testb   $0x4, %dil
    0.00 :   916f8:          jne     0x91b83 <__default_morecore+0x214b>
    0.00 :   916fe:          movq    0x10(%rsp), %rax
    0.00 :   91703:          jmp     0x9171a <__default_morecore+0x1ce2>
    0.00 :   91705:          nopl    (%rax)
    0.00 :   91708:          movq    0x20(%rsi), %rsi
    0.00 :   9170c:          movq    0x8(%rsi), %rdi
    0.00 :   91710:          testb   $0x4, %dil
    0.00 :   91714:          jne     0x91a88 <__default_morecore+0x2050>
    0.00 :   9171a:          cmpq    %rdi, %rax
    0.00 :   9171d:          jb      0x91708 <__default_morecore+0x1cd0>
    0.00 :   9171f:          je      0x91777 <__default_morecore+0x1d3f>
    0.00 :   91721:          movq    0x28(%rsi), %rax
    0.00 :   91725:          movq    %rsi, 0x20(%rdx)
    0.00 :   91729:          movq    %rax, 0x28(%rdx)
    0.00 :   9172d:          cmpq    %rsi, 0x20(%rax)
    0.00 :   91731:          jne     0x918d6 <__default_morecore+0x1e9e>
    0.00 :   91737:          movq    %rdx, 0x28(%rsi)
    0.00 :   9173b:          movq    %rsi, %rdi
    0.00 :   9173e:          movq    0x28(%rdx), %rax
    0.00 :   91742:          movq    %rdx, 0x20(%rax)
    0.00 :   91746:          movq    0x18(%rdi), %r13
    0.00 :   9174a:          cmpq    %rdi, 0x10(%r13)
    0.00 :   9174e:          je      0x91367 <__default_morecore+0x192f>
    0.00 :   91754:          leaq    0x102425(%rip), %rdi    # 0x193b80 <_itoa_lower_digits+0x23c0>
    0.00 :   9175b:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   91760:          movl    %edi, %eax
    0.00 :   91762:          shll    $0x6, %eax
    0.00 :   91765:          addl    $0xc, %eax
    0.00 :   91768:          leaq    -0x10(%rbp,%rax,8), %rdx
    0.00 :   9176d:          movl    $0x1, %eax
    0.00 :   91772:          jmp     0x91484 <__default_morecore+0x1a4c>
    0.00 :   91777:          movq    0x10(%rsi), %rdi
    0.00 :   9177b:          jmp     0x91746 <__default_morecore+0x1d0e>
    0.00 :   9177d:          movq    %rbx, %r13
    0.00 :   91780:          shrq    $0x6, %r13
    0.00 :   91784:          cmpq    $0xc3f, %rbx            # imm = 0xC3F
    0.00 :   9178b:          ja      0x91870 <__default_morecore+0x1e38>
    0.00 :   91791:          leal    0x30(%r13), %eax
    0.00 :   91795:          movl    %eax, 0x8(%rsp)
    0.00 :   91799:          jmp     0x90f78 <__default_morecore+0x1540>
    0.00 :   9179e:          movq    0x8(%r13), %r14
    0.00 :   917a2:          movq    %r8, %r12
    0.00 :   917a5:          andq    $-0x8, %r14
    0.00 :   917a9:          cmpq    %rbx, %r14
    0.00 :   917ac:          jb      0x91b64 <__default_morecore+0x212c>
    0.00 :   917b2:          movq    %r14, %rcx
    0.00 :   917b5:          movq    %r13, %rdi
    0.00 :   917b8:          subq    %rbx, %rcx
    0.00 :   917bb:          movq    %rcx, (%rsp)
    0.00 :   917bf:          callq   0x8eaa8 <timer_settime+0xb38>
    0.00 :   917c4:          movq    (%rsp), %rcx
    0.00 :   917c8:          cmpq    $0x1f, %rcx
    0.00 :   917cc:          jbe     0x918b6 <__default_morecore+0x1e7e>
    0.00 :   917d2:          movq    0x70(%rbp), %rdx
    0.00 :   917d6:          leaq    (%r13,%rbx), %rax
    0.00 :   917db:          cmpq    %r15, 0x18(%rdx)
    0.00 :   917df:          jne     0x91a41 <__default_morecore+0x2009>
    0.00 :   917e5:          movq    %r15, 0x18(%rax)
    0.00 :   917e9:          movq    %rdx, 0x10(%rax)
    0.00 :   917ed:          movq    %rax, 0x70(%rbp)
    0.00 :   917f1:          movq    %rax, 0x18(%rdx)
    0.00 :   917f5:          cmpq    $0x3ff, %rbx            # imm = 0x3FF
    0.00 :   917fc:          ja      0x91802 <__default_morecore+0x1dca>
    0.00 :   917fe:          movq    %rax, 0x68(%rbp)
    0.00 :   91802:          cmpq    $0x3ff, %rcx            # imm = 0x3FF
    0.00 :   91809:          jbe     0x91815 <__default_morecore+0x1ddd>
    0.00 :   9180b:          xorl    %edx, %edx
    0.00 :   9180d:          movq    %rdx, 0x20(%rax)
    0.00 :   91811:          movq    %rdx, 0x28(%rax)
    0.00 :   91815:          leaq    0x13a464(%rip), %rdx    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   9181c:          cmpq    %rdx, %rbp
    0.00 :   9181f:          setne   %dl
    0.00 :   91822:          movzbl  %dl, %edx
    0.00 :   91825:          shlq    $0x2, %rdx
    0.00 :   91829:          orq     %rbx, %rdx
    0.00 :   9182c:          orq     $0x1, %rdx
    0.00 :   91830:          movq    %rdx, 0x8(%r13)
    0.00 :   91834:          movq    %rcx, %rdx
    0.00 :   91837:          orq     $0x1, %rdx
    0.00 :   9183b:          movq    %rdx, 0x8(%rax)
    0.00 :   9183f:          movq    %rcx, (%r13,%r14)
    0.00 :   91844:          movl    0x140c72(%rip), %eax    # 0x1d24bc <__malloc_initialize_hook+0x3c>
    0.00 :   9184a:          leaq    0x10(%r13), %rcx
    0.00 :   9184e:          testl   %eax, %eax
    0.00 :   91850:          je      0x911c2 <__default_morecore+0x178a>
    0.00 :   91856:          xorb    $-0x1, %al
    0.00 :   91858:          movq    %rcx, %rdi
    0.00 :   9185b:          movl    %eax, %esi
    0.00 :   9185d:          movq    %r12, %rdx
    0.00 :   91860:          callq   0x22310 <__tunable_get_val@plt+0x20>
    0.00 :   91865:          movq    %rax, %rcx
    0.00 :   91868:          jmp     0x911c2 <__default_morecore+0x178a>
    0.00 :   9186d:          nopl    (%rax)
    0.00 :   91870:          movq    %rbx, %r13
    0.00 :   91873:          shrq    $0x9, %r13
    0.00 :   91877:          cmpq    $0x29ff, %rbx           # imm = 0x29FF
    0.00 :   9187e:          ja      0x9188d <__default_morecore+0x1e55>
    0.00 :   91880:          leal    0x5b(%r13), %eax
    0.00 :   91884:          movl    %eax, 0x8(%rsp)
    0.00 :   91888:          jmp     0x90f78 <__default_morecore+0x1540>
    0.00 :   9188d:          movq    %rbx, %r13
    0.00 :   91890:          shrq    $0xc, %r13
    0.00 :   91894:          cmpq    $0xafff, %rbx           # imm = 0xAFFF
    0.00 :   9189b:          ja      0x918e2 <__default_morecore+0x1eaa>
    0.00 :   9189d:          leal    0x6e(%r13), %eax
    0.00 :   918a1:          movl    %eax, 0x8(%rsp)
    0.00 :   918a5:          jmp     0x90f78 <__default_morecore+0x1540>
    0.00 :   918aa:          leaq    0xfca23(%rip), %rdi     # 0x18e2d4 <_libc_intl_domainname+0x1446>
    0.00 :   918b1:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   918b6:          leaq    0x13a3c3(%rip), %rax    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   918bd:          orq     $0x1, 0x8(%r13,%r14)
    0.00 :   918c3:          cmpq    %rax, %rbp
    0.00 :   918c6:          je      0x91844 <__default_morecore+0x1e0c>
    0.00 :   918cc:          orq     $0x4, 0x8(%r13)
    0.00 :   918d1:          jmp     0x91844 <__default_morecore+0x1e0c>
    0.00 :   918d6:          leaq    0x102263(%rip), %rdi    # 0x193b40 <_itoa_lower_digits+0x2380>
    0.00 :   918dd:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   918e2:          movq    %rbx, %r13
    0.00 :   918e5:          shrq    $0xf, %r13
    0.00 :   918e9:          cmpq    $0x27fff, %rbx          # imm = 0x27FFF
    0.00 :   918f0:          ja      0x91951 <__default_morecore+0x1f19>
    0.00 :   918f2:          leal    0x77(%r13), %eax
    0.00 :   918f6:          movl    %eax, 0x8(%rsp)
    0.00 :   918fa:          jmp     0x90f78 <__default_morecore+0x1540>
    0.00 :   918ff:          leaq    0x10279a(%rip), %rcx    # 0x1940a0 <_itoa_lower_digits+0x28e0>
    0.00 :   91906:          movl    $0x10b4, %edx           # imm = 0x10B4
    0.00 :   9190b:          leaq    0xfc862(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   91912:          leaq    0xfc9b2(%rip), %rdi     # 0x18e2cb <_libc_intl_domainname+0x143d>
    0.00 :   91919:          callq   0x30e40 <__assert+0x10>
    0.00 :   9191e:          leaq    0x10(%r11), %r10
    0.00 :   91922:          movq    %fs:(%r14), %rax
    0.00 :   91926:          movq    (%rax,%r10,8), %rcx
    0.00 :   9192a:          testb   $0xf, %cl
    0.00 :   9192d:          jne     0x91b1a <__default_morecore+0x20e2>
    0.00 :   91933:          movq    %rcx, %rdx
    0.00 :   91936:          xorl    %edi, %edi
    0.00 :   91938:          shrq    $0xc, %rdx
    0.00 :   9193c:          xorq    (%rcx), %rdx
    0.00 :   9193f:          movq    %rdx, (%rax,%r10,8)
    0.00 :   91943:          decw    (%rax,%r11,2)
    0.00 :   91948:          movq    %rdi, 0x8(%rcx)
    0.00 :   9194c:          jmp     0x911c2 <__default_morecore+0x178a>
    0.00 :   91951:          movq    %rbx, %r13
    0.00 :   91954:          movl    $0x2, %eax
    0.00 :   91959:          shrq    $0x12, %r13
    0.00 :   9195d:          cmpq    %rax, %r13
    0.00 :   91960:          cmovaq  %rax, %r13
    0.00 :   91964:          leal    0x7c(%r13), %eax
    0.00 :   91968:          movl    %eax, 0x8(%rsp)
    0.00 :   9196c:          jmp     0x90f78 <__default_morecore+0x1540>
    0.00 :   91971:          movq    0x28(%rdx), %r13
    0.00 :   91975:          movq    %r8, %r12
    0.00 :   91978:          jmp     0x9197e <__default_morecore+0x1f46>
    0.00 :   9197a:          movq    0x28(%r13), %r13
    0.00 :   9197e:          movq    0x8(%r13), %rdx
    0.00 :   91982:          movq    %rdx, %r14
    0.00 :   91985:          andq    $-0x8, %r14
    0.00 :   91989:          cmpq    %rbx, %r14
    0.00 :   9198c:          jb      0x9197a <__default_morecore+0x1f42>
    0.00 :   9198e:          cmpq    %r13, 0x8(%rax)
    0.00 :   91992:          je      0x919a0 <__default_morecore+0x1f68>
    0.00 :   91994:          movq    0x10(%r13), %rax
    0.00 :   91998:          cmpq    0x8(%rax), %rdx
    0.00 :   9199c:          cmoveq  %rax, %r13
    0.00 :   919a0:          movq    %r14, %rcx
    0.00 :   919a3:          movq    %r13, %rdi
    0.00 :   919a6:          subq    %rbx, %rcx
    0.00 :   919a9:          movq    %rcx, (%rsp)
    0.00 :   919ad:          callq   0x8eaa8 <timer_settime+0xb38>
    0.00 :   919b2:          movq    (%rsp), %rcx
    0.00 :   919b6:          cmpq    $0x1f, %rcx
    0.00 :   919ba:          jbe     0x91bae <__default_morecore+0x2176>
    0.00 :   919c0:          movq    0x70(%rbp), %rdx
    0.00 :   919c4:          leaq    (%r13,%rbx), %rax
    0.00 :   919c9:          cmpq    %r15, 0x18(%rdx)
    0.00 :   919cd:          jne     0x91ba2 <__default_morecore+0x216a>
    0.00 :   919d3:          movq    %r15, 0x18(%rax)
    0.00 :   919d7:          movq    %rdx, 0x10(%rax)
    0.00 :   919db:          movq    %rax, 0x70(%rbp)
    0.00 :   919df:          movq    %rax, 0x18(%rdx)
    0.00 :   919e3:          cmpq    $0x3ff, %rcx            # imm = 0x3FF
    0.00 :   919ea:          jbe     0x919f6 <__default_morecore+0x1fbe>
    0.00 :   919ec:          xorl    %esi, %esi
    0.00 :   919ee:          movq    %rsi, 0x20(%rax)
    0.00 :   919f2:          movq    %rsi, 0x28(%rax)
    0.00 :   919f6:          leaq    0x13a283(%rip), %rdx    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   919fd:          cmpq    %rdx, %rbp
    0.00 :   91a00:          setne   %dl
    0.00 :   91a03:          movzbl  %dl, %edx
    0.00 :   91a06:          shlq    $0x2, %rdx
    0.00 :   91a0a:          orq     %rbx, %rdx
    0.00 :   91a0d:          orq     $0x1, %rdx
    0.00 :   91a11:          movq    %rdx, 0x8(%r13)
    0.00 :   91a15:          movq    %rcx, %rdx
    0.00 :   91a18:          orq     $0x1, %rdx
    0.00 :   91a1c:          movq    %rdx, 0x8(%rax)
    0.00 :   91a20:          movq    %rcx, (%r13,%r14)
    0.00 :   91a25:          leaq    0x10(%r13), %rcx
    0.00 :   91a29:          movq    %rcx, %rdi
    0.00 :   91a2c:          movq    %r12, %rsi
    0.00 :   91a2f:          movq    %rcx, (%rsp)
    0.00 :   91a33:          callq   0x8e3d0 <timer_settime+0x460>
    0.00 :   91a38:          movq    (%rsp), %rcx
    0.00 :   91a3c:          jmp     0x911c2 <__default_morecore+0x178a>
    0.00 :   91a41:          leaq    0x1021f8(%rip), %rdi    # 0x193c40 <_itoa_lower_digits+0x2480>
    0.00 :   91a48:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   91a4d:          leaq    0x13a22c(%rip), %rdx    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   91a54:          leaq    (%rcx,%rbx), %rsi
    0.00 :   91a58:          movq    %r8, %r12
    0.00 :   91a5b:          cmpq    %rdx, %rbp
    0.00 :   91a5e:          movq    %rsi, 0x60(%rbp)
    0.00 :   91a62:          setne   %dl
    0.00 :   91a65:          subq    %rbx, %rax
    0.00 :   91a68:          movzbl  %dl, %edx
    0.00 :   91a6b:          orq     $0x1, %rax
    0.00 :   91a6f:          shlq    $0x2, %rdx
    0.00 :   91a73:          addq    $0x10, %rcx
    0.00 :   91a77:          orq     %rbx, %rdx
    0.00 :   91a7a:          orq     $0x1, %rdx
    0.00 :   91a7e:          movq    %rdx, -0x8(%rcx)
    0.00 :   91a82:          movq    %rax, 0x8(%rsi)
    0.00 :   91a86:          jmp     0x91a29 <__default_morecore+0x1ff1>
    0.00 :   91a88:          leaq    0x102611(%rip), %rcx    # 0x1940a0 <_itoa_lower_digits+0x28e0>
    0.00 :   91a8f:          movl    $0x1013, %edx           # imm = 0x1013
    0.00 :   91a94:          leaq    0xfc6d9(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   91a9b:          leaq    0xfc812(%rip), %rdi     # 0x18e2b4 <_libc_intl_domainname+0x1426>
    0.00 :   91aa2:          callq   0x30e40 <__assert+0x10>
    0.00 :   91aa7:          leaq    (%rdx,%rbx), %rdi
    0.00 :   91aab:          vmovq   %r15, %xmm4
    0.00 :   91ab0:          subq    %rbx, %rax
    0.00 :   91ab3:          vmovq   %rdi, %xmm3
    0.00 :   91ab8:          movq    %rdi, 0x78(%rbp)
    0.00 :   91abc:          movq    %r8, %r12
    0.00 :   91abf:          vpunpcklqdq     %xmm3, %xmm3, %xmm0 # xmm0 = xmm3[0,0]
    0.00 :   91ac3:          vmovdqu %xmm0, 0x68(%rbp)
    0.00 :   91ac8:          vpunpcklqdq     %xmm4, %xmm4, %xmm0 # xmm0 = xmm4[0,0]
    0.00 :   91acc:          vmovdqu %xmm0, 0x10(%rdi)
    0.00 :   91ad1:          cmpq    $0x3ff, %rax            # imm = 0x3FF
    0.00 :   91ad7:          jbe     0x91ae4 <__default_morecore+0x20ac>
    0.00 :   91ad9:          xorl    %r9d, %r9d
    0.00 :   91adc:          movq    %r9, 0x20(%rdi)
    0.00 :   91ae0:          movq    %r9, 0x28(%rdi)
    0.00 :   91ae4:          leaq    0x13a195(%rip), %rcx    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   91aeb:          cmpq    %rcx, %rbp
    0.00 :   91aee:          setne   %cl
    0.00 :   91af1:          movzbl  %cl, %ecx
    0.00 :   91af4:          shlq    $0x2, %rcx
    0.00 :   91af8:          orq     %rbx, %rcx
    0.00 :   91afb:          orq     $0x1, %rcx
    0.00 :   91aff:          movq    %rcx, 0x8(%rdx)
    0.00 :   91b03:          movq    %rax, %rcx
    0.00 :   91b06:          orq     $0x1, %rcx
    0.00 :   91b0a:          movq    %rcx, 0x8(%rdi)
    0.00 :   91b0e:          movq    %rax, (%rsi)
    0.00 :   91b11:          leaq    0x10(%rdx), %rcx
    0.00 :   91b15:          jmp     0x91a29 <__default_morecore+0x1ff1>
    0.00 :   91b1a:          leaq    0x102097(%rip), %rdi    # 0x193bb8 <_itoa_lower_digits+0x23f8>
    0.00 :   91b21:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   91b26:          movq    %rbp, %rsi
    0.00 :   91b29:          movq    %rbx, %rdi
    0.00 :   91b2c:          movq    %r8, %r12
    0.00 :   91b2f:          callq   0x904e0 <__default_morecore+0xaa8>
    0.00 :   91b34:          movq    %rax, %rcx
    0.00 :   91b37:          testq   %rax, %rax
    0.00 :   91b3a:          jne     0x91a29 <__default_morecore+0x1ff1>
    0.00 :   91b40:          jmp     0x911c2 <__default_morecore+0x178a>
    0.00 :   91b45:          leaq    0x102554(%rip), %rcx    # 0x1940a0 <_itoa_lower_digits+0x28e0>
    0.00 :   91b4c:          movl    $0x1002, %edx           # imm = 0x1002
    0.00 :   91b51:          leaq    0xfc61c(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   91b58:          leaq    0xfc73a(%rip), %rdi     # 0x18e299 <_libc_intl_domainname+0x140b>
    0.00 :   91b5f:          callq   0x30e40 <__assert+0x10>
    0.00 :   91b64:          leaq    0x102535(%rip), %rcx    # 0x1940a0 <_itoa_lower_digits+0x28e0>
    0.00 :   91b6b:          movl    $0x10c7, %edx           # imm = 0x10C7
    0.00 :   91b70:          leaq    0xfc5fd(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   91b77:          leaq    0x102092(%rip), %rdi    # 0x193c10 <_itoa_lower_digits+0x2450>
    0.00 :   91b7e:          callq   0x30e40 <__assert+0x10>
    0.00 :   91b83:          leaq    0x102516(%rip), %rcx    # 0x1940a0 <_itoa_lower_digits+0x28e0>
    0.00 :   91b8a:          movl    $0x100f, %edx           # imm = 0x100F
    0.00 :   91b8f:          leaq    0xfc5de(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   91b96:          leaq    0xfc717(%rip), %rdi     # 0x18e2b4 <_libc_intl_domainname+0x1426>
    0.00 :   91b9d:          callq   0x30e40 <__assert+0x10>
    0.00 :   91ba2:          leaq    0x10203f(%rip), %rdi    # 0x193be8 <_itoa_lower_digits+0x2428>
    0.00 :   91ba9:          callq   0x8e2a0 <timer_settime+0x330>
    0.00 :   91bae:          leaq    0x13a0cb(%rip), %rax    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   91bb5:          orq     $0x1, 0x8(%r13,%r14)
    0.00 :   91bbb:          cmpq    %rax, %rbp
    0.00 :   91bbe:          je      0x91a25 <__default_morecore+0x1fed>
    0.00 :   91bc4:          orq     $0x4, 0x8(%r13)
    0.00 :   91bc9:          jmp     0x91a25 <__default_morecore+0x1fed>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81a07f30 <tcp_event_data_recv>:
         : 5                ; tcp_event_data_recv():
    0.00 :   ffffffff81a07f30:       pushq   %rbp
    0.00 :   ffffffff81a07f31:       movq    %rsp, %rbp
    0.00 :   ffffffff81a07f34:       pushq   %r13
    0.00 :   ffffffff81a07f36:       movq    %rsi, %r13
    0.00 :   ffffffff81a07f39:       pushq   %r12
    0.00 :   ffffffff81a07f3b:       pushq   %rbx
    0.00 :   ffffffff81a07f3c:       movq    %rdi, %rbx
    0.00 :   ffffffff81a07f3f:       movzbl  0x4d0(%rdi), %ecx
    0.00 :   ffffffff81a07f46:       movl    %ecx, %eax
    0.00 :   ffffffff81a07f48:       orl     $0x1, %eax
    0.00 :   ffffffff81a07f4b:       movb    %al, 0x4d0(%rdi)
    0.00 :   ffffffff81a07f51:       movzwl  0x4e4(%rdi), %edi
    0.00 :   ffffffff81a07f58:       movw    $0x0, 0x4e4(%rbx)
    0.00 :   ffffffff81a07f61:       movq    0xc0(%rsi), %rdx
    0.00 :   ffffffff81a07f68:       movl    0xb8(%rsi), %esi
    0.00 :   ffffffff81a07f6e:       movzwl  0x4(%rdx,%rsi), %r12d
    0.00 :   ffffffff81a07f74:       testw   %r12w, %r12w
    0.00 :   ffffffff81a07f78:       jne     0xffffffff81a07f7e <tcp_event_data_recv+0x4e>
    0.00 :   ffffffff81a07f7a:       movl    0x70(%r13), %r12d
    0.00 :   ffffffff81a07f7e:       movzwl  0x4e6(%rbx), %esi
    0.00 :   ffffffff81a07f85:       cmpl    %esi, %r12d
    0.00 :   ffffffff81a07f88:       jb      0xffffffff81a080f5 <tcp_event_data_recv+0x1c5>
    0.00 :   ffffffff81a07f8e:       movzwl  0x618(%rbx), %eax
    0.00 :   ffffffff81a07f95:       cmpl    %r12d, %eax
    0.00 :   ffffffff81a07f98:       cmoval  %r12d, %eax
    0.00 :   ffffffff81a07f9c:       movw    %ax, 0x4e6(%rbx)
    0.00 :   ffffffff81a07fa3:       addl    $0x28, %eax
    0.00 :   ffffffff81a07fa6:       cmpl    %r12d, %eax
    0.00 :   ffffffff81a07fa9:       jb      0xffffffff81a08208 <tcp_event_data_recv+0x2d8>
    0.00 :   ffffffff81a07faf:       movq    0x850(%rbx), %rcx
    0.00 :   ffffffff81a07fb6:       movl    0x580(%rbx), %edx
    0.00 :   ffffffff81a07fbc:       testq   %rcx, %rcx
    0.00 :   ffffffff81a07fbf:       je      0xffffffff81a081dc <tcp_event_data_recv+0x2ac>
    0.00 :   ffffffff81a07fc5:       cmpl    0x84c(%rbx), %edx
    0.00 :   ffffffff81a07fcb:       js      0xffffffff81a08022 <tcp_event_data_recv+0xf2>
    0.00 :   ffffffff81a07fcd:       movq    0x648(%rbx), %rsi
    0.00 :   ffffffff81a07fd4:       movq    %rsi, %rax
    0.00 :   ffffffff81a07fd7:       subq    %rcx, %rax
    0.00 :   ffffffff81a07fda:       movl    $0x0, %ecx
    0.00 :   ffffffff81a07fdf:       cmovsq  %rcx, %rax
    0.00 :   ffffffff81a07fe3:       movl    $0x1, %ecx
    0.00 :   ffffffff81a07fe8:       testl   %eax, %eax
    0.00 :   ffffffff81a07fea:       cmovel  %ecx, %eax
    0.00 :   ffffffff81a07fed:       movl    0x848(%rbx), %ecx
    0.00 :   ffffffff81a07ff3:       testl   %ecx, %ecx
    0.00 :   ffffffff81a07ff5:       je      0xffffffff81a081e8 <tcp_event_data_recv+0x2b8>
    0.00 :   ffffffff81a07ffb:       movl    %eax, %eax
    0.00 :   ffffffff81a07ffd:       movl    %ecx, %edi
    0.00 :   ffffffff81a07fff:       shlq    $0x3, %rax
    0.00 :   ffffffff81a08003:       cmpq    %rdi, %rax
    0.00 :   ffffffff81a08006:       cmovll  %eax, %ecx
    0.00 :   ffffffff81a08009:       movl    %ecx, 0x848(%rbx)
    0.00 :   ffffffff81a0800f:       addl    0x700(%rbx), %edx
    0.00 :   ffffffff81a08015:       movq    %rsi, 0x850(%rbx)
    0.00 :   ffffffff81a0801c:       movl    %edx, 0x84c(%rbx)
    0.00 :   ffffffff81a08022:       movl    0x4d4(%rbx), %eax
    0.00 :   ffffffff81a08028:       movq    0x7ff991(%rip), %rsi # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81a0802f:       testl   %eax, %eax
    0.00 :   ffffffff81a08031:       jne     0xffffffff81a08093 <tcp_event_data_recv+0x163>
    0.00 :   ffffffff81a08033:       movzwl  0x4e6(%rbx), %ecx
    0.00 :   ffffffff81a0803a:       movl    0x700(%rbx), %eax
    0.00 :   ffffffff81a08040:       movl    $0x2, %edx
    0.00 :   ffffffff81a08045:       addl    %ecx, %ecx
    0.00 :   ffffffff81a08047:       cmpl    %ecx, %eax
    0.00 :   ffffffff81a08049:       jae     0xffffffff81a08159 <tcp_event_data_recv+0x229>
    0.00 :   ffffffff81a0804f:       movzbl  0x4d1(%rbx), %eax
    0.00 :   ffffffff81a08056:       cmpl    %edx, %eax
    0.00 :   ffffffff81a08058:       jb      0xffffffff81a0814e <tcp_event_data_recv+0x21e>
    0.00 :   ffffffff81a0805e:       movl    $0x28, 0x4d4(%rbx)
    0.00 :   ffffffff81a08068:       testb   $0x1, 0x68e(%rbx)
    0.00 :   ffffffff81a0806f:       movl    %esi, 0x4e0(%rbx)
    0.00 :   ffffffff81a08075:       jne     0xffffffff81a080be <tcp_event_data_recv+0x18e>
    0.00 :   ffffffff81a08077:       cmpl    $0x7f, 0x70(%r13)
   77.02 :   ffffffff81a0807c:       ja      0xffffffff81a080d0 <tcp_event_data_recv+0x1a0>
   22.98 :   ffffffff81a0807e:       popq    %rbx
    0.00 :   ffffffff81a0807f:       popq    %r12
    0.00 :   ffffffff81a08081:       popq    %r13
    0.00 :   ffffffff81a08083:       popq    %rbp
    0.00 :   ffffffff81a08084:       xorl    %eax, %eax
    0.00 :   ffffffff81a08086:       xorl    %edx, %edx
    0.00 :   ffffffff81a08088:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a0808a:       xorl    %esi, %esi
    0.00 :   ffffffff81a0808c:       xorl    %edi, %edi
    0.00 :   ffffffff81a0808e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a08093:       movl    %esi, %edx
    0.00 :   ffffffff81a08095:       subl    0x4e0(%rbx), %edx
    0.00 :   ffffffff81a0809b:       cmpl    $0x14, %edx
    0.00 :   ffffffff81a0809e:       ja      0xffffffff81a08178 <tcp_event_data_recv+0x248>
    0.00 :   ffffffff81a080a4:       shrl    %eax
    0.00 :   ffffffff81a080a6:       movl    %esi, 0x4e0(%rbx)
    0.00 :   ffffffff81a080ac:       addl    $0x14, %eax
    0.00 :   ffffffff81a080af:       testb   $0x1, 0x68e(%rbx)
    0.00 :   ffffffff81a080b6:       movl    %eax, 0x4d4(%rbx)
    0.00 :   ffffffff81a080bc:       je      0xffffffff81a08077 <tcp_event_data_recv+0x147>
    0.00 :   ffffffff81a080be:       movq    %r13, %rsi
    0.00 :   ffffffff81a080c1:       movq    %rbx, %rdi
    0.00 :   ffffffff81a080c4:       callq   0xffffffff81a07860 <__tcp_ecn_check_ce>
    0.00 :   ffffffff81a080c9:       cmpl    $0x7f, 0x70(%r13)
    0.00 :   ffffffff81a080ce:       jbe     0xffffffff81a0807e <tcp_event_data_recv+0x14e>
    0.00 :   ffffffff81a080d0:       movq    %r13, %rsi
    0.00 :   ffffffff81a080d3:       movq    %rbx, %rdi
    0.00 :   ffffffff81a080d6:       movl    $0x1, %edx
    0.00 :   ffffffff81a080db:       callq   0xffffffff81a07c80 <tcp_grow_window>
    0.00 :   ffffffff81a080e0:       popq    %rbx
    0.00 :   ffffffff81a080e1:       popq    %r12
    0.00 :   ffffffff81a080e3:       popq    %r13
    0.00 :   ffffffff81a080e5:       popq    %rbp
    0.00 :   ffffffff81a080e6:       xorl    %eax, %eax
    0.00 :   ffffffff81a080e8:       xorl    %edx, %edx
    0.00 :   ffffffff81a080ea:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a080ec:       xorl    %esi, %esi
    0.00 :   ffffffff81a080ee:       xorl    %edi, %edi
    0.00 :   ffffffff81a080f0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a080f5:       movzwl  0xae(%r13), %esi
    0.00 :   ffffffff81a080fd:       addl    0xc8(%r13), %r12d
    0.00 :   ffffffff81a08104:       addq    %rsi, %rdx
    0.00 :   ffffffff81a08107:       subl    %edx, %r12d
    0.00 :   ffffffff81a0810a:       cmpl    $0x22b, %r12d   # imm = 0x22B
    0.00 :   ffffffff81a08111:       jbe     0xffffffff81a081c0 <tcp_event_data_recv+0x290>
    0.00 :   ffffffff81a08117:       movzwl  0x568(%rbx), %edx
    0.00 :   ffffffff81a0811e:       subl    %edx, %r12d
    0.00 :   ffffffff81a08121:       movzwl  %di, %edx
    0.00 :   ffffffff81a08124:       cmpl    %r12d, %edx
    0.00 :   ffffffff81a08127:       movw    %r12w, 0x4e4(%rbx)
    0.00 :   ffffffff81a0812f:       je      0xffffffff81a08258 <tcp_event_data_recv+0x328>
    0.00 :   ffffffff81a08135:       movl    %ecx, %edx
    0.00 :   ffffffff81a08137:       orl     $0x9, %edx
    0.00 :   ffffffff81a0813a:       andl    $0x4, %ecx
    0.00 :   ffffffff81a0813d:       cmovnel %edx, %eax
    0.00 :   ffffffff81a08140:       orl     $0x4, %eax
    0.00 :   ffffffff81a08143:       movb    %al, 0x4d0(%rbx)
    0.00 :   ffffffff81a08149:       jmp     0xffffffff81a07faf <tcp_event_data_recv+0x7f>
    0.00 :   ffffffff81a0814e:       movb    %dl, 0x4d1(%rbx)
    0.00 :   ffffffff81a08154:       jmp     0xffffffff81a0805e <tcp_event_data_recv+0x12e>
    0.00 :   ffffffff81a08159:       xorl    %edx, %edx
    0.00 :   ffffffff81a0815b:       divl    %ecx
    0.00 :   ffffffff81a0815d:       movl    $0x10, %edx
    0.00 :   ffffffff81a08162:       cmpl    %edx, %eax
    0.00 :   ffffffff81a08164:       cmovbel %eax, %edx
    0.00 :   ffffffff81a08167:       movzbl  0x4d1(%rbx), %eax
    0.00 :   ffffffff81a0816e:       cmpl    %edx, %eax
    0.00 :   ffffffff81a08170:       jae     0xffffffff81a0805e <tcp_event_data_recv+0x12e>
    0.00 :   ffffffff81a08176:       jmp     0xffffffff81a0814e <tcp_event_data_recv+0x21e>
    0.00 :   ffffffff81a08178:       cmpl    %eax, %edx
    0.00 :   ffffffff81a0817a:       movl    0x488(%rbx), %ecx
    0.00 :   ffffffff81a08180:       jb      0xffffffff81a081f4 <tcp_event_data_recv+0x2c4>
    0.00 :   ffffffff81a08182:       cmpl    %edx, %ecx
    0.00 :   ffffffff81a08184:       jae     0xffffffff81a08068 <tcp_event_data_recv+0x138>
    0.00 :   ffffffff81a0818a:       movzwl  0x4e6(%rbx), %ecx
    0.00 :   ffffffff81a08191:       movl    0x700(%rbx), %eax
    0.00 :   ffffffff81a08197:       movl    $0x2, %edx
    0.00 :   ffffffff81a0819c:       addl    %ecx, %ecx
    0.00 :   ffffffff81a0819e:       cmpl    %ecx, %eax
    0.00 :   ffffffff81a081a0:       jae     0xffffffff81a08264 <tcp_event_data_recv+0x334>
    0.00 :   ffffffff81a081a6:       movzbl  0x4d1(%rbx), %eax
    0.00 :   ffffffff81a081ad:       cmpl    %edx, %eax
    0.00 :   ffffffff81a081af:       jae     0xffffffff81a08068 <tcp_event_data_recv+0x138>
    0.00 :   ffffffff81a081b5:       movb    %dl, 0x4d1(%rbx)
    0.00 :   ffffffff81a081bb:       jmp     0xffffffff81a08068 <tcp_event_data_recv+0x138>
    0.00 :   ffffffff81a081c0:       cmpl    $0x6b, %r12d
    0.00 :   ffffffff81a081c4:       jbe     0xffffffff81a08135 <tcp_event_data_recv+0x205>
    0.00 :   ffffffff81a081ca:       testl   $0x2b00, 0xc(%rdx) # imm = 0x2B00
    0.00 :   ffffffff81a081d1:       jne     0xffffffff81a08135 <tcp_event_data_recv+0x205>
    0.00 :   ffffffff81a081d7:       jmp     0xffffffff81a08117 <tcp_event_data_recv+0x1e7>
    0.00 :   ffffffff81a081dc:       movq    0x648(%rbx), %rsi
    0.00 :   ffffffff81a081e3:       jmp     0xffffffff81a0800f <tcp_event_data_recv+0xdf>
    0.00 :   ffffffff81a081e8:       leal    (,%rax,8), %ecx
    0.00 :   ffffffff81a081ef:       jmp     0xffffffff81a08009 <tcp_event_data_recv+0xd9>
    0.00 :   ffffffff81a081f4:       shrl    %eax
    0.00 :   ffffffff81a081f6:       addl    %edx, %eax
    0.00 :   ffffffff81a081f8:       cmpl    %ecx, %eax
    0.00 :   ffffffff81a081fa:       cmoval  %ecx, %eax
    0.00 :   ffffffff81a081fd:       movl    %eax, 0x4d4(%rbx)
    0.00 :   ffffffff81a08203:       jmp     0xffffffff81a08068 <tcp_event_data_recv+0x138>
    0.00 :   ffffffff81a08208:       cmpb    $0x0, 0x964fa9(%rip) # 0xffffffff8236d1b8 <__once.5>
    0.00 :   ffffffff81a0820f:       jne     0xffffffff81a07faf <tcp_event_data_recv+0x7f>
    0.00 :   ffffffff81a08215:       movb    $0x1, 0x964f9c(%rip) # 0xffffffff8236d1b8 <__once.5>
    0.00 :   ffffffff81a0821c:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff81a08221:       movl    0x90(%r13), %esi
    0.00 :   ffffffff81a08228:       movq    0x30(%rbx), %rdi
    0.00 :   ffffffff81a0822c:       callq   0xffffffff81948170 <dev_get_by_index_rcu>
    0.00 :   ffffffff81a08231:       testq   %rax, %rax
    0.00 :   ffffffff81a08234:       je      0xffffffff81a08277 <tcp_event_data_recv+0x347>
    0.00 :   ffffffff81a08236:       cmpl    0xe8(%rax), %r12d
    0.00 :   ffffffff81a0823d:       movq    %rax, %rsi
    0.00 :   ffffffff81a08240:       jb      0xffffffff81a0824e <tcp_event_data_recv+0x31e>
    0.00 :   ffffffff81a08242:       movq    $-0x7deeced8, %rdi # imm = 0x82113128
    0.00 :   ffffffff81a08249:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81a0824e:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff81a08253:       jmp     0xffffffff81a07faf <tcp_event_data_recv+0x7f>
    0.00 :   ffffffff81a08258:       movw    %di, 0x4e6(%rbx)
    0.00 :   ffffffff81a0825f:       jmp     0xffffffff81a07faf <tcp_event_data_recv+0x7f>
    0.00 :   ffffffff81a08264:       xorl    %edx, %edx
    0.00 :   ffffffff81a08266:       divl    %ecx
    0.00 :   ffffffff81a08268:       movl    $0x10, %edx
    0.00 :   ffffffff81a0826d:       cmpl    %edx, %eax
    0.00 :   ffffffff81a0826f:       cmovbel %eax, %edx
    0.00 :   ffffffff81a08272:       jmp     0xffffffff81a081a6 <tcp_event_data_recv+0x276>
    0.00 :   ffffffff81a08277:       movq    $-0x7deecfa0, %rsi # imm = 0x82113060
    0.00 :   ffffffff81a0827e:       jmp     0xffffffff81a08242 <tcp_event_data_recv+0x312>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000054580 <vfprintf>:
    0.00 :   56640:          pushq   %r15
    0.00 :   56642:          pushq   %r14
    0.00 :   56644:          movq    %rsi, %r14
    0.00 :   56647:          pushq   %r13
    0.00 :   56649:          pushq   %r12
    0.00 :   5664b:          movq    %rdx, %r15
    0.00 :   5664e:          pushq   %rbp
    0.00 :   5664f:          pushq   %rbx
    0.00 :   56650:          movq    %rdi, %rbx
    0.00 :   56653:          subq    $0x4e8, %rsp            # imm = 0x4E8
    0.00 :   5665a:          movq    %r14, %rdi
    0.00 :   5665d:          movq    %rsi, 0x60(%rsp)
    0.00 :   56662:          movl    %ecx, 0x44(%rsp)
    0.00 :   56666:          movl    $0x25, %esi
   39.58 :   5666b:          movq    %fs:0x28, %rax
    0.00 :   56674:          movq    %rax, 0x4d8(%rsp)
    0.00 :   5667c:          movq    0x174775(%rip), %rax    # 0x1cadf8
    0.00 :   56683:          vmovdqu (%rdx), %xmm1
    0.00 :   56687:          movl    %fs:(%rax), %eax
    0.00 :   5668a:          vmovdqu %xmm1, 0xc8(%rsp)
    0.00 :   56693:          movl    %eax, 0x5c(%rsp)
    0.00 :   56697:          movq    0x10(%rdx), %rax
    0.00 :   5669b:          movq    %rax, 0xd8(%rsp)
    0.00 :   566a3:          callq   0x22160 <_dl_find_dso_for_object@plt+0x70>
    0.00 :   566a8:          movq    %rax, %rdx
    0.00 :   566ab:          movq    %rbx, %rdi
    0.00 :   566ae:          movq    %rax, 0x68(%rsp)
    0.00 :   566b3:          movq    %r14, %rsi
    0.00 :   566b6:          subq    %r14, %rdx
    0.00 :   566b9:          movq    %rax, 0x80(%rsp)
    0.00 :   566c1:          movq    %rax, %rbp
    0.00 :   566c4:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   566c9:          movl    0x20(%rbx), %edi
    0.00 :   566cc:          testl   %edi, %edi
    0.00 :   566ce:          je      0x56770 <vfprintf+0x21f0>
    0.00 :   566d4:          cmpb    $0x0, (%rbp)
    0.00 :   566d8:          je      0x56770 <vfprintf+0x21f0>
    0.00 :   566de:          movq    0x1772bb(%rip), %rax    # 0x1cd9a0 <__abort_msg+0xb20>
    0.00 :   566e5:          movq    %rax, 0x48(%rsp)
    0.00 :   566ea:          testq   %rax, %rax
    0.00 :   566ed:          jne     0x580f1 <vfprintf+0x3b71>
    0.00 :   566f3:          cmpq    $0x0, 0x177295(%rip)    # 0x1cd990 <__abort_msg+0xb10>
    0.00 :   566fb:          jne     0x58194 <vfprintf+0x3c14>
    0.00 :   56701:          cmpq    $0x0, 0x1761af(%rip)    # 0x1cc8b8
    0.00 :   56709:          movl    $0x0, 0x7c(%rsp)
    0.00 :   56711:          movl    $0x0, 0x2c(%rsp)
    0.00 :   56719:          movq    $-0x1, 0x70(%rsp)
    0.00 :   56722:          jne     0x56a93 <vfprintf+0x2513>
    0.00 :   56728:          nopl    (%rax,%rax)
    0.00 :   56730:          movzbl  0x1(%rbp), %r8d
    0.00 :   56735:          leaq    0x1(%rbp), %rax
    0.00 :   56739:          movq    %rax, 0x80(%rsp)
    0.00 :   56741:          leal    -0x20(%r8), %eax
    0.00 :   56745:          cmpb    $0x5a, %al
    0.00 :   56747:          jbe     0x567a0 <vfprintf+0x2220>
    0.00 :   56749:          testb   %r8b, %r8b
    0.00 :   5674c:          jne     0x56a90 <vfprintf+0x2510>
    0.00 :   56752:          movq    0x17469f(%rip), %rax    # 0x1cadf8
    0.00 :   56759:          movl    $0x16, %fs:(%rax)
    0.00 :   56760:          movl    $0x0, 0x20(%rbx)
    0.00 :   56767:          vzeroupper
    0.00 :   5676a:          nopw    (%rax,%rax)
    0.00 :   56770:          movq    0x4d8(%rsp), %rax
    0.00 :   56778:          subq    %fs:0x28, %rax
    0.00 :   56781:          jne     0x58448 <vfprintf+0x3ec8>
    0.00 :   56787:          addq    $0x4e8, %rsp            # imm = 0x4E8
    0.00 :   5678e:          popq    %rbx
   32.31 :   5678f:          popq    %rbp
    0.00 :   56790:          popq    %r12
    0.00 :   56792:          popq    %r13
    0.00 :   56794:          popq    %r14
    0.00 :   56796:          popq    %r15
    0.00 :   56798:          retq
    0.00 :   56799:          nopl    (%rax)
    0.00 :   567a0:          movzbl  %r8b, %eax
    0.00 :   567a4:          leaq    0x12fa15(%rip), %rcx    # 0x1861c0
    0.00 :   567ab:          movb    $0x20, 0x18(%rsp)
    0.00 :   567b0:          subl    $0x20, %eax
    0.00 :   567b3:          movl    $0x0, 0xc(%rsp)
    0.00 :   567bb:          movl    $0x0, 0x30(%rsp)
    0.00 :   567c3:          cltq
    0.00 :   567c5:          movl    $0x0, 0x10(%rsp)
    0.00 :   567cd:          movl    $0x0, 0x8(%rsp)
    0.00 :   567d5:          movzbl  (%rcx,%rax), %eax
    0.00 :   567d9:          leaq    0x12f960(%rip), %rcx    # 0x186140
    0.00 :   567e0:          movl    $0xffffffff, %r13d      # imm = 0xFFFFFFFF
    0.00 :   567e6:          movl    $0x0, 0x24(%rsp)
    0.00 :   567ee:          movl    $0x0, 0x20(%rsp)
    0.00 :   567f6:          xorl    %r14d, %r14d
    0.00 :   567f9:          xorl    %r9d, %r9d
    0.00 :   567fc:          xorl    %r12d, %r12d
    0.00 :   567ff:          xorl    %r10d, %r10d
   28.11 :   56802:          movslq  (%rcx,%rax,4), %rax
    0.00 :   56806:          leaq    -0xc4(%rip), %rcx       # 0x56749 <vfprintf+0x21c9>
    0.00 :   5680d:          addq    %rcx, %rax
    0.00 :   56810:          xorl    %ecx, %ecx
    0.00 :   56812:          jmpq    *%rax
    0.00 :   56814:          nopl    (%rax)
    0.00 :   56818:          movq    0x80(%rsp), %rax
    0.00 :   56820:          leaq    0x1(%rax), %rdx
    0.00 :   56824:          movq    %rdx, 0x80(%rsp)
    0.00 :   5682c:          movzbl  0x1(%rax), %r8d
    0.00 :   56831:          leaq    -0xef(%rip), %rax       # 0x56749 <vfprintf+0x21c9>
    0.00 :   56838:          leal    -0x20(%r8), %edx
    0.00 :   5683c:          cmpb    $0x5a, %dl
    0.00 :   5683f:          ja      0x56a80 <vfprintf+0x2500>
    0.00 :   56845:          movzbl  %r8b, %eax
    0.00 :   56849:          leaq    0x12f970(%rip), %rdi    # 0x1861c0
    0.00 :   56850:          leaq    -0x10e(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56857:          subl    $0x20, %eax
    0.00 :   5685a:          movl    $0x1, %r9d
    0.00 :   56860:          cltq
    0.00 :   56862:          xorl    %r10d, %r10d
    0.00 :   56865:          movzbl  (%rdi,%rax), %edx
    0.00 :   56869:          leaq    0x12f6d0(%rip), %rax    # 0x185f40
    0.00 :   56870:          movslq  (%rax,%rdx,4), %rax
    0.00 :   56874:          addq    %rsi, %rax
    0.00 :   56877:          jmpq    *%rax
    0.00 :   56879:          nopl    (%rax)
    0.00 :   56880:          testb   $0x1, 0x44(%rsp)
    0.00 :   56885:          jne     0x581b2 <vfprintf+0x3c32>
    0.00 :   5688b:          movl    %r10d, %edx
    0.00 :   5688e:          andl    $0x1, %edx
    0.00 :   56891:          movl    0xc(%rsp), %eax
    0.00 :   56895:          movzbl  %dl, %edx
    0.00 :   56898:          movl    %r13d, 0xa0(%rsp)
    0.00 :   568a0:          shll    $0x2, %r9d
    0.00 :   568a4:          movl    %ecx, %r13d
    0.00 :   568a7:          movl    $0x0, 0xac(%rsp)
    0.00 :   568b2:          shll    $0xb, %r13d
    0.00 :   568b6:          movsbl  %r8b, %r8d
    0.00 :   568ba:          movl    %r8d, 0xa8(%rsp)
    0.00 :   568c2:          movl    %eax, 0xa4(%rsp)
    0.00 :   568c9:          leal    (%r12,%r12), %eax
    0.00 :   568cd:          orl     %edx, %eax
    0.00 :   568cf:          movzwl  0x20(%rsp), %edx
    0.00 :   568d4:          orl     %r9d, %eax
    0.00 :   568d7:          shll    $0x3, %edx
    0.00 :   568da:          orl     %edx, %eax
    0.00 :   568dc:          movzwl  0x24(%rsp), %edx
    0.00 :   568e1:          shll    $0x4, %edx
    0.00 :   568e4:          orl     %edx, %eax
    0.00 :   568e6:          movzwl  0x8(%rsp), %edx
    0.00 :   568eb:          shll    $0x5, %edx
    0.00 :   568ee:          orl     %edx, %eax
    0.00 :   568f0:          movzwl  0x10(%rsp), %edx
    0.00 :   568f5:          shll    $0x6, %edx
    0.00 :   568f8:          orl     %edx, %eax
    0.00 :   568fa:          movzwl  0x30(%rsp), %edx
    0.00 :   568ff:          shll    $0x7, %edx
    0.00 :   56902:          orl     %edx, %eax
    0.00 :   56904:          orl     %eax, %r13d
    0.00 :   56907:          movzbl  0x18(%rsp), %eax
    0.00 :   5690c:          movw    %r13w, 0xac(%rsp)
    0.00 :   56915:          movl    %eax, 0xb0(%rsp)
    0.00 :   5691c:          testl   %r10d, %r10d
    0.00 :   5691f:          jne     0x56ae8 <vfprintf+0x2568>
    0.00 :   56925:          movl    0x4(%r15), %eax
    0.00 :   56929:          cmpl    $0xaf, %eax
    0.00 :   5692e:          ja      0x57c68 <vfprintf+0x36e8>
    0.00 :   56934:          movl    %eax, %edx
    0.00 :   56936:          addl    $0x10, %eax
    0.00 :   56939:          addq    0x10(%r15), %rdx
    0.00 :   5693d:          movl    %eax, 0x4(%r15)
    0.00 :   56941:          vmovsd  (%rdx), %xmm0           # xmm0 = mem[0],zero
    0.00 :   56945:          vmovsd  %xmm0, 0x90(%rsp)
    0.00 :   5694e:          leaq    0x90(%rsp), %rax
    0.00 :   56956:          andl    $-0x21, %r8d
    0.00 :   5695a:          leaq    0x88(%rsp), %rcx
    0.00 :   56962:          movq    %rax, 0x88(%rsp)
    0.00 :   5696a:          leaq    0xa0(%rsp), %rdx
    0.00 :   56972:          movq    %rbx, %rdi
    0.00 :   56975:          movq    0x1745dc(%rip), %rax    # 0x1caf58
    0.00 :   5697c:          movq    %fs:(%rax), %rsi
    0.00 :   56980:          cmpl    $0x41, %r8d
    0.00 :   56984:          jne     0x57988 <vfprintf+0x3408>
    0.00 :   5698a:          vzeroupper
    0.00 :   5698d:          callq   0x521b0 <__printf_fp+0xe50>
    0.00 :   56992:          nopw    (%rax,%rax)
    0.00 :   56998:          movq    0x80(%rsp), %rax
    0.00 :   569a0:          movl    $0x25, %esi
    0.00 :   569a5:          incl    0x2c(%rsp)
    0.00 :   569a9:          leaq    0x1(%rax), %r12
    0.00 :   569ad:          movq    %r12, %rdi
    0.00 :   569b0:          callq   0x22160 <_dl_find_dso_for_object@plt+0x70>
    0.00 :   569b5:          movq    %rax, %rdx
    0.00 :   569b8:          movq    %rax, %rbp
    0.00 :   569bb:          subq    %r12, %rdx
    0.00 :   569be:          movq    %r12, %rsi
    0.00 :   569c1:          movq    %rax, 0x80(%rsp)
    0.00 :   569c9:          movq    %rbx, %rdi
    0.00 :   569cc:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   569d1:          cmpb    $0x0, (%rbp)
    0.00 :   569d5:          je      0x56770 <vfprintf+0x21f0>
    0.00 :   569db:          movl    0x20(%rbx), %eax
    0.00 :   569de:          testl   %eax, %eax
    0.00 :   569e0:          jne     0x56730 <vfprintf+0x21b0>
    0.00 :   569e6:          jmp     0x56770 <vfprintf+0x21f0>
    0.00 :   569eb:          nopl    (%rax,%rax)
    0.00 :   569f0:          movl    (%r15), %eax
    0.00 :   569f3:          movq    $0x0, 0xc0(%rsp)
    0.00 :   569ff:          leaq    0xc0(%rsp), %rcx
    0.00 :   56a07:          cmpl    $0x2f, %eax
    0.00 :   56a0a:          ja      0x56b30 <vfprintf+0x25b0>
    0.00 :   56a10:          movl    %eax, %edx
    0.00 :   56a12:          addl    $0x8, %eax
    0.00 :   56a15:          addq    0x10(%r15), %rdx
    0.00 :   56a19:          movl    %eax, (%r15)
    0.00 :   56a1c:          movl    (%rdx), %esi
    0.00 :   56a1e:          leaq    0xe0(%rsp), %r13
    0.00 :   56a26:          movq    %rcx, %rdx
    0.00 :   56a29:          vzeroupper
    0.00 :   56a2c:          movq    %r13, %rdi
    0.00 :   56a2f:          callq   0xab2b0 <wcrtomb>
    0.00 :   56a34:          movq    %rax, %rbp
    0.00 :   56a37:          cmpq    $-0x1, %rax
    0.00 :   56a3b:          je      0x5843c <vfprintf+0x3ebc>
    0.00 :   56a41:          movl    0xc(%rsp), %r12d
    0.00 :   56a46:          movl    0x8(%rsp), %edx
    0.00 :   56a4a:          subl    %eax, %r12d
    0.00 :   56a4d:          testl   %edx, %edx
    0.00 :   56a4f:          jne     0x57a90 <vfprintf+0x3510>
    0.00 :   56a55:          testl   %r12d, %r12d
    0.00 :   56a58:          jle     0x56a6a <vfprintf+0x24ea>
    0.00 :   56a5a:          movl    %r12d, %edx
    0.00 :   56a5d:          movl    $0x20, %esi
    0.00 :   56a62:          movq    %rbx, %rdi
    0.00 :   56a65:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   56a6a:          movq    %rbp, %rdx
    0.00 :   56a6d:          movq    %r13, %rsi
    0.00 :   56a70:          movq    %rbx, %rdi
    0.00 :   56a73:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   56a78:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   56a7d:          nopl    (%rax)
    0.00 :   56a80:          movl    $0x1, %r9d
    0.00 :   56a86:          xorl    %r10d, %r10d
    0.00 :   56a89:          jmpq    *%rax
    0.00 :   56a8b:          nopl    (%rax,%rax)
    0.00 :   56a90:          vzeroupper
    0.00 :   56a93:          movl    0x44(%rsp), %eax
    0.00 :   56a97:          movq    %r15, %rcx
    0.00 :   56a9a:          movq    %rbx, %rdi
    0.00 :   56a9d:          pushq   %rax
    0.00 :   56a9e:          pushq   0x50(%rsp)
    0.00 :   56aa2:          pushq   0x80(%rsp)
    0.00 :   56aa9:          movl    0x74(%rsp), %eax
    0.00 :   56aad:          pushq   %rax
    0.00 :   56aae:          leaq    0x110(%rsp), %rax
    0.00 :   56ab6:          pushq   %rax
    0.00 :   56ab7:          pushq   0x90(%rsp)
    0.00 :   56abe:          movl    0x5c(%rsp), %r9d
    0.00 :   56ac3:          movl    0xac(%rsp), %edx
    0.00 :   56aca:          movq    0x90(%rsp), %rsi
    0.00 :   56ad2:          leaq    0xf8(%rsp), %r8
    0.00 :   56ada:          callq   0x54950 <vfprintf+0x3d0>
    0.00 :   56adf:          addq    $0x30, %rsp
    0.00 :   56ae3:          jmp     0x56770 <vfprintf+0x21f0>
    0.00 :   56ae8:          testb   $0x8, 0x44(%rsp)
    0.00 :   56aed:          je      0x57c80 <vfprintf+0x3700>
    0.00 :   56af3:          orb     $0x10, 0xad(%rsp)
    0.00 :   56afb:          movl    0x4(%r15), %edx
    0.00 :   56aff:          cmpl    $0xaf, %edx
    0.00 :   56b05:          ja      0x58020 <vfprintf+0x3aa0>
    0.00 :   56b0b:          movl    %edx, %eax
    0.00 :   56b0d:          addl    $0x10, %edx
    0.00 :   56b10:          addq    0x10(%r15), %rax
    0.00 :   56b14:          movl    %edx, 0x4(%r15)
    0.00 :   56b18:          vmovdqa (%rax), %xmm2
    0.00 :   56b1c:          vmovdqa %xmm2, 0x90(%rsp)
    0.00 :   56b25:          jmp     0x5694e <vfprintf+0x23ce>
    0.00 :   56b2a:          nopw    (%rax,%rax)
    0.00 :   56b30:          movq    0x8(%r15), %rdx
    0.00 :   56b34:          leaq    0x8(%rdx), %rax
    0.00 :   56b38:          movq    %rax, 0x8(%r15)
    0.00 :   56b3c:          jmp     0x56a1c <vfprintf+0x249c>
    0.00 :   56b41:          nopl    (%rax)
    0.00 :   56b48:          movl    (%r15), %eax
    0.00 :   56b4b:          cmpl    $0x2f, %eax
    0.00 :   56b4e:          ja      0x57ca8 <vfprintf+0x3728>
    0.00 :   56b54:          movl    %eax, %edx
    0.00 :   56b56:          addl    $0x8, %eax
    0.00 :   56b59:          addq    0x10(%r15), %rdx
    0.00 :   56b5d:          movl    %eax, (%r15)
    0.00 :   56b60:          movq    (%rdx), %rbp
    0.00 :   56b63:          testq   %rbp, %rbp
    0.00 :   56b66:          jne     0x58352 <vfprintf+0x3dd2>
    0.00 :   56b6c:          cmpl    $-0x1, %r13d
    0.00 :   56b70:          je      0x57fad <vfprintf+0x3a2d>
    0.00 :   56b76:          cmpl    $0x5, %r13d
    0.00 :   56b7a:          jg      0x57fad <vfprintf+0x3a2d>
    0.00 :   56b80:          xorl    %eax, %eax
    0.00 :   56b82:          xorl    %r12d, %r12d
    0.00 :   56b85:          leaq    0x140cd8(%rip), %rbp    # 0x197864 <in6addr_loopback+0x3b4>
    0.00 :   56b8c:          vzeroupper
    0.00 :   56b8f:          nop
    0.00 :   56b90:          movl    0xc(%rsp), %r13d
    0.00 :   56b95:          subl    %eax, %r13d
    0.00 :   56b98:          js      0x56bbb <vfprintf+0x263b>
    0.00 :   56b9a:          movl    0x8(%rsp), %ecx
    0.00 :   56b9e:          testl   %ecx, %ecx
    0.00 :   56ba0:          jne     0x57aa8 <vfprintf+0x3528>
    0.00 :   56ba6:          testl   %r13d, %r13d
    0.00 :   56ba9:          je      0x56bbb <vfprintf+0x263b>
    0.00 :   56bab:          movl    %r13d, %edx
    0.00 :   56bae:          movl    $0x20, %esi
    0.00 :   56bb3:          movq    %rbx, %rdi
    0.00 :   56bb6:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   56bbb:          movq    %r12, %rdx
    0.00 :   56bbe:          movq    %rbp, %rsi
    0.00 :   56bc1:          movq    %rbx, %rdi
    0.00 :   56bc4:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   56bc9:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   56bce:          nop
    0.00 :   56bd0:          testl   %r9d, %r9d
    0.00 :   56bd3:          jne     0x569f0 <vfprintf+0x2470>
    0.00 :   56bd9:          movl    0xc(%rsp), %ebp
    0.00 :   56bdd:          movl    0x8(%rsp), %edi
    0.00 :   56be1:          decl    %ebp
    0.00 :   56be3:          testl   %ebp, %ebp
    0.00 :   56be5:          setg    %r12b
    0.00 :   56be9:          testl   %edi, %edi
    0.00 :   56beb:          jne     0x56bf6 <vfprintf+0x2676>
    0.00 :   56bed:          testb   %r12b, %r12b
    0.00 :   56bf0:          jne     0x58052 <vfprintf+0x3ad2>
    0.00 :   56bf6:          vzeroupper
    0.00 :   56bf9:          movl    (%r15), %eax
    0.00 :   56bfc:          cmpl    $0x2f, %eax
    0.00 :   56bff:          ja      0x57e90 <vfprintf+0x3910>
    0.00 :   56c05:          movl    %eax, %edx
    0.00 :   56c07:          addl    $0x8, %eax
    0.00 :   56c0a:          addq    0x10(%r15), %rdx
    0.00 :   56c0e:          movl    %eax, (%r15)
    0.00 :   56c11:          movq    0x8(%rbx), %rax
    0.00 :   56c15:          movl    (%rdx), %edx
    0.00 :   56c17:          cmpq    0x10(%rbx), %rax
    0.00 :   56c1b:          je      0x582c3 <vfprintf+0x3d43>
    0.00 :   56c21:          leaq    0x1(%rax), %rcx
    0.00 :   56c25:          movq    %rcx, 0x8(%rbx)
    0.00 :   56c29:          movb    %dl, (%rax)
    0.00 :   56c2b:          movl    0x8(%rsp), %esi
    0.00 :   56c2f:          testl   %esi, %esi
    0.00 :   56c31:          je      0x56998 <vfprintf+0x2418>
    0.00 :   56c37:          testb   %r12b, %r12b
    0.00 :   56c3a:          je      0x56998 <vfprintf+0x2418>
    0.00 :   56c40:          movslq  %ebp, %rdx
    0.00 :   56c43:          movl    $0x20, %esi
    0.00 :   56c48:          movq    %rbx, %rdi
    0.00 :   56c4b:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   56c50:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   56c55:          nopl    (%rax)
    0.00 :   56c58:          movq    0x80(%rsp), %rax
    0.00 :   56c60:          movzbl  0x1(%rax), %r8d
    0.00 :   56c65:          leaq    0x1(%rax), %rdx
    0.00 :   56c69:          movq    %rdx, 0x80(%rsp)
    0.00 :   56c71:          leal    -0x20(%r8), %eax
    0.00 :   56c75:          cmpb    $0x5a, %al
    0.00 :   56c77:          jbe     0x57d80 <vfprintf+0x3800>
    0.00 :   56c7d:          leaq    -0x53b(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56c84:          movl    $0x1, 0x24(%rsp)
    0.00 :   56c8c:          jmpq    *%rax
    0.00 :   56c8e:          nop
    0.00 :   56c90:          movl    0x20(%rsp), %r9d
    0.00 :   56c95:          movb    %r8b, 0x34(%rsp)
    0.00 :   56c9a:          movl    %ecx, 0x28(%rsp)
    0.00 :   56c9e:          testl   %r9d, %r9d
    0.00 :   56ca1:          je      0x57cc0 <vfprintf+0x3740>
    0.00 :   56ca7:          movl    0x5c(%rsp), %edi
    0.00 :   56cab:          vzeroupper
    0.00 :   56cae:          callq   0x6d430 <vprintf+0x8b0>
    0.00 :   56cb3:          movzbl  0x34(%rsp), %r8d
    0.00 :   56cb9:          movl    0x28(%rsp), %ecx
    0.00 :   56cbd:          movq    %rax, %rbp
    0.00 :   56cc0:          movl    $0x1, %r9d
    0.00 :   56cc6:          testq   %rbp, %rbp
    0.00 :   56cc9:          je      0x57f3a <vfprintf+0x39ba>
    0.00 :   56ccf:          cmpb    $0x53, %r8b
    0.00 :   56cd3:          je      0x57df9 <vfprintf+0x3879>
    0.00 :   56cd9:          testb   %r9b, %r9b
    0.00 :   56cdc:          je      0x57df9 <vfprintf+0x3879>
    0.00 :   56ce2:          cmpl    $-0x1, %r13d
    0.00 :   56ce6:          je      0x57ef0 <vfprintf+0x3970>
    0.00 :   56cec:          movslq  %r13d, %rsi
    0.00 :   56cef:          movq    %rbp, %rdi
    0.00 :   56cf2:          callq   0x22010 <.plt+0x10>
    0.00 :   56cf7:          movq    %rax, %r12
    0.00 :   56cfa:          jmp     0x56b90 <vfprintf+0x2610>
    0.00 :   56cff:          nop
    0.00 :   56d00:          leaq    0x80(%rsp), %rdi
    0.00 :   56d08:          movl    %r9d, 0x34(%rsp)
    0.00 :   56d0d:          movl    %ecx, 0x28(%rsp)
    0.00 :   56d11:          callq   0x54590 <vfprintf+0x10>
    0.00 :   56d16:          cmpl    $-0x1, %eax
    0.00 :   56d19:          movl    %eax, 0xc(%rsp)
    0.00 :   56d1d:          movl    0x28(%rsp), %ecx
    0.00 :   56d21:          movl    0x34(%rsp), %r9d
    0.00 :   56d26:          je      0x582eb <vfprintf+0x3d6b>
    0.00 :   56d2c:          movq    0x80(%rsp), %rax
    0.00 :   56d34:          movzbl  (%rax), %r8d
    0.00 :   56d38:          cmpb    $0x24, %r8b
    0.00 :   56d3c:          je      0x56a93 <vfprintf+0x2513>
    0.00 :   56d42:          leal    -0x20(%r8), %eax
    0.00 :   56d46:          cmpb    $0x5a, %al
    0.00 :   56d48:          ja      0x56749 <vfprintf+0x21c9>
    0.00 :   56d4e:          movzbl  %r8b, %eax
    0.00 :   56d52:          leaq    0x12f467(%rip), %rdi    # 0x1861c0
    0.00 :   56d59:          subl    $0x20, %eax
    0.00 :   56d5c:          cltq
    0.00 :   56d5e:          movzbl  (%rdi,%rax), %edx
    0.00 :   56d62:          leaq    0x12f357(%rip), %rax    # 0x1860c0
    0.00 :   56d69:          leaq    -0x627(%rip), %rdi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56d70:          movslq  (%rax,%rdx,4), %rax
    0.00 :   56d74:          addq    %rdi, %rax
    0.00 :   56d77:          jmpq    *%rax
    0.00 :   56d79:          nopl    (%rax)
    0.00 :   56d80:          movq    0x80(%rsp), %r11
    0.00 :   56d88:          leaq    0x1(%r11), %rax
    0.00 :   56d8c:          movq    %rax, 0xa0(%rsp)
    0.00 :   56d94:          movq    %rax, 0x80(%rsp)
    0.00 :   56d9c:          movzbl  0x1(%r11), %eax
    0.00 :   56da1:          subl    $0x30, %eax
    0.00 :   56da4:          cmpl    $0x9, %eax
    0.00 :   56da7:          jbe     0x57ea8 <vfprintf+0x3928>
    0.00 :   56dad:          movl    (%r15), %eax
    0.00 :   56db0:          cmpl    $0x2f, %eax
    0.00 :   56db3:          ja      0x57dc8 <vfprintf+0x3848>
    0.00 :   56db9:          movl    %eax, %edx
    0.00 :   56dbb:          addl    $0x8, %eax
    0.00 :   56dbe:          addq    0x10(%r15), %rdx
    0.00 :   56dc2:          movl    %eax, (%r15)
    0.00 :   56dc5:          movl    (%rdx), %eax
    0.00 :   56dc7:          movl    %eax, 0xc(%rsp)
    0.00 :   56dcb:          testl   %eax, %eax
    0.00 :   56dcd:          jns     0x56de2 <vfprintf+0x2862>
    0.00 :   56dcf:          negl    %eax
    0.00 :   56dd1:          movb    $0x20, 0x18(%rsp)
    0.00 :   56dd6:          movl    $0x1, 0x8(%rsp)
    0.00 :   56dde:          movl    %eax, 0xc(%rsp)
    0.00 :   56de2:          movzbl  0x1(%r11), %r8d
    0.00 :   56de7:          leal    -0x20(%r8), %eax
    0.00 :   56deb:          cmpb    $0x5a, %al
    0.00 :   56ded:          ja      0x56749 <vfprintf+0x21c9>
    0.00 :   56df3:          movzbl  %r8b, %eax
    0.00 :   56df7:          leaq    0x12f3c2(%rip), %rdi    # 0x1861c0
    0.00 :   56dfe:          leaq    -0x6bc(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56e05:          subl    $0x20, %eax
    0.00 :   56e08:          cltq
    0.00 :   56e0a:          movzbl  (%rdi,%rax), %edx
    0.00 :   56e0e:          leaq    0x12f2ab(%rip), %rax    # 0x1860c0
    0.00 :   56e15:          movslq  (%rax,%rdx,4), %rax
    0.00 :   56e19:          addq    %rsi, %rax
    0.00 :   56e1c:          jmpq    *%rax
    0.00 :   56e1e:          nop
    0.00 :   56e20:          movq    0x80(%rsp), %rax
    0.00 :   56e28:          movzbl  0x1(%rax), %r8d
    0.00 :   56e2d:          leaq    0x1(%rax), %rdx
    0.00 :   56e31:          movq    %rdx, 0x80(%rsp)
    0.00 :   56e39:          leaq    -0x6f7(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56e40:          leal    -0x20(%r8), %edx
    0.00 :   56e44:          cmpb    $0x5a, %dl
    0.00 :   56e47:          ja      0x57ba0 <vfprintf+0x3620>
    0.00 :   56e4d:          movzbl  %r8b, %eax
    0.00 :   56e51:          leaq    0x12f368(%rip), %rcx    # 0x1861c0
    0.00 :   56e58:          subl    $0x20, %eax
    0.00 :   56e5b:          cltq
    0.00 :   56e5d:          movzbl  (%rcx,%rax), %eax
    0.00 :   56e61:          leaq    0x12f2d8(%rip), %rcx    # 0x186140
    0.00 :   56e68:          movslq  (%rcx,%rax,4), %rax
    0.00 :   56e6c:          leaq    -0x72a(%rip), %rcx      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56e73:          addq    %rcx, %rax
    0.00 :   56e76:          movl    $0x1, %ecx
    0.00 :   56e7b:          jmpq    *%rax
    0.00 :   56e7d:          nopl    (%rax)
    0.00 :   56e80:          cmpq    $-0x1, 0x70(%rsp)
    0.00 :   56e86:          je      0x57f6b <vfprintf+0x39eb>
    0.00 :   56e8c:          movq    0x80(%rsp), %rax
    0.00 :   56e94:          movzbl  0x1(%rax), %r8d
    0.00 :   56e99:          leaq    0x1(%rax), %rdx
    0.00 :   56e9d:          movq    %rdx, 0x80(%rsp)
    0.00 :   56ea5:          leaq    -0x763(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56eac:          leal    -0x20(%r8), %edx
    0.00 :   56eb0:          cmpb    $0x5a, %dl
    0.00 :   56eb3:          ja      0x57cf0 <vfprintf+0x3770>
    0.00 :   56eb9:          movzbl  %r8b, %eax
    0.00 :   56ebd:          leaq    0x12f2fc(%rip), %rsi    # 0x1861c0
    0.00 :   56ec4:          leaq    0x12f275(%rip), %rdi    # 0x186140
    0.00 :   56ecb:          subl    $0x20, %eax
    0.00 :   56ece:          movl    $0x1, 0x30(%rsp)
    0.00 :   56ed6:          cltq
    0.00 :   56ed8:          movzbl  (%rsi,%rax), %eax
    0.00 :   56edc:          leaq    -0x79a(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56ee3:          movslq  (%rdi,%rax,4), %rax
    0.00 :   56ee7:          addq    %rsi, %rax
    0.00 :   56eea:          jmpq    *%rax
    0.00 :   56eec:          nopl    (%rax)
    0.00 :   56ef0:          movq    0x8(%rbx), %rax
    0.00 :   56ef4:          cmpq    0x10(%rbx), %rax
    0.00 :   56ef8:          je      0x581d7 <vfprintf+0x3c57>
    0.00 :   56efe:          leaq    0x1(%rax), %rdx
    0.00 :   56f02:          movq    %rdx, 0x8(%rbx)
    0.00 :   56f06:          movb    $0x25, (%rax)
    0.00 :   56f09:          vzeroupper
    0.00 :   56f0c:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   56f11:          nopl    (%rax)
    0.00 :   56f18:          movzbl  0x18(%rsp), %edi
    0.00 :   56f1d:          movl    0x8(%rsp), %esi
    0.00 :   56f21:          movl    $0x30, %eax
    0.00 :   56f26:          testl   %esi, %esi
    0.00 :   56f28:          cmovel  %eax, %edi
    0.00 :   56f2b:          movq    0x80(%rsp), %rax
    0.00 :   56f33:          movb    %dil, 0x18(%rsp)
    0.00 :   56f38:          movzbl  0x1(%rax), %r8d
    0.00 :   56f3d:          leaq    0x1(%rax), %rdx
    0.00 :   56f41:          movq    %rdx, 0x80(%rsp)
    0.00 :   56f49:          leal    -0x20(%r8), %eax
    0.00 :   56f4d:          cmpb    $0x5a, %al
    0.00 :   56f4f:          ja      0x56749 <vfprintf+0x21c9>
    0.00 :   56f55:          movzbl  %r8b, %eax
    0.00 :   56f59:          leaq    0x12f260(%rip), %rdi    # 0x1861c0
    0.00 :   56f60:          leaq    0x12f1d9(%rip), %rsi    # 0x186140
    0.00 :   56f67:          subl    $0x20, %eax
    0.00 :   56f6a:          cltq
    0.00 :   56f6c:          movzbl  (%rdi,%rax), %eax
    0.00 :   56f70:          leaq    -0x82e(%rip), %rdi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56f77:          movslq  (%rsi,%rax,4), %rax
    0.00 :   56f7b:          addq    %rdi, %rax
    0.00 :   56f7e:          jmpq    *%rax
    0.00 :   56f80:          movq    0x80(%rsp), %rax
    0.00 :   56f88:          movzbl  0x1(%rax), %r8d
    0.00 :   56f8d:          leaq    0x1(%rax), %rdx
    0.00 :   56f91:          movq    %rdx, 0x80(%rsp)
    0.00 :   56f99:          leaq    -0x857(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56fa0:          leal    -0x20(%r8), %edx
    0.00 :   56fa4:          cmpb    $0x5a, %dl
    0.00 :   56fa7:          ja      0x57c58 <vfprintf+0x36d8>
    0.00 :   56fad:          movzbl  %r8b, %eax
    0.00 :   56fb1:          leaq    0x12f208(%rip), %rsi    # 0x1861c0
    0.00 :   56fb8:          leaq    0x12f181(%rip), %rdi    # 0x186140
    0.00 :   56fbf:          subl    $0x20, %eax
    0.00 :   56fc2:          movl    $0x1, 0x20(%rsp)
    0.00 :   56fca:          cltq
    0.00 :   56fcc:          movzbl  (%rsi,%rax), %eax
    0.00 :   56fd0:          leaq    -0x88e(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   56fd7:          movslq  (%rdi,%rax,4), %rax
    0.00 :   56fdb:          addq    %rsi, %rax
    0.00 :   56fde:          jmpq    *%rax
    0.00 :   56fe0:          movq    0x80(%rsp), %rax
    0.00 :   56fe8:          movzbl  0x1(%rax), %r8d
    0.00 :   56fed:          leaq    0x1(%rax), %rdx
    0.00 :   56ff1:          movq    %rdx, 0x80(%rsp)
    0.00 :   56ff9:          leaq    -0x8b7(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   57000:          leal    -0x20(%r8), %edx
    0.00 :   57004:          cmpb    $0x5a, %dl
    0.00 :   57007:          ja      0x57d70 <vfprintf+0x37f0>
    0.00 :   5700d:          movzbl  %r8b, %eax
    0.00 :   57011:          leaq    0x12f1a8(%rip), %rdi    # 0x1861c0
    0.00 :   57018:          leaq    0x12f121(%rip), %rsi    # 0x186140
    0.00 :   5701f:          subl    $0x20, %eax
    0.00 :   57022:          movb    $0x20, 0x18(%rsp)
    0.00 :   57027:          movl    $0x1, 0x8(%rsp)
    0.00 :   5702f:          cltq
    0.00 :   57031:          movzbl  (%rdi,%rax), %eax
    0.00 :   57035:          leaq    -0x8f3(%rip), %rdi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   5703c:          movslq  (%rsi,%rax,4), %rax
    0.00 :   57040:          addq    %rdi, %rax
    0.00 :   57043:          jmpq    *%rax
    0.00 :   57045:          nopl    (%rax)
    0.00 :   57048:          movb    $0x0, 0x28(%rsp)
    0.00 :   5704d:          movl    $0x10, 0x34(%rsp)
    0.00 :   57055:          movl    (%r15), %eax
    0.00 :   57058:          testl   %r9d, %r9d
    0.00 :   5705b:          je      0x573b5 <vfprintf+0x2e35>
    0.00 :   57061:          cmpl    $0x2f, %eax
    0.00 :   57064:          ja      0x57970 <vfprintf+0x33f0>
    0.00 :   5706a:          movl    %eax, %edx
    0.00 :   5706c:          addl    $0x8, %eax
    0.00 :   5706f:          addq    0x10(%r15), %rdx
    0.00 :   57073:          movl    %eax, (%r15)
    0.00 :   57076:          movq    (%rdx), %r12
    0.00 :   57079:          movzbl  0x20(%rsp), %eax
    0.00 :   5707e:          movl    $0x0, 0x10(%rsp)
    0.00 :   57086:          xorl    %r9d, %r9d
    0.00 :   57089:          movl    $0x0, 0x24(%rsp)
    0.00 :   57091:          andl    $0x1, %eax
    0.00 :   57094:          movb    %al, 0x43(%rsp)
    0.00 :   57098:          vzeroupper
    0.00 :   5709b:          testl   %r13d, %r13d
    0.00 :   5709e:          js      0x57310 <vfprintf+0x2d90>
    0.00 :   570a4:          je      0x57770 <vfprintf+0x31f0>
    0.00 :   570aa:          movb    $0x20, 0x18(%rsp)
    0.00 :   570af:          movslq  %r13d, %r14
    0.00 :   570b2:          movl    0x34(%rsp), %edx
    0.00 :   570b6:          cmpb    $0x58, %r8b
    0.00 :   570ba:          leaq    0x4d8(%rsp), %rbp
    0.00 :   570c2:          sete    %cl
    0.00 :   570c5:          movq    %rbp, %rsi
    0.00 :   570c8:          movl    %r9d, 0x50(%rsp)
    0.00 :   570cd:          movzbl  %cl, %ecx
    0.00 :   570d0:          movq    %r12, %rdi
    0.00 :   570d3:          movb    %r8b, 0x58(%rsp)
    0.00 :   570d8:          callq   0x4d720 <__strtof128_nan+0x4f0>
    0.00 :   570dd:          movzbl  0x58(%rsp), %r8d
    0.00 :   570e3:          subq    %rax, %rbp
    0.00 :   570e6:          movq    %rax, 0x38(%rsp)
    0.00 :   570eb:          movl    0x50(%rsp), %r9d
    0.00 :   570f0:          subq    %rbp, %r14
    0.00 :   570f3:          movl    $0x0, %r10d
    0.00 :   570f9:          cmovnsq %r14, %r10
    0.00 :   570fd:          movl    %r10d, %r11d
    0.00 :   57100:          movl    0x30(%rsp), %edx
    0.00 :   57104:          testl   %edx, %edx
    0.00 :   57106:          jne     0x576c8 <vfprintf+0x3148>
    0.00 :   5710c:          cmpb    $0x0, 0x28(%rsp)
    0.00 :   57111:          jne     0x577c0 <vfprintf+0x3240>
    0.00 :   57117:          movl    %ebp, %eax
    0.00 :   57119:          movl    %ebp, %r14d
    0.00 :   5711c:          xorl    %ecx, %ecx
    0.00 :   5711e:          testq   %r12, %r12
    0.00 :   57121:          setne   %dl
    0.00 :   57124:          cmpl    %eax, %r13d
    0.00 :   57127:          jg      0x57131 <vfprintf+0x2bb1>
    0.00 :   57129:          testb   %dl, %dl
    0.00 :   5712b:          jne     0x57868 <vfprintf+0x32e8>
    0.00 :   57131:          xorl    %r12d, %r12d
    0.00 :   57134:          movzbl  0x43(%rsp), %r13d
    0.00 :   5713a:          movl    0x8(%rsp), %eax
    0.00 :   5713e:          andl    %edx, %r13d
    0.00 :   57141:          testl   %eax, %eax
    0.00 :   57143:          jne     0x575f8 <vfprintf+0x3078>
    0.00 :   57149:          movl    0xc(%rsp), %eax
    0.00 :   5714d:          subl    %r11d, %eax
    0.00 :   57150:          subl    %r14d, %eax
    0.00 :   57153:          testb   %r13b, %r13b
    0.00 :   57156:          jne     0x57a50 <vfprintf+0x34d0>
    0.00 :   5715c:          movl    0x24(%rsp), %edx
    0.00 :   57160:          cmpl    $0x1, %r12d
    0.00 :   57164:          adcl    $-0x1, %eax
    0.00 :   57167:          orl     %r9d, %edx
    0.00 :   5716a:          orl     0x10(%rsp), %edx
    0.00 :   5716e:          jne     0x57880 <vfprintf+0x3300>
    0.00 :   57174:          cmpb    $0x20, 0x18(%rsp)
    0.00 :   57179:          je      0x57b40 <vfprintf+0x35c0>
    0.00 :   5717f:          addl    %eax, %r11d
    0.00 :   57182:          testb   %r13b, %r13b
    0.00 :   57185:          jne     0x578d0 <vfprintf+0x3350>
    0.00 :   5718b:          testl   %r11d, %r11d
    0.00 :   5718e:          jle     0x571a9 <vfprintf+0x2c29>
    0.00 :   57190:          movl    %r11d, %edx
    0.00 :   57193:          movl    $0x30, %esi
    0.00 :   57198:          movb    %cl, 0x8(%rsp)
    0.00 :   5719c:          movq    %rbx, %rdi
    0.00 :   5719f:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   571a4:          movzbl  0x8(%rsp), %ecx
    0.00 :   571a9:          testl   %r12d, %r12d
    0.00 :   571ac:          jne     0x57a10 <vfprintf+0x3490>
    0.00 :   571b2:          testb   %cl, %cl
    0.00 :   571b4:          je      0x57920 <vfprintf+0x33a0>
    0.00 :   571ba:          movl    0x28(%rsp), %r9d
    0.00 :   571bf:          movq    0x48(%rsp), %r8
    0.00 :   571c4:          movq    %rbx, %rdi
    0.00 :   571c7:          movq    0x38(%rsp), %rdx
    0.00 :   571cc:          leaq    0x4d8(%rsp), %rcx
    0.00 :   571d4:          leaq    0xa0(%rsp), %rsi
    0.00 :   571dc:          andl    $0x1, %r9d
    0.00 :   571e0:          callq   0x54870 <vfprintf+0x2f0>
    0.00 :   571e5:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   571ea:          nopw    (%rax,%rax)
    0.00 :   571f0:          movq    0x80(%rsp), %rax
    0.00 :   571f8:          movzbl  0x1(%rax), %r8d
    0.00 :   571fd:          leaq    0x1(%rax), %rdx
    0.00 :   57201:          movq    %rdx, 0x80(%rsp)
    0.00 :   57209:          leaq    -0xac7(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   57210:          leal    -0x20(%r8), %edx
    0.00 :   57214:          cmpb    $0x5a, %dl
    0.00 :   57217:          ja      0x57ba8 <vfprintf+0x3628>
    0.00 :   5721d:          movzbl  %r8b, %eax
    0.00 :   57221:          leaq    0x12ef98(%rip), %rsi    # 0x1861c0
    0.00 :   57228:          leaq    0x12ef11(%rip), %rdi    # 0x186140
    0.00 :   5722f:          subl    $0x20, %eax
    0.00 :   57232:          movl    $0x1, 0x10(%rsp)
    0.00 :   5723a:          cltq
    0.00 :   5723c:          movzbl  (%rsi,%rax), %eax
    0.00 :   57240:          leaq    -0xafe(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   57247:          movslq  (%rdi,%rax,4), %rax
    0.00 :   5724b:          addq    %rsi, %rax
    0.00 :   5724e:          jmpq    *%rax
    0.00 :   57250:          movq    0x80(%rsp), %rax
    0.00 :   57258:          movzbl  0x1(%rax), %r8d
    0.00 :   5725d:          leaq    0x1(%rax), %rdx
    0.00 :   57261:          movq    %rdx, 0x80(%rsp)
    0.00 :   57269:          leaq    -0xb27(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   57270:          leal    -0x20(%r8), %edx
    0.00 :   57274:          cmpb    $0x5a, %dl
    0.00 :   57277:          ja      0x57d18 <vfprintf+0x3798>
    0.00 :   5727d:          movzbl  %r8b, %eax
    0.00 :   57281:          leaq    0x12ef38(%rip), %rdi    # 0x1861c0
    0.00 :   57288:          leaq    -0xb46(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   5728f:          subl    $0x20, %eax
    0.00 :   57292:          movl    $0x1, %r9d
    0.00 :   57298:          cltq
    0.00 :   5729a:          movzbl  (%rdi,%rax), %edx
    0.00 :   5729e:          leaq    0x12ec1b(%rip), %rax    # 0x185ec0
    0.00 :   572a5:          movslq  (%rax,%rdx,4), %rax
    0.00 :   572a9:          addq    %rsi, %rax
    0.00 :   572ac:          jmpq    *%rax
    0.00 :   572ae:          nop
    0.00 :   572b0:          movl    (%r15), %eax
    0.00 :   572b3:          cmpl    $0x2f, %eax
    0.00 :   572b6:          ja      0x57d00 <vfprintf+0x3780>
    0.00 :   572bc:          movl    %eax, %edx
    0.00 :   572be:          addl    $0x8, %eax
    0.00 :   572c1:          addq    0x10(%r15), %rdx
    0.00 :   572c5:          movl    %eax, (%r15)
    0.00 :   572c8:          movq    (%rdx), %r12
    0.00 :   572cb:          testq   %r12, %r12
    0.00 :   572ce:          je      0x57dd9 <vfprintf+0x3859>
    0.00 :   572d4:          movb    $0x1, 0x43(%rsp)
    0.00 :   572d9:          movb    $0x0, 0x28(%rsp)
    0.00 :   572de:          xorl    %r9d, %r9d
    0.00 :   572e1:          movl    $0x0, 0x30(%rsp)
    0.00 :   572e9:          movl    $0x1, 0x20(%rsp)
    0.00 :   572f1:          movl    $0x78, %r8d
    0.00 :   572f7:          movl    $0x10, 0x34(%rsp)
    0.00 :   572ff:          vzeroupper
    0.00 :   57302:          testl   %r13d, %r13d
    0.00 :   57305:          jns     0x570a4 <vfprintf+0x2b24>
    0.00 :   5730b:          nopl    (%rax,%rax)
    0.00 :   57310:          movl    $0x1, %r14d
    0.00 :   57316:          movl    $0x1, %r13d
    0.00 :   5731c:          jmp     0x570b2 <vfprintf+0x2b32>
    0.00 :   57321:          nopl    (%rax)
    0.00 :   57328:          jmp     0x56818 <vfprintf+0x2298>
    0.00 :   5732d:          nopl    (%rax)
    0.00 :   57330:          movq    0x80(%rsp), %rax
    0.00 :   57338:          movzbl  0x1(%rax), %r8d
    0.00 :   5733d:          leaq    0x1(%rax), %rdx
    0.00 :   57341:          movq    %rdx, 0x80(%rsp)
    0.00 :   57349:          leaq    -0xc07(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   57350:          leal    -0x20(%r8), %edx
    0.00 :   57354:          cmpb    $0x5a, %dl
    0.00 :   57357:          ja      0x57d20 <vfprintf+0x37a0>
    0.00 :   5735d:          movzbl  %r8b, %eax
    0.00 :   57361:          leaq    0x12ee58(%rip), %rdi    # 0x1861c0
    0.00 :   57368:          leaq    -0xc26(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   5736f:          subl    $0x20, %eax
    0.00 :   57372:          movl    $0x1, %r9d
    0.00 :   57378:          cltq
    0.00 :   5737a:          movl    $0x1, %r10d
    0.00 :   57380:          movzbl  (%rdi,%rax), %edx
    0.00 :   57384:          leaq    0x12ebb5(%rip), %rax    # 0x185f40
    0.00 :   5738b:          movslq  (%rax,%rdx,4), %rax
    0.00 :   5738f:          addq    %rsi, %rax
    0.00 :   57392:          jmpq    *%rax
    0.00 :   57394:          nopl    (%rax)
    0.00 :   57398:          movl    %ecx, %eax
    0.00 :   5739a:          movl    $0xa, 0x34(%rsp)
    0.00 :   573a2:          andl    $0x1, %eax
    0.00 :   573a5:          movb    %al, 0x28(%rsp)
    0.00 :   573a9:          movl    (%r15), %eax
    0.00 :   573ac:          testl   %r9d, %r9d
    0.00 :   573af:          jne     0x57061 <vfprintf+0x2ae1>
    0.00 :   573b5:          testl   %r14d, %r14d
    0.00 :   573b8:          je      0x57948 <vfprintf+0x33c8>
    0.00 :   573be:          cmpl    $0x2f, %eax
    0.00 :   573c1:          ja      0x57c40 <vfprintf+0x36c0>
    0.00 :   573c7:          movl    %eax, %edx
    0.00 :   573c9:          addl    $0x8, %eax
    0.00 :   573cc:          addq    0x10(%r15), %rdx
    0.00 :   573d0:          movl    %eax, (%r15)
    0.00 :   573d3:          movzbl  0x20(%rsp), %eax
    0.00 :   573d8:          movl    $0x0, 0x10(%rsp)
    0.00 :   573e0:          movl    $0x0, 0x24(%rsp)
    0.00 :   573e8:          movzbl  (%rdx), %r12d
    0.00 :   573ec:          andl    $0x1, %eax
    0.00 :   573ef:          movb    %al, 0x43(%rsp)
    0.00 :   573f3:          vzeroupper
    0.00 :   573f6:          jmp     0x5709b <vfprintf+0x2b1b>
    0.00 :   573fb:          nopl    (%rax,%rax)
    0.00 :   57400:          movq    0x80(%rsp), %rax
    0.00 :   57408:          movzbl  0x1(%rax), %r8d
    0.00 :   5740d:          leaq    0x1(%rax), %rdx
    0.00 :   57411:          movq    %rdx, 0x80(%rsp)
    0.00 :   57419:          leaq    -0xcd7(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   57420:          leal    -0x20(%r8), %edx
    0.00 :   57424:          cmpb    $0x5a, %dl
    0.00 :   57427:          ja      0x57d68 <vfprintf+0x37e8>
    0.00 :   5742d:          movzbl  %r8b, %eax
    0.00 :   57431:          leaq    0x12ed88(%rip), %rdi    # 0x1861c0
    0.00 :   57438:          leaq    -0xcf6(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   5743f:          subl    $0x20, %eax
    0.00 :   57442:          movl    $0x1, %r12d
    0.00 :   57448:          cltq
    0.00 :   5744a:          movzbl  (%rdi,%rax), %edx
    0.00 :   5744e:          leaq    0x12eb6b(%rip), %rax    # 0x185fc0
    0.00 :   57455:          movslq  (%rax,%rdx,4), %rax
    0.00 :   57459:          addq    %rsi, %rax
    0.00 :   5745c:          jmpq    *%rax
    0.00 :   5745e:          nop
    0.00 :   57460:          movq    0x80(%rsp), %r11
    0.00 :   57468:          movzbl  0x1(%r11), %r8d
    0.00 :   5746d:          leaq    0x1(%r11), %rax
    0.00 :   57471:          movq    %rax, 0x80(%rsp)
    0.00 :   57479:          cmpb    $0x2a, %r8b
    0.00 :   5747d:          je      0x57e38 <vfprintf+0x38b8>
    0.00 :   57483:          movzbl  %r8b, %eax
    0.00 :   57487:          xorl    %r13d, %r13d
    0.00 :   5748a:          subl    $0x30, %eax
    0.00 :   5748d:          cmpl    $0x9, %eax
    0.00 :   57490:          jbe     0x58158 <vfprintf+0x3bd8>
    0.00 :   57496:          leal    -0x20(%r8), %eax
    0.00 :   5749a:          cmpb    $0x5a, %al
    0.00 :   5749c:          ja      0x56749 <vfprintf+0x21c9>
    0.00 :   574a2:          movzbl  %r8b, %eax
    0.00 :   574a6:          leaq    0x12ed13(%rip), %rdi    # 0x1861c0
    0.00 :   574ad:          leaq    -0xd6b(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   574b4:          subl    $0x20, %eax
    0.00 :   574b7:          cltq
    0.00 :   574b9:          movzbl  (%rdi,%rax), %edx
    0.00 :   574bd:          leaq    0x12eb7c(%rip), %rax    # 0x186040
    0.00 :   574c4:          movslq  (%rax,%rdx,4), %rax
    0.00 :   574c8:          addq    %rsi, %rax
    0.00 :   574cb:          jmpq    *%rax
    0.00 :   574cd:          nopl    (%rax)
    0.00 :   574d0:          movq    0x80(%rsp), %rax
    0.00 :   574d8:          movzbl  0x1(%rax), %r8d
    0.00 :   574dd:          leaq    0x1(%rax), %rdx
    0.00 :   574e1:          movq    %rdx, 0x80(%rsp)
    0.00 :   574e9:          leaq    -0xda7(%rip), %rax      # 0x56749 <vfprintf+0x21c9>
    0.00 :   574f0:          leal    -0x20(%r8), %edx
    0.00 :   574f4:          cmpb    $0x5a, %dl
    0.00 :   574f7:          ja      0x57db8 <vfprintf+0x3838>
    0.00 :   574fd:          movzbl  %r8b, %eax
    0.00 :   57501:          leaq    0x12ecb8(%rip), %rdi    # 0x1861c0
    0.00 :   57508:          leaq    -0xdc6(%rip), %rsi      # 0x56749 <vfprintf+0x21c9>
    0.00 :   5750f:          subl    $0x20, %eax
    0.00 :   57512:          movl    $0x1, %r14d
    0.00 :   57518:          cltq
    0.00 :   5751a:          xorl    %r12d, %r12d
    0.00 :   5751d:          movzbl  (%rdi,%rax), %edx
    0.00 :   57521:          leaq    0x12ea18(%rip), %rax    # 0x185f40
    0.00 :   57528:          movslq  (%rax,%rdx,4), %rax
    0.00 :   5752c:          addq    %rsi, %rax
    0.00 :   5752f:          jmpq    *%rax
    0.00 :   57531:          nopl    (%rax)
    0.00 :   57538:          testb   $0x2, 0x44(%rsp)
    0.00 :   5753d:          je      0x5754d <vfprintf+0x2fcd>
    0.00 :   5753f:          movl    0x7c(%rsp), %r10d
    0.00 :   57544:          testl   %r10d, %r10d
    0.00 :   57547:          je      0x58118 <vfprintf+0x3b98>
    0.00 :   5754d:          vzeroupper
    0.00 :   57550:          movl    (%r15), %eax
    0.00 :   57553:          cmpl    $0x2f, %eax
    0.00 :   57556:          ja      0x57d50 <vfprintf+0x37d0>
    0.00 :   5755c:          movl    %eax, %edx
    0.00 :   5755e:          addl    $0x8, %eax
    0.00 :   57561:          addq    0x10(%r15), %rdx
    0.00 :   57565:          movl    %eax, (%r15)
    0.00 :   57568:          movq    %rbx, %rdi
    0.00 :   5756b:          movl    %r9d, 0x8(%rsp)
    0.00 :   57570:          movq    (%rdx), %rbp
    0.00 :   57573:          callq   0x4e900 <parse_printf_format+0x3b0>
    0.00 :   57578:          movl    0x8(%rsp), %r9d
    0.00 :   5757d:          testl   %r9d, %r9d
    0.00 :   57580:          je      0x57d30 <vfprintf+0x37b0>
    0.00 :   57586:          movl    %eax, %eax
    0.00 :   57588:          movq    %rax, (%rbp)
    0.00 :   5758c:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   57591:          nopl    (%rax)
    0.00 :   57598:          movb    $0x0, 0x28(%rsp)
    0.00 :   5759d:          movl    $0x8, 0x34(%rsp)
    0.00 :   575a5:          jmp     0x57055 <vfprintf+0x2ad5>
    0.00 :   575aa:          nopw    (%rax,%rax)
    0.00 :   575b0:          movb    $0x0, 0x28(%rsp)
    0.00 :   575b5:          movl    $0x2, 0x34(%rsp)
    0.00 :   575bd:          jmp     0x57055 <vfprintf+0x2ad5>
    0.00 :   575c2:          nopw    (%rax,%rax)
    0.00 :   575c8:          movl    (%r15), %eax
    0.00 :   575cb:          testl   %r9d, %r9d
    0.00 :   575ce:          je      0x57bb8 <vfprintf+0x3638>
    0.00 :   575d4:          cmpl    $0x2f, %eax
    0.00 :   575d7:          ja      0x5800f <vfprintf+0x3a8f>
    0.00 :   575dd:          movl    %eax, %edx
    0.00 :   575df:          addl    $0x8, %eax
    0.00 :   575e2:          addq    0x10(%r15), %rdx
    0.00 :   575e6:          movl    %eax, (%r15)
    0.00 :   575e9:          movq    (%rdx), %r12
    0.00 :   575ec:          jmp     0x57be8 <vfprintf+0x3668>
    0.00 :   575f1:          nopl    (%rax)
    0.00 :   575f8:          testl   %r9d, %r9d
    0.00 :   575fb:          jne     0x57998 <vfprintf+0x3418>
    0.00 :   57601:          movl    0x10(%rsp), %eax
    0.00 :   57605:          testl   %eax, %eax
    0.00 :   57607:          jne     0x57a70 <vfprintf+0x34f0>
    0.00 :   5760d:          movl    0x24(%rsp), %eax
    0.00 :   57611:          testl   %eax, %eax
    0.00 :   57613:          jne     0x57e18 <vfprintf+0x3898>
    0.00 :   57619:          testb   %r13b, %r13b
    0.00 :   5761c:          jne     0x579be <vfprintf+0x343e>
    0.00 :   57622:          movl    %r10d, %edx
    0.00 :   57625:          addl    %r11d, %r14d
    0.00 :   57628:          testl   %r12d, %r12d
    0.00 :   5762b:          je      0x57828 <vfprintf+0x32a8>
    0.00 :   57631:          testq   %rdx, %rdx
    0.00 :   57634:          je      0x5764c <vfprintf+0x30cc>
    0.00 :   57636:          movl    $0x30, %esi
    0.00 :   5763b:          movq    %rbx, %rdi
    0.00 :   5763e:          movb    %cl, 0x8(%rsp)
    0.00 :   57642:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   57647:          movzbl  0x8(%rsp), %ecx
    0.00 :   5764c:          movq    0x8(%rbx), %rax
    0.00 :   57650:          cmpq    0x10(%rbx), %rax
    0.00 :   57654:          je      0x581bc <vfprintf+0x3c3c>
    0.00 :   5765a:          leaq    0x1(%rax), %rdx
    0.00 :   5765e:          movq    %rdx, 0x8(%rbx)
    0.00 :   57662:          movb    $0x30, (%rax)
    0.00 :   57665:          movl    0xc(%rsp), %r12d
    0.00 :   5766a:          decl    %r12d
    0.00 :   5766d:          subl    %r14d, %r12d
    0.00 :   57670:          testb   %cl, %cl
    0.00 :   57672:          je      0x57853 <vfprintf+0x32d3>
    0.00 :   57678:          movl    0x28(%rsp), %r9d
    0.00 :   5767d:          movq    0x48(%rsp), %r8
    0.00 :   57682:          movq    %rbx, %rdi
    0.00 :   57685:          movq    0x38(%rsp), %rdx
    0.00 :   5768a:          leaq    0x4d8(%rsp), %rcx
    0.00 :   57692:          leaq    0xa0(%rsp), %rsi
    0.00 :   5769a:          andl    $0x1, %r9d
    0.00 :   5769e:          callq   0x54870 <vfprintf+0x2f0>
    0.00 :   576a3:          testl   %r12d, %r12d
    0.00 :   576a6:          jle     0x56998 <vfprintf+0x2418>
    0.00 :   576ac:          movslq  %r12d, %rdx
    0.00 :   576af:          movl    $0x20, %esi
    0.00 :   576b4:          movq    %rbx, %rdi
    0.00 :   576b7:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   576bc:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   576c1:          nopl    (%rax)
    0.00 :   576c8:          movq    0x173889(%rip), %rax    # 0x1caf58
    0.00 :   576cf:          movl    %r11d, 0x78(%rsp)
    0.00 :   576d4:          movl    %ebp, %ecx
    0.00 :   576d6:          movq    %r10, 0x50(%rsp)
    0.00 :   576db:          movl    %r9d, 0x58(%rsp)
    0.00 :   576e0:          movl    $0x1, %esi
    0.00 :   576e5:          movb    %r8b, 0x30(%rsp)
    0.00 :   576ea:          leaq    0xa0(%rsp), %rdi
    0.00 :   576f2:          movl    %ebp, %r14d
    0.00 :   576f5:          movq    %fs:(%rax), %rdx
    0.00 :   576f9:          callq   0x4de40 <getw+0x90>
    0.00 :   576fe:          cmpb    $0x0, 0x28(%rsp)
    0.00 :   57703:          movzbl  0x30(%rsp), %r8d
    0.00 :   57709:          movl    0x58(%rsp), %r9d
    0.00 :   5770e:          movq    0x50(%rsp), %r10
    0.00 :   57713:          movl    0x78(%rsp), %r11d
    0.00 :   57718:          jne     0x57f00 <vfprintf+0x3980>
    0.00 :   5771e:          movq    0x48(%rsp), %rdi
    0.00 :   57723:          movl    %r11d, 0x78(%rsp)
    0.00 :   57728:          movq    %r10, 0x50(%rsp)
    0.00 :   5772d:          movl    %r9d, 0x58(%rsp)
    0.00 :   57732:          movb    %r8b, 0x30(%rsp)
    0.00 :   57737:          callq   0x22110 <_dl_find_dso_for_object@plt+0x20>
    0.00 :   5773c:          movzbl  0x30(%rsp), %r8d
    0.00 :   57742:          imull   0xb4(%rsp), %eax
    0.00 :   5774a:          movl    0x78(%rsp), %r11d
    0.00 :   5774f:          movl    $0x1, %ecx
    0.00 :   57754:          movq    0x50(%rsp), %r10
    0.00 :   57759:          movl    0x58(%rsp), %r9d
    0.00 :   5775e:          addl    %eax, %r14d
    0.00 :   57761:          movl    %r14d, %eax
    0.00 :   57764:          jmp     0x5711e <vfprintf+0x2b9e>
    0.00 :   57769:          nopl    (%rax)
    0.00 :   57770:          testq   %r12, %r12
    0.00 :   57773:          jne     0x57938 <vfprintf+0x33b8>
    0.00 :   57779:          cmpl    $0x8, 0x34(%rsp)
    0.00 :   5777e:          jne     0x57ad8 <vfprintf+0x3558>
    0.00 :   57784:          movl    0x20(%rsp), %ecx
    0.00 :   57788:          testl   %ecx, %ecx
    0.00 :   5778a:          je      0x57ad8 <vfprintf+0x3558>
    0.00 :   57790:          leaq    0x4d7(%rsp), %rax
    0.00 :   57798:          movb    $0x30, 0x4d7(%rsp)
    0.00 :   577a0:          xorl    %r11d, %r11d
    0.00 :   577a3:          movb    $0x20, 0x18(%rsp)
    0.00 :   577a8:          movq    %rax, 0x38(%rsp)
    0.00 :   577ad:          xorl    %r10d, %r10d
    0.00 :   577b0:          movl    $0x1, %ebp
    0.00 :   577b5:          jmp     0x57100 <vfprintf+0x2b80>
    0.00 :   577ba:          nopw    (%rax,%rax)
    0.00 :   577c0:          leaq    0xa0(%rsp), %rdi
    0.00 :   577c8:          movl    %ebp, %esi
    0.00 :   577ca:          movl    %r11d, 0x78(%rsp)
    0.00 :   577cf:          movq    %r10, 0x50(%rsp)
    0.00 :   577d4:          movl    %r9d, 0x58(%rsp)
    0.00 :   577d9:          movb    %r8b, 0x30(%rsp)
    0.00 :   577de:          callq   0x4de10 <getw+0x60>
    0.00 :   577e3:          movq    0x17376e(%rip), %rax    # 0x1caf58
    0.00 :   577ea:          movq    0x38(%rsp), %rsi
    0.00 :   577ef:          leaq    0x4d8(%rsp), %rdx
    0.00 :   577f7:          movq    %fs:(%rax), %rdi
    0.00 :   577fb:          callq   0x54510 <tmpnam_r+0x50>
    0.00 :   57800:          movzbl  0x28(%rsp), %ecx
    0.00 :   57805:          movzbl  0x30(%rsp), %r8d
    0.00 :   5780b:          movl    0x58(%rsp), %r9d
    0.00 :   57810:          movl    %eax, %r14d
    0.00 :   57813:          movq    0x50(%rsp), %r10
    0.00 :   57818:          movl    0x78(%rsp), %r11d
    0.00 :   5781d:          jmp     0x5711e <vfprintf+0x2b9e>
    0.00 :   57822:          nopw    (%rax,%rax)
    0.00 :   57828:          testq   %rdx, %rdx
    0.00 :   5782b:          je      0x57843 <vfprintf+0x32c3>
    0.00 :   5782d:          movl    $0x30, %esi
    0.00 :   57832:          movq    %rbx, %rdi
    0.00 :   57835:          movb    %cl, 0x8(%rsp)
    0.00 :   57839:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   5783e:          movzbl  0x8(%rsp), %ecx
    0.00 :   57843:          movl    0xc(%rsp), %r12d
    0.00 :   57848:          subl    %r14d, %r12d
    0.00 :   5784b:          testb   %cl, %cl
    0.00 :   5784d:          jne     0x57678 <vfprintf+0x30f8>
    0.00 :   57853:          movq    0x38(%rsp), %rsi
    0.00 :   57858:          movq    %rbp, %rdx
    0.00 :   5785b:          movq    %rbx, %rdi
    0.00 :   5785e:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   57863:          jmp     0x576a3 <vfprintf+0x3123>
    0.00 :   57868:          cmpl    $0x8, 0x34(%rsp)
    0.00 :   5786d:          movl    0x20(%rsp), %eax
    0.00 :   57871:          sete    %r12b
    0.00 :   57875:          andl    %r12d, %eax
    0.00 :   57878:          movl    %eax, %r12d
    0.00 :   5787b:          jmp     0x57134 <vfprintf+0x2bb4>
    0.00 :   57880:          decl    %eax
    0.00 :   57882:          cmpb    $0x20, 0x18(%rsp)
    0.00 :   57887:          je      0x57af8 <vfprintf+0x3578>
    0.00 :   5788d:          addl    %eax, %r11d
    0.00 :   57890:          testl   %r9d, %r9d
    0.00 :   57893:          jne     0x57a30 <vfprintf+0x34b0>
    0.00 :   57899:          movl    0x10(%rsp), %eax
    0.00 :   5789d:          testl   %eax, %eax
    0.00 :   5789f:          je      0x57b76 <vfprintf+0x35f6>
    0.00 :   578a5:          movq    0x8(%rbx), %rax
    0.00 :   578a9:          cmpq    0x10(%rbx), %rax
    0.00 :   578ad:          je      0x582d3 <vfprintf+0x3d53>
    0.00 :   578b3:          leaq    0x1(%rax), %rdx
    0.00 :   578b7:          movq    %rdx, 0x8(%rbx)
    0.00 :   578bb:          movb    $0x2b, (%rax)
    0.00 :   578be:          testb   %r13b, %r13b
    0.00 :   578c1:          je      0x5718b <vfprintf+0x2c0b>
    0.00 :   578c7:          nopw    (%rax,%rax)
    0.00 :   578d0:          movl    0x34(%rsp), %esi
    0.00 :   578d4:          movl    $0x10004, %eax          # imm = 0x10004
    0.00 :   578d9:          btq     %rsi, %rax
    0.00 :   578dd:          jae     0x5718b <vfprintf+0x2c0b>
    0.00 :   578e3:          movq    0x8(%rbx), %rax
    0.00 :   578e7:          cmpq    0x10(%rbx), %rax
    0.00 :   578eb:          je      0x5840c <vfprintf+0x3e8c>
    0.00 :   578f1:          leaq    0x1(%rax), %rdx
    0.00 :   578f5:          movq    %rdx, 0x8(%rbx)
    0.00 :   578f9:          movb    $0x30, (%rax)
    0.00 :   578fc:          movq    0x8(%rbx), %rax
    0.00 :   57900:          cmpq    0x10(%rbx), %rax
    0.00 :   57904:          je      0x583e8 <vfprintf+0x3e68>
    0.00 :   5790a:          leaq    0x1(%rax), %rdx
    0.00 :   5790e:          movq    %rdx, 0x8(%rbx)
    0.00 :   57912:          movb    %r8b, (%rax)
    0.00 :   57915:          jmp     0x5718b <vfprintf+0x2c0b>
    0.00 :   5791a:          nopw    (%rax,%rax)
    0.00 :   57920:          movq    0x38(%rsp), %rsi
    0.00 :   57925:          movq    %rbp, %rdx
    0.00 :   57928:          movq    %rbx, %rdi
    0.00 :   5792b:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   57930:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   57935:          nopl    (%rax)
    0.00 :   57938:          movb    $0x20, 0x18(%rsp)
    0.00 :   5793d:          xorl    %r14d, %r14d
    0.00 :   57940:          jmp     0x570b2 <vfprintf+0x2b32>
    0.00 :   57945:          nopl    (%rax)
    0.00 :   57948:          testl   %r12d, %r12d
    0.00 :   5794b:          jne     0x57c20 <vfprintf+0x36a0>
    0.00 :   57951:          cmpl    $0x2f, %eax
    0.00 :   57954:          ja      0x57ffe <vfprintf+0x3a7e>
    0.00 :   5795a:          movl    %eax, %edx
    0.00 :   5795c:          addl    $0x8, %eax
    0.00 :   5795f:          addq    0x10(%r15), %rdx
    0.00 :   57963:          movl    %eax, (%r15)
    0.00 :   57966:          movl    (%rdx), %r12d
    0.00 :   57969:          jmp     0x57079 <vfprintf+0x2af9>
    0.00 :   5796e:          nop
    0.00 :   57970:          movq    0x8(%r15), %rdx
    0.00 :   57974:          leaq    0x8(%rdx), %rax
    0.00 :   57978:          movq    %rax, 0x8(%r15)
    0.00 :   5797c:          jmp     0x57076 <vfprintf+0x2af6>
    0.00 :   57981:          nopl    (%rax)
    0.00 :   57988:          vzeroupper
    0.00 :   5798b:          callq   0x50fa8 <parse_printf_format+0x2a58>
    0.00 :   57990:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   57995:          nopl    (%rax)
    0.00 :   57998:          movq    0x8(%rbx), %rax
    0.00 :   5799c:          cmpq    0x10(%rbx), %rax
    0.00 :   579a0:          je      0x58237 <vfprintf+0x3cb7>
    0.00 :   579a6:          leaq    0x1(%rax), %rdx
    0.00 :   579aa:          movq    %rdx, 0x8(%rbx)
    0.00 :   579ae:          movb    $0x2d, (%rax)
    0.00 :   579b1:          decl    0xc(%rsp)
    0.00 :   579b5:          testb   %r13b, %r13b
    0.00 :   579b8:          je      0x57622 <vfprintf+0x30a2>
    0.00 :   579be:          movl    0x34(%rsp), %edi
    0.00 :   579c2:          movl    $0x10004, %eax          # imm = 0x10004
    0.00 :   579c7:          btq     %rdi, %rax
    0.00 :   579cb:          jae     0x57622 <vfprintf+0x30a2>
    0.00 :   579d1:          movq    0x8(%rbx), %rax
    0.00 :   579d5:          cmpq    0x10(%rbx), %rax
    0.00 :   579d9:          je      0x583ae <vfprintf+0x3e2e>
    0.00 :   579df:          leaq    0x1(%rax), %rdx
    0.00 :   579e3:          movq    %rdx, 0x8(%rbx)
    0.00 :   579e7:          movb    $0x30, (%rax)
    0.00 :   579ea:          movq    0x8(%rbx), %rax
    0.00 :   579ee:          cmpq    0x10(%rbx), %rax
    0.00 :   579f2:          je      0x58380 <vfprintf+0x3e00>
    0.00 :   579f8:          leaq    0x1(%rax), %rdx
    0.00 :   579fc:          movq    %rdx, 0x8(%rbx)
    0.00 :   57a00:          movb    %r8b, (%rax)
    0.00 :   57a03:          subl    $0x2, 0xc(%rsp)
    0.00 :   57a08:          jmp     0x57622 <vfprintf+0x30a2>
    0.00 :   57a0d:          nopl    (%rax)
    0.00 :   57a10:          movq    0x8(%rbx), %rax
    0.00 :   57a14:          cmpq    0x10(%rbx), %rax
    0.00 :   57a18:          je      0x5821c <vfprintf+0x3c9c>
    0.00 :   57a1e:          leaq    0x1(%rax), %rdx
    0.00 :   57a22:          movq    %rdx, 0x8(%rbx)
    0.00 :   57a26:          movb    $0x30, (%rax)
    0.00 :   57a29:          jmp     0x571b2 <vfprintf+0x2c32>
    0.00 :   57a2e:          nop
    0.00 :   57a30:          movq    0x8(%rbx), %rax
    0.00 :   57a34:          cmpq    0x10(%rbx), %rax
    0.00 :   57a38:          je      0x581ec <vfprintf+0x3c6c>
    0.00 :   57a3e:          leaq    0x1(%rax), %rdx
    0.00 :   57a42:          movq    %rdx, 0x8(%rbx)
    0.00 :   57a46:          movb    $0x2d, (%rax)
    0.00 :   57a49:          jmp     0x57182 <vfprintf+0x2c02>
    0.00 :   57a4e:          nop
    0.00 :   57a50:          movl    0x34(%rsp), %esi
    0.00 :   57a54:          movl    $0x10004, %edx          # imm = 0x10004
    0.00 :   57a59:          btq     %rsi, %rdx
    0.00 :   57a5d:          jae     0x5715c <vfprintf+0x2bdc>
    0.00 :   57a63:          subl    $0x2, %eax
    0.00 :   57a66:          jmp     0x5715c <vfprintf+0x2bdc>
    0.00 :   57a6b:          nopl    (%rax,%rax)
    0.00 :   57a70:          movq    0x8(%rbx), %rax
    0.00 :   57a74:          cmpq    0x10(%rbx), %rax
    0.00 :   57a78:          je      0x582a9 <vfprintf+0x3d29>
    0.00 :   57a7e:          leaq    0x1(%rax), %rdx
    0.00 :   57a82:          movq    %rdx, 0x8(%rbx)
    0.00 :   57a86:          movb    $0x2b, (%rax)
    0.00 :   57a89:          jmp     0x579b1 <vfprintf+0x3431>
    0.00 :   57a8e:          nop
    0.00 :   57a90:          movq    %rax, %rdx
    0.00 :   57a93:          movq    %r13, %rsi
    0.00 :   57a96:          movq    %rbx, %rdi
    0.00 :   57a99:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   57a9e:          jmp     0x576a3 <vfprintf+0x3123>
    0.00 :   57aa3:          nopl    (%rax,%rax)
    0.00 :   57aa8:          movq    %r12, %rdx
    0.00 :   57aab:          movq    %rbp, %rsi
    0.00 :   57aae:          movq    %rbx, %rdi
    0.00 :   57ab1:          callq   0x4ee00 <parse_printf_format+0x8b0>
    0.00 :   57ab6:          testl   %r13d, %r13d
    0.00 :   57ab9:          je      0x56998 <vfprintf+0x2418>
    0.00 :   57abf:          movl    %r13d, %edx
    0.00 :   57ac2:          movl    $0x20, %esi
    0.00 :   57ac7:          movq    %rbx, %rdi
    0.00 :   57aca:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   57acf:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   57ad4:          nopl    (%rax)
    0.00 :   57ad8:          leaq    0x4d8(%rsp), %rax
    0.00 :   57ae0:          movb    $0x20, 0x18(%rsp)
    0.00 :   57ae5:          xorl    %r11d, %r11d
    0.00 :   57ae8:          movq    %rax, 0x38(%rsp)
    0.00 :   57aed:          xorl    %r10d, %r10d
    0.00 :   57af0:          xorl    %ebp, %ebp
    0.00 :   57af2:          jmp     0x57100 <vfprintf+0x2b80>
    0.00 :   57af7:          nop
    0.00 :   57af8:          testl   %eax, %eax
    0.00 :   57afa:          jle     0x57890 <vfprintf+0x3310>
    0.00 :   57b00:          movslq  %eax, %rdx
    0.00 :   57b03:          movl    $0x20, %esi
    0.00 :   57b08:          movl    %r11d, 0x20(%rsp)
    0.00 :   57b0d:          movq    %rbx, %rdi
    0.00 :   57b10:          movl    %r9d, 0x18(%rsp)
    0.00 :   57b15:          movb    %cl, 0xc(%rsp)
    0.00 :   57b19:          movb    %r8b, 0x8(%rsp)
    0.00 :   57b1e:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   57b23:          movzbl  0xc(%rsp), %ecx
    0.00 :   57b28:          movzbl  0x8(%rsp), %r8d
    0.00 :   57b2e:          movl    0x20(%rsp), %r11d
    0.00 :   57b33:          movl    0x18(%rsp), %r9d
    0.00 :   57b38:          jmp     0x57890 <vfprintf+0x3310>
    0.00 :   57b3d:          nopl    (%rax)
    0.00 :   57b40:          testl   %eax, %eax
    0.00 :   57b42:          jle     0x57182 <vfprintf+0x2c02>
    0.00 :   57b48:          movslq  %eax, %rdx
    0.00 :   57b4b:          movl    $0x20, %esi
    0.00 :   57b50:          movl    %r11d, 0x10(%rsp)
    0.00 :   57b55:          movq    %rbx, %rdi
    0.00 :   57b58:          movb    %cl, 0xc(%rsp)
    0.00 :   57b5c:          movb    %r8b, 0x8(%rsp)
    0.00 :   57b61:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   57b66:          movzbl  0x8(%rsp), %r8d
    0.00 :   57b6c:          movzbl  0xc(%rsp), %ecx
    0.00 :   57b71:          movl    0x10(%rsp), %r11d
    0.00 :   57b76:          movl    0x24(%rsp), %eax
    0.00 :   57b7a:          testl   %eax, %eax
    0.00 :   57b7c:          je      0x57182 <vfprintf+0x2c02>
    0.00 :   57b82:          movq    0x8(%rbx), %rax
    0.00 :   57b86:          cmpq    0x10(%rbx), %rax
    0.00 :   57b8a:          je      0x58322 <vfprintf+0x3da2>
    0.00 :   57b90:          leaq    0x1(%rax), %rdx
    0.00 :   57b94:          movq    %rdx, 0x8(%rbx)
    0.00 :   57b98:          movb    $0x20, (%rax)
    0.00 :   57b9b:          jmp     0x57182 <vfprintf+0x2c02>
    0.00 :   57ba0:          movl    $0x1, %ecx
    0.00 :   57ba5:          jmpq    *%rax
    0.00 :   57ba7:          nop
    0.00 :   57ba8:          movl    $0x1, 0x10(%rsp)
    0.00 :   57bb0:          jmpq    *%rax
    0.00 :   57bb2:          nopw    (%rax,%rax)
    0.00 :   57bb8:          testl   %r14d, %r14d
    0.00 :   57bbb:          jne     0x57fe0 <vfprintf+0x3a60>
    0.00 :   57bc1:          testl   %r12d, %r12d
    0.00 :   57bc4:          jne     0x58282 <vfprintf+0x3d02>
    0.00 :   57bca:          cmpl    $0x2f, %eax
    0.00 :   57bcd:          ja      0x5836f <vfprintf+0x3def>
    0.00 :   57bd3:          movl    %eax, %edx
    0.00 :   57bd5:          addl    $0x8, %eax
    0.00 :   57bd8:          addq    0x10(%r15), %rdx
    0.00 :   57bdc:          movl    %eax, (%r15)
    0.00 :   57bdf:          movslq  (%rdx), %r12
    0.00 :   57be2:          nopw    (%rax,%rax)
    0.00 :   57be8:          movl    %ecx, %eax
    0.00 :   57bea:          andl    $0x1, %eax
    0.00 :   57bed:          movb    %al, 0x28(%rsp)
    0.00 :   57bf1:          movzbl  0x20(%rsp), %eax
    0.00 :   57bf6:          andl    $0x1, %eax
    0.00 :   57bf9:          movb    %al, 0x43(%rsp)
    0.00 :   57bfd:          testq   %r12, %r12
    0.00 :   57c00:          js      0x580d8 <vfprintf+0x3b58>
    0.00 :   57c06:          movl    $0xa, 0x34(%rsp)
    0.00 :   57c0e:          xorl    %r9d, %r9d
    0.00 :   57c11:          vzeroupper
    0.00 :   57c14:          jmp     0x5709b <vfprintf+0x2b1b>
    0.00 :   57c19:          nopl    (%rax)
    0.00 :   57c20:          cmpl    $0x2f, %eax
    0.00 :   57c23:          ja      0x57fcf <vfprintf+0x3a4f>
    0.00 :   57c29:          movl    %eax, %edx
    0.00 :   57c2b:          addl    $0x8, %eax
    0.00 :   57c2e:          addq    0x10(%r15), %rdx
    0.00 :   57c32:          movl    %eax, (%r15)
    0.00 :   57c35:          movzwl  (%rdx), %r12d
    0.00 :   57c39:          jmp     0x57079 <vfprintf+0x2af9>
    0.00 :   57c3e:          nop
    0.00 :   57c40:          movq    0x8(%r15), %rdx
    0.00 :   57c44:          leaq    0x8(%rdx), %rax
    0.00 :   57c48:          movq    %rax, 0x8(%r15)
    0.00 :   57c4c:          jmp     0x573d3 <vfprintf+0x2e53>
    0.00 :   57c51:          nopl    (%rax)
    0.00 :   57c58:          movl    $0x1, 0x20(%rsp)
    0.00 :   57c60:          jmpq    *%rax
    0.00 :   57c62:          nopw    (%rax,%rax)
    0.00 :   57c68:          movq    0x8(%r15), %rdx
    0.00 :   57c6c:          leaq    0x8(%rdx), %rax
    0.00 :   57c70:          movq    %rax, 0x8(%r15)
    0.00 :   57c74:          jmp     0x56941 <vfprintf+0x23c1>
    0.00 :   57c79:          nopl    (%rax)
    0.00 :   57c80:          movq    0x8(%r15), %rax
    0.00 :   57c84:          addq    $0xf, %rax
    0.00 :   57c88:          andq    $-0x10, %rax
    0.00 :   57c8c:          leaq    0x10(%rax), %rdx
    0.00 :   57c90:          movq    %rdx, 0x8(%r15)
    0.00 :   57c94:          fldt    (%rax)
    0.00 :   57c96:          fstpt   0x90(%rsp)
    0.00 :   57c9d:          jmp     0x5694e <vfprintf+0x23ce>
    0.00 :   57ca2:          nopw    (%rax,%rax)
    0.00 :   57ca8:          movq    0x8(%r15), %rdx
    0.00 :   57cac:          leaq    0x8(%rdx), %rax
    0.00 :   57cb0:          movq    %rax, 0x8(%r15)
    0.00 :   57cb4:          jmp     0x56b60 <vfprintf+0x25e0>
    0.00 :   57cb9:          nopl    (%rax)
    0.00 :   57cc0:          movl    0x5c(%rsp), %edi
    0.00 :   57cc4:          leaq    0xf0(%rsp), %rsi
    0.00 :   57ccc:          movl    $0x3e8, %edx            # imm = 0x3E8
    0.00 :   57cd1:          vzeroupper
    0.00 :   57cd4:          callq   0x94830 <strerror_r>
    0.00 :   57cd9:          movzbl  0x34(%rsp), %r8d
    0.00 :   57cdf:          movl    0x28(%rsp), %ecx
    0.00 :   57ce3:          movq    %rax, %rbp
    0.00 :   57ce6:          jmp     0x56cc0 <vfprintf+0x2740>
    0.00 :   57ceb:          nopl    (%rax,%rax)
    0.00 :   57cf0:          movl    $0x1, 0x30(%rsp)
    0.00 :   57cf8:          jmpq    *%rax
    0.00 :   57cfa:          nopw    (%rax,%rax)
    0.00 :   57d00:          movq    0x8(%r15), %rdx
    0.00 :   57d04:          leaq    0x8(%rdx), %rax
    0.00 :   57d08:          movq    %rax, 0x8(%r15)
    0.00 :   57d0c:          jmp     0x572c8 <vfprintf+0x2d48>
    0.00 :   57d11:          nopl    (%rax)
    0.00 :   57d18:          movl    $0x1, %r9d
    0.00 :   57d1e:          jmpq    *%rax
    0.00 :   57d20:          movl    $0x1, %r9d
    0.00 :   57d26:          movl    $0x1, %r10d
    0.00 :   57d2c:          jmpq    *%rax
    0.00 :   57d2e:          nop
    0.00 :   57d30:          testl   %r14d, %r14d
    0.00 :   57d33:          jne     0x57fc7 <vfprintf+0x3a47>
    0.00 :   57d39:          testl   %r12d, %r12d
    0.00 :   57d3c:          jne     0x582a0 <vfprintf+0x3d20>
    0.00 :   57d42:          movl    %eax, (%rbp)
    0.00 :   57d45:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   57d4a:          nopw    (%rax,%rax)
    0.00 :   57d50:          movq    0x8(%r15), %rdx
    0.00 :   57d54:          leaq    0x8(%rdx), %rax
    0.00 :   57d58:          movq    %rax, 0x8(%r15)
    0.00 :   57d5c:          jmp     0x57568 <vfprintf+0x2fe8>
    0.00 :   57d61:          nopl    (%rax)
    0.00 :   57d68:          movl    $0x1, %r12d
    0.00 :   57d6e:          jmpq    *%rax
    0.00 :   57d70:          movb    $0x20, 0x18(%rsp)
    0.00 :   57d75:          movl    $0x1, 0x8(%rsp)
    0.00 :   57d7d:          jmpq    *%rax
    0.00 :   57d7f:          nop
    0.00 :   57d80:          movzbl  %r8b, %eax
    0.00 :   57d84:          leaq    0x12e435(%rip), %rsi    # 0x1861c0
    0.00 :   57d8b:          leaq    -0x1649(%rip), %rdi     # 0x56749 <vfprintf+0x21c9>
    0.00 :   57d92:          subl    $0x20, %eax
    0.00 :   57d95:          movl    $0x1, 0x24(%rsp)
    0.00 :   57d9d:          cltq
    0.00 :   57d9f:          movzbl  (%rsi,%rax), %eax
    0.00 :   57da3:          leaq    0x12e396(%rip), %rsi    # 0x186140
    0.00 :   57daa:          movslq  (%rsi,%rax,4), %rax
    0.00 :   57dae:          addq    %rdi, %rax
    0.00 :   57db1:          jmpq    *%rax
    0.00 :   57db3:          nopl    (%rax,%rax)
    0.00 :   57db8:          movl    $0x1, %r14d
    0.00 :   57dbe:          xorl    %r12d, %r12d
    0.00 :   57dc1:          jmpq    *%rax
    0.00 :   57dc3:          nopl    (%rax,%rax)
    0.00 :   57dc8:          movq    0x8(%r15), %rdx
    0.00 :   57dcc:          leaq    0x8(%rdx), %rax
    0.00 :   57dd0:          movq    %rax, 0x8(%r15)
    0.00 :   57dd4:          jmp     0x56dc5 <vfprintf+0x2845>
    0.00 :   57dd9:          movl    $0x5, %eax
    0.00 :   57dde:          leaq    0x135515(%rip), %rbp    # 0x18d2fa <_libc_intl_domainname+0x46c>
    0.00 :   57de5:          cmpl    %eax, %r13d
    0.00 :   57de8:          cmovll  %eax, %r13d
    0.00 :   57dec:          cmpb    $0x53, %r8b
    0.00 :   57df0:          jne     0x58039 <vfprintf+0x3ab9>
    0.00 :   57df6:          vzeroupper
    0.00 :   57df9:          movl    0x8(%rsp), %r8d
    0.00 :   57dfe:          movl    0xc(%rsp), %ecx
    0.00 :   57e02:          movl    %r13d, %edx
    0.00 :   57e05:          movq    %rbp, %rsi
    0.00 :   57e08:          movq    %rbx, %rdi
    0.00 :   57e0b:          callq   0x54600 <vfprintf+0x80>
    0.00 :   57e10:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   57e15:          nopl    (%rax)
    0.00 :   57e18:          movq    0x8(%rbx), %rax
    0.00 :   57e1c:          cmpq    0x10(%rbx), %rax
    0.00 :   57e20:          je      0x58305 <vfprintf+0x3d85>
    0.00 :   57e26:          leaq    0x1(%rax), %rdx
    0.00 :   57e2a:          movq    %rdx, 0x8(%rbx)
    0.00 :   57e2e:          movb    $0x20, (%rax)
    0.00 :   57e31:          jmp     0x579b1 <vfprintf+0x3431>
    0.00 :   57e36:          nop
    0.00 :   57e38:          leaq    0x2(%r11), %rax
    0.00 :   57e3c:          movq    %rax, 0xa0(%rsp)
    0.00 :   57e44:          movq    %rax, 0x80(%rsp)
    0.00 :   57e4c:          movzbl  0x2(%r11), %eax
    0.00 :   57e51:          subl    $0x30, %eax
    0.00 :   57e54:          cmpl    $0x9, %eax
    0.00 :   57e57:          jbe     0x58080 <vfprintf+0x3b00>
    0.00 :   57e5d:          movl    (%r15), %eax
    0.00 :   57e60:          cmpl    $0x2f, %eax
    0.00 :   57e63:          ja      0x58041 <vfprintf+0x3ac1>
    0.00 :   57e69:          movl    %eax, %edx
    0.00 :   57e6b:          addl    $0x8, %eax
    0.00 :   57e6e:          addq    0x10(%r15), %rdx
    0.00 :   57e72:          movl    %eax, (%r15)
    0.00 :   57e75:          movl    (%rdx), %eax
    0.00 :   57e77:          movl    $0xffffffff, %edx       # imm = 0xFFFFFFFF
    0.00 :   57e7c:          movzbl  0x2(%r11), %r8d
    0.00 :   57e81:          testl   %eax, %eax
    0.00 :   57e83:          cmovnsl %eax, %edx
    0.00 :   57e86:          movl    %edx, %r13d
    0.00 :   57e89:          jmp     0x57496 <vfprintf+0x2f16>
    0.00 :   57e8e:          nop
    0.00 :   57e90:          movq    0x8(%r15), %rdx
    0.00 :   57e94:          leaq    0x8(%rdx), %rax
    0.00 :   57e98:          movq    %rax, 0x8(%r15)
    0.00 :   57e9c:          jmp     0x56c11 <vfprintf+0x2691>
    0.00 :   57ea1:          nopl    (%rax)
    0.00 :   57ea8:          leaq    0xa0(%rsp), %rdi
    0.00 :   57eb0:          movl    %r9d, 0x28(%rsp)
    0.00 :   57eb5:          movl    %ecx, 0xc(%rsp)
    0.00 :   57eb9:          callq   0x54590 <vfprintf+0x10>
    0.00 :   57ebe:          cmpl    $-0x1, %eax
    0.00 :   57ec1:          movl    0xc(%rsp), %ecx
    0.00 :   57ec5:          movl    0x28(%rsp), %r9d
    0.00 :   57eca:          je      0x582eb <vfprintf+0x3d6b>
    0.00 :   57ed0:          testl   %eax, %eax
    0.00 :   57ed2:          je      0x56dad <vfprintf+0x282d>
    0.00 :   57ed8:          movq    0xa0(%rsp), %rax
    0.00 :   57ee0:          cmpb    $0x24, (%rax)
    0.00 :   57ee3:          jne     0x56dad <vfprintf+0x282d>
    0.00 :   57ee9:          jmp     0x56a93 <vfprintf+0x2513>
    0.00 :   57eee:          nop
    0.00 :   57ef0:          movq    %rbp, %rdi
    0.00 :   57ef3:          callq   0x22110 <_dl_find_dso_for_object@plt+0x20>
    0.00 :   57ef8:          movq    %rax, %r12
    0.00 :   57efb:          jmp     0x56b90 <vfprintf+0x2610>
    0.00 :   57f00:          movq    0x173051(%rip), %rax    # 0x1caf58
    0.00 :   57f07:          movq    0x38(%rsp), %rsi
    0.00 :   57f0c:          leaq    0x4d8(%rsp), %rdx
    0.00 :   57f14:          movq    %fs:(%rax), %rdi
    0.00 :   57f18:          callq   0x54510 <tmpnam_r+0x50>
    0.00 :   57f1d:          movzbl  0x30(%rsp), %r8d
    0.00 :   57f23:          movl    0x78(%rsp), %r11d
    0.00 :   57f28:          movq    0x50(%rsp), %r10
    0.00 :   57f2d:          movl    %eax, %r14d
    0.00 :   57f30:          movl    0x58(%rsp), %r9d
    0.00 :   57f35:          jmp     0x5771e <vfprintf+0x319e>
    0.00 :   57f3a:          andl    $0x1, %ecx
    0.00 :   57f3d:          movslq  0x5c(%rsp), %r12
    0.00 :   57f42:          movb    %cl, 0x28(%rsp)
    0.00 :   57f46:          movzbl  0x20(%rsp), %ecx
    0.00 :   57f4b:          andl    $0x1, %ecx
    0.00 :   57f4e:          movb    %cl, 0x43(%rsp)
    0.00 :   57f52:          testl   %r12d, %r12d
    0.00 :   57f55:          js      0x5806a <vfprintf+0x3aea>
    0.00 :   57f5b:          movl    $0xa, 0x34(%rsp)
    0.00 :   57f63:          xorl    %r9d, %r9d
    0.00 :   57f66:          jmp     0x5709b <vfprintf+0x2b1b>
    0.00 :   57f6b:          movq    0x172fe6(%rip), %rax    # 0x1caf58
    0.00 :   57f72:          movq    %fs:(%rax), %rax
    0.00 :   57f76:          movq    0x8(%rax), %rax
    0.00 :   57f7a:          movq    0x48(%rax), %rdi
    0.00 :   57f7e:          movq    0x40(%rax), %rsi
    0.00 :   57f82:          movzbl  (%rdi), %eax
    0.00 :   57f85:          movq    %rsi, 0x48(%rsp)
    0.00 :   57f8a:          testb   %al, %al
    0.00 :   57f8c:          je      0x580c8 <vfprintf+0x3b48>
    0.00 :   57f92:          cmpb    $0x7f, %al
    0.00 :   57f94:          je      0x580c8 <vfprintf+0x3b48>
    0.00 :   57f9a:          xorl    %eax, %eax
    0.00 :   57f9c:          cmpb    $0x0, (%rsi)
    0.00 :   57f9f:          cmovneq %rdi, %rax
    0.00 :   57fa3:          movq    %rax, 0x70(%rsp)
    0.00 :   57fa8:          jmp     0x56e8c <vfprintf+0x290c>
    0.00 :   57fad:          movl    $0x6, %eax
    0.00 :   57fb2:          movl    $0x6, %r12d
    0.00 :   57fb8:          leaq    0x135355(%rip), %rbp    # 0x18d314 <_libc_intl_domainname+0x486>
    0.00 :   57fbf:          vzeroupper
    0.00 :   57fc2:          jmp     0x56b90 <vfprintf+0x2610>
    0.00 :   57fc7:          movb    %al, (%rbp)
    0.00 :   57fca:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   57fcf:          movq    0x8(%r15), %rdx
    0.00 :   57fd3:          leaq    0x8(%rdx), %rax
    0.00 :   57fd7:          movq    %rax, 0x8(%r15)
    0.00 :   57fdb:          jmp     0x57c35 <vfprintf+0x36b5>
    0.00 :   57fe0:          cmpl    $0x2f, %eax
    0.00 :   57fe3:          ja      0x58271 <vfprintf+0x3cf1>
    0.00 :   57fe9:          movl    %eax, %edx
    0.00 :   57feb:          addl    $0x8, %eax
    0.00 :   57fee:          addq    0x10(%r15), %rdx
    0.00 :   57ff2:          movl    %eax, (%r15)
    0.00 :   57ff5:          movsbq  (%rdx), %r12
    0.00 :   57ff9:          jmp     0x57be8 <vfprintf+0x3668>
    0.00 :   57ffe:          movq    0x8(%r15), %rdx
    0.00 :   58002:          leaq    0x8(%rdx), %rax
    0.00 :   58006:          movq    %rax, 0x8(%r15)
    0.00 :   5800a:          jmp     0x57966 <vfprintf+0x33e6>
    0.00 :   5800f:          movq    0x8(%r15), %rdx
    0.00 :   58013:          leaq    0x8(%rdx), %rax
    0.00 :   58017:          movq    %rax, 0x8(%r15)
    0.00 :   5801b:          jmp     0x575e9 <vfprintf+0x3069>
    0.00 :   58020:          movq    0x8(%r15), %rax
    0.00 :   58024:          addq    $0xf, %rax
    0.00 :   58028:          andq    $-0x10, %rax
    0.00 :   5802c:          leaq    0x10(%rax), %rdx
    0.00 :   58030:          movq    %rdx, 0x8(%r15)
    0.00 :   58034:          jmp     0x56b18 <vfprintf+0x2598>
    0.00 :   58039:          vzeroupper
    0.00 :   5803c:          jmp     0x56cec <vfprintf+0x276c>
    0.00 :   58041:          movq    0x8(%r15), %rdx
    0.00 :   58045:          leaq    0x8(%rdx), %rax
    0.00 :   58049:          movq    %rax, 0x8(%r15)
    0.00 :   5804d:          jmp     0x57e75 <vfprintf+0x38f5>
    0.00 :   58052:          movslq  %ebp, %rdx
    0.00 :   58055:          movl    $0x20, %esi
    0.00 :   5805a:          movq    %rbx, %rdi
    0.00 :   5805d:          vzeroupper
    0.00 :   58060:          callq   0x4ea70 <parse_printf_format+0x520>
    0.00 :   58065:          jmp     0x56bf9 <vfprintf+0x2679>
    0.00 :   5806a:          movl    $0xa, 0x34(%rsp)
    0.00 :   58072:          negq    %r12
    0.00 :   58075:          movl    $0x1, %r9d
    0.00 :   5807b:          jmp     0x5709b <vfprintf+0x2b1b>
    0.00 :   58080:          leaq    0xa0(%rsp), %rdi
    0.00 :   58088:          movl    %r9d, 0x34(%rsp)
    0.00 :   5808d:          movl    %ecx, 0x28(%rsp)
    0.00 :   58091:          callq   0x54590 <vfprintf+0x10>
    0.00 :   58096:          cmpl    $-0x1, %eax
    0.00 :   58099:          movl    0x28(%rsp), %ecx
    0.00 :   5809d:          movl    0x34(%rsp), %r9d
    0.00 :   580a2:          je      0x582eb <vfprintf+0x3d6b>
    0.00 :   580a8:          testl   %eax, %eax
    0.00 :   580aa:          je      0x57e5d <vfprintf+0x38dd>
    0.00 :   580b0:          movq    0xa0(%rsp), %rax
    0.00 :   580b8:          cmpb    $0x24, (%rax)
    0.00 :   580bb:          jne     0x57e5d <vfprintf+0x38dd>
    0.00 :   580c1:          jmp     0x56a93 <vfprintf+0x2513>
    0.00 :   580c6:          nop
    0.00 :   580c8:          movq    $0x0, 0x70(%rsp)
    0.00 :   580d1:          jmp     0x56e8c <vfprintf+0x290c>
    0.00 :   580d6:          nop
    0.00 :   580d8:          movl    $0xa, 0x34(%rsp)
    0.00 :   580e0:          negq    %r12
    0.00 :   580e3:          movl    $0x1, %r9d
    0.00 :   580e9:          vzeroupper
    0.00 :   580ec:          jmp     0x5709b <vfprintf+0x2b1b>
    0.00 :   580f1:          movl    $0x0, 0x7c(%rsp)
    0.00 :   580f9:          movl    $0x0, 0x2c(%rsp)
    0.00 :   58101:          movq    $-0x1, 0x70(%rsp)
    0.00 :   5810a:          movq    $0x0, 0x48(%rsp)
    0.00 :   58113:          jmp     0x56a93 <vfprintf+0x2513>
    0.00 :   58118:          movq    0x60(%rsp), %rbp
    0.00 :   5811d:          movl    %r9d, 0x8(%rsp)
    0.00 :   58122:          movq    %rbp, %rdi
    0.00 :   58125:          vzeroupper
    0.00 :   58128:          callq   0x22110 <_dl_find_dso_for_object@plt+0x20>
    0.00 :   5812d:          movq    %rbp, %rdi
    0.00 :   58130:          leaq    0x1(%rax), %rsi
    0.00 :   58134:          callq   0x10fab0 <__chk_fail+0x10>
    0.00 :   58139:          testl   %eax, %eax
    0.00 :   5813b:          movl    %eax, 0x7c(%rsp)
    0.00 :   5813f:          movl    0x8(%rsp), %r9d
    0.00 :   58144:          jns     0x57550 <vfprintf+0x2fd0>
    0.00 :   5814a:          leaq    0x13a53f(%rip), %rdi    # 0x192690 <_itoa_lower_digits+0xed0>
    0.00 :   58151:          callq   0x78e40 <__libc_fatal>
    0.00 :   58156:          nop
    0.00 :   58158:          leaq    0x80(%rsp), %rdi
    0.00 :   58160:          movl    %r9d, 0x34(%rsp)
    0.00 :   58165:          movl    %ecx, 0x28(%rsp)
    0.00 :   58169:          callq   0x54590 <vfprintf+0x10>
    0.00 :   5816e:          movl    %eax, %r13d
    0.00 :   58171:          cmpl    $-0x1, %eax
    0.00 :   58174:          je      0x582eb <vfprintf+0x3d6b>
    0.00 :   5817a:          movq    0x80(%rsp), %rax
    0.00 :   58182:          movl    0x34(%rsp), %r9d
    0.00 :   58187:          movl    0x28(%rsp), %ecx
    0.00 :   5818b:          movzbl  (%rax), %r8d
    0.00 :   5818f:          jmp     0x57496 <vfprintf+0x2f16>
    0.00 :   58194:          movl    $0x0, 0x7c(%rsp)
    0.00 :   5819c:          movl    $0x0, 0x2c(%rsp)
    0.00 :   581a4:          movq    $-0x1, 0x70(%rsp)
    0.00 :   581ad:          jmp     0x56a93 <vfprintf+0x2513>
    0.00 :   581b2:          xorl    %edx, %edx
    0.00 :   581b4:          xorl    %r10d, %r10d
    0.00 :   581b7:          jmp     0x56891 <vfprintf+0x2311>
    0.00 :   581bc:          movl    $0x30, %esi
    0.00 :   581c1:          movq    %rbx, %rdi
    0.00 :   581c4:          movb    %cl, 0x8(%rsp)
    0.00 :   581c8:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   581cd:          movzbl  0x8(%rsp), %ecx
    0.00 :   581d2:          jmp     0x57665 <vfprintf+0x30e5>
    0.00 :   581d7:          movl    $0x25, %esi
    0.00 :   581dc:          movq    %rbx, %rdi
    0.00 :   581df:          vzeroupper
    0.00 :   581e2:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   581e7:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   581ec:          movl    %r11d, 0x10(%rsp)
    0.00 :   581f1:          movb    %cl, 0xc(%rsp)
    0.00 :   581f5:          movl    $0x2d, %esi
    0.00 :   581fa:          movb    %r8b, 0x8(%rsp)
    0.00 :   581ff:          movq    %rbx, %rdi
    0.00 :   58202:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   58207:          movzbl  0x8(%rsp), %r8d
    0.00 :   5820d:          movzbl  0xc(%rsp), %ecx
    0.00 :   58212:          movl    0x10(%rsp), %r11d
    0.00 :   58217:          jmp     0x57182 <vfprintf+0x2c02>
    0.00 :   5821c:          movl    $0x30, %esi
    0.00 :   58221:          movq    %rbx, %rdi
    0.00 :   58224:          movb    %cl, 0x8(%rsp)
    0.00 :   58228:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   5822d:          movzbl  0x8(%rsp), %ecx
    0.00 :   58232:          jmp     0x571b2 <vfprintf+0x2c32>
    0.00 :   58237:          movl    %r11d, 0x20(%rsp)
    0.00 :   5823c:          movq    %r10, 0x18(%rsp)
    0.00 :   58241:          movl    $0x2d, %esi
    0.00 :   58246:          movb    %cl, 0x10(%rsp)
    0.00 :   5824a:          movb    %r8b, 0x8(%rsp)
    0.00 :   5824f:          movq    %rbx, %rdi
    0.00 :   58252:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   58257:          movzbl  0x10(%rsp), %ecx
    0.00 :   5825c:          movzbl  0x8(%rsp), %r8d
    0.00 :   58262:          movl    0x20(%rsp), %r11d
    0.00 :   58267:          movq    0x18(%rsp), %r10
    0.00 :   5826c:          jmp     0x579b1 <vfprintf+0x3431>
    0.00 :   58271:          movq    0x8(%r15), %rdx
    0.00 :   58275:          leaq    0x8(%rdx), %rax
    0.00 :   58279:          movq    %rax, 0x8(%r15)
    0.00 :   5827d:          jmp     0x57ff5 <vfprintf+0x3a75>
    0.00 :   58282:          cmpl    $0x2f, %eax
    0.00 :   58285:          ja      0x5835e <vfprintf+0x3dde>
    0.00 :   5828b:          movl    %eax, %edx
    0.00 :   5828d:          addl    $0x8, %eax
    0.00 :   58290:          addq    0x10(%r15), %rdx
    0.00 :   58294:          movl    %eax, (%r15)
    0.00 :   58297:          movswq  (%rdx), %r12
    0.00 :   5829b:          jmp     0x57be8 <vfprintf+0x3668>
    0.00 :   582a0:          movw    %ax, (%rbp)
    0.00 :   582a4:          jmp     0x56998 <vfprintf+0x2418>
    0.00 :   582a9:          movl    %r11d, 0x20(%rsp)
    0.00 :   582ae:          movq    %r10, 0x18(%rsp)
    0.00 :   582b3:          movl    $0x2b, %esi
    0.00 :   582b8:          movb    %cl, 0x10(%rsp)
    0.00 :   582bc:          movb    %r8b, 0x8(%rsp)
    0.00 :   582c1:          jmp     0x5824f <vfprintf+0x3ccf>
    0.00 :   582c3:          movsbl  %dl, %esi
    0.00 :   582c6:          movq    %rbx, %rdi
    0.00 :   582c9:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   582ce:          jmp     0x56c2b <vfprintf+0x26ab>
    0.00 :   582d3:          movl    %r11d, 0x10(%rsp)
    0.00 :   582d8:          movb    %cl, 0xc(%rsp)
    0.00 :   582dc:          movl    $0x2b, %esi
    0.00 :   582e1:          movb    %r8b, 0x8(%rsp)
    0.00 :   582e6:          jmp     0x581ff <vfprintf+0x3c7f>
    0.00 :   582eb:          movq    0x172b06(%rip), %rax    # 0x1cadf8
    0.00 :   582f2:          movl    $0x4b, %fs:(%rax)
    0.00 :   582f9:          movl    $0x0, 0x20(%rbx)
    0.00 :   58300:          jmp     0x56770 <vfprintf+0x21f0>
    0.00 :   58305:          movl    %r11d, 0x20(%rsp)
    0.00 :   5830a:          movq    %r10, 0x18(%rsp)
    0.00 :   5830f:          movl    $0x20, %esi
    0.00 :   58314:          movb    %cl, 0x10(%rsp)
    0.00 :   58318:          movb    %r8b, 0x8(%rsp)
    0.00 :   5831d:          jmp     0x5824f <vfprintf+0x3ccf>
    0.00 :   58322:          movl    $0x20, %esi
    0.00 :   58327:          movq    %rbx, %rdi
    0.00 :   5832a:          movl    %r11d, 0x10(%rsp)
    0.00 :   5832f:          movb    %cl, 0xc(%rsp)
    0.00 :   58333:          movb    %r8b, 0x8(%rsp)
    0.00 :   58338:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   5833d:          movzbl  0xc(%rsp), %ecx
    0.00 :   58342:          movzbl  0x8(%rsp), %r8d
    0.00 :   58348:          movl    0x10(%rsp), %r11d
    0.00 :   5834d:          jmp     0x57182 <vfprintf+0x2c02>
    0.00 :   58352:          xorl    $0x1, %r9d
    0.00 :   58356:          vzeroupper
    0.00 :   58359:          jmp     0x56ccf <vfprintf+0x274f>
    0.00 :   5835e:          movq    0x8(%r15), %rdx
    0.00 :   58362:          leaq    0x8(%rdx), %rax
    0.00 :   58366:          movq    %rax, 0x8(%r15)
    0.00 :   5836a:          jmp     0x58297 <vfprintf+0x3d17>
    0.00 :   5836f:          movq    0x8(%r15), %rdx
    0.00 :   58373:          leaq    0x8(%rdx), %rax
    0.00 :   58377:          movq    %rax, 0x8(%r15)
    0.00 :   5837b:          jmp     0x57bdf <vfprintf+0x365f>
    0.00 :   58380:          movsbl  %r8b, %esi
    0.00 :   58384:          movq    %rbx, %rdi
    0.00 :   58387:          movl    %r11d, 0x18(%rsp)
    0.00 :   5838c:          movq    %r10, 0x10(%rsp)
    0.00 :   58391:          movb    %cl, 0x8(%rsp)
    0.00 :   58395:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   5839a:          movzbl  0x8(%rsp), %ecx
    0.00 :   5839f:          movl    0x18(%rsp), %r11d
    0.00 :   583a4:          movq    0x10(%rsp), %r10
    0.00 :   583a9:          jmp     0x57a03 <vfprintf+0x3483>
    0.00 :   583ae:          movl    $0x30, %esi
    0.00 :   583b3:          movq    %rbx, %rdi
    0.00 :   583b6:          movl    %r11d, 0x20(%rsp)
    0.00 :   583bb:          movq    %r10, 0x18(%rsp)
    0.00 :   583c0:          movb    %cl, 0x10(%rsp)
    0.00 :   583c4:          movb    %r8b, 0x8(%rsp)
    0.00 :   583c9:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   583ce:          movzbl  0x10(%rsp), %ecx
    0.00 :   583d3:          movzbl  0x8(%rsp), %r8d
    0.00 :   583d9:          movl    0x20(%rsp), %r11d
    0.00 :   583de:          movq    0x18(%rsp), %r10
    0.00 :   583e3:          jmp     0x579ea <vfprintf+0x346a>
    0.00 :   583e8:          movsbl  %r8b, %esi
    0.00 :   583ec:          movq    %rbx, %rdi
    0.00 :   583ef:          movl    %r11d, 0xc(%rsp)
    0.00 :   583f4:          movb    %cl, 0x8(%rsp)
    0.00 :   583f8:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   583fd:          movzbl  0x8(%rsp), %ecx
    0.00 :   58402:          movl    0xc(%rsp), %r11d
    0.00 :   58407:          jmp     0x5718b <vfprintf+0x2c0b>
    0.00 :   5840c:          movl    $0x30, %esi
    0.00 :   58411:          movq    %rbx, %rdi
    0.00 :   58414:          movl    %r11d, 0x10(%rsp)
    0.00 :   58419:          movb    %cl, 0xc(%rsp)
    0.00 :   5841d:          movb    %r8b, 0x8(%rsp)
    0.00 :   58422:          callq   0x4eb10 <parse_printf_format+0x5c0>
    0.00 :   58427:          movzbl  0xc(%rsp), %ecx
    0.00 :   5842c:          movzbl  0x8(%rsp), %r8d
    0.00 :   58432:          movl    0x10(%rsp), %r11d
    0.00 :   58437:          jmp     0x578fc <vfprintf+0x337c>
    0.00 :   5843c:          movl    $0x0, 0x20(%rbx)
    0.00 :   58443:          jmp     0x56770 <vfprintf+0x21f0>
    0.00 :   58448:          callq   0x111090 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811cf7c0 <perf_pmu_nop_void>:
         : 5                ; perf_pmu_nop_void():
    0.00 :   ffffffff811cf7c0:       pushq   %rbp
   35.57 :   ffffffff811cf7c1:       movq    %rsp, %rbp
   64.43 :   ffffffff811cf7c4:       popq    %rbp
    0.00 :   ffffffff811cf7c5:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81a25450 <tcp_rack_advance>:
         : 5                ; tcp_rack_advance():
    0.00 :   ffffffff81a25450:       pushq   %rbp
    0.00 :   ffffffff81a25451:       movq    %rsp, %rbp
    0.00 :   ffffffff81a25454:       movq    0x648(%rdi), %rax
    0.00 :   ffffffff81a2545b:       movl    $0x0, %r8d
    0.00 :   ffffffff81a25461:       subq    %rcx, %rax
    0.00 :   ffffffff81a25464:       cmovsq  %r8, %rax
    0.00 :   ffffffff81a25468:       cmpl    0x668(%rdi), %eax
    0.00 :   ffffffff81a2546e:       movl    %eax, %r8d
   64.22 :   ffffffff81a25471:       jae     0xffffffff81a2547b <tcp_rack_advance+0x2b>
    0.00 :   ffffffff81a25473:       andl    $0x92, %esi
    0.00 :   ffffffff81a25479:       jne     0xffffffff81a254a5 <tcp_rack_advance+0x55>
    0.00 :   ffffffff81a2547b:       orb     $0x40, 0x615(%rdi)
    0.00 :   ffffffff81a25482:       cmpq    %rcx, 0x600(%rdi)
    0.00 :   ffffffff81a25489:       movl    0x60c(%rdi), %eax
    0.00 :   ffffffff81a2548f:       movl    %r8d, 0x608(%rdi)
    0.00 :   ffffffff81a25496:       jae     0xffffffff81a254b8 <tcp_rack_advance+0x68>
   35.78 :   ffffffff81a25498:       movq    %rcx, 0x600(%rdi)
    0.00 :   ffffffff81a2549f:       movl    %edx, 0x60c(%rdi)
    0.00 :   ffffffff81a254a5:       popq    %rbp
    0.00 :   ffffffff81a254a6:       xorl    %eax, %eax
    0.00 :   ffffffff81a254a8:       xorl    %edx, %edx
    0.00 :   ffffffff81a254aa:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a254ac:       xorl    %esi, %esi
    0.00 :   ffffffff81a254ae:       xorl    %edi, %edi
    0.00 :   ffffffff81a254b0:       xorl    %r8d, %r8d
    0.00 :   ffffffff81a254b3:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a254b8:       jne     0xffffffff81a254a5 <tcp_rack_advance+0x55>
    0.00 :   ffffffff81a254ba:       cmpl    %edx, %eax
    0.00 :   ffffffff81a254bc:       js      0xffffffff81a25498 <tcp_rack_advance+0x48>
    0.00 :   ffffffff81a254be:       popq    %rbp
    0.00 :   ffffffff81a254bf:       xorl    %eax, %eax
    0.00 :   ffffffff81a254c1:       xorl    %edx, %edx
    0.00 :   ffffffff81a254c3:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a254c5:       xorl    %esi, %esi
    0.00 :   ffffffff81a254c7:       xorl    %edi, %edi
    0.00 :   ffffffff81a254c9:       xorl    %r8d, %r8d
    0.00 :   ffffffff81a254cc:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b48f0 <update_cfs_group>:
         : 5                ; update_cfs_group():
    0.00 :   ffffffff810b48f0:       pushq   %rbp
    0.00 :   ffffffff810b48f1:       movq    %rsp, %rbp
    0.00 :   ffffffff810b48f4:       movq    0x80(%rdi), %rcx
    0.00 :   ffffffff810b48fb:       testq   %rcx, %rcx
    0.00 :   ffffffff810b48fe:       je      0xffffffff810b4984 <update_cfs_group+0x94>
    0.00 :   ffffffff810b4904:       movq    %rdi, %rsi
    0.00 :   ffffffff810b4907:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b490c:       movq    (%rcx), %rax
    0.00 :   ffffffff810b490f:       movq    0x150(%rcx), %r8
    0.00 :   ffffffff810b4916:       testq   %rax, %rax
    0.00 :   ffffffff810b4919:       movq    0xd8(%r8), %rdi
    0.00 :   ffffffff810b4920:       je      0xffffffff810b4932 <update_cfs_group+0x42>
    0.00 :   ffffffff810b4922:       shrq    $0xa, %rax
   34.29 :   ffffffff810b4926:       movl    $0x2, %edx
    0.00 :   ffffffff810b492b:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b492e:       cmovbq  %rdx, %rax
    0.00 :   ffffffff810b4932:       movq    0xa0(%rcx), %rdx
    0.00 :   ffffffff810b4939:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b493c:       cmovaeq %rax, %rdx
    0.00 :   ffffffff810b4940:       movq    0x100(%r8), %rax
    0.00 :   ffffffff810b4947:       subq    0x100(%rcx), %rax
    0.00 :   ffffffff810b494e:       movq    %rax, %rcx
    0.00 :   ffffffff810b4951:       movq    %rdi, %rax
    0.00 :   ffffffff810b4954:       imulq   %rdx, %rax
    0.00 :   ffffffff810b4958:       addq    %rdx, %rcx
    0.00 :   ffffffff810b495b:       je      0xffffffff810b4962 <update_cfs_group+0x72>
    0.00 :   ffffffff810b495d:       cqto
   35.84 :   ffffffff810b495f:       idivq   %rcx
    0.00 :   ffffffff810b4962:       movl    $0x2, %edx
    0.00 :   ffffffff810b4967:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b496a:       cmovgeq %rax, %rdx
    0.00 :   ffffffff810b496e:       cmpq    %rax, %rdi
    0.00 :   ffffffff810b4971:       movq    0x78(%rsi), %rax
    0.00 :   ffffffff810b4975:       cmovgq  %rdx, %rdi
    0.00 :   ffffffff810b4979:       movq    %rdi, %rdx
    0.00 :   ffffffff810b497c:       movq    %rax, %rdi
   29.87 :   ffffffff810b497f:       callq   0xffffffff810b3e40 <reweight_entity>
    0.00 :   ffffffff810b4984:       popq    %rbp
    0.00 :   ffffffff810b4985:       xorl    %eax, %eax
    0.00 :   ffffffff810b4987:       xorl    %edx, %edx
    0.00 :   ffffffff810b4989:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b498b:       xorl    %esi, %esi
    0.00 :   ffffffff810b498d:       xorl    %edi, %edi
    0.00 :   ffffffff810b498f:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b4992:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b4997:       movl    0x18c(%rcx), %eax
    0.00 :   ffffffff810b499d:       testl   %eax, %eax
    0.00 :   ffffffff810b499f:       je      0xffffffff810b490c <update_cfs_group+0x1c>
    0.00 :   ffffffff810b49a5:       popq    %rbp
    0.00 :   ffffffff810b49a6:       xorl    %eax, %eax
    0.00 :   ffffffff810b49a8:       xorl    %edx, %edx
    0.00 :   ffffffff810b49aa:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b49ac:       xorl    %esi, %esi
    0.00 :   ffffffff810b49ae:       xorl    %edi, %edi
    0.00 :   ffffffff810b49b0:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b49b3:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81127dc0 <tick_sched_handle>:
         : 5                ; tick_sched_handle():
    0.00 :   ffffffff81127dc0:       pushq   %rbp
    0.00 :   ffffffff81127dc1:       movq    %rsp, %rbp
    0.00 :   ffffffff81127dc4:       testb   $0x2, (%rdi)
    0.00 :   ffffffff81127dc7:       je      0xffffffff81127de3 <tick_sched_handle+0x23>
    0.00 :   ffffffff81127dc9:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81127dd2:       testb   $0x2, 0x354(%rax)
    0.00 :   ffffffff81127dd9:       jne     0xffffffff81127e0b <tick_sched_handle+0x4b>
    0.00 :   ffffffff81127ddb:       movq    $0x0, 0x58(%rdi)
    0.00 :   ffffffff81127de3:       xorl    %edi, %edi
    0.00 :   ffffffff81127de5:       testb   $0x3, 0x88(%rsi)
    0.00 :   ffffffff81127dec:       setne   %dil
    0.00 :   ffffffff81127df0:       callq   0xffffffff811122d0 <update_process_times>
   56.24 :   ffffffff81127df5:       movl    $0x1, %edi
   43.76 :   ffffffff81127dfa:       callq   0xffffffff8110e360 <profile_tick>
    0.00 :   ffffffff81127dff:       popq    %rbp
    0.00 :   ffffffff81127e00:       xorl    %eax, %eax
    0.00 :   ffffffff81127e02:       xorl    %esi, %esi
    0.00 :   ffffffff81127e04:       xorl    %edi, %edi
    0.00 :   ffffffff81127e06:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81127e0b:       incq    0x60(%rdi)
    0.00 :   ffffffff81127e0f:       jmp     0xffffffff81127ddb <tick_sched_handle+0x1b>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81128120 <tick_sched_do_timer>:
         : 5                ; tick_sched_do_timer():
    0.00 :   ffffffff81128120:       pushq   %rbp
   29.40 :   ffffffff81128121:       movq    %rsp, %rbp
    0.00 :   ffffffff81128124:       subq    $0x10, %rsp
    0.00 :   ffffffff81128128:       movq    %rbx, -0x8(%rbp)
    0.00 :   ffffffff8112812c:       movq    %rdi, %rbx
    0.00 :   ffffffff8112812f:       movl    0x123e8fb(%rip), %eax # 0xffffffff82366a30 <tick_do_timer_cpu>
    0.00 :   ffffffff81128135:       movl    %gs:0x7eefa5d0(%rip), %edx
    0.00 :   ffffffff8112813c:       cmpl    $-0x1, %eax
    0.00 :   ffffffff8112813f:       je      0xffffffff81128199 <tick_sched_do_timer+0x79>
    0.00 :   ffffffff81128141:       cmpl    %edx, %eax
    0.00 :   ffffffff81128143:       je      0xffffffff8112819f <tick_sched_do_timer+0x7f>
    0.00 :   ffffffff81128145:       movq    0x10df874(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff8112814c:       cmpq    %rax, 0x8(%rbx)
    0.00 :   ffffffff81128150:       je      0xffffffff81128182 <tick_sched_do_timer+0x62>
   28.59 :   ffffffff81128152:       movl    $0x0, 0x4(%rbx)
   42.01 :   ffffffff81128159:       movq    0x10df860(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81128160:       movq    %rax, 0x8(%rbx)
    0.00 :   ffffffff81128164:       movzbl  (%rbx), %eax
    0.00 :   ffffffff81128167:       testb   $0x1, %al
    0.00 :   ffffffff81128169:       je      0xffffffff81128170 <tick_sched_do_timer+0x50>
    0.00 :   ffffffff8112816b:       orl     $0x10, %eax
    0.00 :   ffffffff8112816e:       movb    %al, (%rbx)
    0.00 :   ffffffff81128170:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81128174:       leave
    0.00 :   ffffffff81128175:       xorl    %eax, %eax
    0.00 :   ffffffff81128177:       xorl    %edx, %edx
    0.00 :   ffffffff81128179:       xorl    %esi, %esi
    0.00 :   ffffffff8112817b:       xorl    %edi, %edi
    0.00 :   ffffffff8112817d:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81128182:       movl    0x4(%rbx), %eax
    0.00 :   ffffffff81128185:       incl    %eax
    0.00 :   ffffffff81128187:       cmpl    $0x5, %eax
    0.00 :   ffffffff8112818a:       movl    %eax, 0x4(%rbx)
    0.00 :   ffffffff8112818d:       jne     0xffffffff81128164 <tick_sched_do_timer+0x44>
    0.00 :   ffffffff8112818f:       movq    %rsi, %rdi
    0.00 :   ffffffff81128192:       callq   0xffffffff81128020 <tick_do_update_jiffies64>
    0.00 :   ffffffff81128197:       jmp     0xffffffff81128152 <tick_sched_do_timer+0x32>
    0.00 :   ffffffff81128199:       movl    %edx, 0x123e891(%rip) # 0xffffffff82366a30 <tick_do_timer_cpu>
    0.00 :   ffffffff8112819f:       movq    %rsi, %rdi
    0.00 :   ffffffff811281a2:       movq    %rsi, -0x10(%rbp)
    0.00 :   ffffffff811281a6:       callq   0xffffffff81128020 <tick_do_update_jiffies64>
    0.00 :   ffffffff811281ab:       movq    -0x10(%rbp), %rsi
    0.00 :   ffffffff811281af:       jmp     0xffffffff81128145 <tick_sched_do_timer+0x25>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81051740 <native_apic_mem_write>:
         : 5                ; native_apic_mem_write():
    0.00 :   ffffffff81051740:       movl    %edi, %edi
  100.00 :   ffffffff81051742:       movl    %esi, -0xa03000(%rdi)
    0.00 :   ffffffff81051748:       xorl    %esi, %esi
    0.00 :   ffffffff8105174a:       xorl    %edi, %edi
    0.00 :   ffffffff8105174c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     000000000004d230 <__strtof128_nan>:
   34.27 :   4d720:          testl   %ecx, %ecx
    0.00 :   4d722:          leaq    0x144097(%rip), %r8     # 0x1917c0 <_itoa_lower_digits>
    0.00 :   4d729:          leaq    0x1440d0(%rip), %rcx    # 0x191800 <_itoa_lower_digits+0x40>
    0.00 :   4d730:          movq    %rsi, %rax
    0.00 :   4d733:          cmovneq %rcx, %r8
    0.00 :   4d737:          cmpl    $0xa, %edx
    0.00 :   4d73a:          je      0x4d7b8 <__strtof128_nan+0x588>
    0.00 :   4d73c:          cmpl    $0x10, %edx
    0.00 :   4d73f:          je      0x4d770 <__strtof128_nan+0x540>
    0.00 :   4d741:          movl    %edx, %esi
    0.00 :   4d743:          movq    %rax, %rcx
    0.00 :   4d746:          cmpl    $0x8, %edx
    0.00 :   4d749:          je      0x4d798 <__strtof128_nan+0x568>
    0.00 :   4d74b:          movq    %rdi, %rax
    0.00 :   4d74e:          xorl    %edx, %edx
    0.00 :   4d750:          divq    %rsi
    0.00 :   4d753:          decq    %rcx
    0.00 :   4d756:          movzbl  (%r8,%rdx), %edx
    0.00 :   4d75b:          movb    %dl, (%rcx)
    0.00 :   4d75d:          movq    %rdi, %rdx
    0.00 :   4d760:          movq    %rax, %rdi
    0.00 :   4d763:          cmpq    %rsi, %rdx
    0.00 :   4d766:          jae     0x4d74b <__strtof128_nan+0x51b>
    0.00 :   4d768:          movq    %rcx, %rax
    0.00 :   4d76b:          retq
    0.00 :   4d76c:          nopl    (%rax)
    0.00 :   4d770:          movq    %rdi, %rdx
    0.00 :   4d773:          decq    %rax
    0.00 :   4d776:          andl    $0xf, %edx
    0.00 :   4d779:          movzbl  (%r8,%rdx), %edx
    0.00 :   4d77e:          movb    %dl, (%rax)
    0.00 :   4d780:          movq    %rdi, %rdx
    0.00 :   4d783:          shrq    $0x4, %rdi
    0.00 :   4d787:          cmpq    $0xf, %rdx
    0.00 :   4d78b:          ja      0x4d770 <__strtof128_nan+0x540>
    0.00 :   4d78d:          movq    %rax, %rcx
    0.00 :   4d790:          movq    %rcx, %rax
    0.00 :   4d793:          retq
    0.00 :   4d794:          nopl    (%rax)
    0.00 :   4d798:          movq    %rdi, %rdx
    0.00 :   4d79b:          decq    %rax
    0.00 :   4d79e:          andl    $0x7, %edx
    0.00 :   4d7a1:          movzbl  (%r8,%rdx), %edx
    0.00 :   4d7a6:          movb    %dl, (%rax)
    0.00 :   4d7a8:          movq    %rdi, %rdx
    0.00 :   4d7ab:          shrq    $0x3, %rdi
    0.00 :   4d7af:          cmpq    $0x7, %rdx
    0.00 :   4d7b3:          ja      0x4d798 <__strtof128_nan+0x568>
    0.00 :   4d7b5:          jmp     0x4d78d <__strtof128_nan+0x55d>
    0.00 :   4d7b7:          nop
    0.00 :   4d7b8:          movq    %rsi, %rcx
    0.00 :   4d7bb:          movabsq $-0x3333333333333333, %r9 # imm = 0xCCCCCCCCCCCCCCCD
    0.00 :   4d7c5:          nopl    (%rax)
    0.00 :   4d7c8:          movq    %rdi, %rax
    0.00 :   4d7cb:          movq    %rdi, %rsi
    0.00 :   4d7ce:          mulq    %r9
    0.00 :   4d7d1:          decq    %rcx
    0.00 :   4d7d4:          shrq    $0x3, %rdx
    0.00 :   4d7d8:          leaq    (%rdx,%rdx,4), %rax
    0.00 :   4d7dc:          addq    %rax, %rax
   33.01 :   4d7df:          subq    %rax, %rsi
    0.00 :   4d7e2:          movzbl  (%r8,%rsi), %eax
    0.00 :   4d7e7:          movb    %al, (%rcx)
    0.00 :   4d7e9:          movq    %rdi, %rax
    0.00 :   4d7ec:          movq    %rdx, %rdi
   32.72 :   4d7ef:          cmpq    $0x9, %rax
    0.00 :   4d7f3:          ja      0x4d7c8 <__strtof128_nan+0x598>
    0.00 :   4d7f5:          movq    %rcx, %rax
    0.00 :   4d7f8:          retq
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b57570 <timerqueue_add>:
         : 5                ; timerqueue_add():
    0.00 :   ffffffff81b57570:       pushq   %rbp
   37.85 :   ffffffff81b57571:       movq    %rsp, %rbp
    0.00 :   ffffffff81b57574:       pushq   %r12
    0.00 :   ffffffff81b57576:       pushq   %rbx
    0.00 :   ffffffff81b57577:       movq    %rsi, %rbx
    0.00 :   ffffffff81b5757a:       cmpq    (%rsi), %rsi
    0.00 :   ffffffff81b5757d:       jne     0xffffffff81b57631 <timerqueue_add+0xc1>
    0.00 :   ffffffff81b57583:       movq    (%rdi), %rax
    0.00 :   ffffffff81b57586:       testq   %rax, %rax
    0.00 :   ffffffff81b57589:       je      0xffffffff81b575ed <timerqueue_add+0x7d>
    0.00 :   ffffffff81b5758b:       movq    0x18(%rbx), %rsi
    0.00 :   ffffffff81b5758f:       movl    $0x1, %r12d
    0.00 :   ffffffff81b57595:       jmp     0xffffffff81b5759a <timerqueue_add+0x2a>
    0.00 :   ffffffff81b57597:       movq    %rdx, %rax
    0.00 :   ffffffff81b5759a:       cmpq    0x18(%rax), %rsi
    0.00 :   ffffffff81b5759e:       leaq    0x10(%rax), %rcx
    0.00 :   ffffffff81b575a2:       jl      0xffffffff81b575ab <timerqueue_add+0x3b>
    0.00 :   ffffffff81b575a4:       leaq    0x8(%rax), %rcx
    0.00 :   ffffffff81b575a8:       xorl    %r12d, %r12d
    0.00 :   ffffffff81b575ab:       movq    (%rcx), %rdx
   30.07 :   ffffffff81b575ae:       testq   %rdx, %rdx
    0.00 :   ffffffff81b575b1:       jne     0xffffffff81b57597 <timerqueue_add+0x27>
    0.00 :   ffffffff81b575b3:       testb   %r12b, %r12b
    0.00 :   ffffffff81b575b6:       movq    %rax, (%rbx)
    0.00 :   ffffffff81b575b9:       movq    $0x0, 0x8(%rbx)
    0.00 :   ffffffff81b575c1:       movq    $0x0, 0x10(%rbx)
    0.00 :   ffffffff81b575c9:       movq    %rbx, (%rcx)
    0.00 :   ffffffff81b575cc:       jne     0xffffffff81b57607 <timerqueue_add+0x97>
    0.00 :   ffffffff81b575ce:       movq    %rdi, %rsi
    0.00 :   ffffffff81b575d1:       movq    %rbx, %rdi
    0.00 :   ffffffff81b575d4:       callq   0xffffffff81b53fc0 <rb_insert_color>
    0.00 :   ffffffff81b575d9:       popq    %rbx
    0.00 :   ffffffff81b575da:       movl    %r12d, %eax
    0.00 :   ffffffff81b575dd:       popq    %r12
    0.00 :   ffffffff81b575df:       popq    %rbp
    0.00 :   ffffffff81b575e0:       xorl    %edx, %edx
    0.00 :   ffffffff81b575e2:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b575e4:       xorl    %esi, %esi
    0.00 :   ffffffff81b575e6:       xorl    %edi, %edi
    0.00 :   ffffffff81b575e8:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b575ed:       movq    $0x0, (%rbx)
    0.00 :   ffffffff81b575f4:       movq    $0x0, 0x8(%rbx)
    0.00 :   ffffffff81b575fc:       movq    $0x0, 0x10(%rbx)
    0.00 :   ffffffff81b57604:       movq    %rbx, (%rdi)
    0.00 :   ffffffff81b57607:       movq    %rbx, 0x8(%rdi)
    0.00 :   ffffffff81b5760b:       movq    %rdi, %rsi
    0.00 :   ffffffff81b5760e:       movq    %rbx, %rdi
    0.00 :   ffffffff81b57611:       callq   0xffffffff81b53fc0 <rb_insert_color>
    0.00 :   ffffffff81b57616:       testq   %rbx, %rbx
    0.00 :   ffffffff81b57619:       popq    %rbx
    0.00 :   ffffffff81b5761a:       setne   %r12b
    0.00 :   ffffffff81b5761e:       movl    %r12d, %eax
    0.00 :   ffffffff81b57621:       popq    %r12
    0.00 :   ffffffff81b57623:       popq    %rbp
   32.08 :   ffffffff81b57624:       xorl    %edx, %edx
    0.00 :   ffffffff81b57626:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b57628:       xorl    %esi, %esi
    0.00 :   ffffffff81b5762a:       xorl    %edi, %edi
    0.00 :   ffffffff81b5762c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b57631:       ud2
    0.00 :   ffffffff81b57633:       jmp     0xffffffff81b57583 <timerqueue_add+0x13>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81071410 <raise_softirq>:
         : 5                ; raise_softirq():
    0.00 :   ffffffff81071410:       pushq   %rbp
    0.00 :   ffffffff81071411:       movl    %edi, %ecx
    0.00 :   ffffffff81071413:       movq    %rsp, %rbp
    0.00 :   ffffffff81071416:       pushq   %rbx
    0.00 :   ffffffff81071417:       pushfq
    0.00 :   ffffffff81071418:       popq    %rbx
   65.85 :   ffffffff81071419:       cli
    0.00 :   ffffffff8107141a:       movl    $0x1, %eax
    0.00 :   ffffffff8107141f:       shlq    %cl, %rax
    0.00 :   ffffffff81071422:       orw     %ax, %gs:0x7efb12fe(%rip)
    0.00 :   ffffffff8107142a:       movl    %gs:0x7efb12d7(%rip), %eax
    0.00 :   ffffffff81071431:       testl   $0xffff00, %eax # imm = 0xFFFF00
    0.00 :   ffffffff81071436:       je      0xffffffff8107144e <raise_softirq+0x3e>
    0.00 :   ffffffff81071438:       andb    $0x2, %bh
    0.00 :   ffffffff8107143b:       je      0xffffffff8107143e <raise_softirq+0x2e>
    0.00 :   ffffffff8107143d:       sti
    0.00 :   ffffffff8107143e:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81071442:       leave
   34.15 :   ffffffff81071443:       xorl    %eax, %eax
    0.00 :   ffffffff81071445:       xorl    %ecx, %ecx
    0.00 :   ffffffff81071447:       xorl    %edi, %edi
    0.00 :   ffffffff81071449:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8107144e:       movq    %gs:0x7efa9c2a(%rip), %rdi
    0.00 :   ffffffff81071456:       testq   %rdi, %rdi
    0.00 :   ffffffff81071459:       je      0xffffffff81071438 <raise_softirq+0x28>
    0.00 :   ffffffff8107145b:       callq   0xffffffff810b25c0 <wake_up_process>
    0.00 :   ffffffff81071460:       jmp     0xffffffff81071438 <raise_softirq+0x28>
 Percent |	Source code & Disassembly of elf for cycles (17 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81009c50 <perf_ibs_start>:
         : 5                ; perf_ibs_start():
    0.00 :   ffffffff81009c50:       pushq   %rbp
    0.00 :   ffffffff81009c51:       movq    %rsp, %rbp
    0.00 :   ffffffff81009c54:       movq    0x98(%rdi), %r8
    0.00 :   ffffffff81009c5b:       movl    0x1e0(%rdi), %eax
    0.00 :   ffffffff81009c61:       movq    0x168(%r8), %rdx
    0.00 :   ffffffff81009c68:       addq    %gs:0x7f00bdc0(%rip), %rdx
    0.00 :   ffffffff81009c70:       testb   $0x1, %al
    0.00 :   ffffffff81009c72:       je      0xffffffff81009da3 <perf_ibs_start+0x153>
    0.00 :   ffffffff81009c78:       testb   $0x2, %al
    0.00 :   ffffffff81009c7a:       je      0xffffffff81009de7 <perf_ibs_start+0x197>
    0.00 :   ffffffff81009c80:       movq    0x1f0(%rdi), %rsi
    0.00 :   ffffffff81009c87:       movq    0x200(%rdi), %rcx
    0.00 :   ffffffff81009c8e:       movl    $0x0, 0x1e0(%rdi)
    0.00 :   ffffffff81009c98:       movq    0x150(%r8), %rax
    0.00 :   ffffffff81009c9f:       movq    %rsi, %r9
    0.00 :   ffffffff81009ca2:       negq    %r9
    0.00 :   ffffffff81009ca5:       cmpq    %r9, %rcx
    0.00 :   ffffffff81009ca8:       jle     0xffffffff81009dbb <perf_ibs_start+0x16b>
    0.00 :   ffffffff81009cae:       cmpq    $0xf, %rcx
    0.00 :   ffffffff81009cb2:       jle     0xffffffff81009dd1 <perf_ibs_start+0x181>
    0.00 :   ffffffff81009cb8:       cmpq    %rcx, %rax
    0.00 :   ffffffff81009cbb:       movq    %rcx, %rsi
    0.00 :   ffffffff81009cbe:       jb      0xffffffff81009d31 <perf_ibs_start+0xe1>
    0.00 :   ffffffff81009cc0:       xorl    %eax, %eax
    0.00 :   ffffffff81009cc2:       cmpq    $-0x7ddf25a0, %r8 # imm = 0x8220DA60
    0.00 :   ffffffff81009cc9:       movq    $0x0, 0x1e8(%rdi)
    0.00 :   ffffffff81009cd4:       je      0xffffffff81009d66 <perf_ibs_start+0x116>
    0.00 :   ffffffff81009cda:       lock
    0.00 :   ffffffff81009cdb:       orb     $0x2, 0x8(%rdx)
    0.00 :   ffffffff81009cdf:       lock
    0.00 :   ffffffff81009ce0:       andb    $-0x5, 0x8(%rdx)
    0.00 :   ffffffff81009ce4:       orq     0x168(%rdi), %rax
    0.00 :   ffffffff81009ceb:       shrq    $0x4, %rsi
    0.00 :   ffffffff81009cef:       orq     %rax, %rsi
    0.00 :   ffffffff81009cf2:       testb   $0x1, 0x164(%r8)
    0.00 :   ffffffff81009cfa:       jne     0xffffffff81009d47 <perf_ibs_start+0xf7>
    0.00 :   ffffffff81009cfc:       movq    0x140(%r8), %rax
    0.00 :   ffffffff81009d03:       movq    0x178(%rdi), %rcx
    0.00 :   ffffffff81009d0a:       orq     %rsi, %rax
    0.00 :   ffffffff81009d0d:       movq    %rax, %rdx
    0.00 :   ffffffff81009d10:       shrq    $0x20, %rdx
   41.20 :   ffffffff81009d14:       wrmsr
   58.80 :   ffffffff81009d16:       callq   0xffffffff811d89e0 <perf_event_update_userpage>
    0.00 :   ffffffff81009d1b:       popq    %rbp
    0.00 :   ffffffff81009d1c:       xorl    %eax, %eax
    0.00 :   ffffffff81009d1e:       xorl    %edx, %edx
    0.00 :   ffffffff81009d20:       xorl    %ecx, %ecx
    0.00 :   ffffffff81009d22:       xorl    %esi, %esi
    0.00 :   ffffffff81009d24:       xorl    %edi, %edi
    0.00 :   ffffffff81009d26:       xorl    %r8d, %r8d
    0.00 :   ffffffff81009d29:       xorl    %r9d, %r9d
    0.00 :   ffffffff81009d2c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81009d31:       subq    %rax, %rcx
    0.00 :   ffffffff81009d34:       cmpq    %rcx, %rax
    0.00 :   ffffffff81009d37:       movq    %rcx, %rsi
    0.00 :   ffffffff81009d3a:       jae     0xffffffff81009d8a <perf_ibs_start+0x13a>
    0.00 :   ffffffff81009d3c:       movq    %rax, %rcx
    0.00 :   ffffffff81009d3f:       movq    %rax, %rsi
    0.00 :   ffffffff81009d42:       jmp     0xffffffff81009cc0 <perf_ibs_start+0x70>
    0.00 :   ffffffff81009d47:       movq    0x140(%r8), %rax
    0.00 :   ffffffff81009d4e:       movq    0x178(%rdi), %rcx
    0.00 :   ffffffff81009d55:       notq    %rax
    0.00 :   ffffffff81009d58:       andq    %rsi, %rax
    0.00 :   ffffffff81009d5b:       movq    %rax, %rdx
    0.00 :   ffffffff81009d5e:       shrq    $0x20, %rdx
    0.00 :   ffffffff81009d62:       wrmsr
    0.00 :   ffffffff81009d64:       jmp     0xffffffff81009cfc <perf_ibs_start+0xac>
    0.00 :   ffffffff81009d66:       testb   $0x40, 0x15ad433(%rip) # 0xffffffff825b71a0 <ibs_caps>
    0.00 :   ffffffff81009d6d:       je      0xffffffff81009cda <perf_ibs_start+0x8a>
    0.00 :   ffffffff81009d73:       movq    %rcx, %rax
    0.00 :   ffffffff81009d76:       movq    %rcx, %rsi
    0.00 :   ffffffff81009d79:       andl    $0x7f00000, %eax # imm = 0x7F00000
    0.00 :   ffffffff81009d7e:       andq    $-0x7f00001, %rsi # imm = 0xF80FFFFF
    0.00 :   ffffffff81009d85:       jmp     0xffffffff81009cda <perf_ibs_start+0x8a>
    0.00 :   ffffffff81009d8a:       cmpq    $0xf, %rcx
    0.00 :   ffffffff81009d8e:       ja      0xffffffff81009cc0 <perf_ibs_start+0x70>
    0.00 :   ffffffff81009d94:       movl    $0x10, %esi
    0.00 :   ffffffff81009d99:       movl    $0x10, %ecx
    0.00 :   ffffffff81009d9e:       jmp     0xffffffff81009cc0 <perf_ibs_start+0x70>
    0.00 :   ffffffff81009da3:       ud2
    0.00 :   ffffffff81009da5:       popq    %rbp
    0.00 :   ffffffff81009da6:       xorl    %eax, %eax
    0.00 :   ffffffff81009da8:       xorl    %edx, %edx
    0.00 :   ffffffff81009daa:       xorl    %ecx, %ecx
    0.00 :   ffffffff81009dac:       xorl    %esi, %esi
    0.00 :   ffffffff81009dae:       xorl    %edi, %edi
    0.00 :   ffffffff81009db0:       xorl    %r8d, %r8d
    0.00 :   ffffffff81009db3:       xorl    %r9d, %r9d
    0.00 :   ffffffff81009db6:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81009dbb:       movq    %rsi, 0x200(%rdi)
    0.00 :   ffffffff81009dc2:       movq    %rsi, 0x1f8(%rdi)
    0.00 :   ffffffff81009dc9:       movq    %rsi, %rcx
    0.00 :   ffffffff81009dcc:       jmp     0xffffffff81009cae <perf_ibs_start+0x5e>
    0.00 :   ffffffff81009dd1:       addq    %rsi, %rcx
    0.00 :   ffffffff81009dd4:       movq    %rsi, 0x1f8(%rdi)
    0.00 :   ffffffff81009ddb:       movq    %rcx, 0x200(%rdi)
    0.00 :   ffffffff81009de2:       jmp     0xffffffff81009cb8 <perf_ibs_start+0x68>
    0.00 :   ffffffff81009de7:       ud2
    0.00 :   ffffffff81009de9:       jmp     0xffffffff81009c80 <perf_ibs_start+0x30>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81165e30 <irq_work_run_list>:
         : 5                ; irq_work_run_list():
    0.00 :   ffffffff81165e30:       pushq   %rbp
    0.00 :   ffffffff81165e31:       movq    %rsp, %rbp
    0.00 :   ffffffff81165e34:       pushq   %rbx
    0.00 :   ffffffff81165e35:       pushfq
    0.00 :   ffffffff81165e36:       popq    %rbx
    0.00 :   ffffffff81165e37:       andl    $0x200, %ebx    # imm = 0x200
    0.00 :   ffffffff81165e3d:       jne     0xffffffff81165e6d <irq_work_run_list+0x3d>
  100.00 :   ffffffff81165e3f:       movq    (%rdi), %rax
    0.00 :   ffffffff81165e42:       testq   %rax, %rax
    0.00 :   ffffffff81165e45:       je      0xffffffff81165e5f <irq_work_run_list+0x2f>
    0.00 :   ffffffff81165e47:       xchgq   %rbx, (%rdi)
    0.00 :   ffffffff81165e4a:       testq   %rbx, %rbx
    0.00 :   ffffffff81165e4d:       je      0xffffffff81165e5f <irq_work_run_list+0x2f>
    0.00 :   ffffffff81165e4f:       movq    %rbx, %rdi
    0.00 :   ffffffff81165e52:       movq    (%rbx), %rbx
    0.00 :   ffffffff81165e55:       callq   0xffffffff81165d90 <irq_work_single>
    0.00 :   ffffffff81165e5a:       testq   %rbx, %rbx
    0.00 :   ffffffff81165e5d:       jne     0xffffffff81165e4f <irq_work_run_list+0x1f>
    0.00 :   ffffffff81165e5f:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81165e63:       leave
    0.00 :   ffffffff81165e64:       xorl    %eax, %eax
    0.00 :   ffffffff81165e66:       xorl    %edi, %edi
    0.00 :   ffffffff81165e68:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81165e6d:       ud2
 Percent |	Source code & Disassembly of ip_tables.ko for cycles (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    0000000000000d80 <ipt_do_table>:
         : 5    ; ipt_do_table():
    0.00 :    d80:            pushq   %rbp
    0.00 :    d81:            movq    %rdx, %rax
    0.00 :    d84:            movq    %rdi, %r9
    0.00 :    d87:            movq    %rsp, %rbp
    0.00 :    d8a:            pushq   %r15
    0.00 :    d8c:            pushq   %r14
    0.00 :    d8e:            pushq   %r13
    0.00 :    d90:            movq    %rsi, %r13
    0.00 :    d93:            pushq   %r12
    0.00 :    d95:            pushq   %rbx
    0.00 :    d96:            subq    $0x60, %rsp
    0.00 :    d9a:            movq    %gs:0x28, %rdx
    0.00 :    da3:            movq    %rdx, -0x30(%rbp)
    0.00 :    da7:            xorl    %edx, %edx
    0.00 :    da9:            movq    0x8(%rax), %r8
    0.00 :    dad:            movq    0x10(%rax), %r14
    0.00 :    db1:            movq    $0x0, %rdx
    0.00 :    db8:            movzwl  0xb0(%rsi), %esi
    0.00 :    dbf:            movq    $0x0, -0x38(%rbp)
    0.00 :    dc7:            addq    0xc0(%r13), %rsi
    0.00 :    dce:            movq    $0x0, -0x40(%rbp)
    0.00 :    dd6:            testq   %r8, %r8
    0.00 :    dd9:            movq    $0x0, -0x50(%rbp)
    0.00 :    de1:            movq    $0x0, -0x48(%rbp)
    0.00 :    de9:            cmoveq  %rdx, %r8
    0.00 :    ded:            testq   %r14, %r14
    0.00 :    df0:            movzbl  (%rax), %ecx
    0.00 :    df3:            cmovneq %r14, %rdx
    0.00 :    df7:            movq    %r8, %r15
    0.00 :    dfa:            movq    %rdx, -0x60(%rbp)
    0.00 :    dfe:            movzwl  0x6(%rsi), %edx
    0.00 :    e02:            movq    %rsi, %r12
    0.00 :    e05:            rolw    $0x8, %dx
    0.00 :    e09:            andw    $0x1fff, %dx            # imm = 0x1FFF
    0.00 :    e0e:            movw    %dx, -0x34(%rbp)
    0.00 :    e12:            movzbl  (%rsi), %edx
    0.00 :    e15:            movq    %rax, -0x40(%rbp)
    0.00 :    e19:            movl    $0x1, %eax
    0.00 :    e1e:            movb    $0x0, -0x32(%rbp)
    0.00 :    e22:            shll    %cl, %eax
    0.00 :    e24:            andl    $0xf, %edx
    0.00 :    e27:            shll    $0x2, %edx
    0.00 :    e2a:            andl    0x10(%rdi), %eax
    0.00 :    e2d:            movl    %edx, -0x38(%rbp)
    0.00 :    e30:            je      0x118f <ipt_do_table+0x40f>
    0.00 :    e36:            addl    $0x200, %gs:(%rip)      # imm = 0x200
    0.00 :    e41:            movl    %gs:(%rip), %edi
    0.00 :    e48:            incl    %edi
    0.00 :    e4a:            andl    $0x1, %edi
    0.00 :    e4d:            movl    %edi, %r14d
    0.00 :    e50:            addl    %edi, %gs:(%rip)
    0.00 :    e57:            lock
    0.00 :    e58:            addl    $0x0, -0x4(%rsp)
    0.00 :    e5d:            movq    0x18(%r9), %r9
    0.00 :    e61:            movl    %gs:(%rip), %eax
    0.00 :    e68:            movl    %eax, %eax
    0.00 :    e6a:            movq    0x38(%r9), %rdx
    0.00 :    e6e:            leaq    0x40(%r9), %r10
    0.00 :    e72:            movq    (%rdx,%rax,8), %r11
    0.00 :    e76:            nopl    (%rax,%rax)
    0.00 :    e7b:            movl    %ecx, %edi
    0.00 :    e7d:            movl    %r14d, -0x58(%rbp)
    0.00 :    e81:            movl    $0x0, -0x64(%rbp)
    0.00 :    e88:            movl    0xc(%r9,%rdi,4), %ebx
    0.00 :    e8d:            movq    %r15, %r14
    0.00 :    e90:            movl    $0x0, -0x54(%rbp)
    0.00 :    e97:            movq    %r12, %r15
    0.00 :    e9a:            movq    %r11, -0x80(%rbp)
    0.00 :    e9e:            movq    %r9, -0x78(%rbp)
    0.00 :    ea2:            movq    %r10, -0x70(%rbp)
    0.00 :    ea6:            movq    %rdi, -0x88(%rbp)
    0.00 :    ead:            addq    %r10, %rbx
    0.00 :    eb0:            movq    %rbx, %r12
    0.00 :    eb3:            testq   %r12, %r12
    0.00 :    eb6:            je      0x10f8 <ipt_do_table+0x378>
    0.00 :    ebc:            movzbl  0x53(%r12), %ecx
    0.00 :    ec2:            movl    0xc(%r15), %eax
    0.00 :    ec6:            andl    0x8(%r12), %eax
    0.00 :    ecb:            movzwl  -0x34(%rbp), %edi
    0.00 :    ecf:            cmpl    (%r12), %eax
    0.00 :    ed3:            movl    %ecx, %eax
    0.00 :    ed5:            setne   %r9b
    0.00 :    ed9:            shrb    $0x3, %al
    0.00 :    edc:            andl    $0x1, %eax
    0.00 :    edf:            cmpb    %al, %r9b
    0.00 :    ee2:            jne     0x107e <ipt_do_table+0x2fe>
    0.00 :    ee8:            movl    0x10(%r15), %eax
    0.00 :    eec:            andl    0xc(%r12), %eax
    0.00 :    ef1:            cmpl    0x4(%r12), %eax
    0.00 :    ef6:            movl    %ecx, %eax
    0.00 :    ef8:            setne   %r9b
    0.00 :    efc:            shrb    $0x4, %al
    0.00 :    eff:            andl    $0x1, %eax
    0.00 :    f02:            cmpb    %al, %r9b
    0.00 :    f05:            jne     0x107e <ipt_do_table+0x2fe>
    0.00 :    f0b:            movq    (%r14), %r9
    0.00 :    f0e:            movq    0x8(%r14), %rax
    0.00 :    f12:            xorq    0x10(%r12), %r9
    0.00 :    f17:            xorq    0x18(%r12), %rax
    0.00 :    f1c:            andq    0x30(%r12), %r9
    0.00 :    f21:            andq    0x38(%r12), %rax
    0.00 :    f26:            orq     %r9, %rax
    0.00 :    f29:            movl    %ecx, %eax
    0.00 :    f2b:            setne   %r9b
    0.00 :    f2f:            andl    $0x1, %eax
    0.00 :    f32:            cmpb    %al, %r9b
    0.00 :    f35:            jne     0x107e <ipt_do_table+0x2fe>
    0.00 :    f3b:            movq    -0x60(%rbp), %rax
    0.00 :    f3f:            movq    (%rax), %r9
    0.00 :    f42:            movq    0x8(%rax), %rax
    0.00 :    f46:            xorq    0x20(%r12), %r9
    0.00 :    f4b:            xorq    0x28(%r12), %rax
    0.00 :    f50:            andq    0x40(%r12), %r9
    0.00 :    f55:            andq    0x48(%r12), %rax
    0.00 :    f5a:            orq     %r9, %rax
    0.00 :    f5d:            movl    %ecx, %eax
    0.00 :    f5f:            setne   %r9b
    0.00 :    f63:            shrb    %al
    0.00 :    f65:            andl    $0x1, %eax
   52.89 :    f68:            cmpb    %al, %r9b
    0.00 :    f6b:            jne     0x107e <ipt_do_table+0x2fe>
    0.00 :    f71:            movzwl  0x50(%r12), %eax
    0.00 :    f77:            testw   %ax, %ax
    0.00 :    f7a:            je      0xf9a <ipt_do_table+0x21a>
    0.00 :    f7c:            movzbl  0x9(%r15), %r9d
    0.00 :    f81:            cmpw    %ax, %r9w
    0.00 :    f85:            movl    %ecx, %eax
    0.00 :    f87:            setne   %r9b
    0.00 :    f8b:            shrb    $0x6, %al
    0.00 :    f8e:            andl    $0x1, %eax
    0.00 :    f91:            cmpb    %al, %r9b
    0.00 :    f94:            jne     0x107e <ipt_do_table+0x2fe>
    0.00 :    f9a:            testw   %di, %di
    0.00 :    f9d:            sete    %al
    0.00 :    fa0:            andb    0x52(%r12), %al
    0.00 :    fa5:            shrb    $0x5, %cl
    0.00 :    fa8:            andl    $0x1, %ecx
    0.00 :    fab:            cmpb    %cl, %al
    0.00 :    fad:            jne     0x107e <ipt_do_table+0x2fe>
   47.11 :    fb3:            movzwl  0x58(%r12), %eax
    0.00 :    fb9:            leaq    0x70(%r12), %rbx
    0.00 :    fbe:            addq    %r12, %rax
    0.00 :    fc1:            cmpq    %rax, %rbx
    0.00 :    fc4:            jae     0x1002 <ipt_do_table+0x282>
    0.00 :    fc6:            movq    0x8(%rbx), %rax
    0.00 :    fca:            leaq    0x20(%rbx), %rdx
    0.00 :    fce:            leaq    -0x50(%rbp), %rsi
    0.00 :    fd2:            movq    %r13, %rdi
    0.00 :    fd5:            movq    %rdx, -0x48(%rbp)
    0.00 :    fd9:            movq    %rax, -0x50(%rbp)
    0.00 :    fdd:            movq    0x30(%rax), %rax
    0.00 :    fe1:            callq   0xfe6 <ipt_do_table+0x266>
    0.00 :    fe6:            testb   %al, %al
    0.00 :    fe8:            je      0x107e <ipt_do_table+0x2fe>
    0.00 :    fee:            movzwl  (%rbx), %eax
    0.00 :    ff1:            addq    %rax, %rbx
    0.00 :    ff4:            movzwl  0x58(%r12), %eax
    0.00 :    ffa:            addq    %r12, %rax
    0.00 :    ffd:            cmpq    %rax, %rbx
    0.00 :   1000:           jb      0xfc6 <ipt_do_table+0x246>
    0.00 :   1002:           cmpl    $0x1, (%rip)            # 0x1009 <ipt_do_table+0x289>
    0.00 :   1009:           movq    0x60(%r12), %rax
    0.00 :   100e:           ja      0x10ff <ipt_do_table+0x37f>
    0.00 :   1014:           leaq    0x60(%r12), %rax
    0.00 :   1019:           movl    0x70(%r13), %ecx
    0.00 :   101d:           incq    (%rax)
    0.00 :   1020:           addq    %rcx, 0x8(%rax)
    0.00 :   1024:           movzwl  0x58(%r12), %eax
    0.00 :   102a:           addq    %r12, %rax
    0.00 :   102d:           movq    0x8(%rax), %rcx
    0.00 :   1031:           testq   %rcx, %rcx
    0.00 :   1034:           je      0x1188 <ipt_do_table+0x408>
    0.00 :   103a:           cmpq    $0x0, 0x30(%rcx)
    0.00 :   103f:           je      0x110c <ipt_do_table+0x38c>
    0.00 :   1045:           movq    %rcx, -0x50(%rbp)
    0.00 :   1049:           leaq    0x20(%rax), %rcx
    0.00 :   104d:           leaq    -0x50(%rbp), %rsi
    0.00 :   1051:           movq    %r13, %rdi
    0.00 :   1054:           movq    %rcx, -0x48(%rbp)
    0.00 :   1058:           movq    0x8(%rax), %rax
    0.00 :   105c:           movq    0x30(%rax), %rax
    0.00 :   1060:           callq   0x1065 <ipt_do_table+0x2e5>
    0.00 :   1065:           movl    %eax, -0x54(%rbp)
    0.00 :   1068:           incl    %eax
    0.00 :   106a:           jne     0x1091 <ipt_do_table+0x311>
    0.00 :   106c:           movzwl  0xb0(%r13), %esi
    0.00 :   1074:           addq    0xc0(%r13), %rsi
    0.00 :   107b:           movq    %rsi, %r15
    0.00 :   107e:           movzwl  0x5a(%r12), %eax
    0.00 :   1084:           addq    %rax, %r12
    0.00 :   1087:           cmpb    $0x0, -0x32(%rbp)
    0.00 :   108b:           je      0xeb3 <ipt_do_table+0x133>
    0.00 :   1091:           movl    -0x58(%rbp), %r14d
    0.00 :   1095:           movl    $0x200, %esi            # imm = 0x200
    0.00 :   109a:           movq    $0x0, %rdi
    0.00 :   10a1:           addl    %r14d, %gs:(%rip)
    0.00 :   10a9:           callq   0x10ae <ipt_do_table+0x32e>
    0.00 :   10ae:           xorl    %eax, %eax
    0.00 :   10b0:           cmpb    $0x0, -0x32(%rbp)
    0.00 :   10b4:           cmovel  -0x54(%rbp), %eax
    0.00 :   10b8:           movl    %eax, -0x54(%rbp)
    0.00 :   10bb:           movq    -0x30(%rbp), %rax
    0.00 :   10bf:           subq    %gs:0x28, %rax
    0.00 :   10c8:           jne     0x11e9 <ipt_do_table+0x469>
    0.00 :   10ce:           movl    -0x54(%rbp), %eax
    0.00 :   10d1:           addq    $0x60, %rsp
    0.00 :   10d5:           popq    %rbx
    0.00 :   10d6:           popq    %r12
    0.00 :   10d8:           popq    %r13
    0.00 :   10da:           popq    %r14
    0.00 :   10dc:           popq    %r15
    0.00 :   10de:           popq    %rbp
    0.00 :   10df:           xorl    %edx, %edx
    0.00 :   10e1:           xorl    %ecx, %ecx
    0.00 :   10e3:           xorl    %esi, %esi
    0.00 :   10e5:           xorl    %edi, %edi
    0.00 :   10e7:           xorl    %r8d, %r8d
    0.00 :   10ea:           xorl    %r9d, %r9d
    0.00 :   10ed:           xorl    %r10d, %r10d
    0.00 :   10f0:           xorl    %r11d, %r11d
    0.00 :   10f3:           jmp     0x10f8 <ipt_do_table+0x378>
    0.00 :   10f8:           ud2
    0.00 :   10fa:           jmp     0xebc <ipt_do_table+0x13c>
    0.00 :   10ff:           addq    %gs:(%rip), %rax
    0.00 :   1107:           jmp     0x1019 <ipt_do_table+0x299>
    0.00 :   110c:           movslq  0x20(%rax), %rax
    0.00 :   1110:           testl   %eax, %eax
    0.00 :   1112:           js      0x1158 <ipt_do_table+0x3d8>
    0.00 :   1114:           movzwl  0x5a(%r12), %ecx
    0.00 :   111a:           movq    -0x70(%rbp), %rdi
    0.00 :   111e:           addq    %rdi, %rax
    0.00 :   1121:           addq    %r12, %rcx
    0.00 :   1124:           cmpq    %rcx, %rax
    0.00 :   1127:           je      0x1150 <ipt_do_table+0x3d0>
    0.00 :   1129:           testb   $0x2, 0x52(%r12)
    0.00 :   112f:           jne     0x1150 <ipt_do_table+0x3d0>
    0.00 :   1131:           movq    -0x78(%rbp), %rcx
    0.00 :   1135:           movl    -0x64(%rbp), %edi
    0.00 :   1138:           cmpl    0x34(%rcx), %edi
    0.00 :   113b:           jae     0x11d9 <ipt_do_table+0x459>
    0.00 :   1141:           movq    -0x80(%rbp), %rdx
    0.00 :   1145:           movl    %edi, %ecx
    0.00 :   1147:           incl    %edi
    0.00 :   1149:           movl    %edi, -0x64(%rbp)
    0.00 :   114c:           movq    %r12, (%rdx,%rcx,8)
    0.00 :   1150:           movq    %rax, %r12
    0.00 :   1153:           jmp     0x1087 <ipt_do_table+0x307>
    0.00 :   1158:           cmpl    $-0x5, %eax
    0.00 :   115b:           je      0x1196 <ipt_do_table+0x416>
    0.00 :   115d:           notl    %eax
    0.00 :   115f:           movl    -0x58(%rbp), %r14d
    0.00 :   1163:           movl    %eax, -0x54(%rbp)
    0.00 :   1166:           jmp     0x1095 <ipt_do_table+0x315>
    0.00 :   116b:           movb    %gs:(%rip), %al
    0.00 :   1172:           testb   %al, %al
    0.00 :   1174:           setne   %al
    0.00 :   1177:           movzbl  %al, %eax
    0.00 :   117a:           imull   0x34(%r9), %eax
    0.00 :   117f:           leaq    (%r11,%rax,8), %r11
    0.00 :   1183:           jmp     0xe7b <ipt_do_table+0xfb>
    0.00 :   1188:           ud2
    0.00 :   118a:           jmp     0x103a <ipt_do_table+0x2ba>
    0.00 :   118f:           ud2
    0.00 :   1191:           jmp     0xe36 <ipt_do_table+0xb6>
    0.00 :   1196:           movl    -0x64(%rbp), %eax
    0.00 :   1199:           testl   %eax, %eax
    0.00 :   119b:           nopl    (%rax,%rax)
    0.00 :   11a0:           jne     0x11be <ipt_do_table+0x43e>
    0.00 :   11a2:           movq    -0x78(%rbp), %rax
    0.00 :   11a6:           movq    -0x88(%rbp), %rdi
    0.00 :   11ad:           movl    0x20(%rax,%rdi,4), %edx
    0.00 :   11b1:           movq    -0x70(%rbp), %rax
    0.00 :   11b5:           leaq    (%rax,%rdx), %r12
    0.00 :   11b9:           jmp     0x1087 <ipt_do_table+0x307>
    0.00 :   11be:           decl    -0x64(%rbp)
    0.00 :   11c1:           movq    -0x80(%rbp), %rdi
    0.00 :   11c5:           movl    -0x64(%rbp), %eax
    0.00 :   11c8:           movq    (%rdi,%rax,8), %rdx
    0.00 :   11cc:           movzwl  0x5a(%rdx), %eax
    0.00 :   11d0:           leaq    (%rdx,%rax), %r12
    0.00 :   11d4:           jmp     0x1087 <ipt_do_table+0x307>
    0.00 :   11d9:           movl    -0x58(%rbp), %r14d
    0.00 :   11dd:           movl    $0x0, -0x54(%rbp)
    0.00 :   11e4:           jmp     0x1095 <ipt_do_table+0x315>
    0.00 :   11e9:           callq   0x11ee <ipt_do_table+0x46e>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b5d90 <check_preempt_wakeup>:
         : 5                ; check_preempt_wakeup():
    0.00 :   ffffffff810b5d90:       pushq   %rbp
    0.00 :   ffffffff810b5d91:       movq    %rsp, %rbp
    0.00 :   ffffffff810b5d94:       pushq   %r15
    0.00 :   ffffffff810b5d96:       pushq   %r14
    0.00 :   ffffffff810b5d98:       pushq   %r13
    0.00 :   ffffffff810b5d9a:       pushq   %r12
    0.00 :   ffffffff810b5d9c:       pushq   %rbx
    0.00 :   ffffffff810b5d9d:       subq    $0x8, %rsp
    0.00 :   ffffffff810b5da1:       movq    0x970(%rdi), %r13
    0.00 :   ffffffff810b5da8:       leaq    0x400(%rsi), %rbx
    0.00 :   ffffffff810b5daf:       leaq    0x400(%r13), %r12
    0.00 :   ffffffff810b5db6:       cmpq    %rbx, %r12
    0.00 :   ffffffff810b5db9:       je      0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5dbf:       movq    %rdi, %r14
    0.00 :   ffffffff810b5dc2:       movq    0x478(%rsi), %rcx
    0.00 :   ffffffff810b5dc9:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b5dce:       movq    (%r13), %rax
    0.00 :   ffffffff810b5dd2:       testb   $0x8, %al
    0.00 :   ffffffff810b5dd4:       jne     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5dda:       cmpl    $0x5, 0x958(%r13)
    0.00 :   ffffffff810b5de2:       movq    0x478(%r13), %rdi
    0.00 :   ffffffff810b5de9:       movl    0x958(%rsi), %eax
    0.00 :   ffffffff810b5def:       movl    0x10(%rdi), %r15d
    0.00 :   ffffffff810b5df3:       je      0xffffffff810b5f06 <check_preempt_wakeup+0x176>
    0.00 :   ffffffff810b5df9:       testl   %eax, %eax
   44.16 :   ffffffff810b5dfb:       jne     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5e01:       movl    0x468(%r13), %eax
    0.00 :   ffffffff810b5e08:       movl    0x468(%rsi), %edx
   55.84 :   ffffffff810b5e0e:       cmpl    %edx, %eax
    0.00 :   ffffffff810b5e10:       jle     0xffffffff810b5e24 <check_preempt_wakeup+0x94>
    0.00 :   ffffffff810b5e12:       decl    %eax
    0.00 :   ffffffff810b5e14:       movq    0x70(%r12), %r12
    0.00 :   ffffffff810b5e19:       cmpl    %eax, %edx
    0.00 :   ffffffff810b5e1b:       jne     0xffffffff810b5e12 <check_preempt_wakeup+0x82>
    0.00 :   ffffffff810b5e1d:       movq    0x78(%r12), %rdi
    0.00 :   ffffffff810b5e22:       movl    %edx, %eax
    0.00 :   ffffffff810b5e24:       cmpl    %edx, %eax
    0.00 :   ffffffff810b5e26:       jge     0xffffffff810b5e36 <check_preempt_wakeup+0xa6>
    0.00 :   ffffffff810b5e28:       decl    %edx
    0.00 :   ffffffff810b5e2a:       movq    0x70(%rbx), %rbx
    0.00 :   ffffffff810b5e2e:       cmpl    %edx, %eax
    0.00 :   ffffffff810b5e30:       jne     0xffffffff810b5e28 <check_preempt_wakeup+0x98>
    0.00 :   ffffffff810b5e32:       movq    0x78(%rbx), %rcx
    0.00 :   ffffffff810b5e36:       testq   %rdi, %rdi
    0.00 :   ffffffff810b5e39:       je      0xffffffff810b5e40 <check_preempt_wakeup+0xb0>
    0.00 :   ffffffff810b5e3b:       cmpq    %rdi, %rcx
    0.00 :   ffffffff810b5e3e:       je      0xffffffff810b5e59 <check_preempt_wakeup+0xc9>
    0.00 :   ffffffff810b5e40:       movq    0x70(%r12), %r12
    0.00 :   ffffffff810b5e45:       movq    0x70(%rbx), %rbx
    0.00 :   ffffffff810b5e49:       movq    0x78(%r12), %rdi
    0.00 :   ffffffff810b5e4e:       cmpq    %rdi, 0x78(%rbx)
    0.00 :   ffffffff810b5e52:       jne     0xffffffff810b5e40 <check_preempt_wakeup+0xb0>
    0.00 :   ffffffff810b5e54:       testq   %rdi, %rdi
    0.00 :   ffffffff810b5e57:       je      0xffffffff810b5e40 <check_preempt_wakeup+0xb0>
    0.00 :   ffffffff810b5e59:       testq   %rbx, %rbx
    0.00 :   ffffffff810b5e5c:       je      0xffffffff810b6030 <check_preempt_wakeup+0x2a0>
    0.00 :   ffffffff810b5e62:       movq    0x80(%r12), %rax
    0.00 :   ffffffff810b5e6a:       testq   %rax, %rax
    0.00 :   ffffffff810b5e6d:       je      0xffffffff810b6001 <check_preempt_wakeup+0x271>
    0.00 :   ffffffff810b5e73:       movl    0x158(%rax), %r8d
    0.00 :   ffffffff810b5e7a:       movq    0x80(%rbx), %rax
    0.00 :   ffffffff810b5e81:       xorl    %edx, %edx
    0.00 :   ffffffff810b5e83:       testl   %r8d, %r8d
    0.00 :   ffffffff810b5e86:       setg    %dl
    0.00 :   ffffffff810b5e89:       testq   %rax, %rax
    0.00 :   ffffffff810b5e8c:       je      0xffffffff810b601f <check_preempt_wakeup+0x28f>
    0.00 :   ffffffff810b5e92:       movl    0x158(%rax), %esi
    0.00 :   ffffffff810b5e98:       xorl    %eax, %eax
    0.00 :   ffffffff810b5e9a:       testl   %esi, %esi
    0.00 :   ffffffff810b5e9c:       setg    %al
    0.00 :   ffffffff810b5e9f:       movl    %eax, %ecx
    0.00 :   ffffffff810b5ea1:       xorl    $0x1, %ecx
    0.00 :   ffffffff810b5ea4:       testl   %edx, %ecx
    0.00 :   ffffffff810b5ea6:       jne     0xffffffff810b5f0b <check_preempt_wakeup+0x17b>
    0.00 :   ffffffff810b5ea8:       cmpl    %edx, %eax
    0.00 :   ffffffff810b5eaa:       je      0xffffffff810b5f88 <check_preempt_wakeup+0x1f8>
    0.00 :   ffffffff810b5eb0:       addq    $0x8, %rsp
    0.00 :   ffffffff810b5eb4:       popq    %rbx
    0.00 :   ffffffff810b5eb5:       popq    %r12
    0.00 :   ffffffff810b5eb7:       popq    %r13
    0.00 :   ffffffff810b5eb9:       popq    %r14
    0.00 :   ffffffff810b5ebb:       popq    %r15
    0.00 :   ffffffff810b5ebd:       popq    %rbp
    0.00 :   ffffffff810b5ebe:       xorl    %eax, %eax
    0.00 :   ffffffff810b5ec0:       xorl    %edx, %edx
    0.00 :   ffffffff810b5ec2:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b5ec4:       xorl    %esi, %esi
    0.00 :   ffffffff810b5ec6:       xorl    %edi, %edi
    0.00 :   ffffffff810b5ec8:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b5ecb:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b5ece:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b5ed3:       movl    0x18c(%rcx), %r9d
    0.00 :   ffffffff810b5eda:       testl   %r9d, %r9d
    0.00 :   ffffffff810b5edd:       je      0xffffffff810b5dce <check_preempt_wakeup+0x3e>
    0.00 :   ffffffff810b5ee3:       addq    $0x8, %rsp
    0.00 :   ffffffff810b5ee7:       popq    %rbx
    0.00 :   ffffffff810b5ee8:       popq    %r12
    0.00 :   ffffffff810b5eea:       popq    %r13
    0.00 :   ffffffff810b5eec:       popq    %r14
    0.00 :   ffffffff810b5eee:       popq    %r15
    0.00 :   ffffffff810b5ef0:       popq    %rbp
    0.00 :   ffffffff810b5ef1:       xorl    %eax, %eax
    0.00 :   ffffffff810b5ef3:       xorl    %edx, %edx
    0.00 :   ffffffff810b5ef5:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b5ef7:       xorl    %esi, %esi
    0.00 :   ffffffff810b5ef9:       xorl    %edi, %edi
    0.00 :   ffffffff810b5efb:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b5efe:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b5f01:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b5f06:       cmpl    $0x5, %eax
    0.00 :   ffffffff810b5f09:       je      0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f0b:       movq    %r14, %rdi
    0.00 :   ffffffff810b5f0e:       callq   0xffffffff810a99e0 <resched_curr>
    0.00 :   ffffffff810b5f13:       movl    0x38(%r12), %edx
    0.00 :   ffffffff810b5f18:       testl   %edx, %edx
    0.00 :   ffffffff810b5f1a:       je      0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f1c:       cmpq    %r13, 0x978(%r14)
    0.00 :   ffffffff810b5f23:       je      0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f25:       cmpl    $0x7, %r15d
    0.00 :   ffffffff810b5f29:       jbe     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f2b:       movq    0x80(%r12), %rax
    0.00 :   ffffffff810b5f33:       testq   %rax, %rax
    0.00 :   ffffffff810b5f36:       jne     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f3c:       testq   %r12, %r12
    0.00 :   ffffffff810b5f3f:       jne     0xffffffff810b5f73 <check_preempt_wakeup+0x1e3>
    0.00 :   ffffffff810b5f41:       jmp     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f46:       movl    0x158(%rax), %eax
    0.00 :   ffffffff810b5f4c:       testl   %eax, %eax
    0.00 :   ffffffff810b5f4e:       jg      0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f54:       movq    0x78(%r12), %rax
    0.00 :   ffffffff810b5f59:       movq    %r12, 0x60(%rax)
    0.00 :   ffffffff810b5f5d:       movq    0x70(%r12), %r12
    0.00 :   ffffffff810b5f62:       testq   %r12, %r12
    0.00 :   ffffffff810b5f65:       je      0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f6b:       movq    0x80(%r12), %rax
    0.00 :   ffffffff810b5f73:       testq   %rax, %rax
    0.00 :   ffffffff810b5f76:       jne     0xffffffff810b5f46 <check_preempt_wakeup+0x1b6>
    0.00 :   ffffffff810b5f78:       cmpl    $0x5, 0x558(%r12)
    0.00 :   ffffffff810b5f81:       jne     0xffffffff810b5f54 <check_preempt_wakeup+0x1c4>
    0.00 :   ffffffff810b5f83:       jmp     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f88:       callq   0xffffffff810b3cf0 <update_curr>
    0.00 :   ffffffff810b5f8d:       movq    0x50(%r12), %rcx
    0.00 :   ffffffff810b5f92:       subq    0x50(%rbx), %rcx
    0.00 :   ffffffff810b5f96:       testq   %rcx, %rcx
    0.00 :   ffffffff810b5f99:       jle     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5f9f:       cmpq    $0x100000, (%rbx) # imm = 0x100000
    0.00 :   ffffffff810b5fa6:       movl    0x1180bfc(%rip), %edi # 0xffffffff82236ba8 <sysctl_sched_wakeup_granularity>
    0.00 :   ffffffff810b5fac:       jne     0xffffffff810b6037 <check_preempt_wakeup+0x2a7>
    0.00 :   ffffffff810b5fb2:       cmpq    %rdi, %rcx
    0.00 :   ffffffff810b5fb5:       jle     0xffffffff810b5eb0 <check_preempt_wakeup+0x120>
    0.00 :   ffffffff810b5fbb:       jmp     0xffffffff810b5fde <check_preempt_wakeup+0x24e>
    0.00 :   ffffffff810b5fbd:       movl    0x158(%rax), %ecx
    0.00 :   ffffffff810b5fc3:       xorl    %eax, %eax
    0.00 :   ffffffff810b5fc5:       testl   %ecx, %ecx
    0.00 :   ffffffff810b5fc7:       setg    %al
    0.00 :   ffffffff810b5fca:       testl   %eax, %eax
    0.00 :   ffffffff810b5fcc:       jne     0xffffffff810b5f0b <check_preempt_wakeup+0x17b>
    0.00 :   ffffffff810b5fd2:       movq    0x78(%rbx), %rax
    0.00 :   ffffffff810b5fd6:       movq    %rbx, 0x58(%rax)
    0.00 :   ffffffff810b5fda:       movq    0x70(%rbx), %rbx
    0.00 :   ffffffff810b5fde:       testq   %rbx, %rbx
    0.00 :   ffffffff810b5fe1:       je      0xffffffff810b5f0b <check_preempt_wakeup+0x17b>
    0.00 :   ffffffff810b5fe7:       movq    0x80(%rbx), %rax
    0.00 :   ffffffff810b5fee:       testq   %rax, %rax
    0.00 :   ffffffff810b5ff1:       jne     0xffffffff810b5fbd <check_preempt_wakeup+0x22d>
    0.00 :   ffffffff810b5ff3:       xorl    %eax, %eax
    0.00 :   ffffffff810b5ff5:       cmpl    $0x5, 0x558(%rbx)
    0.00 :   ffffffff810b5ffc:       sete    %al
    0.00 :   ffffffff810b5fff:       jmp     0xffffffff810b5fca <check_preempt_wakeup+0x23a>
    0.00 :   ffffffff810b6001:       xorl    %edx, %edx
    0.00 :   ffffffff810b6003:       cmpl    $0x5, 0x558(%r12)
    0.00 :   ffffffff810b600c:       movq    0x80(%rbx), %rax
    0.00 :   ffffffff810b6013:       sete    %dl
    0.00 :   ffffffff810b6016:       testq   %rax, %rax
    0.00 :   ffffffff810b6019:       jne     0xffffffff810b5e92 <check_preempt_wakeup+0x102>
    0.00 :   ffffffff810b601f:       xorl    %eax, %eax
    0.00 :   ffffffff810b6021:       cmpl    $0x5, 0x558(%rbx)
    0.00 :   ffffffff810b6028:       sete    %al
    0.00 :   ffffffff810b602b:       jmp     0xffffffff810b5e9f <check_preempt_wakeup+0x10f>
    0.00 :   ffffffff810b6030:       ud2
    0.00 :   ffffffff810b6032:       jmp     0xffffffff810b5e62 <check_preempt_wakeup+0xd2>
    0.00 :   ffffffff810b6037:       movq    %rbx, %rdx
    0.00 :   ffffffff810b603a:       movl    $0x100000, %esi # imm = 0x100000
    0.00 :   ffffffff810b603f:       movq    %rcx, -0x30(%rbp)
    0.00 :   ffffffff810b6043:       callq   0xffffffff810b3350 <__calc_delta>
    0.00 :   ffffffff810b6048:       movq    -0x30(%rbp), %rcx
    0.00 :   ffffffff810b604c:       movq    %rax, %rdi
    0.00 :   ffffffff810b604f:       jmp     0xffffffff810b5fb2 <check_preempt_wakeup+0x222>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000098c30 <strndup>:
         : 5     ; strndup():
   49.11 :   98c30:          pushq   %rbp
    0.00 :   98c31:          pushq   %rbx
    0.00 :   98c32:          movq    %rdi, %rbp
    0.00 :   98c35:          subq    $0x8, %rsp
    0.00 :   98c39:          callq   0x22010 <.plt+0x10>
    0.00 :   98c3e:          leaq    0x1(%rax), %rdi
    0.00 :   98c42:          movq    %rax, %rbx
    0.00 :   98c45:          callq   0x223a8 <.plt.got+0x8>
    0.00 :   98c4a:          testq   %rax, %rax
    0.00 :   98c4d:          je      0x98c67 <strndup+0x37>
    0.00 :   98c4f:          movb    $0x0, (%rax,%rbx)
    0.00 :   98c53:          addq    $0x8, %rsp
    0.00 :   98c57:          movq    %rbx, %rdx
    0.00 :   98c5a:          movq    %rbp, %rsi
    0.00 :   98c5d:          movq    %rax, %rdi
    0.00 :   98c60:          popq    %rbx
    0.00 :   98c61:          popq    %rbp
   50.89 :   98c62:          jmp     0x222b0 <_dl_audit_symbind_alt@plt+0x40>
    0.00 :   98c67:          popq    %rdx
    0.00 :   98c68:          xorl    %eax, %eax
    0.00 :   98c6a:          popq    %rbx
    0.00 :   98c6b:          popq    %rbp
    0.00 :   98c6c:          retq
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b2210 <try_to_wake_up>:
         : 5                ; try_to_wake_up():
    0.00 :   ffffffff810b2210:       pushq   %rbp
    0.00 :   ffffffff810b2211:       movq    %rsp, %rbp
    0.00 :   ffffffff810b2214:       subq    $0x48, %rsp
    0.00 :   ffffffff810b2218:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff810b221c:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff810b2220:       movq    %rdi, %rbx
    0.00 :   ffffffff810b2223:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff810b2227:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff810b222b:       movl    %esi, %r15d
    0.00 :   ffffffff810b222e:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff810b2232:       movq    %gs:0x28, %rax
    0.00 :   ffffffff810b223b:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff810b223f:       xorl    %eax, %eax
    0.00 :   ffffffff810b2241:       incl    %gs:0x7ef704c0(%rip)
    0.00 :   ffffffff810b2248:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810b2251:       cmpq    %rax, %rdi
    0.00 :   ffffffff810b2254:       je      0xffffffff810b241b <try_to_wake_up+0x20b>
    0.00 :   ffffffff810b225a:       leaq    0x8a8(%rdi), %r14
    0.00 :   ffffffff810b2261:       movl    %edx, %r12d
    0.00 :   ffffffff810b2264:       movq    %r14, %rdi
    0.00 :   ffffffff810b2267:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff810b226c:       movq    %rax, %r13
    0.00 :   ffffffff810b226f:       movl    0x18(%rbx), %eax
    0.00 :   ffffffff810b2272:       testl   %eax, %r15d
    0.00 :   ffffffff810b2275:       jne     0xffffffff810b22c6 <try_to_wake_up+0xb6>
    0.00 :   ffffffff810b2277:       movq    %r13, %rsi
    0.00 :   ffffffff810b227a:       movq    %r14, %rdi
    0.00 :   ffffffff810b227d:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810b2282:       xorl    %eax, %eax
    0.00 :   ffffffff810b2284:       decl    %gs:0x7ef7047d(%rip)
    0.00 :   ffffffff810b228b:       je      0xffffffff810b24be <try_to_wake_up+0x2ae>
    0.00 :   ffffffff810b2291:       movq    -0x30(%rbp), %rdx
    0.00 :   ffffffff810b2295:       subq    %gs:0x28, %rdx
    0.00 :   ffffffff810b229e:       jne     0xffffffff810b259e <try_to_wake_up+0x38e>
    0.00 :   ffffffff810b22a4:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff810b22a8:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff810b22ac:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff810b22b0:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff810b22b4:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff810b22b8:       leave
    0.00 :   ffffffff810b22b9:       xorl    %edx, %edx
    0.00 :   ffffffff810b22bb:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b22bd:       xorl    %esi, %esi
    0.00 :   ffffffff810b22bf:       xorl    %edi, %edi
    0.00 :   ffffffff810b22c1:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b22c6:       movl    0xdc(%rbx), %eax
    0.00 :   ffffffff810b22cc:       testl   %eax, %eax
    0.00 :   ffffffff810b22ce:       jne     0xffffffff810b2475 <try_to_wake_up+0x265>
    0.00 :   ffffffff810b22d4:       movl    $0x200, 0x18(%rbx) # imm = 0x200
    0.00 :   ffffffff810b22db:       movl    0x844(%rbx), %eax
    0.00 :   ffffffff810b22e1:       testl   %eax, %eax
    0.00 :   ffffffff810b22e3:       je      0xffffffff810b22ec <try_to_wake_up+0xdc>
    0.00 :   ffffffff810b22e5:       jmp     0xffffffff810b24a3 <try_to_wake_up+0x293>
    0.00 :   ffffffff810b22ea:       pause
    0.00 :   ffffffff810b22ec:       movl    0x844(%rbx), %eax
    0.00 :   ffffffff810b22f2:       testl   %eax, %eax
    0.00 :   ffffffff810b22f4:       jne     0xffffffff810b22ea <try_to_wake_up+0xda>
    0.00 :   ffffffff810b22f6:       cmpl    $0x1, 0x6d8(%rbx)
    0.00 :   ffffffff810b22fd:       movl    0x74c(%rbx), %esi
    0.00 :   ffffffff810b2303:       jle     0xffffffff810b2313 <try_to_wake_up+0x103>
    0.00 :   ffffffff810b2305:       cmpw    $0x0, 0x6e0(%rbx)
    0.00 :   ffffffff810b230d:       je      0xffffffff810b243a <try_to_wake_up+0x22a>
    0.00 :   ffffffff810b2313:       movl    0x12b4747(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b2319:       movq    0x2e8(%rbx), %rdi
    0.00 :   ffffffff810b2320:       callq   0xffffffff815a0660 <_find_first_bit>
    0.00 :   ffffffff810b2325:       movl    %eax, %ecx
    0.00 :   ffffffff810b2327:       movq    0x2e8(%rbx), %rax
    0.00 :   ffffffff810b232e:       movl    %ecx, %r15d
    0.00 :   ffffffff810b2331:       btq     %r15, (%rax)
    0.00 :   ffffffff810b2335:       jae     0xffffffff810b2376 <try_to_wake_up+0x166>
    0.00 :   ffffffff810b2337:       cmpw    $0x0, 0x6e0(%rbx)
    0.00 :   ffffffff810b233f:       jne     0xffffffff810b245a <try_to_wake_up+0x24a>
    0.00 :   ffffffff810b2345:       testb   $0x20, 0x356(%rbx)
    0.00 :   ffffffff810b234c:       je      0xffffffff810b2544 <try_to_wake_up+0x334>
    0.00 :   ffffffff810b2352:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2355:       movl    %ecx, -0x40(%rbp)
   47.48 :   ffffffff810b2358:       callq   0xffffffff810985a0 <kthread_is_per_cpu>
    0.00 :   ffffffff810b235d:       testb   %al, %al
    0.00 :   ffffffff810b235f:       movl    -0x40(%rbp), %ecx
    0.00 :   ffffffff810b2362:       jne     0xffffffff810b245a <try_to_wake_up+0x24a>
    0.00 :   ffffffff810b2368:       btq     %r15, 0x12b44d0(%rip) # 0xffffffff82366840 <__cpu_dying_mask>
    0.00 :   ffffffff810b2370:       jae     0xffffffff810b245a <try_to_wake_up+0x24a>
    0.00 :   ffffffff810b2376:       movl    0x14(%rbx), %edi
    0.00 :   ffffffff810b2379:       movq    %rbx, %rsi
    0.00 :   ffffffff810b237c:       callq   0xffffffff810a7fe0 <select_fallback_rq>
    0.00 :   ffffffff810b2381:       movl    %eax, %ecx
    0.00 :   ffffffff810b2383:       movl    0x14(%rbx), %eax
    0.00 :   ffffffff810b2386:       movq    $0x22f40, %r15  # imm = 0x22F40
    0.00 :   ffffffff810b238d:       cmpl    %ecx, %eax
    0.00 :   ffffffff810b238f:       je      0xffffffff810b23b7 <try_to_wake_up+0x1a7>
    0.00 :   ffffffff810b2391:       testb   $0x4, 0x294(%rbx)
    0.00 :   ffffffff810b2398:       jne     0xffffffff810b250a <try_to_wake_up+0x2fa>
    0.00 :   ffffffff810b239e:       orl     $0x20, %r12d
    0.00 :   ffffffff810b23a2:       jmp     0xffffffff810b24c8 <try_to_wake_up+0x2b8>
    0.00 :   ffffffff810b23a7:       movl    %ecx, %esi
    0.00 :   ffffffff810b23a9:       movq    %rbx, %rdi
    0.00 :   ffffffff810b23ac:       movl    %ecx, -0x40(%rbp)
    0.00 :   ffffffff810b23af:       callq   0xffffffff810ab8a0 <set_task_cpu>
    0.00 :   ffffffff810b23b4:       movl    -0x40(%rbp), %ecx
    0.00 :   ffffffff810b23b7:       movslq  %ecx, %rax
    0.00 :   ffffffff810b23ba:       movl    %r12d, %edx
    0.00 :   ffffffff810b23bd:       movl    %ecx, %esi
    0.00 :   ffffffff810b23bf:       movq    -0x7dedc720(,%rax,8), %rax
    0.00 :   ffffffff810b23c7:       movq    %rbx, %rdi
    0.00 :   ffffffff810b23ca:       movq    %rax, -0x40(%rbp)
    0.00 :   ffffffff810b23ce:       callq   0xffffffff810a7170 <ttwu_queue_wakelist>
    0.00 :   ffffffff810b23d3:       testb   %al, %al
    0.00 :   ffffffff810b23d5:       jne     0xffffffff810b240e <try_to_wake_up+0x1fe>
    0.00 :   ffffffff810b23d7:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff810b23db:       addq    %rax, %r15
    0.00 :   ffffffff810b23de:       movq    %r15, %rdi
    0.00 :   ffffffff810b23e1:       callq   0xffffffff810a6c70 <raw_spin_rq_lock_nested.constprop.0>
    0.00 :   ffffffff810b23e6:       testb   $0x2, 0x998(%r15)
    0.00 :   ffffffff810b23ee:       jne     0xffffffff810b23f8 <try_to_wake_up+0x1e8>
    0.00 :   ffffffff810b23f0:       movq    %r15, %rdi
    0.00 :   ffffffff810b23f3:       callq   0xffffffff810a6870 <update_rq_clock.part.0>
    0.00 :   ffffffff810b23f8:       movq    %r15, %rdi
    0.00 :   ffffffff810b23fb:       movl    %r12d, %edx
    0.00 :   ffffffff810b23fe:       movq    %rbx, %rsi
    0.00 :   ffffffff810b2401:       callq   0xffffffff810b1fb0 <ttwu_do_activate.constprop.0>
    0.00 :   ffffffff810b2406:       movq    %r15, %rdi
    0.00 :   ffffffff810b2409:       callq   0xffffffff810a84a0 <raw_spin_rq_unlock>
    0.00 :   ffffffff810b240e:       movq    %r13, %rsi
    0.00 :   ffffffff810b2411:       movq    %r14, %rdi
    0.00 :   ffffffff810b2414:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff810b2419:       jmp     0xffffffff810b242d <try_to_wake_up+0x21d>
    0.00 :   ffffffff810b241b:       movl    0x18(%rdi), %eax
    0.00 :   ffffffff810b241e:       testl   %eax, %esi
    0.00 :   ffffffff810b2420:       je      0xffffffff810b2282 <try_to_wake_up+0x72>
    0.00 :   ffffffff810b2426:       movl    $0x0, 0x18(%rdi)
    0.00 :   ffffffff810b242d:       movl    0x14(%rbx), %eax
    0.00 :   ffffffff810b2430:       movl    $0x1, %eax
    0.00 :   ffffffff810b2435:       jmp     0xffffffff810b2284 <try_to_wake_up+0x74>
    0.00 :   ffffffff810b243a:       movq    0xd0(%rbx), %rax
    0.00 :   ffffffff810b2441:       movl    %r12d, %edx
    0.00 :   ffffffff810b2444:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2447:       orl     $0x8, %edx
    0.00 :   ffffffff810b244a:       movq    0x50(%rax), %rax
   52.52 :   ffffffff810b244e:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff810b2453:       movl    %eax, %ecx
    0.00 :   ffffffff810b2455:       jmp     0xffffffff810b2327 <try_to_wake_up+0x117>
    0.00 :   ffffffff810b245a:       btq     %r15, 0x12b440e(%rip) # 0xffffffff82366870 <__cpu_online_mask>
    0.00 :   ffffffff810b2462:       setb    %al
    0.00 :   ffffffff810b2465:       testb   %al, %al
    0.00 :   ffffffff810b2467:       jne     0xffffffff810b2383 <try_to_wake_up+0x173>
    0.00 :   ffffffff810b246d:       nopl    (%rax)
    0.00 :   ffffffff810b2470:       jmp     0xffffffff810b2376 <try_to_wake_up+0x166>
    0.00 :   ffffffff810b2475:       leaq    -0x38(%rbp), %rsi
    0.00 :   ffffffff810b2479:       movq    %rbx, %rdi
    0.00 :   ffffffff810b247c:       movq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff810b2484:       callq   0xffffffff810a91f0 <__task_rq_lock>
    0.00 :   ffffffff810b2489:       cmpl    $0x1, 0xdc(%rbx)
    0.00 :   ffffffff810b2490:       movq    %rax, %rdi
    0.00 :   ffffffff810b2493:       je      0xffffffff810b2557 <try_to_wake_up+0x347>
    0.00 :   ffffffff810b2499:       callq   0xffffffff810a84a0 <raw_spin_rq_unlock>
    0.00 :   ffffffff810b249e:       jmp     0xffffffff810b22d4 <try_to_wake_up+0xc4>
    0.00 :   ffffffff810b24a3:       movl    0x14(%rbx), %esi
    0.00 :   ffffffff810b24a6:       movl    %r12d, %edx
    0.00 :   ffffffff810b24a9:       movq    %rbx, %rdi
    0.00 :   ffffffff810b24ac:       callq   0xffffffff810a7170 <ttwu_queue_wakelist>
    0.00 :   ffffffff810b24b1:       testb   %al, %al
    0.00 :   ffffffff810b24b3:       je      0xffffffff810b22ec <try_to_wake_up+0xdc>
    0.00 :   ffffffff810b24b9:       jmp     0xffffffff810b240e <try_to_wake_up+0x1fe>
    0.00 :   ffffffff810b24be:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff810b24c3:       jmp     0xffffffff810b2291 <try_to_wake_up+0x81>
    0.00 :   ffffffff810b24c8:       movl    0xf4(%rbx), %eax
    0.00 :   ffffffff810b24ce:       testl   %eax, %eax
    0.00 :   ffffffff810b24d0:       je      0xffffffff810b23a7 <try_to_wake_up+0x197>
    0.00 :   ffffffff810b24d6:       leaq    -0x38(%rbp), %rsi
    0.00 :   ffffffff810b24da:       movq    %rbx, %rdi
    0.00 :   ffffffff810b24dd:       movl    %ecx, -0x44(%rbp)
    0.00 :   ffffffff810b24e0:       callq   0xffffffff810a91f0 <__task_rq_lock>
    0.00 :   ffffffff810b24e5:       movl    0xf4(%rbx), %esi
    0.00 :   ffffffff810b24eb:       xorl    %edx, %edx
    0.00 :   ffffffff810b24ed:       movq    %rbx, %rdi
    0.00 :   ffffffff810b24f0:       movq    %rax, -0x40(%rbp)
    0.00 :   ffffffff810b24f4:       callq   0xffffffff810d5fd0 <psi_task_change>
    0.00 :   ffffffff810b24f9:       movq    -0x40(%rbp), %rdi
    0.00 :   ffffffff810b24fd:       callq   0xffffffff810a84a0 <raw_spin_rq_unlock>
    0.00 :   ffffffff810b2502:       movl    -0x44(%rbp), %ecx
    0.00 :   ffffffff810b2505:       jmp     0xffffffff810b23a7 <try_to_wake_up+0x197>
    0.00 :   ffffffff810b250a:       nop
    0.00 :   ffffffff810b250c:       movl    0x14(%rbx), %edx
    0.00 :   ffffffff810b250f:       movq    $0x22f40, %r15  # imm = 0x22F40
    0.00 :   ffffffff810b2516:       movq    %r15, %rax
    0.00 :   ffffffff810b2519:       addq    -0x7dedc720(,%rdx,8), %rax
    0.00 :   ffffffff810b2521:       lock
    0.00 :   ffffffff810b2522:       decl    0x9e8(%rax)
    0.00 :   ffffffff810b2528:       jmp     0xffffffff810b239e <try_to_wake_up+0x18e>
    0.00 :   ffffffff810b252d:       cmpq    $0x0, 0x40(%rbx)
    0.00 :   ffffffff810b2532:       je      0xffffffff810b250c <try_to_wake_up+0x2fc>
    0.00 :   ffffffff810b2534:       movq    %rbx, %rdi
    0.00 :   ffffffff810b2537:       movl    %ecx, -0x40(%rbp)
    0.00 :   ffffffff810b253a:       callq   0xffffffff81163d20 <__delayacct_blkio_end>
    0.00 :   ffffffff810b253f:       movl    -0x40(%rbp), %ecx
    0.00 :   ffffffff810b2542:       jmp     0xffffffff810b250c <try_to_wake_up+0x2fc>
    0.00 :   ffffffff810b2544:       btq     %r15, 0x12b4304(%rip) # 0xffffffff82366850 <__cpu_active_mask>
    0.00 :   ffffffff810b254c:       jb      0xffffffff810b2383 <try_to_wake_up+0x173>
    0.00 :   ffffffff810b2552:       jmp     0xffffffff810b2376 <try_to_wake_up+0x166>
    0.00 :   ffffffff810b2557:       movl    0x844(%rbx), %edx
    0.00 :   ffffffff810b255d:       testl   %edx, %edx
    0.00 :   ffffffff810b255f:       nop
    0.00 :   ffffffff810b2560:       je      0xffffffff810b2573 <try_to_wake_up+0x363>
    0.00 :   ffffffff810b2562:       movl    $0x0, 0x18(%rbx)
    0.00 :   ffffffff810b2569:       callq   0xffffffff810a84a0 <raw_spin_rq_unlock>
    0.00 :   ffffffff810b256e:       jmp     0xffffffff810b240e <try_to_wake_up+0x1fe>
    0.00 :   ffffffff810b2573:       testb   $0x2, 0x998(%rax)
    0.00 :   ffffffff810b257a:       jne     0xffffffff810b2589 <try_to_wake_up+0x379>
    0.00 :   ffffffff810b257c:       movq    %rax, -0x40(%rbp)
    0.00 :   ffffffff810b2580:       callq   0xffffffff810a6870 <update_rq_clock.part.0>
    0.00 :   ffffffff810b2585:       movq    -0x40(%rbp), %rdi
    0.00 :   ffffffff810b2589:       movl    %r12d, %edx
    0.00 :   ffffffff810b258c:       movq    %rbx, %rsi
    0.00 :   ffffffff810b258f:       movq    %rdi, -0x40(%rbp)
    0.00 :   ffffffff810b2593:       callq   0xffffffff810ab5a0 <check_preempt_curr>
    0.00 :   ffffffff810b2598:       movq    -0x40(%rbp), %rdi
    0.00 :   ffffffff810b259c:       jmp     0xffffffff810b2562 <try_to_wake_up+0x352>
    0.00 :   ffffffff810b259e:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of bridge.ko for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    00000000000070e0 <br_handle_frame_finish>:
         : 5    ; br_handle_frame_finish():
    0.00 :   70e0:           pushq   %rbp
    0.00 :   70e1:           movq    %rsp, %rbp
    0.00 :   70e4:           addq    $-0x80, %rsp
    0.00 :   70e8:           movq    %rbx, -0x28(%rbp)
    0.00 :   70ec:           movq    %r12, -0x20(%rbp)
    0.00 :   70f0:           movq    %rdx, %rbx
    0.00 :   70f3:           movq    %r13, -0x18(%rbp)
    0.00 :   70f7:           movq    %r14, -0x10(%rbp)
    0.00 :   70fb:           movq    %r15, -0x8(%rbp)
    0.00 :   70ff:           movq    %gs:0x28, %rax
    0.00 :   7108:           movq    %rax, -0x30(%rbp)
    0.00 :   710c:           xorl    %eax, %eax
    0.00 :   710e:           movq    0x10(%rdx), %rax
    0.00 :   7112:           movq    $0x0, -0x70(%rbp)
    0.00 :   711a:           movq    $0x0, -0x68(%rbp)
    0.00 :   7122:           movq    $0x0, -0x60(%rbp)
    0.00 :   712a:           movw    $0x0, -0x72(%rbp)
    0.00 :   7130:           movb    $0x0, -0x73(%rbp)
    0.00 :   7134:           movq    0x328(%rax), %r12
    0.00 :   713b:           testq   %r12, %r12
    0.00 :   713e:           je      0x7308 <br_handle_frame_finish+0x228>
    0.00 :   7144:           movq    (%r12), %r13
    0.00 :   7148:           nopl    (%rax,%rax)
    0.00 :   714d:           movzbl  0x39(%r12), %eax
    0.00 :   7153:           testb   %al, %al
    0.00 :   7155:           je      0x7308 <br_handle_frame_finish+0x228>
    0.00 :   715b:           movb    %al, -0x73(%rbp)
    0.00 :   715e:           leaq    0x210(%r13), %rax
    0.00 :   7165:           movq    0x28(%r12), %rsi
    0.00 :   716a:           leaq    -0x60(%rbp), %r9
    0.00 :   716e:           leaq    -0x73(%rbp), %r8
    0.00 :   7172:           leaq    -0x72(%rbp), %rcx
    0.00 :   7176:           movq    %rax, -0x68(%rbp)
    0.00 :   717a:           leaq    0x130(%r12), %rax
    0.00 :   7182:           movq    %rbx, %rdx
    0.00 :   7185:           movq    %rax, -0x70(%rbp)
    0.00 :   7189:           movq    (%r12), %rdi
    0.00 :   718d:           callq   0x7192 <br_handle_frame_finish+0xb2>
    0.00 :   7192:           testb   %al, %al
    0.00 :   7194:           movl    %eax, %r14d
    0.00 :   7197:           je      0x7315 <br_handle_frame_finish+0x235>
    0.00 :   719d:           movq    0x20(%r12), %rdx
    0.00 :   71a2:           movzwl  0xb2(%rbx), %ecx
    0.00 :   71a9:           movq    0xc0(%rbx), %rax
    0.00 :   71b0:           testl   $0x200000, %edx         # imm = 0x200000
    0.00 :   71b6:           jne     0x72e1 <br_handle_frame_finish+0x201>
    0.00 :   71bc:           andl    $0x20, %edx
    0.00 :   71bf:           jne     0x73ac <br_handle_frame_finish+0x2cc>
    0.00 :   71c5:           movq    0x10(%r13), %rdx
    0.00 :   71c9:           movl    0xc0(%rdx), %r15d
    0.00 :   71d0:           movzwl  0xb2(%rbx), %edx
    0.00 :   71d7:           shrl    $0x8, %r15d
    0.00 :   71db:           addq    %rdx, %rax
    0.00 :   71de:           andl    $0x1, %r15d
   46.14 :   71e2:           movl    (%rax), %edx
    0.00 :   71e4:           andl    $0x1, %edx
    0.00 :   71e7:           jne     0x736e <br_handle_frame_finish+0x28e>
   53.86 :   71ed:           xorl    %r10d, %r10d
    0.00 :   71f0:           cmpb    $0x2, -0x73(%rbp)
    0.00 :   71f4:           je      0x7308 <br_handle_frame_finish+0x228>
    0.00 :   71fa:           movq    0x10(%r13), %rax
    0.00 :   71fe:           movzbl  0x33(%rbx), %edx
    0.00 :   7202:           movq    %rax, 0x28(%rbx)
    0.00 :   7206:           movq    0x20(%r12), %rax
    0.00 :   720b:           andl    $-0x5, %edx
    0.00 :   720e:           shrq    $0x10, %rax
    0.00 :   7212:           andl    $0x1, %eax
    0.00 :   7215:           shll    $0x2, %eax
    0.00 :   7218:           orl     %edx, %eax
    0.00 :   721a:           movb    %al, 0x33(%rbx)
    0.00 :   721d:           movzwl  0xac(%rbx), %eax
    0.00 :   7224:           cmpw    $0x608, %ax             # imm = 0x608
    0.00 :   7228:           je      0x7467 <br_handle_frame_finish+0x387>
    0.00 :   722e:           cmpw    $0x3580, %ax            # imm = 0x3580
    0.00 :   7232:           je      0x7467 <br_handle_frame_finish+0x387>
    0.00 :   7238:           cmpw    $0xdd86, %ax            # imm = 0xDD86
    0.00 :   723c:           je      0x753a <br_handle_frame_finish+0x45a>
    0.00 :   7242:           testl   %r10d, %r10d
    0.00 :   7245:           movzwl  -0x72(%rbp), %edx
    0.00 :   7249:           je      0x7412 <br_handle_frame_finish+0x332>
    0.00 :   724f:           cmpl    $0x1, %r10d
    0.00 :   7253:           jne     0x73e4 <br_handle_frame_finish+0x304>
    0.00 :   7259:           movq    -0x68(%rbp), %rdi
    0.00 :   725d:           movq    %rbx, %rsi
    0.00 :   7260:           movl    %r10d, -0x7c(%rbp)
    0.00 :   7264:           callq   0x7269 <br_handle_frame_finish+0x189>
    0.00 :   7269:           testq   %rax, %rax
    0.00 :   726c:           movl    -0x7c(%rbp), %r10d
    0.00 :   7270:           movq    %rax, %rdi
    0.00 :   7273:           je      0x74b8 <br_handle_frame_finish+0x3d8>
    0.00 :   7279:           movzwl  0xb2(%rbx), %eax
    0.00 :   7280:           movq    0xc0(%rbx), %rcx
    0.00 :   7287:           movq    -0x68(%rbp), %rdx
    0.00 :   728b:           movzwl  0xc(%rcx,%rax), %eax
    0.00 :   7290:           cmpw    $0x8, %ax
    0.00 :   7294:           je      0x7655 <br_handle_frame_finish+0x575>
    0.00 :   729a:           cmpw    $0xdd86, %ax            # imm = 0xDD86
    0.00 :   729e:           je      0x74e5 <br_handle_frame_finish+0x405>
    0.00 :   72a4:           cmpw    $0x0, 0x38(%rdi)
    0.00 :   72a9:           jne     0x751e <br_handle_frame_finish+0x43e>
    0.00 :   72af:           cmpb    $0x0, 0x3c(%rdi)
    0.00 :   72b3:           jne     0x75c7 <br_handle_frame_finish+0x4e7>
    0.00 :   72b9:           movzbl  0x1a(%rdx), %eax
    0.00 :   72bd:           cmpb    $0x1, %al
    0.00 :   72bf:           je      0x76b0 <br_handle_frame_finish+0x5d0>
    0.00 :   72c5:           cmpb    $0x2, %al
    0.00 :   72c7:           je      0x75c7 <br_handle_frame_finish+0x4e7>
    0.00 :   72cd:           movzbl  %r15b, %ecx
    0.00 :   72d1:           xorl    %r8d, %r8d
    0.00 :   72d4:           movq    %rbx, %rsi
    0.00 :   72d7:           callq   0x72dc <br_handle_frame_finish+0x1fc>
    0.00 :   72dc:           jmp     0x73fc <br_handle_frame_finish+0x31c>
    0.00 :   72e1:           movzwl  -0x72(%rbp), %edx
    0.00 :   72e5:           leaq    0x6(%rax,%rcx), %rsi
    0.00 :   72ea:           movq    %r13, %rdi
    0.00 :   72ed:           callq   0x72f2 <br_handle_frame_finish+0x212>
    0.00 :   72f2:           testq   %rax, %rax
    0.00 :   72f5:           je      0x75e7 <br_handle_frame_finish+0x507>
    0.00 :   72fb:           movq    0x8(%rax), %rdx
    0.00 :   72ff:           cmpq    %r12, %rdx
    0.00 :   7302:           je      0x7486 <br_handle_frame_finish+0x3a6>
    0.00 :   7308:           movl    $0x2, %esi
    0.00 :   730d:           movq    %rbx, %rdi
    0.00 :   7310:           callq   0x7315 <br_handle_frame_finish+0x235>
    0.00 :   7315:           xorl    %eax, %eax
    0.00 :   7317:           movq    -0x30(%rbp), %rdx
    0.00 :   731b:           subq    %gs:0x28, %rdx
    0.00 :   7324:           jne     0x7735 <br_handle_frame_finish+0x655>
    0.00 :   732a:           movq    -0x28(%rbp), %rbx
    0.00 :   732e:           movq    -0x20(%rbp), %r12
    0.00 :   7332:           movq    -0x18(%rbp), %r13
    0.00 :   7336:           movq    -0x10(%rbp), %r14
    0.00 :   733a:           movq    -0x8(%rbp), %r15
    0.00 :   733e:           leave
    0.00 :   733f:           xorl    %edx, %edx
    0.00 :   7341:           xorl    %ecx, %ecx
    0.00 :   7343:           xorl    %esi, %esi
    0.00 :   7345:           xorl    %edi, %edi
    0.00 :   7347:           xorl    %r8d, %r8d
    0.00 :   734a:           xorl    %r9d, %r9d
    0.00 :   734d:           xorl    %r10d, %r10d
    0.00 :   7350:           jmp     0x7355 <br_handle_frame_finish+0x275>
    0.00 :   7355:           movq    0x18(%r13), %rax
    0.00 :   7359:           testl   $0x10000, %eax          # imm = 0x10000
    0.00 :   735e:           je      0x714d <br_handle_frame_finish+0x6d>
    0.00 :   7364:           movl    $0x3, %eax
    0.00 :   7369:           jmp     0x715b <br_handle_frame_finish+0x7b>
    0.00 :   736e:           movzwl  (%rax), %ecx
    0.00 :   7371:           andw    0x2(%rax), %cx
    0.00 :   7375:           andw    0x4(%rax), %cx
    0.00 :   7379:           movl    %ecx, %eax
    0.00 :   737b:           incw    %ax
    0.00 :   737e:           je      0x73d6 <br_handle_frame_finish+0x2f6>
    0.00 :   7380:           movzwl  -0x72(%rbp), %r8d
    0.00 :   7385:           movq    -0x60(%rbp), %rdx
    0.00 :   7389:           leaq    -0x70(%rbp), %rsi
    0.00 :   738d:           leaq    -0x68(%rbp), %rdi
    0.00 :   7391:           movq    %rbx, %rcx
    0.00 :   7394:           callq   0x7399 <br_handle_frame_finish+0x2b9>
    0.00 :   7399:           testl   %eax, %eax
    0.00 :   739b:           movl    $0x1, %r10d
    0.00 :   73a1:           je      0x71f0 <br_handle_frame_finish+0x110>
    0.00 :   73a7:           jmp     0x7308 <br_handle_frame_finish+0x228>
    0.00 :   73ac:           movzwl  0xb2(%rbx), %edx
    0.00 :   73b3:           movzwl  -0x72(%rbp), %ecx
    0.00 :   73b7:           xorl    %r8d, %r8d
    0.00 :   73ba:           movq    %r12, %rsi
    0.00 :   73bd:           movq    %r13, %rdi
    0.00 :   73c0:           leaq    0x6(%rax,%rdx), %rdx
    0.00 :   73c5:           callq   0x73ca <br_handle_frame_finish+0x2ea>
    0.00 :   73ca:           movq    0xc0(%rbx), %rax
    0.00 :   73d1:           jmp     0x71c5 <br_handle_frame_finish+0xe5>
    0.00 :   73d6:           movl    %edx, %r15d
    0.00 :   73d9:           movl    $0x2, %r10d
    0.00 :   73df:           jmp     0x71f0 <br_handle_frame_finish+0x110>
    0.00 :   73e4:           movzbl  %r15b, %ecx
    0.00 :   73e8:           movl    %edx, %r9d
    0.00 :   73eb:           xorl    %r8d, %r8d
    0.00 :   73ee:           movl    %r10d, %edx
    0.00 :   73f1:           movq    %rbx, %rsi
    0.00 :   73f4:           movq    %r13, %rdi
    0.00 :   73f7:           callq   0x73fc <br_handle_frame_finish+0x31c>
    0.00 :   73fc:           testb   %r15b, %r15b
    0.00 :   73ff:           je      0x7315 <br_handle_frame_finish+0x235>
    0.00 :   7405:           movq    %rbx, %rdi
    0.00 :   7408:           callq   0x6dd0 <br_pass_frame_up>
    0.00 :   740d:           jmp     0x7317 <br_handle_frame_finish+0x237>
    0.00 :   7412:           movzwl  0xb2(%rbx), %esi
    0.00 :   7419:           movq    %r13, %rdi
    0.00 :   741c:           movl    %r10d, -0x7c(%rbp)
    0.00 :   7420:           addq    0xc0(%rbx), %rsi
    0.00 :   7427:           callq   0x742c <br_handle_frame_finish+0x34c>
    0.00 :   742c:           testq   %rax, %rax
    0.00 :   742f:           movl    -0x7c(%rbp), %r10d
    0.00 :   7433:           je      0x76e5 <br_handle_frame_finish+0x605>
    0.00 :   7439:           movq    (%rip), %rdx            # 0x7440 <br_handle_frame_finish+0x360>
    0.00 :   7440:           movq    0x28(%rax), %rcx
    0.00 :   7444:           andl    $0x1, %ecx
    0.00 :   7447:           jne     0x7405 <br_handle_frame_finish+0x325>
    0.00 :   7449:           cmpq    %rdx, 0x48(%rax)
    0.00 :   744d:           je      0x7453 <br_handle_frame_finish+0x373>
    0.00 :   744f:           movq    %rdx, 0x48(%rax)
    0.00 :   7453:           movq    0x8(%rax), %rdi
    0.00 :   7457:           movzbl  %r15b, %edx
    0.00 :   745b:           xorl    %ecx, %ecx
    0.00 :   745d:           movq    %rbx, %rsi
    0.00 :   7460:           callq   0x7465 <br_handle_frame_finish+0x385>
    0.00 :   7465:           jmp     0x73fc <br_handle_frame_finish+0x31c>
    0.00 :   7467:           movzwl  -0x72(%rbp), %edx
    0.00 :   746b:           movq    %r12, %rcx
    0.00 :   746e:           movq    %r13, %rsi
    0.00 :   7471:           movq    %rbx, %rdi
    0.00 :   7474:           movl    %r10d, -0x7c(%rbp)
    0.00 :   7478:           callq   0x747d <br_handle_frame_finish+0x39d>
    0.00 :   747d:           movl    -0x7c(%rbp), %r10d
    0.00 :   7481:           jmp     0x7242 <br_handle_frame_finish+0x162>
    0.00 :   7486:           movq    0x28(%rax), %rdx
    0.00 :   748a:           andl    $0x1, %edx
    0.00 :   748d:           jne     0x7308 <br_handle_frame_finish+0x228>
    0.00 :   7493:           movq    0x28(%rax), %rdx
    0.00 :   7497:           movzwl  0xb2(%rbx), %ecx
    0.00 :   749e:           movq    0xc0(%rbx), %rax
    0.00 :   74a5:           andb    $0x1, %dh
    0.00 :   74a8:           jne     0x768f <br_handle_frame_finish+0x5af>
    0.00 :   74ae:           movq    0x20(%r12), %rdx
    0.00 :   74b3:           jmp     0x71bc <br_handle_frame_finish+0xdc>
    0.00 :   74b8:           testb   $0x1, 0x33(%rbx)
    0.00 :   74bc:           je      0x751e <br_handle_frame_finish+0x43e>
    0.00 :   74be:           movzwl  0xb2(%rbx), %eax
    0.00 :   74c5:           movq    0xc0(%rbx), %rcx
    0.00 :   74cc:           movq    -0x68(%rbp), %rdx
    0.00 :   74d0:           movzwl  0xc(%rcx,%rax), %eax
    0.00 :   74d5:           cmpw    $0x8, %ax
    0.00 :   74d9:           je      0x7655 <br_handle_frame_finish+0x575>
    0.00 :   74df:           cmpw    $0xdd86, %ax            # imm = 0xDD86
    0.00 :   74e3:           jne     0x751e <br_handle_frame_finish+0x43e>
    0.00 :   74e5:           cmpb    $0x0, 0x18(%rdx)
    0.00 :   74e9:           movq    (%rdx), %rcx
    0.00 :   74ec:           movq    0x168(%rdx), %rax
    0.00 :   74f3:           je      0x761f <br_handle_frame_finish+0x53f>
    0.00 :   74f9:           movq    0x18(%rcx), %rcx
    0.00 :   74fd:           andb    $0x2, %ch
    0.00 :   7500:           je      0x761f <br_handle_frame_finish+0x53f>
    0.00 :   7506:           movq    $0x0, -0x50(%rbp)
    0.00 :   750e:           movq    (%rip), %rcx            # 0x7515 <br_handle_frame_finish+0x435>
    0.00 :   7515:           cmpq    %rcx, %rax
    0.00 :   7518:           js      0x7647 <br_handle_frame_finish+0x567>
    0.00 :   751e:           movq    0x10(%r13), %rax
    0.00 :   7522:           movzwl  -0x72(%rbp), %edx
    0.00 :   7526:           movl    %r14d, %r15d
    0.00 :   7529:           movl    $0x1, %ecx
    0.00 :   752e:           incq    0x178(%rax)
    0.00 :   7535:           jmp     0x73e8 <br_handle_frame_finish+0x308>
    0.00 :   753a:           movq    0x18(%r13), %rax
    0.00 :   753e:           testb   $0x4, %ah
    0.00 :   7541:           je      0x7242 <br_handle_frame_finish+0x162>
    0.00 :   7547:           movl    0x70(%rbx), %edx
    0.00 :   754a:           movl    0x74(%rbx), %eax
    0.00 :   754d:           movl    %edx, %ecx
    0.00 :   754f:           subl    %eax, %ecx
    0.00 :   7551:           cmpl    $0x3f, %ecx
    0.00 :   7554:           jbe     0x76f2 <br_handle_frame_finish+0x612>
    0.00 :   755a:           movzwl  0xb0(%rbx), %eax
    0.00 :   7561:           movq    0xc0(%rbx), %rdx
    0.00 :   7568:           cmpb    $0x3a, 0x6(%rdx,%rax)
    0.00 :   756d:           jne     0x7242 <br_handle_frame_finish+0x162>
    0.00 :   7573:           leaq    -0x48(%rbp), %rsi
    0.00 :   7577:           xorl    %eax, %eax
    0.00 :   7579:           movl    $0x6, %ecx
    0.00 :   757e:           movl    %r10d, -0x7c(%rbp)
    0.00 :   7582:           movq    %rsi, %rdi
    0.00 :   7585:           rep             stosl   %eax, %es:(%rdi)
    0.00 :   7587:           movq    %rbx, %rdi
    0.00 :   758a:           callq   0x758f <br_handle_frame_finish+0x4af>
    0.00 :   758f:           testq   %rax, %rax
    0.00 :   7592:           movl    -0x7c(%rbp), %r10d
    0.00 :   7596:           movq    %rax, %r8
    0.00 :   7599:           je      0x7242 <br_handle_frame_finish+0x162>
    0.00 :   759f:           movzwl  -0x72(%rbp), %edx
    0.00 :   75a3:           movq    %r12, %rcx
    0.00 :   75a6:           movq    %r13, %rsi
    0.00 :   75a9:           movq    %rbx, %rdi
    0.00 :   75ac:           callq   0x75b1 <br_handle_frame_finish+0x4d1>
    0.00 :   75b1:           movl    -0x7c(%rbp), %r10d
    0.00 :   75b5:           jmp     0x7242 <br_handle_frame_finish+0x162>
    0.00 :   75ba:           movq    0x60(%rdx), %rax
    0.00 :   75be:           testq   %rax, %rax
    0.00 :   75c1:           je      0x76d0 <br_handle_frame_finish+0x5f0>
    0.00 :   75c7:           movq    0x10(%r13), %rax
    0.00 :   75cb:           xorl    %r8d, %r8d
    0.00 :   75ce:           movl    $0x1, %ecx
    0.00 :   75d3:           movq    %rbx, %rsi
    0.00 :   75d6:           incq    0x178(%rax)
    0.00 :   75dd:           callq   0x75e2 <br_handle_frame_finish+0x502>
    0.00 :   75e2:           jmp     0x7405 <br_handle_frame_finish+0x325>
    0.00 :   75e7:           testb   $0x40, 0x22(%r12)
    0.00 :   75ed:           je      0x7308 <br_handle_frame_finish+0x228>
    0.00 :   75f3:           movzwl  0xb2(%rbx), %edx
    0.00 :   75fa:           movzwl  -0x72(%rbp), %ecx
    0.00 :   75fe:           movl    $0x100, %r8d            # imm = 0x100
    0.00 :   7604:           addq    0xc0(%rbx), %rdx
    0.00 :   760b:           movq    %r12, %rsi
    0.00 :   760e:           movq    %r13, %rdi
    0.00 :   7611:           addq    $0x6, %rdx
    0.00 :   7615:           callq   0x761a <br_handle_frame_finish+0x53a>
    0.00 :   761a:           jmp     0x7308 <br_handle_frame_finish+0x228>
    0.00 :   761f:           movq    $0x0, -0x50(%rbp)
    0.00 :   7627:           movq    (%rip), %rcx            # 0x762e <br_handle_frame_finish+0x54e>
    0.00 :   762e:           cmpq    %rcx, %rax
    0.00 :   7631:           jns     0x751e <br_handle_frame_finish+0x43e>
    0.00 :   7637:           movq    0x148(%rdx), %rax
    0.00 :   763e:           testq   %rax, %rax
    0.00 :   7641:           je      0x751e <br_handle_frame_finish+0x43e>
    0.00 :   7647:           testq   %rdi, %rdi
    0.00 :   764a:           jne     0x72af <br_handle_frame_finish+0x1cf>
    0.00 :   7650:           jmp     0x72b9 <br_handle_frame_finish+0x1d9>
    0.00 :   7655:           cmpb    $0x0, 0x18(%rdx)
    0.00 :   7659:           movq    $0x0, -0x58(%rbp)
    0.00 :   7661:           movq    0xa8(%rdx), %rax
    0.00 :   7668:           movq    (%rip), %rcx            # 0x766f <br_handle_frame_finish+0x58f>
    0.00 :   766f:           jne     0x7515 <br_handle_frame_finish+0x435>
    0.00 :   7675:           cmpq    %rcx, %rax
    0.00 :   7678:           jns     0x751e <br_handle_frame_finish+0x43e>
    0.00 :   767e:           movq    0x88(%rdx), %rax
    0.00 :   7685:           testq   %rax, %rax
    0.00 :   7688:           jne     0x7647 <br_handle_frame_finish+0x567>
    0.00 :   768a:           jmp     0x751e <br_handle_frame_finish+0x43e>
    0.00 :   768f:           movzwl  -0x72(%rbp), %esi
    0.00 :   7693:           leaq    0x6(%rax,%rcx), %rdx
    0.00 :   7698:           movl    $0x100, %r8d            # imm = 0x100
    0.00 :   769e:           movq    %r13, %rdi
    0.00 :   76a1:           movl    %esi, %ecx
    0.00 :   76a3:           movq    %r12, %rsi
    0.00 :   76a6:           callq   0x76ab <br_handle_frame_finish+0x5cb>
    0.00 :   76ab:           jmp     0x7308 <br_handle_frame_finish+0x228>
    0.00 :   76b0:           testq   %rbx, %rbx
    0.00 :   76b3:           je      0x75ba <br_handle_frame_finish+0x4da>
    0.00 :   76b9:           movzwl  0xac(%rbx), %eax
    0.00 :   76c0:           cmpw    $0x8, %ax
    0.00 :   76c4:           je      0x7720 <br_handle_frame_finish+0x640>
    0.00 :   76c6:           cmpw    $0xdd86, %ax            # imm = 0xDD86
    0.00 :   76ca:           jne     0x72cd <br_handle_frame_finish+0x1ed>
    0.00 :   76d0:           movq    0x120(%rdx), %rax
    0.00 :   76d7:           testq   %rax, %rax
    0.00 :   76da:           jne     0x75c7 <br_handle_frame_finish+0x4e7>
    0.00 :   76e0:           jmp     0x72cd <br_handle_frame_finish+0x1ed>
    0.00 :   76e5:           movzwl  -0x72(%rbp), %edx
    0.00 :   76e9:           movzbl  %r15b, %ecx
    0.00 :   76ed:           jmp     0x73e8 <br_handle_frame_finish+0x308>
    0.00 :   76f2:           cmpl    $0x3f, %edx
    0.00 :   76f5:           jbe     0x7242 <br_handle_frame_finish+0x162>
    0.00 :   76fb:           addl    $0x40, %eax
    0.00 :   76fe:           movq    %rbx, %rdi
    0.00 :   7701:           movl    %r10d, -0x7c(%rbp)
    0.00 :   7705:           subl    %edx, %eax
    0.00 :   7707:           movl    %eax, %esi
    0.00 :   7709:           callq   0x770e <br_handle_frame_finish+0x62e>
    0.00 :   770e:           testq   %rax, %rax
    0.00 :   7711:           movl    -0x7c(%rbp), %r10d
    0.00 :   7715:           jne     0x755a <br_handle_frame_finish+0x47a>
    0.00 :   771b:           jmp     0x7242 <br_handle_frame_finish+0x162>
    0.00 :   7720:           movq    0x60(%rdx), %rax
    0.00 :   7724:           testq   %rax, %rax
    0.00 :   7727:           je      0x72cd <br_handle_frame_finish+0x1ed>
    0.00 :   772d:           nopl    (%rax)
    0.00 :   7730:           jmp     0x75c7 <br_handle_frame_finish+0x4e7>
    0.00 :   7735:           callq   0x773a <br_handle_frame_finish+0x65a>
 Percent |	Source code & Disassembly of elf for cycles (3 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81112730 <hrtimer_active>:
         : 5                ; hrtimer_active():
  100.00 :   ffffffff81112730:       pushq   %rbp
    0.00 :   ffffffff81112731:       movq    %rsp, %rbp
    0.00 :   ffffffff81112734:       movq    0x30(%rdi), %rdx
    0.00 :   ffffffff81112738:       movl    0x10(%rdx), %eax
    0.00 :   ffffffff8111273b:       testb   $0x1, %al
    0.00 :   ffffffff8111273d:       je      0xffffffff81112748 <hrtimer_active+0x18>
    0.00 :   ffffffff8111273f:       pause
    0.00 :   ffffffff81112741:       movl    0x10(%rdx), %eax
    0.00 :   ffffffff81112744:       testb   $0x1, %al
    0.00 :   ffffffff81112746:       jne     0xffffffff8111273f <hrtimer_active+0xf>
    0.00 :   ffffffff81112748:       cmpb    $0x0, 0x38(%rdi)
    0.00 :   ffffffff8111274c:       jne     0xffffffff81112772 <hrtimer_active+0x42>
    0.00 :   ffffffff8111274e:       cmpq    %rdi, 0x18(%rdx)
    0.00 :   ffffffff81112752:       je      0xffffffff81112772 <hrtimer_active+0x42>
    0.00 :   ffffffff81112754:       movl    0x10(%rdx), %ecx
    0.00 :   ffffffff81112757:       cmpl    %eax, %ecx
    0.00 :   ffffffff81112759:       jne     0xffffffff81112734 <hrtimer_active+0x4>
    0.00 :   ffffffff8111275b:       movq    0x30(%rdi), %rax
    0.00 :   ffffffff8111275f:       cmpq    %rax, %rdx
    0.00 :   ffffffff81112762:       jne     0xffffffff81112734 <hrtimer_active+0x4>
    0.00 :   ffffffff81112764:       xorl    %eax, %eax
    0.00 :   ffffffff81112766:       popq    %rbp
    0.00 :   ffffffff81112767:       xorl    %edx, %edx
    0.00 :   ffffffff81112769:       xorl    %ecx, %ecx
    0.00 :   ffffffff8111276b:       xorl    %edi, %edi
    0.00 :   ffffffff8111276d:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81112772:       movl    $0x1, %eax
    0.00 :   ffffffff81112777:       popq    %rbp
    0.00 :   ffffffff81112778:       xorl    %edx, %edx
    0.00 :   ffffffff8111277a:       xorl    %ecx, %ecx
    0.00 :   ffffffff8111277c:       xorl    %edi, %edi
    0.00 :   ffffffff8111277e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8104cdc0 <apic_ack_edge>:
         : 5                ; apic_ack_edge():
    0.00 :   ffffffff8104cdc0:       pushq   %rbp
  100.00 :   ffffffff8104cdc1:       movq    %rsp, %rbp
    0.00 :   ffffffff8104cdc4:       pushq   %rbx
    0.00 :   ffffffff8104cdc5:       movq    %rdi, %rbx
    0.00 :   ffffffff8104cdc8:       testq   %rdi, %rdi
    0.00 :   ffffffff8104cdcb:       je      0xffffffff8104ce37 <apic_ack_edge+0x77>
    0.00 :   ffffffff8104cdcd:       movq    %rdi, %rax
    0.00 :   ffffffff8104cdd0:       movq    %rax, %rdx
    0.00 :   ffffffff8104cdd3:       movq    0x28(%rax), %rax
    0.00 :   ffffffff8104cdd7:       testq   %rax, %rax
    0.00 :   ffffffff8104cdda:       jne     0xffffffff8104cdd0 <apic_ack_edge+0x10>
    0.00 :   ffffffff8104cddc:       movq    0x30(%rdx), %rdi
    0.00 :   ffffffff8104cde0:       testb   $0x1, 0x30(%rdi)
    0.00 :   ffffffff8104cde4:       jne     0xffffffff8104ce19 <apic_ack_edge+0x59>
    0.00 :   ffffffff8104cde6:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff8104cdea:       movl    (%rax), %eax
    0.00 :   ffffffff8104cdec:       testb   $0x1, %ah
    0.00 :   ffffffff8104cdef:       jne     0xffffffff8104ce2c <apic_ack_edge+0x6c>
    0.00 :   ffffffff8104cdf1:       movq    0x10d7088(%rip), %rax # 0xffffffff82123e80 <apic>
    0.00 :   ffffffff8104cdf8:       xorl    %esi, %esi
    0.00 :   ffffffff8104cdfa:       movl    $0xb0, %edi
    0.00 :   ffffffff8104cdff:       movq    (%rax), %rax
    0.00 :   ffffffff8104ce02:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8104ce07:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff8104ce0b:       leave
    0.00 :   ffffffff8104ce0c:       xorl    %eax, %eax
    0.00 :   ffffffff8104ce0e:       xorl    %edx, %edx
    0.00 :   ffffffff8104ce10:       xorl    %esi, %esi
    0.00 :   ffffffff8104ce12:       xorl    %edi, %edi
    0.00 :   ffffffff8104ce14:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8104ce19:       movl    %gs:0x7efd58ec(%rip), %eax
    0.00 :   ffffffff8104ce20:       cmpl    %eax, 0x10(%rdi)
    0.00 :   ffffffff8104ce23:       jne     0xffffffff8104cde6 <apic_ack_edge+0x26>
    0.00 :   ffffffff8104ce25:       callq   0xffffffff8104c5e0 <__send_cleanup_vector>
    0.00 :   ffffffff8104ce2a:       jmp     0xffffffff8104cde6 <apic_ack_edge+0x26>
    0.00 :   ffffffff8104ce2c:       movq    %rbx, %rdi
    0.00 :   ffffffff8104ce2f:       nop
    0.00 :   ffffffff8104ce30:       callq   0xffffffff810ec680 <__irq_move_irq>
    0.00 :   ffffffff8104ce35:       jmp     0xffffffff8104cdf1 <apic_ack_edge+0x31>
    0.00 :   ffffffff8104ce37:       xorl    %edi, %edi
    0.00 :   ffffffff8104ce39:       jmp     0xffffffff8104cde0 <apic_ack_edge+0x20>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81112e60 <hrtimer_update_next_event>:
         : 5                ; hrtimer_update_next_event():
    0.00 :   ffffffff81112e60:       pushq   %rbp
   52.73 :   ffffffff81112e61:       movq    %rsp, %rbp
    0.00 :   ffffffff81112e64:       subq    $0x18, %rsp
    0.00 :   ffffffff81112e68:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff81112e6c:       movq    %r12, -0x10(%rbp)
    0.00 :   ffffffff81112e70:       movq    %rdi, %rbx
    0.00 :   ffffffff81112e73:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff81112e77:       testb   $0x8, 0x10(%rdi)
    0.00 :   ffffffff81112e7b:       movl    0x8(%rdi), %edx
    0.00 :   ffffffff81112e7e:       je      0xffffffff81112ebc <hrtimer_update_next_event+0x5c>
    0.00 :   ffffffff81112e80:       movq    $0x0, 0x28(%rdi)
    0.00 :   ffffffff81112e88:       andl    $0xf, %edx
    0.00 :   ffffffff81112e8b:       movabsq $0x7fffffffffffffff, %rcx # imm = 0x7FFFFFFFFFFFFFFF
    0.00 :   ffffffff81112e95:       xorl    %esi, %esi
    0.00 :   ffffffff81112e97:       callq   0xffffffff81112ae0 <__hrtimer_next_event_base>
    0.00 :   ffffffff81112e9c:       movq    %rax, %r12
    0.00 :   ffffffff81112e9f:       movq    %r12, %rax
    0.00 :   ffffffff81112ea2:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff81112ea6:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff81112eaa:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff81112eae:       leave
    0.00 :   ffffffff81112eaf:       xorl    %edx, %edx
    0.00 :   ffffffff81112eb1:       xorl    %ecx, %ecx
    0.00 :   ffffffff81112eb3:       xorl    %esi, %esi
    0.00 :   ffffffff81112eb5:       xorl    %edi, %edi
    0.00 :   ffffffff81112eb7:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81112ebc:       movabsq $0x7fffffffffffffff, %r13 # imm = 0x7FFFFFFFFFFFFFFF
    0.00 :   ffffffff81112ec6:       andl    $0xf0, %edx
   47.27 :   ffffffff81112ecc:       xorl    %esi, %esi
    0.00 :   ffffffff81112ece:       movq    $0x0, 0x38(%rdi)
    0.00 :   ffffffff81112ed6:       movq    %r13, %rcx
    0.00 :   ffffffff81112ed9:       callq   0xffffffff81112ae0 <__hrtimer_next_event_base>
    0.00 :   ffffffff81112ede:       movl    0x8(%rbx), %edx
    0.00 :   ffffffff81112ee1:       movq    %rax, %r12
    0.00 :   ffffffff81112ee4:       xorl    %esi, %esi
    0.00 :   ffffffff81112ee6:       movq    %rax, 0x30(%rbx)
    0.00 :   ffffffff81112eea:       movq    $0x0, 0x28(%rbx)
    0.00 :   ffffffff81112ef2:       movq    %r13, %rcx
    0.00 :   ffffffff81112ef5:       movq    %rbx, %rdi
    0.00 :   ffffffff81112ef8:       andl    $0xf, %edx
    0.00 :   ffffffff81112efb:       callq   0xffffffff81112ae0 <__hrtimer_next_event_base>
    0.00 :   ffffffff81112f00:       cmpq    %rax, %r12
    0.00 :   ffffffff81112f03:       jge     0xffffffff81112e9c <hrtimer_update_next_event+0x3c>
    0.00 :   ffffffff81112f05:       movq    0x38(%rbx), %rax
    0.00 :   ffffffff81112f09:       movq    %rax, 0x28(%rbx)
    0.00 :   ffffffff81112f0d:       jmp     0xffffffff81112e9f <hrtimer_update_next_event+0x3f>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81165d90 <irq_work_single>:
         : 5                ; irq_work_single():
    0.00 :   ffffffff81165d90:       pushq   %rbp
    0.00 :   ffffffff81165d91:       movq    %rsp, %rbp
    0.00 :   ffffffff81165d94:       subq    $0x18, %rsp
    0.00 :   ffffffff81165d98:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff81165d9c:       movq    %r12, -0x10(%rbp)
    0.00 :   ffffffff81165da0:       movq    %rdi, %rbx
    0.00 :   ffffffff81165da3:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff81165da7:       movl    0x8(%rdi), %r13d
    0.00 :   ffffffff81165dab:       movl    %r13d, %r12d
    0.00 :   ffffffff81165dae:       andl    $-0x2, %r12d
    0.00 :   ffffffff81165db2:       movl    %r12d, 0x8(%rdi)
  100.00 :   ffffffff81165db6:       lock
    0.00 :   ffffffff81165db7:       addl    $0x0, -0x4(%rsp)
    0.00 :   ffffffff81165dbc:       movq    0x10(%rdi), %rax
    0.00 :   ffffffff81165dc0:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81165dc5:       movl    %r13d, %edx
    0.00 :   ffffffff81165dc8:       movl    %r12d, %eax
    0.00 :   ffffffff81165dcb:       andl    $-0x4, %edx
    0.00 :   ffffffff81165dce:       lock
    0.00 :   ffffffff81165dcf:       cmpxchgl        %edx, 0x8(%rbx)
    0.00 :   ffffffff81165dd3:       movq    0x1200306(%rip), %rax # 0xffffffff823660e0 <boot_cpu_data+0xc0>
    0.00 :   ffffffff81165dda:       testb   $0x2, %ah
    0.00 :   ffffffff81165ddd:       je      0xffffffff81165df7 <irq_work_single+0x67>
    0.00 :   ffffffff81165ddf:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff81165de3:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff81165de7:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff81165deb:       leave
    0.00 :   ffffffff81165dec:       xorl    %eax, %eax
    0.00 :   ffffffff81165dee:       xorl    %edx, %edx
    0.00 :   ffffffff81165df0:       xorl    %edi, %edi
    0.00 :   ffffffff81165df2:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81165df7:       leaq    0x18(%rbx), %rdi
    0.00 :   ffffffff81165dfb:       callq   0xffffffff8106d690 <rcuwait_wake_up>
    0.00 :   ffffffff81165e00:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff81165e04:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff81165e08:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff81165e0c:       leave
    0.00 :   ffffffff81165e0d:       xorl    %eax, %eax
    0.00 :   ffffffff81165e0f:       xorl    %edx, %edx
    0.00 :   ffffffff81165e11:       xorl    %edi, %edi
    0.00 :   ffffffff81165e13:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b77c10 <queued_spin_lock_slowpath>:
         : 5                ; queued_spin_lock_slowpath():
    0.00 :   ffffffff81b77c10:       pushq   %rbp
    0.00 :   ffffffff81b77c11:       movq    %rdi, %rdx
    0.00 :   ffffffff81b77c14:       movq    %rsp, %rbp
    0.00 :   ffffffff81b77c17:       cmpl    $0x100, %esi    # imm = 0x100
    0.00 :   ffffffff81b77c1d:       je      0xffffffff81b77c72 <queued_spin_lock_slowpath+0x62>
    0.00 :   ffffffff81b77c1f:       cmpl    $0xff, %esi
    0.00 :   ffffffff81b77c25:       ja      0xffffffff81b77c91 <queued_spin_lock_slowpath+0x81>
    0.00 :   ffffffff81b77c27:       lock
    0.00 :   ffffffff81b77c28:       btsl    $0x8, (%rdx)
    0.00 :   ffffffff81b77c2c:       movl    (%rdx), %eax
    0.00 :   ffffffff81b77c2e:       setb    %cl
    0.00 :   ffffffff81b77c31:       movzbl  %cl, %ecx
    0.00 :   ffffffff81b77c34:       shll    $0x8, %ecx
    0.00 :   ffffffff81b77c37:       xorb    %ah, %ah
    0.00 :   ffffffff81b77c39:       orl     %ecx, %eax
    0.00 :   ffffffff81b77c3b:       cmpl    $0xff, %eax
    0.00 :   ffffffff81b77c40:       ja      0xffffffff81b77d5e <queued_spin_lock_slowpath+0x14e>
    0.00 :   ffffffff81b77c46:       testl   %eax, %eax
    0.00 :   ffffffff81b77c48:       je      0xffffffff81b77c5a <queued_spin_lock_slowpath+0x4a>
    0.00 :   ffffffff81b77c4a:       movzbl  (%rdx), %eax
    0.00 :   ffffffff81b77c4d:       testb   %al, %al
    0.00 :   ffffffff81b77c4f:       je      0xffffffff81b77c5a <queued_spin_lock_slowpath+0x4a>
   55.04 :   ffffffff81b77c51:       pause
    0.00 :   ffffffff81b77c53:       movzbl  (%rdx), %eax
    0.00 :   ffffffff81b77c56:       testb   %al, %al
    0.00 :   ffffffff81b77c58:       jne     0xffffffff81b77c51 <queued_spin_lock_slowpath+0x41>
    0.00 :   ffffffff81b77c5a:       popq    %rbp
    0.00 :   ffffffff81b77c5b:       movw    $0x1, (%rdx)
    0.00 :   ffffffff81b77c60:       xorl    %eax, %eax
    0.00 :   ffffffff81b77c62:       xorl    %edx, %edx
    0.00 :   ffffffff81b77c64:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b77c66:       xorl    %esi, %esi
    0.00 :   ffffffff81b77c68:       xorl    %edi, %edi
    0.00 :   ffffffff81b77c6a:       xorl    %r8d, %r8d
    0.00 :   ffffffff81b77c6d:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b77c72:       movl    (%rdi), %esi
    0.00 :   ffffffff81b77c74:       movl    $0x200, %eax    # imm = 0x200
    0.00 :   ffffffff81b77c79:       cmpl    $0x100, %esi    # imm = 0x100
    0.00 :   ffffffff81b77c7f:       jne     0xffffffff81b77c1f <queued_spin_lock_slowpath+0xf>
    0.00 :   ffffffff81b77c81:       pause
    0.00 :   ffffffff81b77c83:       movl    (%rdx), %esi
    0.00 :   ffffffff81b77c85:       cmpl    $0x100, %esi    # imm = 0x100
    0.00 :   ffffffff81b77c8b:       jne     0xffffffff81b77c1f <queued_spin_lock_slowpath+0xf>
    0.00 :   ffffffff81b77c8d:       decl    %eax
    0.00 :   ffffffff81b77c8f:       jne     0xffffffff81b77c81 <queued_spin_lock_slowpath+0x71>
    0.00 :   ffffffff81b77c91:       movq    $0x23c40, %rax  # imm = 0x23C40
    0.00 :   ffffffff81b77c98:       addq    %gs:0x7e49dd90(%rip), %rax
    0.00 :   ffffffff81b77ca0:       movl    0xc(%rax), %esi
    0.00 :   ffffffff81b77ca3:       leal    0x1(%rsi), %ecx
    0.00 :   ffffffff81b77ca6:       movl    %ecx, 0xc(%rax)
    0.00 :   ffffffff81b77ca9:       movl    $0x1, %ecx
    0.00 :   ffffffff81b77cae:       movl    %gs:0x7e4aaa56(%rip), %r8d
    0.00 :   ffffffff81b77cb6:       cmpl    $0x3, %esi
    0.00 :   ffffffff81b77cb9:       jg      0xffffffff81b77d06 <queued_spin_lock_slowpath+0xf6>
    0.00 :   ffffffff81b77cbb:       movslq  %esi, %rcx
    0.00 :   ffffffff81b77cbe:       shlq    $0x4, %rcx
    0.00 :   ffffffff81b77cc2:       addq    %rax, %rcx
    0.00 :   ffffffff81b77cc5:       movl    $0x0, 0x8(%rcx)
    0.00 :   ffffffff81b77ccc:       movq    $0x0, (%rcx)
    0.00 :   ffffffff81b77cd3:       movl    (%rdx), %eax
    0.00 :   ffffffff81b77cd5:       testl   %eax, %eax
    0.00 :   ffffffff81b77cd7:       jne     0xffffffff81b77d12 <queued_spin_lock_slowpath+0x102>
    0.00 :   ffffffff81b77cd9:       movl    $0x1, %edi
    0.00 :   ffffffff81b77cde:       lock
    0.00 :   ffffffff81b77cdf:       cmpxchgl        %edi, (%rdx)
    0.00 :   ffffffff81b77ce2:       jne     0xffffffff81b77d12 <queued_spin_lock_slowpath+0x102>
    0.00 :   ffffffff81b77ce4:       popq    %rbp
    0.00 :   ffffffff81b77ce5:       decl    %gs:0x7e4abf60(%rip)
    0.00 :   ffffffff81b77cec:       xorl    %eax, %eax
    0.00 :   ffffffff81b77cee:       xorl    %edx, %edx
    0.00 :   ffffffff81b77cf0:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b77cf2:       xorl    %esi, %esi
    0.00 :   ffffffff81b77cf4:       xorl    %edi, %edi
    0.00 :   ffffffff81b77cf6:       xorl    %r8d, %r8d
    0.00 :   ffffffff81b77cf9:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b77cfe:       lock
    0.00 :   ffffffff81b77cff:       cmpxchgl        %ecx, (%rdx)
    0.00 :   ffffffff81b77d02:       je      0xffffffff81b77ce4 <queued_spin_lock_slowpath+0xd4>
    0.00 :   ffffffff81b77d04:       pause
    0.00 :   ffffffff81b77d06:       movl    (%rdx), %eax
    0.00 :   ffffffff81b77d08:       testl   %eax, %eax
    0.00 :   ffffffff81b77d0a:       je      0xffffffff81b77cfe <queued_spin_lock_slowpath+0xee>
    0.00 :   ffffffff81b77d0c:       nopl    (%rax)
    0.00 :   ffffffff81b77d10:       jmp     0xffffffff81b77d04 <queued_spin_lock_slowpath+0xf4>
    0.00 :   ffffffff81b77d12:       incl    %r8d
    0.00 :   ffffffff81b77d15:       shll    $0x10, %esi
    0.00 :   ffffffff81b77d18:       shll    $0x12, %r8d
    0.00 :   ffffffff81b77d1c:       orl     %esi, %r8d
    0.00 :   ffffffff81b77d1f:       movl    %r8d, %eax
    0.00 :   ffffffff81b77d22:       shrl    $0x10, %eax
    0.00 :   ffffffff81b77d25:       xchgw   %ax, 0x2(%rdx)
    0.00 :   ffffffff81b77d29:       movl    %eax, %esi
    0.00 :   ffffffff81b77d2b:       shll    $0x10, %esi
    0.00 :   ffffffff81b77d2e:       cmpl    $0xffff, %esi   # imm = 0xFFFF
    0.00 :   ffffffff81b77d34:       ja      0xffffffff81b77d7c <queued_spin_lock_slowpath+0x16c>
    0.00 :   ffffffff81b77d36:       xorl    %esi, %esi
    0.00 :   ffffffff81b77d38:       jmp     0xffffffff81b77d3c <queued_spin_lock_slowpath+0x12c>
    0.00 :   ffffffff81b77d3a:       pause
    0.00 :   ffffffff81b77d3c:       movl    (%rdx), %eax
    0.00 :   ffffffff81b77d3e:       testw   %ax, %ax
    0.00 :   ffffffff81b77d41:       jne     0xffffffff81b77d3a <queued_spin_lock_slowpath+0x12a>
    0.00 :   ffffffff81b77d43:       movl    %eax, %edi
    0.00 :   ffffffff81b77d45:       xorw    %di, %di
    0.00 :   ffffffff81b77d48:       cmpl    %edi, %r8d
    0.00 :   ffffffff81b77d4b:       je      0xffffffff81b77db9 <queued_spin_lock_slowpath+0x1a9>
    0.00 :   ffffffff81b77d4d:       testq   %rsi, %rsi
    0.00 :   ffffffff81b77d50:       movb    $0x1, (%rdx)
    0.00 :   ffffffff81b77d53:       je      0xffffffff81b77d72 <queued_spin_lock_slowpath+0x162>
    0.00 :   ffffffff81b77d55:       movl    $0x1, 0x8(%rsi)
    0.00 :   ffffffff81b77d5c:       jmp     0xffffffff81b77ce4 <queued_spin_lock_slowpath+0xd4>
    0.00 :   ffffffff81b77d5e:       testb   $0x1, %ah
    0.00 :   ffffffff81b77d61:       jne     0xffffffff81b77c91 <queued_spin_lock_slowpath+0x81>
    0.00 :   ffffffff81b77d67:       movb    $0x0, 0x1(%rdx)
    0.00 :   ffffffff81b77d6b:       jmp     0xffffffff81b77c91 <queued_spin_lock_slowpath+0x81>
    0.00 :   ffffffff81b77d70:       pause
    0.00 :   ffffffff81b77d72:       movq    (%rcx), %rsi
    0.00 :   ffffffff81b77d75:       testq   %rsi, %rsi
    0.00 :   ffffffff81b77d78:       je      0xffffffff81b77d70 <queued_spin_lock_slowpath+0x160>
    0.00 :   ffffffff81b77d7a:       jmp     0xffffffff81b77d55 <queued_spin_lock_slowpath+0x145>
    0.00 :   ffffffff81b77d7c:       shrl    $0x12, %esi
    0.00 :   ffffffff81b77d7f:       andl    $0x3, %eax
    0.00 :   ffffffff81b77d82:       decl    %esi
    0.00 :   ffffffff81b77d84:       shlq    $0x4, %rax
    0.00 :   ffffffff81b77d88:       movslq  %esi, %rsi
    0.00 :   ffffffff81b77d8b:       addq    $0x23c40, %rax  # imm = 0x23C40
    0.00 :   ffffffff81b77d91:       addq    -0x7dedc720(,%rsi,8), %rax
    0.00 :   ffffffff81b77d99:       movq    %rcx, (%rax)
    0.00 :   ffffffff81b77d9c:       movl    0x8(%rcx), %eax
    0.00 :   ffffffff81b77d9f:       testl   %eax, %eax
    0.00 :   ffffffff81b77da1:       jne     0xffffffff81b77dac <queued_spin_lock_slowpath+0x19c>
   44.96 :   ffffffff81b77da3:       pause
    0.00 :   ffffffff81b77da5:       movl    0x8(%rcx), %eax
    0.00 :   ffffffff81b77da8:       testl   %eax, %eax
    0.00 :   ffffffff81b77daa:       je      0xffffffff81b77da3 <queued_spin_lock_slowpath+0x193>
    0.00 :   ffffffff81b77dac:       movq    (%rcx), %rsi
    0.00 :   ffffffff81b77daf:       testq   %rsi, %rsi
    0.00 :   ffffffff81b77db2:       je      0xffffffff81b77d36 <queued_spin_lock_slowpath+0x126>
    0.00 :   ffffffff81b77db4:       prefetcht0      (%rsi)
    0.00 :   ffffffff81b77db7:       jmp     0xffffffff81b77d3c <queued_spin_lock_slowpath+0x12c>
    0.00 :   ffffffff81b77db9:       movl    $0x1, %edi
    0.00 :   ffffffff81b77dbe:       lock
    0.00 :   ffffffff81b77dbf:       cmpxchgl        %edi, (%rdx)
    0.00 :   ffffffff81b77dc2:       je      0xffffffff81b77ce4 <queued_spin_lock_slowpath+0xd4>
    0.00 :   ffffffff81b77dc8:       jmp     0xffffffff81b77d4d <queued_spin_lock_slowpath+0x13d>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810acf60 <idle_cpu>:
         : 5                ; idle_cpu():
    0.00 :   ffffffff810acf60:       pushq   %rbp
    0.00 :   ffffffff810acf61:       movq    %rsp, %rbp
    0.00 :   ffffffff810acf64:       movslq  %edi, %rdi
    0.00 :   ffffffff810acf67:       movq    $0x22f40, %rax  # imm = 0x22F40
   37.48 :   ffffffff810acf6e:       xorl    %edx, %edx
    0.00 :   ffffffff810acf70:       addq    -0x7dedc720(,%rdi,8), %rax
    0.00 :   ffffffff810acf78:       movq    0x978(%rax), %rcx
    0.00 :   ffffffff810acf7f:       cmpq    %rcx, 0x970(%rax)
    0.00 :   ffffffff810acf86:       je      0xffffffff810acf96 <idle_cpu+0x36>
    0.00 :   ffffffff810acf88:       movl    %edx, %eax
    0.00 :   ffffffff810acf8a:       popq    %rbp
    0.00 :   ffffffff810acf8b:       xorl    %edx, %edx
    0.00 :   ffffffff810acf8d:       xorl    %ecx, %ecx
    0.00 :   ffffffff810acf8f:       xorl    %edi, %edi
    0.00 :   ffffffff810acf91:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810acf96:       movl    0x4(%rax), %ecx
    0.00 :   ffffffff810acf99:       testl   %ecx, %ecx
    0.00 :   ffffffff810acf9b:       jne     0xffffffff810acf88 <idle_cpu+0x28>
   62.52 :   ffffffff810acf9d:       movl    0x68(%rax), %eax
    0.00 :   ffffffff810acfa0:       xorl    %edx, %edx
    0.00 :   ffffffff810acfa2:       popq    %rbp
    0.00 :   ffffffff810acfa3:       testl   %eax, %eax
    0.00 :   ffffffff810acfa5:       sete    %dl
    0.00 :   ffffffff810acfa8:       movl    %edx, %eax
    0.00 :   ffffffff810acfaa:       xorl    %edx, %edx
    0.00 :   ffffffff810acfac:       xorl    %ecx, %ecx
    0.00 :   ffffffff810acfae:       xorl    %edi, %edi
    0.00 :   ffffffff810acfb0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810abce0 <call_function_single_prep_ipi>:
         : 5                ; call_function_single_prep_ipi():
    0.00 :   ffffffff810abce0:       pushq   %rbp
    0.00 :   ffffffff810abce1:       movq    %rsp, %rbp
    0.00 :   ffffffff810abce4:       movslq  %edi, %rdi
    0.00 :   ffffffff810abce7:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810abcee:       movq    -0x7dedc720(,%rdi,8), %rdx
   62.52 :   ffffffff810abcf6:       movq    0x978(%rdx,%rax), %rdx
   37.48 :   ffffffff810abcfe:       movq    (%rdx), %rax
    0.00 :   ffffffff810abd01:       testl   $0x200000, %eax # imm = 0x200000
    0.00 :   ffffffff810abd06:       je      0xffffffff810abd28 <call_function_single_prep_ipi+0x48>
    0.00 :   ffffffff810abd08:       testb   $0x8, %al
    0.00 :   ffffffff810abd0a:       jne     0xffffffff810abd1a <call_function_single_prep_ipi+0x3a>
    0.00 :   ffffffff810abd0c:       movq    %rax, %rcx
    0.00 :   ffffffff810abd0f:       orq     $0x8, %rcx
    0.00 :   ffffffff810abd13:       lock
    0.00 :   ffffffff810abd14:       cmpxchgq        %rcx, (%rdx)
    0.00 :   ffffffff810abd18:       jne     0xffffffff810abd01 <call_function_single_prep_ipi+0x21>
    0.00 :   ffffffff810abd1a:       xorl    %eax, %eax
    0.00 :   ffffffff810abd1c:       popq    %rbp
    0.00 :   ffffffff810abd1d:       xorl    %edx, %edx
    0.00 :   ffffffff810abd1f:       xorl    %ecx, %ecx
    0.00 :   ffffffff810abd21:       xorl    %edi, %edi
    0.00 :   ffffffff810abd23:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810abd28:       movl    $0x1, %eax
    0.00 :   ffffffff810abd2d:       popq    %rbp
    0.00 :   ffffffff810abd2e:       xorl    %edx, %edx
    0.00 :   ffffffff810abd30:       xorl    %ecx, %ecx
    0.00 :   ffffffff810abd32:       xorl    %edi, %edi
    0.00 :   ffffffff810abd34:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810d0c80 <sched_clock_cpu>:
         : 5                ; sched_clock_cpu():
    0.00 :   ffffffff810d0c80:       pushq   %rbp
   43.05 :   ffffffff810d0c81:       movq    %rsp, %rbp
    0.00 :   ffffffff810d0c84:       pushq   %r13
    0.00 :   ffffffff810d0c86:       pushq   %r12
    0.00 :   ffffffff810d0c88:       pushq   %rbx
    0.00 :   ffffffff810d0c89:       jmp     0xffffffff810d0cb3 <sched_clock_cpu+0x33>
    0.00 :   ffffffff810d0c8b:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff810d0c90:       addq    0x1295c71(%rip), %rax # 0xffffffff82366908 <__sched_clock_offset>
    0.00 :   ffffffff810d0c97:       movq    %rax, %rdx
    0.00 :   ffffffff810d0c9a:       popq    %rbx
    0.00 :   ffffffff810d0c9b:       movq    %rdx, %rax
    0.00 :   ffffffff810d0c9e:       popq    %r12
    0.00 :   ffffffff810d0ca0:       popq    %r13
    0.00 :   ffffffff810d0ca2:       popq    %rbp
    0.00 :   ffffffff810d0ca3:       xorl    %edx, %edx
   56.95 :   ffffffff810d0ca5:       xorl    %ecx, %ecx
    0.00 :   ffffffff810d0ca7:       xorl    %esi, %esi
    0.00 :   ffffffff810d0ca9:       xorl    %edi, %edi
    0.00 :   ffffffff810d0cab:       xorl    %r8d, %r8d
    0.00 :   ffffffff810d0cae:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810d0cb3:       jmp     0xffffffff810d0d66 <sched_clock_cpu+0xe6>
    0.00 :   ffffffff810d0cb8:       incl    %gs:0x7ef51a49(%rip)
    0.00 :   ffffffff810d0cbf:       movq    $0x23bc0, %r12  # imm = 0x23BC0
    0.00 :   ffffffff810d0cc6:       movslq  %edi, %rax
    0.00 :   ffffffff810d0cc9:       movq    %r12, %rbx
    0.00 :   ffffffff810d0ccc:       addq    -0x7dedc720(,%rax,8), %rbx
    0.00 :   ffffffff810d0cd4:       movl    %gs:0x7ef51a31(%rip), %eax
    0.00 :   ffffffff810d0cdb:       cmpl    %eax, %edi
    0.00 :   ffffffff810d0cdd:       leaq    0x10(%rbx), %r13
    0.00 :   ffffffff810d0ce1:       jne     0xffffffff810d0d91 <sched_clock_cpu+0x111>
    0.00 :   ffffffff810d0ce7:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff810d0cec:       subq    (%rbx), %rax
    0.00 :   ffffffff810d0cef:       movq    0x1295c0a(%rip), %rdx # 0xffffffff82366900 <__gtod_offset>
    0.00 :   ffffffff810d0cf6:       movq    %rax, %rcx
    0.00 :   ffffffff810d0cf9:       movl    $0x0, %eax
    0.00 :   ffffffff810d0cfe:       cmovsq  %rax, %rcx
    0.00 :   ffffffff810d0d02:       addq    0x8(%rbx), %rdx
    0.00 :   ffffffff810d0d06:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff810d0d0a:       movq    %rdx, %r8
    0.00 :   ffffffff810d0d0d:       leaq    (%rcx,%rdx), %rdi
    0.00 :   ffffffff810d0d11:       movq    %rdx, %rsi
    0.00 :   ffffffff810d0d14:       subq    %rax, %r8
    0.00 :   ffffffff810d0d17:       testq   %r8, %r8
    0.00 :   ffffffff810d0d1a:       jg      0xffffffff810d0d25 <sched_clock_cpu+0xa5>
    0.00 :   ffffffff810d0d1c:       movq    %rdi, %rcx
    0.00 :   ffffffff810d0d1f:       movq    %rax, %rsi
    0.00 :   ffffffff810d0d22:       subq    %rax, %rcx
    0.00 :   ffffffff810d0d25:       addq    $0xf4240, %rdx  # imm = 0xF4240
    0.00 :   ffffffff810d0d2c:       movq    %rax, %r8
    0.00 :   ffffffff810d0d2f:       subq    %rdx, %r8
    0.00 :   ffffffff810d0d32:       testq   %r8, %r8
    0.00 :   ffffffff810d0d35:       cmovgq  %rax, %rdx
    0.00 :   ffffffff810d0d39:       testq   %rcx, %rcx
    0.00 :   ffffffff810d0d3c:       cmovgq  %rdi, %rsi
    0.00 :   ffffffff810d0d40:       cmpq    %rdx, %rsi
    0.00 :   ffffffff810d0d43:       cmovsq  %rsi, %rdx
    0.00 :   ffffffff810d0d47:       lock
    0.00 :   ffffffff810d0d48:       cmpxchgq        %rdx, (%r13)
    0.00 :   ffffffff810d0d4d:       jne     0xffffffff810d0ce7 <sched_clock_cpu+0x67>
    0.00 :   ffffffff810d0d4f:       decl    %gs:0x7ef519b2(%rip)
    0.00 :   ffffffff810d0d56:       jne     0xffffffff810d0c9a <sched_clock_cpu+0x1a>
    0.00 :   ffffffff810d0d5c:       callq   0xffffffff81b789a8 <__SCT__preempt_schedule_notrace>
    0.00 :   ffffffff810d0d61:       jmp     0xffffffff810d0c9a <sched_clock_cpu+0x1a>
    0.00 :   ffffffff810d0d66:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff810d0d70:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff810d0d75:       popq    %rbx
    0.00 :   ffffffff810d0d76:       movq    %rax, %rdx
    0.00 :   ffffffff810d0d79:       movq    %rdx, %rax
    0.00 :   ffffffff810d0d7c:       popq    %r12
    0.00 :   ffffffff810d0d7e:       popq    %r13
    0.00 :   ffffffff810d0d80:       popq    %rbp
    0.00 :   ffffffff810d0d81:       xorl    %edx, %edx
    0.00 :   ffffffff810d0d83:       xorl    %ecx, %ecx
    0.00 :   ffffffff810d0d85:       xorl    %esi, %esi
    0.00 :   ffffffff810d0d87:       xorl    %edi, %edi
    0.00 :   ffffffff810d0d89:       xorl    %r8d, %r8d
    0.00 :   ffffffff810d0d8c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810d0d91:       addq    %gs:0x7ef44c97(%rip), %r12
    0.00 :   ffffffff810d0d99:       leaq    0x10(%r12), %r13
    0.00 :   ffffffff810d0d9e:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff810d0da3:       subq    (%r12), %rax
    0.00 :   ffffffff810d0da7:       movq    0x1295b52(%rip), %rdx # 0xffffffff82366900 <__gtod_offset>
    0.00 :   ffffffff810d0dae:       movq    %rax, %rcx
    0.00 :   ffffffff810d0db1:       movl    $0x0, %eax
    0.00 :   ffffffff810d0db6:       cmovsq  %rax, %rcx
    0.00 :   ffffffff810d0dba:       addq    0x8(%r12), %rdx
    0.00 :   ffffffff810d0dbf:       movq    0x10(%r12), %rax
    0.00 :   ffffffff810d0dc4:       movq    %rdx, %r8
    0.00 :   ffffffff810d0dc7:       leaq    (%rcx,%rdx), %rdi
    0.00 :   ffffffff810d0dcb:       movq    %rdx, %rsi
    0.00 :   ffffffff810d0dce:       subq    %rax, %r8
    0.00 :   ffffffff810d0dd1:       testq   %r8, %r8
    0.00 :   ffffffff810d0dd4:       jg      0xffffffff810d0ddf <sched_clock_cpu+0x15f>
    0.00 :   ffffffff810d0dd6:       movq    %rdi, %rcx
    0.00 :   ffffffff810d0dd9:       movq    %rax, %rsi
    0.00 :   ffffffff810d0ddc:       subq    %rax, %rcx
    0.00 :   ffffffff810d0ddf:       addq    $0xf4240, %rdx  # imm = 0xF4240
    0.00 :   ffffffff810d0de6:       movq    %rax, %r8
    0.00 :   ffffffff810d0de9:       subq    %rdx, %r8
    0.00 :   ffffffff810d0dec:       testq   %r8, %r8
    0.00 :   ffffffff810d0def:       cmovgq  %rax, %rdx
    0.00 :   ffffffff810d0df3:       testq   %rcx, %rcx
    0.00 :   ffffffff810d0df6:       cmovgq  %rdi, %rsi
    0.00 :   ffffffff810d0dfa:       cmpq    %rdx, %rsi
    0.00 :   ffffffff810d0dfd:       cmovsq  %rsi, %rdx
    0.00 :   ffffffff810d0e01:       lock
    0.00 :   ffffffff810d0e02:       cmpxchgq        %rdx, (%r13)
    0.00 :   ffffffff810d0e07:       jne     0xffffffff810d0d9e <sched_clock_cpu+0x11e>
    0.00 :   ffffffff810d0e09:       leaq    0x10(%rbx), %rsi
    0.00 :   ffffffff810d0e0d:       movq    0x10(%r12), %rdx
    0.00 :   ffffffff810d0e12:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff810d0e16:       cmpq    %rdx, %rax
    0.00 :   ffffffff810d0e19:       jns     0xffffffff810d0e2b <sched_clock_cpu+0x1ab>
    0.00 :   ffffffff810d0e1b:       movq    %rsi, %rcx
    0.00 :   ffffffff810d0e1e:       lock
    0.00 :   ffffffff810d0e1f:       cmpxchgq        %rdx, (%rcx)
    0.00 :   ffffffff810d0e23:       je      0xffffffff810d0d4f <sched_clock_cpu+0xcf>
    0.00 :   ffffffff810d0e29:       jmp     0xffffffff810d0e0d <sched_clock_cpu+0x18d>
    0.00 :   ffffffff810d0e2b:       movq    %rdx, %rcx
    0.00 :   ffffffff810d0e2e:       movq    %rax, %rdx
    0.00 :   ffffffff810d0e31:       movq    %rcx, %rax
    0.00 :   ffffffff810d0e34:       movq    %r13, %rcx
    0.00 :   ffffffff810d0e37:       jmp     0xffffffff810d0e1e <sched_clock_cpu+0x19e>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000053b30 <snprintf>:
         : 5     ; __snprintf():
    0.00 :   53b30:          subq    $0xd8, %rsp
  100.00 :   53b37:          movq    %rcx, 0x38(%rsp)
    0.00 :   53b3c:          movq    %r8, 0x40(%rsp)
    0.00 :   53b41:          movq    %r9, 0x48(%rsp)
    0.00 :   53b46:          testb   %al, %al
    0.00 :   53b48:          je      0x53b89 <snprintf+0x59>
    0.00 :   53b4a:          vmovaps %xmm0, 0x50(%rsp)
    0.00 :   53b50:          vmovaps %xmm1, 0x60(%rsp)
    0.00 :   53b56:          vmovaps %xmm2, 0x70(%rsp)
    0.00 :   53b5c:          vmovaps %xmm3, 0x80(%rsp)
    0.00 :   53b65:          vmovaps %xmm4, 0x90(%rsp)
    0.00 :   53b6e:          vmovaps %xmm5, 0xa0(%rsp)
    0.00 :   53b77:          vmovaps %xmm6, 0xb0(%rsp)
    0.00 :   53b80:          vmovaps %xmm7, 0xc0(%rsp)
    0.00 :   53b89:          movq    %fs:0x28, %rax
    0.00 :   53b92:          movq    %rax, 0x18(%rsp)
    0.00 :   53b97:          xorl    %eax, %eax
    0.00 :   53b99:          leaq    0xe0(%rsp), %rax
    0.00 :   53ba1:          xorl    %r8d, %r8d
    0.00 :   53ba4:          movq    %rax, 0x8(%rsp)
    0.00 :   53ba9:          movq    %rsp, %rcx
    0.00 :   53bac:          leaq    0x20(%rsp), %rax
    0.00 :   53bb1:          movl    $0x18, (%rsp)
    0.00 :   53bb8:          movl    $0x30, 0x4(%rsp)
    0.00 :   53bc0:          movq    %rax, 0x10(%rsp)
    0.00 :   53bc5:          callq   0x78120 <vscanf+0xd0>
    0.00 :   53bca:          movq    0x18(%rsp), %rdx
    0.00 :   53bcf:          subq    %fs:0x28, %rdx
    0.00 :   53bd8:          jne     0x53be2 <snprintf+0xb2>
    0.00 :   53bda:          addq    $0xd8, %rsp
    0.00 :   53be1:          retq
    0.00 :   53be2:          callq   0x111090 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b77420 <_raw_spin_unlock_irqrestore>:
         : 5                ; _raw_spin_unlock_irqrestore():
   46.05 :   ffffffff81b77420:       pushq   %rbp
    0.00 :   ffffffff81b77421:       movq    %rsp, %rbp
   53.95 :   ffffffff81b77424:       testl   $0x200, %esi    # imm = 0x200
    0.00 :   ffffffff81b7742a:       movb    $0x0, (%rdi)
    0.00 :   ffffffff81b7742d:       je      0xffffffff81b77430 <_raw_spin_unlock_irqrestore+0x10>
    0.00 :   ffffffff81b7742f:       sti
    0.00 :   ffffffff81b77430:       decl    %gs:0x7e4ab2d1(%rip)
    0.00 :   ffffffff81b77437:       je      0xffffffff81b77443 <_raw_spin_unlock_irqrestore+0x23>
    0.00 :   ffffffff81b77439:       popq    %rbp
    0.00 :   ffffffff81b7743a:       xorl    %esi, %esi
    0.00 :   ffffffff81b7743c:       xorl    %edi, %edi
    0.00 :   ffffffff81b7743e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b77443:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff81b77448:       popq    %rbp
    0.00 :   ffffffff81b77449:       xorl    %esi, %esi
    0.00 :   ffffffff81b7744b:       xorl    %edi, %edi
    0.00 :   ffffffff81b7744d:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     000000000003c730 <rand>:
         : 5     ; rand():
    0.00 :   3c730:          subq    $0x8, %rsp
  100.00 :   3c734:          callq   0x3c8f0 <random>
    0.00 :   3c739:          addq    $0x8, %rsp
    0.00 :   3c73d:          retq
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81165980 <acct_account_cputime>:
         : 5                ; acct_account_cputime():
    0.00 :   ffffffff81165980:       pushq   %rbp
    0.00 :   ffffffff81165981:       movq    %rsp, %rbp
    0.00 :   ffffffff81165984:       movq    0x3d8(%rdi), %rsi
    0.00 :   ffffffff8116598b:       movq    0x880(%rdi), %rdx
    0.00 :   ffffffff81165992:       movq    0x3a8(%rdi), %rcx
    0.00 :   ffffffff81165999:       testq   %rsi, %rsi
    0.00 :   ffffffff8116599c:       je      0xffffffff81165a19 <acct_account_cputime+0x99>
    0.00 :   ffffffff8116599e:       addq    %rcx, %rdx
    0.00 :   ffffffff811659a1:       movq    %rdi, %rax
    0.00 :   ffffffff811659a4:       movq    %rdx, %rcx
    0.00 :   ffffffff811659a7:       subq    0x5d8(%rdi), %rcx
    0.00 :   ffffffff811659ae:       cmpq    $0xf423f, %rcx  # imm = 0xF423F
    0.00 :   ffffffff811659b5:       jbe     0xffffffff81165a19 <acct_account_cputime+0x99>
    0.00 :   ffffffff811659b7:       movq    %rdx, 0x5d8(%rdi)
    0.00 :   ffffffff811659be:       movq    0x308(%rsi), %rdx
    0.00 :   ffffffff811659c5:       xorl    %r9d, %r9d
    0.00 :   ffffffff811659c8:       movq    0x330(%rsi), %r8
    0.00 :   ffffffff811659cf:       movq    0x380(%rsi), %rdi
    0.00 :   ffffffff811659d6:       testq   %rdx, %rdx
    0.00 :   ffffffff811659d9:       cmovsq  %r9, %rdx
    0.00 :   ffffffff811659dd:       testq   %r8, %r8
    0.00 :   ffffffff811659e0:       cmovsq  %r9, %r8
    0.00 :   ffffffff811659e4:       addq    %r8, %rdx
    0.00 :   ffffffff811659e7:       xorl    %r8d, %r8d
    0.00 :   ffffffff811659ea:       testq   %rdi, %rdi
    0.00 :   ffffffff811659ed:       cmovsq  %r8, %rdi
    0.00 :   ffffffff811659f1:       addq    %rdi, %rdx
    0.00 :   ffffffff811659f4:       imulq   %rcx, %rdx
  100.00 :   ffffffff811659f8:       shrq    $0xa, %rdx
    0.00 :   ffffffff811659fc:       addq    %rdx, 0x88(%rax)
    0.00 :   ffffffff81165a03:       movq    0x240(%rsi), %rdx
    0.00 :   ffffffff81165a0a:       imulq   %rdx, %rcx
    0.00 :   ffffffff81165a0e:       shrq    $0xa, %rcx
    0.00 :   ffffffff81165a12:       addq    %rcx, 0x810(%rax)
    0.00 :   ffffffff81165a19:       popq    %rbp
    0.00 :   ffffffff81165a1a:       xorl    %eax, %eax
    0.00 :   ffffffff81165a1c:       xorl    %edx, %edx
    0.00 :   ffffffff81165a1e:       xorl    %ecx, %ecx
    0.00 :   ffffffff81165a20:       xorl    %esi, %esi
    0.00 :   ffffffff81165a22:       xorl    %edi, %edi
    0.00 :   ffffffff81165a24:       xorl    %r8d, %r8d
    0.00 :   ffffffff81165a27:       xorl    %r9d, %r9d
    0.00 :   ffffffff81165a2a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8127d130 <kmem_cache_free>:
         : 5                ; kmem_cache_free():
    0.00 :   ffffffff8127d130:       pushq   %rbp
    0.00 :   ffffffff8127d131:       movq    %rsp, %rbp
    0.00 :   ffffffff8127d134:       pushq   %r15
    0.00 :   ffffffff8127d136:       pushq   %r14
    0.00 :   ffffffff8127d138:       pushq   %r13
    0.00 :   ffffffff8127d13a:       pushq   %r12
    0.00 :   ffffffff8127d13c:       pushq   %rbx
    0.00 :   ffffffff8127d13d:       movq    %rsi, %rbx
    0.00 :   ffffffff8127d140:       callq   0xffffffff8127cfe0 <cache_from_obj>
    0.00 :   ffffffff8127d145:       testq   %rax, %rax
    0.00 :   ffffffff8127d148:       je      0xffffffff8127d2f3 <kmem_cache_free+0x1c3>
    0.00 :   ffffffff8127d14e:       movq    %rax, %r12
    0.00 :   ffffffff8127d151:       movl    $0x80000000, %eax # imm = 0x80000000
    0.00 :   ffffffff8127d156:       movq    0x8(%rbp), %r14
    0.00 :   ffffffff8127d15a:       addq    %rbx, %rax
    0.00 :   ffffffff8127d15d:       jb      0xffffffff8127d3f2 <kmem_cache_free+0x2c2>
    0.00 :   ffffffff8127d163:       movq    $-0x80000000, %rdx # imm = 0x80000000
   50.45 :   ffffffff8127d16a:       subq    0xea5087(%rip), %rdx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff8127d171:       addq    %rdx, %rax
    0.00 :   ffffffff8127d174:       movq    0xea506d(%rip), %rsi # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff8127d17b:       shrq    $0xc, %rax
    0.00 :   ffffffff8127d17f:       shlq    $0x6, %rax
    0.00 :   ffffffff8127d183:       addq    %rsi, %rax
    0.00 :   ffffffff8127d186:       movq    0x8(%rax), %rdx
    0.00 :   ffffffff8127d18a:       movq    %rax, %r13
    0.00 :   ffffffff8127d18d:       testb   $0x1, %dl
    0.00 :   ffffffff8127d190:       jne     0xffffffff8127d3a6 <kmem_cache_free+0x276>
    0.00 :   ffffffff8127d196:       nopl    (%rax,%rax)
    0.00 :   ffffffff8127d19b:       movq    (%r13), %rax
    0.00 :   ffffffff8127d19f:       testb   $0x2, %ah
    0.00 :   ffffffff8127d1a2:       movl    $0x0, %eax
    0.00 :   ffffffff8127d1a7:       cmoveq  %rax, %r13
    0.00 :   ffffffff8127d1ab:       jmp     0xffffffff8127d270 <kmem_cache_free+0x140>
    0.00 :   ffffffff8127d1b0:       movq    0x38(%r13), %rcx
    0.00 :   ffffffff8127d1b4:       cmpq    $0x3, %rcx
    0.00 :   ffffffff8127d1b8:       jbe     0xffffffff8127d270 <kmem_cache_free+0x140>
    0.00 :   ffffffff8127d1be:       movq    %r13, %rdx
    0.00 :   ffffffff8127d1c1:       movq    %rbx, %rax
    0.00 :   ffffffff8127d1c4:       andq    $-0x4, %rcx
    0.00 :   ffffffff8127d1c8:       subq    %rsi, %rdx
    0.00 :   ffffffff8127d1cb:       movl    0x20(%r12), %esi
    0.00 :   ffffffff8127d1d0:       sarq    $0x6, %rdx
    0.00 :   ffffffff8127d1d4:       shlq    $0xc, %rdx
    0.00 :   ffffffff8127d1d8:       addq    0xea5019(%rip), %rdx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff8127d1df:       subq    %rdx, %rax
    0.00 :   ffffffff8127d1e2:       movl    %eax, %edx
    0.00 :   ffffffff8127d1e4:       imulq   %rsi, %rdx
    0.00 :   ffffffff8127d1e8:       movq    %rcx, %rsi
    0.00 :   ffffffff8127d1eb:       movzbl  0x24(%r12), %ecx
    0.00 :   ffffffff8127d1f1:       shrq    $0x20, %rdx
    0.00 :   ffffffff8127d1f5:       subl    %edx, %eax
    0.00 :   ffffffff8127d1f7:       shrl    %cl, %eax
    0.00 :   ffffffff8127d1f9:       movzbl  0x25(%r12), %ecx
    0.00 :   ffffffff8127d1ff:       addl    %edx, %eax
    0.00 :   ffffffff8127d201:       shrl    %cl, %eax
    0.00 :   ffffffff8127d203:       leaq    (%rsi,%rax,8), %rax
    0.00 :   ffffffff8127d207:       movq    (%rax), %r15
    0.00 :   ffffffff8127d20a:       testq   %r15, %r15
    0.00 :   ffffffff8127d20d:       je      0xffffffff8127d270 <kmem_cache_free+0x140>
    0.00 :   ffffffff8127d20f:       movq    $0x0, (%rax)
    0.00 :   ffffffff8127d216:       movl    0x18(%r12), %esi
    0.00 :   ffffffff8127d21b:       movq    %r15, %rdi
    0.00 :   ffffffff8127d21e:       addq    $0x8, %rsi
    0.00 :   ffffffff8127d222:       callq   0xffffffff8129d4c0 <obj_cgroup_uncharge>
    0.00 :   ffffffff8127d227:       xorl    %edx, %edx
    0.00 :   ffffffff8127d229:       movl    $0xfffffff8, %ecx # imm = 0xFFFFFFF8
    0.00 :   ffffffff8127d22e:       subl    0x18(%r12), %ecx
    0.00 :   ffffffff8127d233:       testb   $0x2, 0xa(%r12)
    0.00 :   ffffffff8127d239:       movq    (%r13), %rax
    0.00 :   ffffffff8127d23d:       movq    %r15, %rdi
    0.00 :   ffffffff8127d240:       sete    %dl
    0.00 :   ffffffff8127d243:       shrq    $0x3a, %rax
    0.00 :   ffffffff8127d247:       movq    -0x7dc999e0(,%rax,8), %rsi
    0.00 :   ffffffff8127d24f:       addl    $0x5, %edx
    0.00 :   ffffffff8127d252:       callq   0xffffffff8129d010 <mod_objcg_state>
    0.00 :   ffffffff8127d257:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff8127d25c:       movq    (%r15), %rax
    0.00 :   ffffffff8127d25f:       testb   $0x3, %al
    0.00 :   ffffffff8127d261:       jne     0xffffffff8127d3af <kmem_cache_free+0x27f>
    0.00 :   ffffffff8127d267:       decq    %gs:(%rax)
    0.00 :   ffffffff8127d26b:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff8127d270:       nopl    (%rax,%rax)
    0.00 :   ffffffff8127d275:       movl    0x28(%r12), %eax
   49.55 :   ffffffff8127d27a:       addq    %rbx, %rax
    0.00 :   ffffffff8127d27d:       testq   %rbx, %rbx
    0.00 :   ffffffff8127d280:       je      0xffffffff8127d376 <kmem_cache_free+0x246>
    0.00 :   ffffffff8127d286:       movq    %rax, %rdx
    0.00 :   ffffffff8127d289:       bswapq  %rdx
    0.00 :   ffffffff8127d28c:       xorq    0xb8(%r12), %rdx
    0.00 :   ffffffff8127d294:       movq    %rdx, (%rax)
    0.00 :   ffffffff8127d297:       movq    (%r12), %rax
    0.00 :   ffffffff8127d29b:       addq    %gs:0x7ed9878d(%rip), %rax
    0.00 :   ffffffff8127d2a3:       movq    0x8(%rax), %rdx
    0.00 :   ffffffff8127d2a7:       cmpq    %r13, 0x10(%rax)
    0.00 :   ffffffff8127d2ab:       jne     0xffffffff8127d3d3 <kmem_cache_free+0x2a3>
    0.00 :   ffffffff8127d2b1:       movl    0x28(%r12), %ecx
    0.00 :   ffffffff8127d2b6:       movq    (%rax), %rax
    0.00 :   ffffffff8127d2b9:       addq    %rbx, %rcx
    0.00 :   ffffffff8127d2bc:       cmpq    %rbx, %rax
    0.00 :   ffffffff8127d2bf:       je      0xffffffff8127d376 <kmem_cache_free+0x246>
    0.00 :   ffffffff8127d2c5:       movq    0xb8(%r12), %rsi
    0.00 :   ffffffff8127d2cd:       movq    %rcx, %rdi
    0.00 :   ffffffff8127d2d0:       bswapq  %rdi
    0.00 :   ffffffff8127d2d3:       xorq    %rax, %rsi
    0.00 :   ffffffff8127d2d6:       xorq    %rdi, %rsi
    0.00 :   ffffffff8127d2d9:       movq    %rsi, (%rcx)
    0.00 :   ffffffff8127d2dc:       leaq    0x80(%rdx), %rcx
    0.00 :   ffffffff8127d2e3:       movq    (%r12), %rdi
    0.00 :   ffffffff8127d2e7:       leaq    (%rdi), %rsi
    0.00 :   ffffffff8127d2ea:       callq   0xffffffff81b62600 <this_cpu_cmpxchg16b_emu>
    0.00 :   ffffffff8127d2ef:       testb   %al, %al
    0.00 :   ffffffff8127d2f1:       je      0xffffffff8127d297 <kmem_cache_free+0x167>
    0.00 :   ffffffff8127d2f3:       popq    %rbx
    0.00 :   ffffffff8127d2f4:       popq    %r12
    0.00 :   ffffffff8127d2f6:       popq    %r13
    0.00 :   ffffffff8127d2f8:       popq    %r14
    0.00 :   ffffffff8127d2fa:       popq    %r15
    0.00 :   ffffffff8127d2fc:       popq    %rbp
    0.00 :   ffffffff8127d2fd:       xorl    %eax, %eax
    0.00 :   ffffffff8127d2ff:       xorl    %edx, %edx
    0.00 :   ffffffff8127d301:       xorl    %ecx, %ecx
    0.00 :   ffffffff8127d303:       xorl    %esi, %esi
    0.00 :   ffffffff8127d305:       xorl    %edi, %edi
    0.00 :   ffffffff8127d307:       xorl    %r8d, %r8d
    0.00 :   ffffffff8127d30a:       xorl    %r9d, %r9d
    0.00 :   ffffffff8127d30d:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8127d312:       cmpq    $0x0, 0x48(%r12)
    0.00 :   ffffffff8127d318:       jne     0xffffffff8127d275 <kmem_cache_free+0x145>
    0.00 :   ffffffff8127d31e:       testl   $0x80800, 0x8(%r12) # imm = 0x80800
    0.00 :   ffffffff8127d327:       jne     0xffffffff8127d275 <kmem_cache_free+0x145>
    0.00 :   ffffffff8127d32d:       movl    0x1c(%r12), %edx
    0.00 :   ffffffff8127d332:       xorl    %esi, %esi
    0.00 :   ffffffff8127d334:       movq    %rbx, %rdi
    0.00 :   ffffffff8127d337:       callq   0xffffffff81b6bf80 <memset>
    0.00 :   ffffffff8127d33c:       movl    0x8(%r12), %eax
    0.00 :   ffffffff8127d341:       andl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff8127d346:       je      0xffffffff8127d34d <kmem_cache_free+0x21d>
    0.00 :   ffffffff8127d348:       movl    0x58(%r12), %eax
    0.00 :   ffffffff8127d34d:       movl    0x50(%r12), %edi
    0.00 :   ffffffff8127d352:       movl    0x18(%r12), %edx
    0.00 :   ffffffff8127d357:       xorl    %esi, %esi
    0.00 :   ffffffff8127d359:       subl    %edi, %edx
    0.00 :   ffffffff8127d35b:       addq    %rbx, %rdi
    0.00 :   ffffffff8127d35e:       subl    %eax, %edx
    0.00 :   ffffffff8127d360:       callq   0xffffffff81b6bf80 <memset>
    0.00 :   ffffffff8127d365:       movl    0x28(%r12), %eax
    0.00 :   ffffffff8127d36a:       addq    %rbx, %rax
    0.00 :   ffffffff8127d36d:       testq   %rbx, %rbx
    0.00 :   ffffffff8127d370:       jne     0xffffffff8127d286 <kmem_cache_free+0x156>
    0.00 :   ffffffff8127d376:       ud2
    0.00 :   ffffffff8127d378:       testl   $0xfff, %eax    # imm = 0xFFF
    0.00 :   ffffffff8127d37d:       jne     0xffffffff8127d19b <kmem_cache_free+0x6b>
    0.00 :   ffffffff8127d383:       movq    (%rax), %rdx
    0.00 :   ffffffff8127d386:       testl   $0x10000, %edx  # imm = 0x10000
    0.00 :   ffffffff8127d38c:       je      0xffffffff8127d19b <kmem_cache_free+0x6b>
    0.00 :   ffffffff8127d392:       movq    0x48(%rax), %rdx
    0.00 :   ffffffff8127d396:       leaq    -0x1(%rdx), %r13
    0.00 :   ffffffff8127d39a:       andl    $0x1, %edx
    0.00 :   ffffffff8127d39d:       cmoveq  %rax, %r13
    0.00 :   ffffffff8127d3a1:       jmp     0xffffffff8127d19b <kmem_cache_free+0x6b>
    0.00 :   ffffffff8127d3a6:       leaq    -0x1(%rdx), %r13
    0.00 :   ffffffff8127d3aa:       jmp     0xffffffff8127d19b <kmem_cache_free+0x6b>
    0.00 :   ffffffff8127d3af:       movq    0x8(%r15), %rax
    0.00 :   ffffffff8127d3b3:       lock
    0.00 :   ffffffff8127d3b4:       subq    $0x1, (%rax)
    0.00 :   ffffffff8127d3b8:       jne     0xffffffff8127d26b <kmem_cache_free+0x13b>
    0.00 :   ffffffff8127d3be:       movq    0x8(%r15), %rax
    0.00 :   ffffffff8127d3c2:       movq    %r15, %rdi
    0.00 :   ffffffff8127d3c5:       movq    0x8(%rax), %rax
    0.00 :   ffffffff8127d3c9:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8127d3ce:       jmp     0xffffffff8127d26b <kmem_cache_free+0x13b>
    0.00 :   ffffffff8127d3d3:       movq    %r14, %r9
    0.00 :   ffffffff8127d3d6:       movl    $0x1, %r8d
    0.00 :   ffffffff8127d3dc:       movq    %rbx, %rcx
    0.00 :   ffffffff8127d3df:       movq    %rbx, %rdx
    0.00 :   ffffffff8127d3e2:       movq    %r13, %rsi
    0.00 :   ffffffff8127d3e5:       movq    %r12, %rdi
    0.00 :   ffffffff8127d3e8:       callq   0xffffffff8127cc10 <__slab_free>
    0.00 :   ffffffff8127d3ed:       jmp     0xffffffff8127d2f3 <kmem_cache_free+0x1c3>
    0.00 :   ffffffff8127d3f2:       movq    0xf9fc17(%rip), %rdx # 0xffffffff8221d010 <phys_base>
    0.00 :   ffffffff8127d3f9:       jmp     0xffffffff8127d171 <kmem_cache_free+0x41>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8104c2c0 <default_send_IPI_self>:
         : 5                ; default_send_IPI_self():
    0.00 :   ffffffff8104c2c0:       pushq   %rbp
  100.00 :   ffffffff8104c2c1:       movq    %rsp, %rbp
    0.00 :   ffffffff8104c2c4:       cmpl    $0x2, %edi
    0.00 :   ffffffff8104c2c7:       jne     0xffffffff8104c2cd <default_send_IPI_self+0xd>
    0.00 :   ffffffff8104c2c9:       jmp     0xffffffff8104c2f0 <default_send_IPI_self+0x30>
    0.00 :   ffffffff8104c2cb:       pause
    0.00 :   ffffffff8104c2cd:       movl    -0xa02d00, %eax
    0.00 :   ffffffff8104c2d4:       testb   $0x10, %ah
    0.00 :   ffffffff8104c2d7:       jne     0xffffffff8104c2cb <default_send_IPI_self+0xb>
    0.00 :   ffffffff8104c2d9:       orl     $0x40000, %edi  # imm = 0x40000
    0.00 :   ffffffff8104c2df:       movl    %edi, -0xa02d00
    0.00 :   ffffffff8104c2e6:       popq    %rbp
    0.00 :   ffffffff8104c2e7:       xorl    %eax, %eax
    0.00 :   ffffffff8104c2e9:       xorl    %edi, %edi
    0.00 :   ffffffff8104c2eb:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8104c2f0:       movq    0x10d7b89(%rip), %rax # 0xffffffff82123e80 <apic>
    0.00 :   ffffffff8104c2f7:       movq    0x28(%rax), %rax
    0.00 :   ffffffff8104c2fb:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8104c300:       movl    $0x40400, %edi  # imm = 0x40400
    0.00 :   ffffffff8104c305:       jmp     0xffffffff8104c2df <default_send_IPI_self+0x1f>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810d1e60 <cpuacct_charge>:
         : 5                ; cpuacct_charge():
    0.00 :   ffffffff810d1e60:       pushq   %rbp
  100.00 :   ffffffff810d1e61:       movq    %rsp, %rbp
    0.00 :   ffffffff810d1e64:       movl    0x14(%rdi), %ecx
    0.00 :   ffffffff810d1e67:       movq    0x5f0(%rdi), %rax
    0.00 :   ffffffff810d1e6e:       movq    0x10(%rax), %rdx
    0.00 :   ffffffff810d1e72:       testq   %rdx, %rdx
    0.00 :   ffffffff810d1e75:       je      0xffffffff810d1e95 <cpuacct_charge+0x35>
    0.00 :   ffffffff810d1e77:       movq    0xc8(%rdx), %rax
    0.00 :   ffffffff810d1e7e:       addq    -0x7dedc720(,%rcx,8), %rax
    0.00 :   ffffffff810d1e86:       addq    %rsi, (%rax)
    0.00 :   ffffffff810d1e89:       movq    0xc0(%rdx), %rdx
    0.00 :   ffffffff810d1e90:       testq   %rdx, %rdx
    0.00 :   ffffffff810d1e93:       jne     0xffffffff810d1e77 <cpuacct_charge+0x17>
    0.00 :   ffffffff810d1e95:       popq    %rbp
    0.00 :   ffffffff810d1e96:       xorl    %eax, %eax
    0.00 :   ffffffff810d1e98:       xorl    %edx, %edx
    0.00 :   ffffffff810d1e9a:       xorl    %ecx, %ecx
    0.00 :   ffffffff810d1e9c:       xorl    %esi, %esi
    0.00 :   ffffffff810d1e9e:       xorl    %edi, %edi
    0.00 :   ffffffff810d1ea0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81094b80 <task_work_run>:
         : 5                ; task_work_run():
    0.00 :   ffffffff81094b80:       pushq   %rbp
    0.00 :   ffffffff81094b81:       movq    %rsp, %rbp
    0.00 :   ffffffff81094b84:       pushq   %r13
    0.00 :   ffffffff81094b86:       pushq   %r12
    0.00 :   ffffffff81094b88:       pushq   %rbx
    0.00 :   ffffffff81094b89:       movq    %gs:0x22700, %r12
    0.00 :   ffffffff81094b92:       movq    0x378(%r12), %rbx
    0.00 :   ffffffff81094b9a:       xorl    %edx, %edx
    0.00 :   ffffffff81094b9c:       testq   %rbx, %rbx
    0.00 :   ffffffff81094b9f:       je      0xffffffff81094be8 <task_work_run+0x68>
    0.00 :   ffffffff81094ba1:       movq    %rbx, %rax
    0.00 :   ffffffff81094ba4:       lock
    0.00 :   ffffffff81094ba5:       cmpxchgq        %rdx, 0x378(%r12)
    0.00 :   ffffffff81094bae:       jne     0xffffffff81094c0d <task_work_run+0x8d>
    0.00 :   ffffffff81094bb0:       testq   %rbx, %rbx
    0.00 :   ffffffff81094bb3:       je      0xffffffff81094bfc <task_work_run+0x7c>
    0.00 :   ffffffff81094bb5:       leaq    0x8a8(%r12), %r13
    0.00 :   ffffffff81094bbd:       movq    %r13, %rdi
    0.00 :   ffffffff81094bc0:       callq   0xffffffff81b77bc0 <_raw_spin_lock_irq>
    0.00 :   ffffffff81094bc5:       movq    %r13, %rdi
    0.00 :   ffffffff81094bc8:       callq   0xffffffff81b77800 <_raw_spin_unlock_irq>
    0.00 :   ffffffff81094bcd:       movq    %rbx, %rdi
    0.00 :   ffffffff81094bd0:       movq    (%rbx), %rbx
    0.00 :   ffffffff81094bd3:       movq    0x8(%rdi), %rax
    0.00 :   ffffffff81094bd7:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81094bdc:       callq   0xffffffff81b789b0 <__SCT__cond_resched>
    0.00 :   ffffffff81094be1:       testq   %rbx, %rbx
    0.00 :   ffffffff81094be4:       jne     0xffffffff81094bcd <task_work_run+0x4d>
    0.00 :   ffffffff81094be6:       jmp     0xffffffff81094b92 <task_work_run+0x12>
    0.00 :   ffffffff81094be8:       testb   $0x4, 0x354(%r12)
    0.00 :   ffffffff81094bf1:       je      0xffffffff81094bfc <task_work_run+0x7c>
    0.00 :   ffffffff81094bf3:       movq    $-0x7d976aa0, %rdx # imm = 0x82689560
    0.00 :   ffffffff81094bfa:       jmp     0xffffffff81094ba1 <task_work_run+0x21>
    0.00 :   ffffffff81094bfc:       popq    %rbx
  100.00 :   ffffffff81094bfd:       popq    %r12
    0.00 :   ffffffff81094bff:       popq    %r13
    0.00 :   ffffffff81094c01:       popq    %rbp
    0.00 :   ffffffff81094c02:       xorl    %eax, %eax
    0.00 :   ffffffff81094c04:       xorl    %edx, %edx
    0.00 :   ffffffff81094c06:       xorl    %edi, %edi
    0.00 :   ffffffff81094c08:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81094c0d:       movq    %rax, %rbx
    0.00 :   ffffffff81094c10:       jmp     0xffffffff81094b9a <task_work_run+0x1a>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b67680 <sync_regs>:
         : 5                ; sync_regs():
    0.00 :   ffffffff81b67680:       movq    %rdi, %rsi
    0.00 :   ffffffff81b67683:       movq    %gs:0x7e4bb08d(%rip), %rax
    0.00 :   ffffffff81b6768b:       subq    $0xa8, %rax
    0.00 :   ffffffff81b67691:       cmpq    %rdi, %rax
    0.00 :   ffffffff81b67694:       je      0xffffffff81b676a1 <sync_regs+0x21>
    0.00 :   ffffffff81b67696:       movl    $0x15, %ecx
    0.00 :   ffffffff81b6769b:       movq    %rax, %rdi
  100.00 :   ffffffff81b6769e:       rep             movsq   (%rsi), %es:(%rdi)
    0.00 :   ffffffff81b676a1:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b676a3:       xorl    %esi, %esi
    0.00 :   ffffffff81b676a5:       xorl    %edi, %edi
    0.00 :   ffffffff81b676a7:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81140970 <__cgroup_account_cputime_field>:
         : 5                ; __cgroup_account_cputime_field():
  100.00 :   ffffffff81140970:       pushq   %rbp
    0.00 :   ffffffff81140971:       movq    %rsp, %rbp
    0.00 :   ffffffff81140974:       incl    %gs:0x7eee1d8d(%rip)
    0.00 :   ffffffff8114097b:       movq    0x380(%rdi), %rax
    0.00 :   ffffffff81140982:       addq    %gs:0x7eed50a6(%rip), %rax
    0.00 :   ffffffff8114098a:       cmpl    $0x4, %esi
    0.00 :   ffffffff8114098d:       ja      0xffffffff811409bb <__cgroup_account_cputime_field+0x4b>
    0.00 :   ffffffff8114098f:       cmpl    $0x1, %esi
    0.00 :   ffffffff81140992:       ja      0xffffffff811409c6 <__cgroup_account_cputime_field+0x56>
    0.00 :   ffffffff81140994:       addq    %rdx, 0x8(%rax)
    0.00 :   ffffffff81140998:       movl    %gs:0x7eee1d6d(%rip), %esi
    0.00 :   ffffffff8114099f:       callq   0xffffffff81140240 <cgroup_rstat_updated>
    0.00 :   ffffffff811409a4:       decl    %gs:0x7eee1d5d(%rip)
    0.00 :   ffffffff811409ab:       je      0xffffffff811409cb <__cgroup_account_cputime_field+0x5b>
    0.00 :   ffffffff811409ad:       popq    %rbp
    0.00 :   ffffffff811409ae:       xorl    %eax, %eax
    0.00 :   ffffffff811409b0:       xorl    %edx, %edx
    0.00 :   ffffffff811409b2:       xorl    %esi, %esi
    0.00 :   ffffffff811409b4:       xorl    %edi, %edi
    0.00 :   ffffffff811409b6:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff811409bb:       cmpl    $0xa, %esi
    0.00 :   ffffffff811409be:       jne     0xffffffff81140998 <__cgroup_account_cputime_field+0x28>
    0.00 :   ffffffff811409c0:       addq    %rdx, 0x18(%rax)
    0.00 :   ffffffff811409c4:       jmp     0xffffffff81140998 <__cgroup_account_cputime_field+0x28>
    0.00 :   ffffffff811409c6:       addq    %rdx, (%rax)
    0.00 :   ffffffff811409c9:       jmp     0xffffffff81140998 <__cgroup_account_cputime_field+0x28>
    0.00 :   ffffffff811409cb:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff811409d0:       popq    %rbp
    0.00 :   ffffffff811409d1:       xorl    %eax, %eax
    0.00 :   ffffffff811409d3:       xorl    %edx, %edx
    0.00 :   ffffffff811409d5:       xorl    %esi, %esi
    0.00 :   ffffffff811409d7:       xorl    %edi, %edi
    0.00 :   ffffffff811409d9:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81a11b80 <tcp_wfree>:
         : 5                ; tcp_wfree():
   51.56 :   ffffffff81a11b80:       pushq   %rbp
   48.44 :   ffffffff81a11b81:       movq    %rsp, %rbp
    0.00 :   ffffffff81a11b84:       pushq   %r12
    0.00 :   ffffffff81a11b86:       pushq   %rbx
    0.00 :   ffffffff81a11b87:       movl    0xd0(%rdi), %edx
    0.00 :   ffffffff81a11b8d:       movq    0x18(%rdi), %rbx
    0.00 :   ffffffff81a11b91:       decl    %edx
    0.00 :   ffffffff81a11b93:       movl    %edx, %eax
    0.00 :   ffffffff81a11b95:       negl    %eax
    0.00 :   ffffffff81a11b97:       lock
    0.00 :   ffffffff81a11b98:       xaddl   %eax, 0x154(%rbx)
    0.00 :   ffffffff81a11b9f:       cmpl    %eax, %edx
    0.00 :   ffffffff81a11ba1:       je      0xffffffff81a11c63 <tcp_wfree+0xe3>
    0.00 :   ffffffff81a11ba7:       movl    %eax, %ecx
    0.00 :   ffffffff81a11ba9:       subl    %edx, %ecx
    0.00 :   ffffffff81a11bab:       orl     %eax, %ecx
    0.00 :   ffffffff81a11bad:       js      0xffffffff81a11c88 <tcp_wfree+0x108>
    0.00 :   ffffffff81a11bb3:       movl    0x154(%rbx), %eax
    0.00 :   ffffffff81a11bb9:       cmpl    $0x240, %eax    # imm = 0x240
    0.00 :   ffffffff81a11bbe:       jbe     0xffffffff81a11bda <tcp_wfree+0x5a>
    0.00 :   ffffffff81a11bc0:       movq    %gs:0x7e6094b8(%rip), %rax
    0.00 :   ffffffff81a11bc8:       movq    %gs:0x22700, %rdx
    0.00 :   ffffffff81a11bd1:       cmpq    %rax, %rdx
    0.00 :   ffffffff81a11bd4:       je      0xffffffff81a11c6a <tcp_wfree+0xea>
    0.00 :   ffffffff81a11bda:       movq    0x158(%rbx), %rax
    0.00 :   ffffffff81a11be1:       movq    %rax, %rdx
    0.00 :   ffffffff81a11be4:       andl    $0x3, %edx
    0.00 :   ffffffff81a11be7:       decq    %rdx
    0.00 :   ffffffff81a11bea:       jne     0xffffffff81a11c6a <tcp_wfree+0xea>
    0.00 :   ffffffff81a11bec:       movq    %rax, %rdx
    0.00 :   ffffffff81a11bef:       andq    $-0x4, %rdx
    0.00 :   ffffffff81a11bf3:       orq     $0x2, %rdx
    0.00 :   ffffffff81a11bf7:       lock
    0.00 :   ffffffff81a11bf8:       cmpxchgq        %rdx, 0x158(%rbx)
    0.00 :   ffffffff81a11c00:       jne     0xffffffff81a11be1 <tcp_wfree+0x61>
    0.00 :   ffffffff81a11c02:       pushfq
    0.00 :   ffffffff81a11c03:       popq    %r12
    0.00 :   ffffffff81a11c05:       cli
    0.00 :   ffffffff81a11c06:       movq    $0x22580, %rdi  # imm = 0x22580
    0.00 :   ffffffff81a11c0d:       leaq    0x5c8(%rbx), %rdx
    0.00 :   ffffffff81a11c14:       addq    %gs:0x7e603e14(%rip), %rdi
    0.00 :   ffffffff81a11c1c:       movq    0x28(%rdi), %rsi
    0.00 :   ffffffff81a11c20:       movq    0x28(%rdi), %rcx
    0.00 :   ffffffff81a11c24:       leaq    0x28(%rdi), %rax
    0.00 :   ffffffff81a11c28:       cmpq    %rsi, %rax
    0.00 :   ffffffff81a11c2b:       movq    %rdx, 0x8(%rcx)
    0.00 :   ffffffff81a11c2f:       movq    %rcx, 0x5c8(%rbx)
    0.00 :   ffffffff81a11c36:       movq    %rax, 0x5d0(%rbx)
    0.00 :   ffffffff81a11c3d:       movq    %rdx, 0x28(%rdi)
    0.00 :   ffffffff81a11c41:       je      0xffffffff81a11ca1 <tcp_wfree+0x121>
    0.00 :   ffffffff81a11c43:       testl   $0x200, %r12d   # imm = 0x200
    0.00 :   ffffffff81a11c4a:       je      0xffffffff81a11c4d <tcp_wfree+0xcd>
    0.00 :   ffffffff81a11c4c:       sti
    0.00 :   ffffffff81a11c4d:       popq    %rbx
    0.00 :   ffffffff81a11c4e:       popq    %r12
    0.00 :   ffffffff81a11c50:       popq    %rbp
    0.00 :   ffffffff81a11c51:       xorl    %eax, %eax
    0.00 :   ffffffff81a11c53:       xorl    %edx, %edx
    0.00 :   ffffffff81a11c55:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a11c57:       xorl    %esi, %esi
    0.00 :   ffffffff81a11c59:       xorl    %edi, %edi
    0.00 :   ffffffff81a11c5b:       xorl    %r8d, %r8d
    0.00 :   ffffffff81a11c5e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a11c63:       ud2
    0.00 :   ffffffff81a11c65:       jmp     0xffffffff81a11bb3 <tcp_wfree+0x33>
    0.00 :   ffffffff81a11c6a:       movq    %rbx, %rdi
    0.00 :   ffffffff81a11c6d:       callq   0xffffffff8192b220 <sk_free>
    0.00 :   ffffffff81a11c72:       popq    %rbx
    0.00 :   ffffffff81a11c73:       popq    %r12
    0.00 :   ffffffff81a11c75:       popq    %rbp
    0.00 :   ffffffff81a11c76:       xorl    %eax, %eax
    0.00 :   ffffffff81a11c78:       xorl    %edx, %edx
    0.00 :   ffffffff81a11c7a:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a11c7c:       xorl    %esi, %esi
    0.00 :   ffffffff81a11c7e:       xorl    %edi, %edi
    0.00 :   ffffffff81a11c80:       xorl    %r8d, %r8d
    0.00 :   ffffffff81a11c83:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a11c88:       leaq    0x154(%rbx), %r8
    0.00 :   ffffffff81a11c8f:       movl    $0x3, %esi
    0.00 :   ffffffff81a11c94:       movq    %r8, %rdi
    0.00 :   ffffffff81a11c97:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a11c9c:       jmp     0xffffffff81a11bb3 <tcp_wfree+0x33>
    0.00 :   ffffffff81a11ca1:       lock
    0.00 :   ffffffff81a11ca2:       btsq    $0x0, 0x8(%rdi)
    0.00 :   ffffffff81a11ca8:       jb      0xffffffff81a11c43 <tcp_wfree+0xc3>
    0.00 :   ffffffff81a11caa:       nopw    (%rax,%rax)
    0.00 :   ffffffff81a11cb0:       callq   0xffffffff81070e40 <__tasklet_schedule>
    0.00 :   ffffffff81a11cb5:       jmp     0xffffffff81a11c43 <tcp_wfree+0xc3>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811d1ca0 <perf_ctx_enable>:
         : 5                ; perf_ctx_enable():
  100.00 :   ffffffff811d1ca0:       pushq   %rbp
    0.00 :   ffffffff811d1ca1:       movq    %rsp, %rbp
    0.00 :   ffffffff811d1ca4:       pushq   %r12
    0.00 :   ffffffff811d1ca6:       pushq   %rbx
    0.00 :   ffffffff811d1ca7:       movq    0x28(%rdi), %rax
    0.00 :   ffffffff811d1cab:       leaq    0x28(%rdi), %r12
    0.00 :   ffffffff811d1caf:       cmpq    %rax, %r12
    0.00 :   ffffffff811d1cb2:       je      0xffffffff811d1ce1 <perf_ctx_enable+0x41>
    0.00 :   ffffffff811d1cb4:       leaq    -0x10(%rax), %rbx
    0.00 :   ffffffff811d1cb8:       movq    (%rbx), %rdi
    0.00 :   ffffffff811d1cbb:       movq    0x40(%rdi), %rax
    0.00 :   ffffffff811d1cbf:       addq    %gs:0x7ee43d69(%rip), %rax
    0.00 :   ffffffff811d1cc7:       decl    (%rax)
    0.00 :   ffffffff811d1cc9:       jne     0xffffffff811d1cd4 <perf_ctx_enable+0x34>
    0.00 :   ffffffff811d1ccb:       movq    0x60(%rdi), %rax
    0.00 :   ffffffff811d1ccf:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d1cd4:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff811d1cd8:       cmpq    %rax, %r12
    0.00 :   ffffffff811d1cdb:       leaq    -0x10(%rax), %rbx
    0.00 :   ffffffff811d1cdf:       jne     0xffffffff811d1cb8 <perf_ctx_enable+0x18>
    0.00 :   ffffffff811d1ce1:       popq    %rbx
    0.00 :   ffffffff811d1ce2:       popq    %r12
    0.00 :   ffffffff811d1ce4:       popq    %rbp
    0.00 :   ffffffff811d1ce5:       xorl    %eax, %eax
    0.00 :   ffffffff811d1ce7:       xorl    %edx, %edx
    0.00 :   ffffffff811d1ce9:       xorl    %ecx, %ecx
    0.00 :   ffffffff811d1ceb:       xorl    %edi, %edi
    0.00 :   ffffffff811d1ced:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810c06e0 <rebalance_domains>:
         : 5                ; rebalance_domains():
    0.00 :   ffffffff810c06e0:       pushq   %rbp
    0.00 :   ffffffff810c06e1:       movq    %rsp, %rbp
    0.00 :   ffffffff810c06e4:       pushq   %r15
    0.00 :   ffffffff810c06e6:       pushq   %r14
    0.00 :   ffffffff810c06e8:       pushq   %r13
    0.00 :   ffffffff810c06ea:       pushq   %r12
    0.00 :   ffffffff810c06ec:       movq    %rdi, %r12
    0.00 :   ffffffff810c06ef:       pushq   %rbx
    0.00 :   ffffffff810c06f0:       subq    $0x58, %rsp
    0.00 :   ffffffff810c06f4:       movl    %esi, -0x68(%rbp)
    0.00 :   ffffffff810c06f7:       movq    %gs:0x28, %rax
    0.00 :   ffffffff810c0700:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff810c0704:       xorl    %eax, %eax
    0.00 :   ffffffff810c0706:       movl    0xa60(%rdi), %ecx
    0.00 :   ffffffff810c070c:       testl   %esi, %esi
    0.00 :   ffffffff810c070e:       movl    $0x1, -0x44(%rbp)
    0.00 :   ffffffff810c0715:       movl    %ecx, -0x58(%rbp)
    0.00 :   ffffffff810c0718:       je      0xffffffff810c08c8 <rebalance_domains+0x1e8>
    0.00 :   ffffffff810c071e:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810c0725:       movslq  %ecx, %rsi
    0.00 :   ffffffff810c0728:       movq    %rax, -0x70(%rbp)
    0.00 :   ffffffff810c072c:       movq    %rsi, -0x60(%rbp)
    0.00 :   ffffffff810c0730:       addq    -0x7dedc720(,%rsi,8), %rax
    0.00 :   ffffffff810c0738:       movl    0x4(%rax), %edx
    0.00 :   ffffffff810c073b:       cmpl    %edx, 0x9c(%rax)
    0.00 :   ffffffff810c0741:       sete    %al
    0.00 :   ffffffff810c0744:       testl   %edx, %edx
    0.00 :   ffffffff810c0746:       setne   %dl
    0.00 :   ffffffff810c0749:       andl    %edx, %eax
    0.00 :   ffffffff810c074b:       xorl    $0x1, %eax
    0.00 :   ffffffff810c074e:       movzbl  %al, %eax
    0.00 :   ffffffff810c0751:       movl    %eax, -0x54(%rbp)
    0.00 :   ffffffff810c0754:       movq    0x1147265(%rip), %rbx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c075b:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff810c0760:       movq    -0x60(%rbp), %rsi
    0.00 :   ffffffff810c0764:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810c076b:       addq    $0xea60, %rbx   # imm = 0xEA60
    0.00 :   ffffffff810c0772:       addq    -0x7dedc720(,%rsi,8), %rax
    0.00 :   ffffffff810c077a:       movq    0x9f8(%rax), %r15
    0.00 :   ffffffff810c0781:       testq   %r15, %r15
    0.00 :   ffffffff810c0784:       je      0xffffffff810c0a27 <rebalance_domains+0x347>
    0.00 :   ffffffff810c078a:       xorl    %edx, %edx
    0.00 :   ffffffff810c078c:       movq    %r12, -0x50(%rbp)
    0.00 :   ffffffff810c0790:       xorl    %r13d, %r13d
    0.00 :   ffffffff810c0793:       movq    %rbx, %r12
    0.00 :   ffffffff810c0796:       movl    $0x1, %edi
    0.00 :   ffffffff810c079b:       movq    %r15, %rbx
    0.00 :   ffffffff810c079e:       xorl    %r14d, %r14d
    0.00 :   ffffffff810c07a1:       movq    %rdx, %r15
    0.00 :   ffffffff810c07a4:       movq    %r13, -0x38(%rbp)
    0.00 :   ffffffff810c07a8:       movq    0x1147211(%rip), %rcx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c07af:       movl    $0x3e8, %eax    # imm = 0x3E8
    0.00 :   ffffffff810c07b4:       movq    0x58(%rbx), %rdx
    0.00 :   ffffffff810c07b8:       subq    %rcx, %rax
    0.00 :   ffffffff810c07bb:       addq    0x60(%rbx), %rax
    0.00 :   ffffffff810c07bf:       js      0xffffffff810c0815 <rebalance_domains+0x135>
    0.00 :   ffffffff810c07c1:       testl   %edi, %edi
    0.00 :   ffffffff810c07c3:       jne     0xffffffff810c0851 <rebalance_domains+0x171>
    0.00 :   ffffffff810c07c9:       movq    %r12, %rbx
    0.00 :   ffffffff810c07cc:       movq    -0x50(%rbp), %r12
    0.00 :   ffffffff810c07d0:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff810c07d5:       testl   %r14d, %r14d
    0.00 :   ffffffff810c07d8:       je      0xffffffff810c07e2 <rebalance_domains+0x102>
    0.00 :   ffffffff810c07da:       movq    %rbx, 0x988(%r12)
    0.00 :   ffffffff810c07e2:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff810c07e6:       subq    %gs:0x28, %rax
    0.00 :   ffffffff810c07ef:       jne     0xffffffff810c0a72 <rebalance_domains+0x392>
    0.00 :   ffffffff810c07f5:       addq    $0x58, %rsp
    0.00 :   ffffffff810c07f9:       popq    %rbx
    0.00 :   ffffffff810c07fa:       popq    %r12
    0.00 :   ffffffff810c07fc:       popq    %r13
    0.00 :   ffffffff810c07fe:       popq    %r14
    0.00 :   ffffffff810c0800:       popq    %r15
    0.00 :   ffffffff810c0802:       popq    %rbp
    0.00 :   ffffffff810c0803:       xorl    %eax, %eax
    0.00 :   ffffffff810c0805:       xorl    %edx, %edx
    0.00 :   ffffffff810c0807:       xorl    %ecx, %ecx
    0.00 :   ffffffff810c0809:       xorl    %esi, %esi
    0.00 :   ffffffff810c080b:       xorl    %edi, %edi
    0.00 :   ffffffff810c080d:       xorl    %r8d, %r8d
    0.00 :   ffffffff810c0810:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810c0815:       imulq   $0xfd, %rdx, %rdx
    0.00 :   ffffffff810c081c:       movq    0x114719d(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c0823:       movl    $0x1, -0x64(%rbp)
    0.00 :   ffffffff810c082a:       movq    %rax, 0x60(%rbx)
    0.00 :   ffffffff810c082e:       shrq    $0x8, %rdx
    0.00 :   ffffffff810c0832:       addq    %rdx, %r15
    0.00 :   ffffffff810c0835:       testl   %edi, %edi
    0.00 :   ffffffff810c0837:       movq    %rdx, 0x58(%rbx)
    0.00 :   ffffffff810c083b:       jne     0xffffffff810c085b <rebalance_domains+0x17b>
    0.00 :   ffffffff810c083d:       movq    (%rbx), %rbx
    0.00 :   ffffffff810c0840:       testq   %rbx, %rbx
    0.00 :   ffffffff810c0843:       je      0xffffffff810c08f5 <rebalance_domains+0x215>
    0.00 :   ffffffff810c0849:       movl    -0x44(%rbp), %edi
    0.00 :   ffffffff810c084c:       jmp     0xffffffff810c07a4 <rebalance_domains+0xc4>
    0.00 :   ffffffff810c0851:       addq    %rdx, %r15
    0.00 :   ffffffff810c0854:       movl    $0x0, -0x64(%rbp)
    0.00 :   ffffffff810c085b:       movl    -0x54(%rbp), %ecx
    0.00 :   ffffffff810c085e:       movl    0x50(%rbx), %edi
    0.00 :   ffffffff810c0861:       testl   %ecx, %ecx
    0.00 :   ffffffff810c0863:       jne     0xffffffff810c08e4 <rebalance_domains+0x204>
    0.00 :   ffffffff810c0865:       callq   0xffffffff8110eda0 <__msecs_to_jiffies>
    0.00 :   ffffffff810c086a:       movq    0x12a606f(%rip), %rdx # 0xffffffff823668e0 <max_load_balance_interval>
    0.00 :   ffffffff810c0871:       testq   %rax, %rax
    0.00 :   ffffffff810c0874:       movl    $0x1, %ecx
    0.00 :   ffffffff810c0879:       cmovneq %rax, %rcx
    0.00 :   ffffffff810c087d:       cmpq    %rdx, %rax
    0.00 :   ffffffff810c0880:       movl    0x3c(%rbx), %eax
    0.00 :   ffffffff810c0883:       cmovbq  %rcx, %rdx
    0.00 :   ffffffff810c0887:       andl    $0x200, %eax    # imm = 0x200
    0.00 :   ffffffff810c088c:       movl    %eax, -0x78(%rbp)
    0.00 :   ffffffff810c088f:       jne     0xffffffff810c0922 <rebalance_domains+0x242>
    0.00 :   ffffffff810c0895:       movq    0x48(%rbx), %rax
    0.00 :   ffffffff810c0899:       movq    %r13, -0x40(%rbp)
    0.00 :   ffffffff810c089d:       movq    0x114711c(%rip), %rcx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c08a4:       subq    %rax, %rcx
    0.00 :   ffffffff810c08a7:       cmpq    %rdx, %rcx
    0.00 :   ffffffff810c08aa:       jns     0xffffffff810c0952 <rebalance_domains+0x272>
    0.00 :   ffffffff810c08b0:       addq    %rdx, %rax
    0.00 :   ffffffff810c08b3:       cmpq    %r12, %rax
    0.00 :   ffffffff810c08b6:       cmovsq  %rax, %r12
  100.00 :   ffffffff810c08ba:       movl    $0x1, %eax
    0.00 :   ffffffff810c08bf:       cmovsl  %eax, %r14d
    0.00 :   ffffffff810c08c3:       jmp     0xffffffff810c083d <rebalance_domains+0x15d>
    0.00 :   ffffffff810c08c8:       movslq  -0x58(%rbp), %rax
    0.00 :   ffffffff810c08cc:       movl    $0x0, -0x54(%rbp)
    0.00 :   ffffffff810c08d3:       movq    $0x22f40, -0x70(%rbp) # imm = 0x22F40
    0.00 :   ffffffff810c08db:       movq    %rax, -0x60(%rbp)
    0.00 :   ffffffff810c08df:       jmp     0xffffffff810c0754 <rebalance_domains+0x74>
    0.00 :   ffffffff810c08e4:       imull   0x28(%rbx), %edi
    0.00 :   ffffffff810c08e8:       callq   0xffffffff8110eda0 <__msecs_to_jiffies>
    0.00 :   ffffffff810c08ed:       decq    %rax
    0.00 :   ffffffff810c08f0:       jmp     0xffffffff810c086a <rebalance_domains+0x18a>
    0.00 :   ffffffff810c08f5:       movl    -0x64(%rbp), %r8d
    0.00 :   ffffffff810c08f9:       movq    %r12, %rbx
    0.00 :   ffffffff810c08fc:       movq    -0x50(%rbp), %r12
    0.00 :   ffffffff810c0900:       testl   %r8d, %r8d
    0.00 :   ffffffff810c0903:       je      0xffffffff810c07d0 <rebalance_domains+0xf0>
    0.00 :   ffffffff810c0909:       movl    $0x7a120, %eax  # imm = 0x7A120
    0.00 :   ffffffff810c090e:       cmpq    %rax, %r15
    0.00 :   ffffffff810c0911:       cmovaeq %r15, %rax
    0.00 :   ffffffff810c0915:       movq    %rax, 0xb20(%r12)
    0.00 :   ffffffff810c091d:       jmp     0xffffffff810c07d0 <rebalance_domains+0xf0>
    0.00 :   ffffffff810c0922:       movq    $-0x7d97456c, %rdi # imm = 0x8268BA94
    0.00 :   ffffffff810c0929:       movq    %rdx, -0x80(%rbp)
    0.00 :   ffffffff810c092d:       callq   0xffffffff81b77350 <_raw_spin_trylock>
    0.00 :   ffffffff810c0932:       testl   %eax, %eax
    0.00 :   ffffffff810c0934:       movq    -0x80(%rbp), %rdx
    0.00 :   ffffffff810c0938:       je      0xffffffff810c09d6 <rebalance_domains+0x2f6>
    0.00 :   ffffffff810c093e:       movq    %r13, -0x40(%rbp)
    0.00 :   ffffffff810c0942:       movq    0x1147077(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c0949:       subq    0x48(%rbx), %rax
    0.00 :   ffffffff810c094d:       cmpq    %rdx, %rax
    0.00 :   ffffffff810c0950:       js      0xffffffff810c09b9 <rebalance_domains+0x2d9>
    0.00 :   ffffffff810c0952:       movl    -0x68(%rbp), %ecx
    0.00 :   ffffffff810c0955:       movq    -0x50(%rbp), %rsi
    0.00 :   ffffffff810c0959:       leaq    -0x44(%rbp), %r8
    0.00 :   ffffffff810c095d:       movl    -0x58(%rbp), %edi
    0.00 :   ffffffff810c0960:       movq    %rbx, %rdx
    0.00 :   ffffffff810c0963:       callq   0xffffffff810bfb00 <load_balance>
    0.00 :   ffffffff810c0968:       testl   %eax, %eax
    0.00 :   ffffffff810c096a:       jne     0xffffffff810c09df <rebalance_domains+0x2ff>
    0.00 :   ffffffff810c096c:       movl    -0x54(%rbp), %edx
    0.00 :   ffffffff810c096f:       movq    0x114704a(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c0976:       movl    0x50(%rbx), %edi
    0.00 :   ffffffff810c0979:       testl   %edx, %edx
    0.00 :   ffffffff810c097b:       movq    %rax, 0x48(%rbx)
    0.00 :   ffffffff810c097f:       je      0xffffffff810c0a31 <rebalance_domains+0x351>
    0.00 :   ffffffff810c0985:       imull   0x28(%rbx), %edi
    0.00 :   ffffffff810c0989:       callq   0xffffffff8110eda0 <__msecs_to_jiffies>
    0.00 :   ffffffff810c098e:       movl    $0x1, -0x54(%rbp)
    0.00 :   ffffffff810c0995:       decq    %rax
    0.00 :   ffffffff810c0998:       movq    0x12a5f41(%rip), %rdx # 0xffffffff823668e0 <max_load_balance_interval>
    0.00 :   ffffffff810c099f:       testq   %rax, %rax
    0.00 :   ffffffff810c09a2:       movl    $0x1, %ecx
    0.00 :   ffffffff810c09a7:       cmovneq %rax, %rcx
    0.00 :   ffffffff810c09ab:       cmpq    %rdx, %rax
    0.00 :   ffffffff810c09ae:       movl    -0x78(%rbp), %eax
    0.00 :   ffffffff810c09b1:       cmovbq  %rcx, %rdx
    0.00 :   ffffffff810c09b5:       testl   %eax, %eax
    0.00 :   ffffffff810c09b7:       je      0xffffffff810c09d6 <rebalance_domains+0x2f6>
    0.00 :   ffffffff810c09b9:       movq    $-0x7d97456c, %rdi # imm = 0x8268BA94
    0.00 :   ffffffff810c09c0:       movq    %rdx, -0x78(%rbp)
    0.00 :   ffffffff810c09c4:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff810c09c9:       movq    0x48(%rbx), %rax
    0.00 :   ffffffff810c09cd:       movq    -0x78(%rbp), %rdx
    0.00 :   ffffffff810c09d1:       jmp     0xffffffff810c08b0 <rebalance_domains+0x1d0>
    0.00 :   ffffffff810c09d6:       movq    0x48(%rbx), %rax
    0.00 :   ffffffff810c09da:       jmp     0xffffffff810c08b0 <rebalance_domains+0x1d0>
    0.00 :   ffffffff810c09df:       movl    -0x58(%rbp), %edi
    0.00 :   ffffffff810c09e2:       callq   0xffffffff810acf60 <idle_cpu>
    0.00 :   ffffffff810c09e7:       testl   %eax, %eax
    0.00 :   ffffffff810c09e9:       movl    %eax, -0x54(%rbp)
    0.00 :   ffffffff810c09ec:       jne     0xffffffff810c0a3b <rebalance_domains+0x35b>
    0.00 :   ffffffff810c09ee:       movq    -0x60(%rbp), %rdi
    0.00 :   ffffffff810c09f2:       movq    -0x70(%rbp), %rax
    0.00 :   ffffffff810c09f6:       addq    -0x7dedc720(,%rdi,8), %rax
    0.00 :   ffffffff810c09fe:       movl    0x50(%rbx), %edi
    0.00 :   ffffffff810c0a01:       movl    0x4(%rax), %ecx
    0.00 :   ffffffff810c0a04:       cmpl    %ecx, 0x9c(%rax)
    0.00 :   ffffffff810c0a0a:       movq    0x1146faf(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c0a11:       movq    %rax, 0x48(%rbx)
    0.00 :   ffffffff810c0a15:       jne     0xffffffff810c0a1b <rebalance_domains+0x33b>
    0.00 :   ffffffff810c0a17:       testl   %ecx, %ecx
    0.00 :   ffffffff810c0a19:       jne     0xffffffff810c0a61 <rebalance_domains+0x381>
    0.00 :   ffffffff810c0a1b:       movl    $0x1, -0x68(%rbp)
    0.00 :   ffffffff810c0a22:       jmp     0xffffffff810c0985 <rebalance_domains+0x2a5>
    0.00 :   ffffffff810c0a27:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff810c0a2c:       jmp     0xffffffff810c07e2 <rebalance_domains+0x102>
    0.00 :   ffffffff810c0a31:       callq   0xffffffff8110eda0 <__msecs_to_jiffies>
    0.00 :   ffffffff810c0a36:       jmp     0xffffffff810c0998 <rebalance_domains+0x2b8>
    0.00 :   ffffffff810c0a3b:       movq    0x1146f7e(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810c0a42:       movl    0x50(%rbx), %edi
    0.00 :   ffffffff810c0a45:       movq    %rax, 0x48(%rbx)
    0.00 :   ffffffff810c0a49:       callq   0xffffffff8110eda0 <__msecs_to_jiffies>
    0.00 :   ffffffff810c0a4e:       movl    $0x0, -0x54(%rbp)
    0.00 :   ffffffff810c0a55:       movl    $0x0, -0x68(%rbp)
    0.00 :   ffffffff810c0a5c:       jmp     0xffffffff810c0998 <rebalance_domains+0x2b8>
    0.00 :   ffffffff810c0a61:       callq   0xffffffff8110eda0 <__msecs_to_jiffies>
    0.00 :   ffffffff810c0a66:       movl    $0x1, -0x68(%rbp)
    0.00 :   ffffffff810c0a6d:       jmp     0xffffffff810c0998 <rebalance_domains+0x2b8>
    0.00 :   ffffffff810c0a72:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b6bfb0 <memset_orig>:
         : 5                ; memset_orig():
    0.00 :   ffffffff81b6bfb0:       movq    %rdi, %r10
    0.00 :   ffffffff81b6bfb3:       movzbl  %sil, %ecx
    0.00 :   ffffffff81b6bfb7:       movabsq $0x101010101010101, %rax # imm = 0x101010101010101
    0.00 :   ffffffff81b6bfc1:       imulq   %rcx, %rax
    0.00 :   ffffffff81b6bfc5:       movl    %edi, %r9d
    0.00 :   ffffffff81b6bfc8:       andl    $0x7, %r9d
    0.00 :   ffffffff81b6bfcc:       jne     0xffffffff81b6c042 <memset_orig+0x92>
    0.00 :   ffffffff81b6bfce:       movq    %rdx, %rcx
    0.00 :   ffffffff81b6bfd1:       shrq    $0x6, %rcx
    0.00 :   ffffffff81b6bfd5:       je      0xffffffff81b6c010 <memset_orig+0x60>
    0.00 :   ffffffff81b6bfd7:       nopw    (%rax,%rax)
    0.00 :   ffffffff81b6bfe0:       decq    %rcx
    0.00 :   ffffffff81b6bfe3:       movq    %rax, (%rdi)
    0.00 :   ffffffff81b6bfe6:       movq    %rax, 0x8(%rdi)
    0.00 :   ffffffff81b6bfea:       movq    %rax, 0x10(%rdi)
    0.00 :   ffffffff81b6bfee:       movq    %rax, 0x18(%rdi)
   25.21 :   ffffffff81b6bff2:       movq    %rax, 0x20(%rdi)
   74.79 :   ffffffff81b6bff6:       movq    %rax, 0x28(%rdi)
    0.00 :   ffffffff81b6bffa:       movq    %rax, 0x30(%rdi)
    0.00 :   ffffffff81b6bffe:       movq    %rax, 0x38(%rdi)
    0.00 :   ffffffff81b6c002:       leaq    0x40(%rdi), %rdi
    0.00 :   ffffffff81b6c006:       jne     0xffffffff81b6bfe0 <memset_orig+0x30>
    0.00 :   ffffffff81b6c008:       nopl    (%rax,%rax)
    0.00 :   ffffffff81b6c010:       movl    %edx, %ecx
    0.00 :   ffffffff81b6c012:       andl    $0x38, %ecx
    0.00 :   ffffffff81b6c015:       je      0xffffffff81b6c02b <memset_orig+0x7b>
    0.00 :   ffffffff81b6c017:       shrl    $0x3, %ecx
    0.00 :   ffffffff81b6c01a:       nopw    (%rax,%rax)
    0.00 :   ffffffff81b6c020:       decl    %ecx
    0.00 :   ffffffff81b6c022:       movq    %rax, (%rdi)
    0.00 :   ffffffff81b6c025:       leaq    0x8(%rdi), %rdi
    0.00 :   ffffffff81b6c029:       jne     0xffffffff81b6c020 <memset_orig+0x70>
    0.00 :   ffffffff81b6c02b:       andl    $0x7, %edx
    0.00 :   ffffffff81b6c02e:       je      0xffffffff81b6c03a <memset_orig+0x8a>
    0.00 :   ffffffff81b6c030:       decl    %edx
    0.00 :   ffffffff81b6c032:       movb    %al, (%rdi)
    0.00 :   ffffffff81b6c034:       leaq    0x1(%rdi), %rdi
    0.00 :   ffffffff81b6c038:       jne     0xffffffff81b6c030 <memset_orig+0x80>
    0.00 :   ffffffff81b6c03a:       movq    %r10, %rax
    0.00 :   ffffffff81b6c03d:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b6c042:       cmpq    $0x7, %rdx
    0.00 :   ffffffff81b6c046:       jbe     0xffffffff81b6c02b <memset_orig+0x7b>
    0.00 :   ffffffff81b6c048:       movq    %rax, (%rdi)
    0.00 :   ffffffff81b6c04b:       movq    $0x8, %r8
    0.00 :   ffffffff81b6c052:       subq    %r9, %r8
    0.00 :   ffffffff81b6c055:       addq    %r8, %rdi
    0.00 :   ffffffff81b6c058:       subq    %r8, %rdx
    0.00 :   ffffffff81b6c05b:       jmp     0xffffffff81b6bfce <memset_orig+0x1e>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8110e360 <profile_tick>:
         : 5                ; profile_tick():
    0.00 :   ffffffff8110e360:       pushq   %rbp
  100.00 :   ffffffff8110e361:       movq    %rsp, %rbp
    0.00 :   ffffffff8110e364:       pushq   %rbx
    0.00 :   ffffffff8110e365:       movl    %edi, %ebx
    0.00 :   ffffffff8110e367:       movq    %gs:0x7ef142c1(%rip), %rdi
    0.00 :   ffffffff8110e36f:       testb   $0x3, 0x88(%rdi)
    0.00 :   ffffffff8110e376:       jne     0xffffffff8110e38b <profile_tick+0x2b>
    0.00 :   ffffffff8110e378:       movl    %gs:0x7ef1438d(%rip), %eax
    0.00 :   ffffffff8110e37f:       movl    %eax, %eax
    0.00 :   ffffffff8110e381:       btq     %rax, 0x15c0507(%rip) # 0xffffffff826ce890 <prof_cpu_mask>
    0.00 :   ffffffff8110e389:       jb      0xffffffff8110e39b <profile_tick+0x3b>
    0.00 :   ffffffff8110e38b:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff8110e38f:       leave
    0.00 :   ffffffff8110e390:       xorl    %eax, %eax
    0.00 :   ffffffff8110e392:       xorl    %esi, %esi
    0.00 :   ffffffff8110e394:       xorl    %edi, %edi
    0.00 :   ffffffff8110e396:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8110e39b:       callq   0xffffffff8101f7f0 <profile_pc>
    0.00 :   ffffffff8110e3a0:       cmpl    0x125867a(%rip), %ebx # 0xffffffff82366a20 <prof_on>
    0.00 :   ffffffff8110e3a6:       jne     0xffffffff8110e38b <profile_tick+0x2b>
    0.00 :   ffffffff8110e3a8:       cmpq    $0x0, 0x15c0500(%rip) # 0xffffffff826ce8b0 <prof_buffer>
    0.00 :   ffffffff8110e3b0:       je      0xffffffff8110e38b <profile_tick+0x2b>
    0.00 :   ffffffff8110e3b2:       movl    $0x1, %esi
    0.00 :   ffffffff8110e3b7:       movq    %rax, %rdi
    0.00 :   ffffffff8110e3ba:       callq   0xffffffff8110de70 <do_profile_hits.constprop.0>
    0.00 :   ffffffff8110e3bf:       jmp     0xffffffff8110e38b <profile_tick+0x2b>
 Percent |	Source code & Disassembly of lab2_list for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    000000000000345e <SortedList_length>:
         : 5    ; SortedList_length():
         : 6    ; /home/tlam/cs134/project2b/SortedList.c:62
         : 7    ; int SortedList_length(SortedList_t* list) {
    0.00 :   345e:           pushq   %rbp
    0.00 :   345f:           movq    %rsp, %rbp
    0.00 :   3462:           subq    $0x20, %rsp
    0.00 :   3466:           movq    %rdi, -0x18(%rbp)
         : 12   ; /home/tlam/cs134/project2b/SortedList.c:63
         : 13   ;     SortedListElement_t* it = list->next;
    0.00 :   346a:           movq    -0x18(%rbp), %rax
    0.00 :   346e:           movq    0x8(%rax), %rax
    0.00 :   3472:           movq    %rax, -0x8(%rbp)
         : 17   ; /home/tlam/cs134/project2b/SortedList.c:64
         : 18   ;     int counter = 0;
    0.00 :   3476:           movl    $0x0, -0xc(%rbp)
         : 20   ; /home/tlam/cs134/project2b/SortedList.c:65
         : 21   ;     while (it != list) { // increment counter until it reaches the head again
    0.00 :   347d:           jmp     0x34ca <SortedList_length+0x6c>
         : 23   ; /home/tlam/cs134/project2b/SortedList.c:66
         : 24   ;         if (it->prev->next != it || it->next->prev != it) { // check for corruptions
    0.00 :   347f:           movq    -0x8(%rbp), %rax
    0.00 :   3483:           movq    (%rax), %rax
    0.00 :   3486:           movq    0x8(%rax), %rax
    0.00 :   348a:           cmpq    %rax, -0x8(%rbp)
    0.00 :   348e:           jne     0x34a1 <SortedList_length+0x43>
    0.00 :   3490:           movq    -0x8(%rbp), %rax
  100.00 :   3494:           movq    0x8(%rax), %rax
    0.00 :   3498:           movq    (%rax), %rax
    0.00 :   349b:           cmpq    %rax, -0x8(%rbp)
    0.00 :   349f:           je      0x34a8 <SortedList_length+0x4a>
         : 35   ; /home/tlam/cs134/project2b/SortedList.c:67
         : 36   ;             return -1;
    0.00 :   34a1:           movl    $0xffffffff, %eax       # imm = 0xFFFFFFFF
    0.00 :   34a6:           jmp     0x34d7 <SortedList_length+0x79>
         : 39   ; /home/tlam/cs134/project2b/SortedList.c:70
         : 40   ;         if (opt_yield & LOOKUP_YIELD) {
    0.00 :   34a8:           movl    0x2d6e(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   34ae:           andl    $0x4, %eax
    0.00 :   34b1:           testl   %eax, %eax
    0.00 :   34b3:           je      0x34ba <SortedList_length+0x5c>
         : 45   ; /home/tlam/cs134/project2b/SortedList.c:71
         : 46   ;             sched_yield();
    0.00 :   34b5:           callq   0x10c0 <sched_yield@plt>
         : 48   ; /home/tlam/cs134/project2b/SortedList.c:73
         : 49   ;         it = it->next;
    0.00 :   34ba:           movq    -0x8(%rbp), %rax
    0.00 :   34be:           movq    0x8(%rax), %rax
    0.00 :   34c2:           movq    %rax, -0x8(%rbp)
         : 53   ; /home/tlam/cs134/project2b/SortedList.c:74
         : 54   ;         counter += 1;
    0.00 :   34c6:           addl    $0x1, -0xc(%rbp)
         : 56   ; /home/tlam/cs134/project2b/SortedList.c:65
         : 57   ;     while (it != list) { // increment counter until it reaches the head again
    0.00 :   34ca:           movq    -0x8(%rbp), %rax
    0.00 :   34ce:           cmpq    -0x18(%rbp), %rax
    0.00 :   34d2:           jne     0x347f <SortedList_length+0x21>
         : 61   ; /home/tlam/cs134/project2b/SortedList.c:76
         : 62   ;     return counter;
    0.00 :   34d4:           movl    -0xc(%rbp), %eax
         : 64   ; /home/tlam/cs134/project2b/SortedList.c:77
         : 65   ; }
    0.00 :   34d7:           leave
    0.00 :   34d8:           retq
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81130420 <__smp_call_single_queue>:
         : 5                ; __smp_call_single_queue():
    0.00 :   ffffffff81130420:       pushq   %rbp
    0.00 :   ffffffff81130421:       movslq  %edi, %rax
    0.00 :   ffffffff81130424:       movq    %rsi, %rdi
    0.00 :   ffffffff81130427:       movq    %rsp, %rbp
  100.00 :   ffffffff8113042a:       pushq   %rbx
    0.00 :   ffffffff8113042b:       movq    %rax, %rbx
    0.00 :   ffffffff8113042e:       movq    $0x23f00, %rdx  # imm = 0x23F00
    0.00 :   ffffffff81130435:       addq    -0x7dedc720(,%rax,8), %rdx
    0.00 :   ffffffff8113043d:       callq   0xffffffff815a10b0 <llist_add_batch>
    0.00 :   ffffffff81130442:       testb   %al, %al
    0.00 :   ffffffff81130444:       jne     0xffffffff81130458 <__smp_call_single_queue+0x38>
    0.00 :   ffffffff81130446:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff8113044a:       leave
    0.00 :   ffffffff8113044b:       xorl    %eax, %eax
    0.00 :   ffffffff8113044d:       xorl    %edx, %edx
    0.00 :   ffffffff8113044f:       xorl    %esi, %esi
    0.00 :   ffffffff81130451:       xorl    %edi, %edi
    0.00 :   ffffffff81130453:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81130458:       movl    %ebx, %edi
    0.00 :   ffffffff8113045a:       callq   0xffffffff810abce0 <call_function_single_prep_ipi>
    0.00 :   ffffffff8113045f:       testb   %al, %al
    0.00 :   ffffffff81130461:       je      0xffffffff81130446 <__smp_call_single_queue+0x26>
    0.00 :   ffffffff81130463:       movl    %ebx, %edi
    0.00 :   ffffffff81130465:       movq    0x10eeccc(%rip), %rax # 0xffffffff8221f138 <smp_ops+0x38>
    0.00 :   ffffffff8113046c:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81130471:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81130475:       leave
    0.00 :   ffffffff81130476:       xorl    %eax, %eax
    0.00 :   ffffffff81130478:       xorl    %edx, %edx
    0.00 :   ffffffff8113047a:       xorl    %esi, %esi
    0.00 :   ffffffff8113047c:       xorl    %edi, %edi
    0.00 :   ffffffff8113047e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c013f0 <error_return>:
         : 5                ; error_return():
    0.00 :   ffffffff81c013f0:       testb   $0x3, 0x88(%rsp)
    0.00 :   ffffffff81c013f8:       je      0xffffffff81c01020 <restore_regs_and_return_to_kernel>
  100.00 :   ffffffff81c013fe:       jmp     0xffffffff81c00f30 <swapgs_restore_regs_and_return_to_usermode>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b8820 <enqueue_task_fair>:
         : 5                ; enqueue_task_fair():
    0.00 :   ffffffff810b8820:       pushq   %rbp
    0.00 :   ffffffff810b8821:       movq    %rsp, %rbp
    0.00 :   ffffffff810b8824:       pushq   %r15
    0.00 :   ffffffff810b8826:       pushq   %r14
    0.00 :   ffffffff810b8828:       movq    %rdi, %r14
    0.00 :   ffffffff810b882b:       pushq   %r13
   50.97 :   ffffffff810b882d:       pushq   %r12
    0.00 :   ffffffff810b882f:       pushq   %rbx
    0.00 :   ffffffff810b8830:       subq    $0x8, %rsp
    0.00 :   ffffffff810b8834:       movl    %edx, -0x2c(%rbp)
    0.00 :   ffffffff810b8837:       xorl    %r15d, %r15d
    0.00 :   ffffffff810b883a:       movq    0x4f8(%rsi), %rdx
    0.00 :   ffffffff810b8841:       cmpl    $0x5, 0x958(%rsi)
    0.00 :   ffffffff810b8848:       leaq    0x400(%rsi), %rbx
    0.00 :   ffffffff810b884f:       movl    %edx, %ecx
    0.00 :   ffffffff810b8851:       sete    %r15b
    0.00 :   ffffffff810b8855:       andl    $0x7fffffff, %ecx # imm = 0x7FFFFFFF
    0.00 :   ffffffff810b885b:       shrq    $0x20, %rdx
    0.00 :   ffffffff810b885f:       cmpl    %edx, %ecx
    0.00 :   ffffffff810b8861:       cmovbl  %edx, %ecx
    0.00 :   ffffffff810b8864:       addl    0x138(%rdi), %ecx
    0.00 :   ffffffff810b886a:       movl    %ecx, 0x138(%rdi)
    0.00 :   ffffffff810b8870:       testb   $0x4, 0x294(%rsi)
    0.00 :   ffffffff810b8877:       jne     0xffffffff810b8a0f <enqueue_task_fair+0x1ef>
    0.00 :   ffffffff810b887d:       testq   %rbx, %rbx
    0.00 :   ffffffff810b8880:       je      0xffffffff810b892f <enqueue_task_fair+0x10f>
    0.00 :   ffffffff810b8886:       movl    -0x2c(%rbp), %edx
    0.00 :   ffffffff810b8889:       movl    $0x1, %r13d
    0.00 :   ffffffff810b888f:       jmp     0xffffffff810b88cb <enqueue_task_fair+0xab>
    0.00 :   ffffffff810b8891:       movq    0x78(%rbx), %r12
    0.00 :   ffffffff810b8895:       movq    %rbx, %rsi
    0.00 :   ffffffff810b8898:       movq    %r12, %rdi
    0.00 :   ffffffff810b889b:       callq   0xffffffff810b8430 <enqueue_entity>
    0.00 :   ffffffff810b88a0:       movl    0x158(%r12), %esi
    0.00 :   ffffffff810b88a8:       addl    %r15d, 0x1c(%r12)
    0.00 :   ffffffff810b88ad:       incl    0x14(%r12)
    0.00 :   ffffffff810b88b2:       testl   %esi, %esi
    0.00 :   ffffffff810b88b4:       cmovgl  %r13d, %r15d
    0.00 :   ffffffff810b88b8:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b88bd:       movq    0x70(%rbx), %rbx
    0.00 :   ffffffff810b88c1:       movl    $0x1, %edx
    0.00 :   ffffffff810b88c6:       testq   %rbx, %rbx
    0.00 :   ffffffff810b88c9:       je      0xffffffff810b892f <enqueue_task_fair+0x10f>
    0.00 :   ffffffff810b88cb:       movl    0x38(%rbx), %edi
    0.00 :   ffffffff810b88ce:       testl   %edi, %edi
    0.00 :   ffffffff810b88d0:       je      0xffffffff810b8891 <enqueue_task_fair+0x71>
    0.00 :   ffffffff810b88d2:       movq    0x78(%rbx), %r12
    0.00 :   ffffffff810b88d6:       movl    $0x1, %edx
    0.00 :   ffffffff810b88db:       movq    %rbx, %rsi
    0.00 :   ffffffff810b88de:       movq    %r12, %rdi
    0.00 :   ffffffff810b88e1:       callq   0xffffffff810b69c0 <update_load_avg>
    0.00 :   ffffffff810b88e6:       movq    0x80(%rbx), %rdx
    0.00 :   ffffffff810b88ed:       testq   %rdx, %rdx
    0.00 :   ffffffff810b88f0:       je      0xffffffff810b88fc <enqueue_task_fair+0xdc>
    0.00 :   ffffffff810b88f2:       movl    0x14(%rdx), %eax
    0.00 :   ffffffff810b88f5:       movq    %rax, 0x88(%rbx)
    0.00 :   ffffffff810b88fc:       movq    %rbx, %rdi
    0.00 :   ffffffff810b88ff:       callq   0xffffffff810b48f0 <update_cfs_group>
    0.00 :   ffffffff810b8904:       movl    0x158(%r12), %edx
    0.00 :   ffffffff810b890c:       addl    %r15d, 0x1c(%r12)
    0.00 :   ffffffff810b8911:       incl    0x14(%r12)
    0.00 :   ffffffff810b8916:       testl   %edx, %edx
    0.00 :   ffffffff810b8918:       movl    $0x1, %edx
    0.00 :   ffffffff810b891d:       cmovgl  %edx, %r15d
    0.00 :   ffffffff810b8921:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b8926:       movq    0x70(%rbx), %rbx
    0.00 :   ffffffff810b892a:       testq   %rbx, %rbx
    0.00 :   ffffffff810b892d:       jne     0xffffffff810b88d2 <enqueue_task_fair+0xb2>
    0.00 :   ffffffff810b892f:       movl    0x4(%r14), %eax
    0.00 :   ffffffff810b8933:       leal    0x1(%rax), %edx
    0.00 :   ffffffff810b8936:       decl    %eax
    0.00 :   ffffffff810b8938:       movl    %edx, 0x4(%r14)
   49.03 :   ffffffff810b893c:       je      0xffffffff810b8a4a <enqueue_task_fair+0x22a>
    0.00 :   ffffffff810b8942:       testb   $0x1, -0x2c(%rbp)
    0.00 :   ffffffff810b8946:       je      0xffffffff810b89c5 <enqueue_task_fair+0x1a5>
    0.00 :   ffffffff810b8948:       movq    0x9f0(%r14), %rdx
    0.00 :   ffffffff810b894f:       movl    0x3c(%rdx), %eax
    0.00 :   ffffffff810b8952:       testl   %eax, %eax
    0.00 :   ffffffff810b8954:       jne     0xffffffff810b89c5 <enqueue_task_fair+0x1a5>
    0.00 :   ffffffff810b8956:       movslq  0xa60(%r14), %rax
    0.00 :   ffffffff810b895d:       movq    $0x22f40, %rcx  # imm = 0x22F40
    0.00 :   ffffffff810b8964:       movq    -0x7dedc720(,%rax,8), %rdi
    0.00 :   ffffffff810b896c:       leaq    (%rdi,%rcx), %rax
    0.00 :   ffffffff810b8970:       movq    0x130(%rax), %rsi
    0.00 :   ffffffff810b8977:       movl    0x138(%rax), %eax
    0.00 :   ffffffff810b897d:       cmpq    %rsi, %rax
    0.00 :   ffffffff810b8980:       cmovbq  %rsi, %rax
    0.00 :   ffffffff810b8984:       movq    0xa08(%rdi,%rcx), %rsi
    0.00 :   ffffffff810b898c:       cmpq    %rsi, %rax
    0.00 :   ffffffff810b898f:       cmovaq  %rsi, %rax
    0.00 :   ffffffff810b8993:       leaq    (%rax,%rax,4), %rsi
    0.00 :   ffffffff810b8997:       movq    0xa00(%rdi,%rcx), %rax
    0.00 :   ffffffff810b899f:       shlq    $0x8, %rsi
    0.00 :   ffffffff810b89a3:       shlq    $0xa, %rax
    0.00 :   ffffffff810b89a7:       cmpq    %rax, %rsi
    0.00 :   ffffffff810b89aa:       jb      0xffffffff810b89c5 <enqueue_task_fair+0x1a5>
    0.00 :   ffffffff810b89ac:       movl    $0x2, 0x3c(%rdx)
    0.00 :   ffffffff810b89b3:       jmp     0xffffffff810b89c5 <enqueue_task_fair+0x1a5>
    0.00 :   ffffffff810b89b5:       movl    0x188(%r12), %ecx
    0.00 :   ffffffff810b89bd:       testl   %ecx, %ecx
    0.00 :   ffffffff810b89bf:       je      0xffffffff810b88bd <enqueue_task_fair+0x9d>
    0.00 :   ffffffff810b89c5:       addq    $0x8, %rsp
    0.00 :   ffffffff810b89c9:       popq    %rbx
    0.00 :   ffffffff810b89ca:       popq    %r12
    0.00 :   ffffffff810b89cc:       popq    %r13
    0.00 :   ffffffff810b89ce:       popq    %r14
    0.00 :   ffffffff810b89d0:       popq    %r15
    0.00 :   ffffffff810b89d2:       popq    %rbp
    0.00 :   ffffffff810b89d3:       xorl    %eax, %eax
    0.00 :   ffffffff810b89d5:       xorl    %edx, %edx
    0.00 :   ffffffff810b89d7:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b89d9:       xorl    %esi, %esi
    0.00 :   ffffffff810b89db:       xorl    %edi, %edi
    0.00 :   ffffffff810b89dd:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b89e2:       movl    0x188(%r12), %eax
    0.00 :   ffffffff810b89ea:       testl   %eax, %eax
    0.00 :   ffffffff810b89ec:       je      0xffffffff810b8926 <enqueue_task_fair+0x106>
    0.00 :   ffffffff810b89f2:       addq    $0x8, %rsp
    0.00 :   ffffffff810b89f6:       popq    %rbx
    0.00 :   ffffffff810b89f7:       popq    %r12
    0.00 :   ffffffff810b89f9:       popq    %r13
    0.00 :   ffffffff810b89fb:       popq    %r14
    0.00 :   ffffffff810b89fd:       popq    %r15
    0.00 :   ffffffff810b89ff:       popq    %rbp
    0.00 :   ffffffff810b8a00:       xorl    %eax, %eax
    0.00 :   ffffffff810b8a02:       xorl    %edx, %edx
    0.00 :   ffffffff810b8a04:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b8a06:       xorl    %esi, %esi
    0.00 :   ffffffff810b8a08:       xorl    %edi, %edi
    0.00 :   ffffffff810b8a0a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b8a0f:       movslq  0xa60(%rdi), %rcx
    0.00 :   ffffffff810b8a16:       movq    $0x1b288, %rdx  # imm = 0x1B288
    0.00 :   ffffffff810b8a1d:       addq    -0x7dedc720(,%rcx,8), %rdx
    0.00 :   ffffffff810b8a25:       movq    (%rdx), %rdi
    0.00 :   ffffffff810b8a28:       testq   %rdi, %rdi
    0.00 :   ffffffff810b8a2b:       je      0xffffffff810b887d <enqueue_task_fair+0x5d>
    0.00 :   ffffffff810b8a31:       movq    0x9a0(%r14), %rsi
    0.00 :   ffffffff810b8a38:       movq    (%rdi), %rcx
    0.00 :   ffffffff810b8a3b:       movl    $0x1, %edx
    0.00 :   ffffffff810b8a40:       callq   0xffffffff81b781a0 <__x86_indirect_thunk_rcx>
    0.00 :   ffffffff810b8a45:       jmp     0xffffffff810b887d <enqueue_task_fair+0x5d>
    0.00 :   ffffffff810b8a4a:       movq    0x9f0(%r14), %rax
    0.00 :   ffffffff810b8a51:       movl    0x38(%rax), %edx
    0.00 :   ffffffff810b8a54:       testl   %edx, %edx
    0.00 :   ffffffff810b8a56:       jne     0xffffffff810b8942 <enqueue_task_fair+0x122>
    0.00 :   ffffffff810b8a5c:       movl    $0x1, 0x38(%rax)
    0.00 :   ffffffff810b8a63:       jmp     0xffffffff810b8942 <enqueue_task_fair+0x122>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81165ed0 <irq_work_tick>:
         : 5                ; irq_work_tick():
    0.00 :   ffffffff81165ed0:       pushq   %rbp
    0.00 :   ffffffff81165ed1:       movq    %rsp, %rbp
    0.00 :   ffffffff81165ed4:       movq    $0x1e648, %rdi  # imm = 0x1E648
    0.00 :   ffffffff81165edb:       addq    %gs:0x7eeafb4d(%rip), %rdi
    0.00 :   ffffffff81165ee3:       movq    (%rdi), %rax
    0.00 :   ffffffff81165ee6:       testq   %rax, %rax
    0.00 :   ffffffff81165ee9:       je      0xffffffff81165ef7 <irq_work_tick+0x27>
    0.00 :   ffffffff81165eeb:       movq    0x12001ee(%rip), %rax # 0xffffffff823660e0 <boot_cpu_data+0xc0>
    0.00 :   ffffffff81165ef2:       testb   $0x2, %ah
    0.00 :   ffffffff81165ef5:       je      0xffffffff81165f15 <irq_work_tick+0x45>
    0.00 :   ffffffff81165ef7:       movq    $0x1e640, %rdi  # imm = 0x1E640
    0.00 :   ffffffff81165efe:       addq    %gs:0x7eeafb2a(%rip), %rdi
  100.00 :   ffffffff81165f06:       callq   0xffffffff81165e30 <irq_work_run_list>
    0.00 :   ffffffff81165f0b:       popq    %rbp
    0.00 :   ffffffff81165f0c:       xorl    %eax, %eax
    0.00 :   ffffffff81165f0e:       xorl    %edi, %edi
    0.00 :   ffffffff81165f10:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81165f15:       callq   0xffffffff81165e30 <irq_work_run_list>
    0.00 :   ffffffff81165f1a:       jmp     0xffffffff81165ef7 <irq_work_tick+0x27>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810a84a0 <raw_spin_rq_unlock>:
         : 5                ; raw_spin_rq_unlock():
    0.00 :   ffffffff810a84a0:       pushq   %rbp
    0.00 :   ffffffff810a84a1:       movq    %rsp, %rbp
    0.00 :   ffffffff810a84a4:       nop
  100.00 :   ffffffff810a84a6:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff810a84ab:       popq    %rbp
    0.00 :   ffffffff810a84ac:       xorl    %eax, %eax
    0.00 :   ffffffff810a84ae:       xorl    %edi, %edi
    0.00 :   ffffffff810a84b0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810a84b5:       movl    0xbf8(%rdi), %eax
    0.00 :   ffffffff810a84bb:       testl   %eax, %eax
    0.00 :   ffffffff810a84bd:       je      0xffffffff810a84a6 <raw_spin_rq_unlock+0x6>
    0.00 :   ffffffff810a84bf:       movq    0xbe8(%rdi), %rdi
    0.00 :   ffffffff810a84c6:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff810a84cb:       popq    %rbp
    0.00 :   ffffffff810a84cc:       xorl    %eax, %eax
    0.00 :   ffffffff810a84ce:       xorl    %edi, %edi
    0.00 :   ffffffff810a84d0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff819dffe0 <ipv4_dst_check>:
         : 5                ; ipv4_dst_check():
    0.00 :   ffffffff819dffe0:       pushq   %rbp
    0.00 :   ffffffff819dffe1:       movq    %rsp, %rbp
    0.00 :   ffffffff819dffe4:       cmpw    $-0x1, 0x3a(%rdi)
    0.00 :   ffffffff819dffe9:       jne     0xffffffff819e0010 <ipv4_dst_check+0x30>
    0.00 :   ffffffff819dffeb:       movq    (%rdi), %rdx
    0.00 :   ffffffff819dffee:       movq    %rdi, %rax
    0.00 :   ffffffff819dfff1:       movq    0x4b0(%rdx), %rdx
    0.00 :   ffffffff819dfff8:       movl    0x54c(%rdx), %edx
  100.00 :   ffffffff819dfffe:       cmpl    %edx, 0x88(%rdi)
    0.00 :   ffffffff819e0004:       jne     0xffffffff819e0010 <ipv4_dst_check+0x30>
    0.00 :   ffffffff819e0006:       popq    %rbp
    0.00 :   ffffffff819e0007:       xorl    %edx, %edx
    0.00 :   ffffffff819e0009:       xorl    %edi, %edi
    0.00 :   ffffffff819e000b:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff819e0010:       xorl    %eax, %eax
    0.00 :   ffffffff819e0012:       popq    %rbp
    0.00 :   ffffffff819e0013:       xorl    %edx, %edx
    0.00 :   ffffffff819e0015:       xorl    %edi, %edi
    0.00 :   ffffffff819e0017:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81902140 <dbs_update_util_handler>:
         : 5                ; dbs_update_util_handler():
    0.00 :   ffffffff81902140:       pushq   %rbp
    0.00 :   ffffffff81902141:       movq    %rsp, %rbp
    0.00 :   ffffffff81902144:       subq    $0x10, %rsp
    0.00 :   ffffffff81902148:       movq    %r12, -0x8(%rbp)
    0.00 :   ffffffff8190214c:       movq    %rbx, -0x10(%rbp)
    0.00 :   ffffffff81902150:       movq    %rsi, %r12
    0.00 :   ffffffff81902153:       movq    0x8(%rdi), %rbx
    0.00 :   ffffffff81902157:       movq    (%rbx), %rdi
    0.00 :   ffffffff8190215a:       callq   0xffffffff810d1f20 <cpufreq_this_cpu_can_update>
    0.00 :   ffffffff8190215f:       testb   %al, %al
    0.00 :   ffffffff81902161:       je      0xffffffff819021b4 <dbs_update_util_handler+0x74>
    0.00 :   ffffffff81902163:       cmpb    $0x0, 0xa1(%rbx)
    0.00 :   ffffffff8190216a:       jne     0xffffffff819021b4 <dbs_update_util_handler+0x74>
    0.00 :   ffffffff8190216c:       movq    0x28(%rbx), %rdx
    0.00 :   ffffffff81902170:       movq    %r12, %rax
    0.00 :   ffffffff81902173:       subq    %rdx, %rax
    0.00 :   ffffffff81902176:       cmpq    %rax, 0x30(%rbx)
  100.00 :   ffffffff8190217a:       jg      0xffffffff819021b4 <dbs_update_util_handler+0x74>
    0.00 :   ffffffff8190217c:       cmpb    $0x0, 0xa0(%rbx)
    0.00 :   ffffffff81902183:       je      0xffffffff819021a0 <dbs_update_util_handler+0x60>
    0.00 :   ffffffff81902185:       movl    0x38(%rbx), %eax
    0.00 :   ffffffff81902188:       cmpl    $0x1, %eax
    0.00 :   ffffffff8190218b:       je      0xffffffff819021b4 <dbs_update_util_handler+0x74>
    0.00 :   ffffffff8190218d:       leal    0x1(%rax), %ecx
    0.00 :   ffffffff81902190:       lock
    0.00 :   ffffffff81902191:       cmpxchgl        %ecx, 0x38(%rbx)
    0.00 :   ffffffff81902195:       jne     0xffffffff81902188 <dbs_update_util_handler+0x48>
    0.00 :   ffffffff81902197:       movq    0x28(%rbx), %rax
    0.00 :   ffffffff8190219b:       cmpq    %rax, %rdx
    0.00 :   ffffffff8190219e:       jne     0xffffffff819021cc <dbs_update_util_handler+0x8c>
    0.00 :   ffffffff819021a0:       leaq    0x40(%rbx), %rdi
    0.00 :   ffffffff819021a4:       movq    %r12, 0x28(%rbx)
    0.00 :   ffffffff819021a8:       movb    $0x1, 0xa1(%rbx)
    0.00 :   ffffffff819021af:       callq   0xffffffff81165ba0 <irq_work_queue>
    0.00 :   ffffffff819021b4:       movq    -0x10(%rbp), %rbx
    0.00 :   ffffffff819021b8:       movq    -0x8(%rbp), %r12
    0.00 :   ffffffff819021bc:       leave
    0.00 :   ffffffff819021bd:       xorl    %eax, %eax
    0.00 :   ffffffff819021bf:       xorl    %edx, %edx
    0.00 :   ffffffff819021c1:       xorl    %ecx, %ecx
    0.00 :   ffffffff819021c3:       xorl    %esi, %esi
    0.00 :   ffffffff819021c5:       xorl    %edi, %edi
    0.00 :   ffffffff819021c7:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff819021cc:       movl    $0x0, 0x38(%rbx)
    0.00 :   ffffffff819021d3:       jmp     0xffffffff819021b4 <dbs_update_util_handler+0x74>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b6b6c0 <stackleak_track_stack>:
         : 5                ; stackleak_track_stack():
    0.00 :   ffffffff81b6b6c0:       pushq   %rbp
   53.69 :   ffffffff81b6b6c1:       movq    %rsp, %rbp
    0.00 :   ffffffff81b6b6c4:       subq    $0x20, %rsp
    0.00 :   ffffffff81b6b6c8:       movq    %rax, -0x20(%rbp)
    0.00 :   ffffffff81b6b6cc:       leaq    0x7(%rsp), %rax
    0.00 :   ffffffff81b6b6d1:       movq    %rdx, -0x18(%rbp)
    0.00 :   ffffffff81b6b6d5:       movq    %rsi, -0x10(%rbp)
    0.00 :   ffffffff81b6b6d9:       movq    %rdi, -0x8(%rbp)
    0.00 :   ffffffff81b6b6dd:       andq    $-0x8, %rax
    0.00 :   ffffffff81b6b6e1:       movq    %gs:0x22700, %rdx
   46.31 :   ffffffff81b6b6ea:       cmpq    0xb28(%rdx), %rax
    0.00 :   ffffffff81b6b6f1:       jae     0xffffffff81b6b70a <stackleak_track_stack+0x4a>
    0.00 :   ffffffff81b6b6f3:       movq    0xa30(%rdx), %rdi
    0.00 :   ffffffff81b6b6fa:       leaq    0x8(%rdi), %rsi
    0.00 :   ffffffff81b6b6fe:       cmpq    %rsi, %rax
    0.00 :   ffffffff81b6b701:       jb      0xffffffff81b6b70a <stackleak_track_stack+0x4a>
    0.00 :   ffffffff81b6b703:       movq    %rax, 0xb28(%rdx)
    0.00 :   ffffffff81b6b70a:       movq    -0x20(%rbp), %rax
    0.00 :   ffffffff81b6b70e:       movq    -0x18(%rbp), %rdx
    0.00 :   ffffffff81b6b712:       movq    -0x10(%rbp), %rsi
    0.00 :   ffffffff81b6b716:       movq    -0x8(%rbp), %rdi
    0.00 :   ffffffff81b6b71a:       leave
    0.00 :   ffffffff81b6b71b:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8104a3f0 <__sysvec_apic_timer_interrupt>:
         : 5                ; __sysvec_apic_timer_interrupt():
    0.00 :   ffffffff8104a3f0:       pushq   %rbp
  100.00 :   ffffffff8104a3f1:       movq    %rsp, %rbp
    0.00 :   ffffffff8104a3f4:       subq    $0x10, %rsp
    0.00 :   ffffffff8104a3f8:       movq    %rbx, -0x10(%rbp)
    0.00 :   ffffffff8104a3fc:       movq    %r12, -0x8(%rbp)
    0.00 :   ffffffff8104a400:       movq    0x10d9a79(%rip), %rax # 0xffffffff82123e80 <apic>
    0.00 :   ffffffff8104a407:       xorl    %esi, %esi
    0.00 :   ffffffff8104a409:       movq    $0x1adc0, %rbx  # imm = 0x1ADC0
    0.00 :   ffffffff8104a410:       movq    %gs:0x7efd8218(%rip), %r12
    0.00 :   ffffffff8104a418:       movq    %rdi, %gs:0x7efd8210(%rip)
    0.00 :   ffffffff8104a420:       movl    $0xb0, %edi
    0.00 :   ffffffff8104a425:       movq    (%rax), %rax
    0.00 :   ffffffff8104a428:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8104a42d:       addq    %gs:0x7efcb5fb(%rip), %rbx
    0.00 :   ffffffff8104a435:       cmpq    $0x0, (%rbx)
    0.00 :   ffffffff8104a439:       je      0xffffffff8104a469 <__sysvec_apic_timer_interrupt+0x79>
    0.00 :   ffffffff8104a43b:       incl    %gs:0x7efd8242(%rip)
    0.00 :   ffffffff8104a442:       movq    (%rbx), %rax
    0.00 :   ffffffff8104a445:       movq    %rbx, %rdi
    0.00 :   ffffffff8104a448:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8104a44d:       movq    %r12, %gs:0x7efd81db(%rip)
    0.00 :   ffffffff8104a455:       movq    -0x10(%rbp), %rbx
    0.00 :   ffffffff8104a459:       movq    -0x8(%rbp), %r12
    0.00 :   ffffffff8104a45d:       leave
    0.00 :   ffffffff8104a45e:       xorl    %eax, %eax
    0.00 :   ffffffff8104a460:       xorl    %esi, %esi
    0.00 :   ffffffff8104a462:       xorl    %edi, %edi
    0.00 :   ffffffff8104a464:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8104a469:       movq    $-0x7df85688, %rdi # imm = 0x8207A978
    0.00 :   ffffffff8104a470:       movl    %gs:0x7efd8295(%rip), %esi
    0.00 :   ffffffff8104a477:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff8104a47c:       testb   $0x10, 0x3c(%rbx)
    0.00 :   ffffffff8104a480:       jne     0xffffffff8104a44d <__sysvec_apic_timer_interrupt+0x5d>
    0.00 :   ffffffff8104a482:       callq   0xffffffff8104a350 <lapic_timer_shutdown.part.0>
    0.00 :   ffffffff8104a487:       jmp     0xffffffff8104a44d <__sysvec_apic_timer_interrupt+0x5d>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810a76e0 <task_mm_cid_work>:
         : 5                ; task_mm_cid_work():
    0.00 :   ffffffff810a76e0:       pushq   %rbp
    0.00 :   ffffffff810a76e1:       movq    %rsp, %rbp
    0.00 :   ffffffff810a76e4:       pushq   %r15
    0.00 :   ffffffff810a76e6:       pushq   %r14
    0.00 :   ffffffff810a76e8:       pushq   %r13
    0.00 :   ffffffff810a76ea:       pushq   %r12
    0.00 :   ffffffff810a76ec:       pushq   %rbx
    0.00 :   ffffffff810a76ed:       subq    $0x18, %rsp
    0.00 :   ffffffff810a76f1:       movq    0x11602c8(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810a76f8:       movq    %rdi, (%rdi)
    0.00 :   ffffffff810a76fb:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810a7704:       testb   $0x4, 0x354(%rax)
    0.00 :   ffffffff810a770b:       jne     0xffffffff810a7869 <task_mm_cid_work+0x189>
    0.00 :   ffffffff810a7711:       movq    0x3d8(%rax), %r13
    0.00 :   ffffffff810a7718:       testq   %r13, %r13
    0.00 :   ffffffff810a771b:       je      0xffffffff810a7869 <task_mm_cid_work+0x189>
    0.00 :   ffffffff810a7721:       movq    0x250(%r13), %rax
    0.00 :   ffffffff810a7728:       leaq    0x64(%rdx), %rcx
    0.00 :   ffffffff810a772c:       testq   %rax, %rax
    0.00 :   ffffffff810a772f:       je      0xffffffff810a7886 <task_mm_cid_work+0x1a6>
    0.00 :   ffffffff810a7735:       subq    %rax, %rdx
    0.00 :   ffffffff810a7738:       testq   %rdx, %rdx
    0.00 :   ffffffff810a773b:       js      0xffffffff810a7869 <task_mm_cid_work+0x189>
    0.00 :   ffffffff810a7741:       lock
    0.00 :   ffffffff810a7742:       cmpxchgq        %rcx, 0x250(%r13)
    0.00 :   ffffffff810a774a:       jne     0xffffffff810a7869 <task_mm_cid_work+0x189>
    0.00 :   ffffffff810a7750:       leaq    0x4d8(%r13), %rax
    0.00 :   ffffffff810a7757:       xorl    %edx, %edx
    0.00 :   ffffffff810a7759:       movq    %rax, -0x40(%rbp)
    0.00 :   ffffffff810a775d:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810a7764:       movq    %rax, -0x38(%rbp)
    0.00 :   ffffffff810a7768:       jmp     0xffffffff810a77d6 <task_mm_cid_work+0xf6>
    0.00 :   ffffffff810a776a:       movslq  %ebx, %rax
    0.00 :   ffffffff810a776d:       movq    -0x7dedc720(,%rax,8), %r12
    0.00 :   ffffffff810a7775:       movq    -0x38(%rbp), %rax
    0.00 :   ffffffff810a7779:       leaq    (%rax,%r12), %r15
    0.00 :   ffffffff810a777d:       movq    0x3c0(%r13), %rax
    0.00 :   ffffffff810a7784:       movq    0x9a0(%r15), %r14
    0.00 :   ffffffff810a778b:       addq    %rax, %r12
    0.00 :   ffffffff810a778e:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff810a7793:       movq    0x970(%r15), %rax
    0.00 :   ffffffff810a779a:       movl    0xec(%rax), %edx
    0.00 :   ffffffff810a77a0:       testl   %edx, %edx
    0.00 :   ffffffff810a77a2:       je      0xffffffff810a77b1 <task_mm_cid_work+0xd1>
    0.00 :   ffffffff810a77a4:       cmpq    0x3d8(%rax), %r13
    0.00 :   ffffffff810a77ab:       je      0xffffffff810a78b5 <task_mm_cid_work+0x1d5>
  100.00 :   ffffffff810a77b1:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff810a77b6:       movq    (%r12), %rax
    0.00 :   ffffffff810a77ba:       addq    $0x5f5e100, %rax # imm = 0x5F5E100
    0.00 :   ffffffff810a77c0:       cmpq    %rax, %r14
    0.00 :   ffffffff810a77c3:       jb      0xffffffff810a77d3 <task_mm_cid_work+0xf3>
    0.00 :   ffffffff810a77c5:       movl    -0x2c(%rbp), %edx
    0.00 :   ffffffff810a77c8:       movq    %r12, %rsi
    0.00 :   ffffffff810a77cb:       movq    %r13, %rdi
    0.00 :   ffffffff810a77ce:       callq   0xffffffff810a7290 <sched_mm_cid_remote_clear>
    0.00 :   ffffffff810a77d3:       leal    0x1(%rbx), %edx
    0.00 :   ffffffff810a77d6:       movl    0x12bf284(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810a77dc:       movslq  %edx, %rdx
    0.00 :   ffffffff810a77df:       movq    $-0x7dc99780, %rdi # imm = 0x82366880
    0.00 :   ffffffff810a77e6:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810a77eb:       cmpl    0x12bf26f(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810a77f1:       movq    %rax, %rbx
    0.00 :   ffffffff810a77f4:       movl    %eax, -0x2c(%rbp)
    0.00 :   ffffffff810a77f7:       jb      0xffffffff810a776a <task_mm_cid_work+0x8a>
    0.00 :   ffffffff810a77fd:       movq    -0x40(%rbp), %rdi
    0.00 :   ffffffff810a7801:       callq   0xffffffff810a5a30 <cpumask_weight>
    0.00 :   ffffffff810a7806:       movl    %eax, %r12d
    0.00 :   ffffffff810a7809:       xorl    %ecx, %ecx
    0.00 :   ffffffff810a780b:       xorl    %edx, %edx
    0.00 :   ffffffff810a780d:       testl   %r12d, %r12d
    0.00 :   ffffffff810a7810:       movl    0x12bf24a(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810a7816:       cmovsl  %ecx, %r12d
    0.00 :   ffffffff810a781a:       jmp     0xffffffff810a7849 <task_mm_cid_work+0x169>
    0.00 :   ffffffff810a781c:       movslq  %ebx, %rdx
    0.00 :   ffffffff810a781f:       movq    0x3c0(%r13), %rsi
    0.00 :   ffffffff810a7826:       addq    -0x7dedc720(,%rdx,8), %rsi
    0.00 :   ffffffff810a782e:       movl    0x8(%rsi), %edx
    0.00 :   ffffffff810a7831:       cmpl    %r12d, %edx
    0.00 :   ffffffff810a7834:       jl      0xffffffff810a7846 <task_mm_cid_work+0x166>
    0.00 :   ffffffff810a7836:       movl    %ecx, %edx
    0.00 :   ffffffff810a7838:       movq    %r13, %rdi
    0.00 :   ffffffff810a783b:       callq   0xffffffff810a7290 <sched_mm_cid_remote_clear>
    0.00 :   ffffffff810a7840:       movl    0x12bf21a(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810a7846:       leal    0x1(%rbx), %edx
    0.00 :   ffffffff810a7849:       movslq  %edx, %rdx
    0.00 :   ffffffff810a784c:       movl    %eax, %esi
    0.00 :   ffffffff810a784e:       movq    $-0x7dc99780, %rdi # imm = 0x82366880
    0.00 :   ffffffff810a7855:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810a785a:       movq    %rax, %rbx
    0.00 :   ffffffff810a785d:       movl    %eax, %ecx
    0.00 :   ffffffff810a785f:       movl    0x12bf1fb(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810a7865:       cmpl    %eax, %ebx
    0.00 :   ffffffff810a7867:       jb      0xffffffff810a781c <task_mm_cid_work+0x13c>
    0.00 :   ffffffff810a7869:       addq    $0x18, %rsp
    0.00 :   ffffffff810a786d:       popq    %rbx
    0.00 :   ffffffff810a786e:       popq    %r12
    0.00 :   ffffffff810a7870:       popq    %r13
    0.00 :   ffffffff810a7872:       popq    %r14
    0.00 :   ffffffff810a7874:       popq    %r15
    0.00 :   ffffffff810a7876:       popq    %rbp
    0.00 :   ffffffff810a7877:       xorl    %eax, %eax
    0.00 :   ffffffff810a7879:       xorl    %edx, %edx
    0.00 :   ffffffff810a787b:       xorl    %ecx, %ecx
    0.00 :   ffffffff810a787d:       xorl    %esi, %esi
    0.00 :   ffffffff810a787f:       xorl    %edi, %edi
    0.00 :   ffffffff810a7881:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810a7886:       lock
    0.00 :   ffffffff810a7887:       cmpxchgq        %rcx, 0x250(%r13)
    0.00 :   ffffffff810a788f:       testq   %rax, %rax
    0.00 :   ffffffff810a7892:       jne     0xffffffff810a7735 <task_mm_cid_work+0x55>
    0.00 :   ffffffff810a7898:       addq    $0x18, %rsp
    0.00 :   ffffffff810a789c:       popq    %rbx
    0.00 :   ffffffff810a789d:       popq    %r12
    0.00 :   ffffffff810a789f:       popq    %r13
    0.00 :   ffffffff810a78a1:       popq    %r14
    0.00 :   ffffffff810a78a3:       popq    %r15
    0.00 :   ffffffff810a78a5:       popq    %rbp
    0.00 :   ffffffff810a78a6:       xorl    %eax, %eax
    0.00 :   ffffffff810a78a8:       xorl    %edx, %edx
    0.00 :   ffffffff810a78aa:       xorl    %ecx, %ecx
    0.00 :   ffffffff810a78ac:       xorl    %esi, %esi
    0.00 :   ffffffff810a78ae:       xorl    %edi, %edi
    0.00 :   ffffffff810a78b0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810a78b5:       movq    %r14, (%r12)
    0.00 :   ffffffff810a78b9:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff810a78be:       jmp     0xffffffff810a77d3 <task_mm_cid_work+0xf3>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81101ca0 <dma_unmap_page_attrs>:
         : 5                ; dma_unmap_page_attrs():
    0.00 :   ffffffff81101ca0:       pushq   %rbp
    0.00 :   ffffffff81101ca1:       movq    %rsp, %rbp
  100.00 :   ffffffff81101ca4:       pushq   %r15
    0.00 :   ffffffff81101ca6:       pushq   %r14
    0.00 :   ffffffff81101ca8:       pushq   %r13
    0.00 :   ffffffff81101caa:       movq    %rdx, %r13
    0.00 :   ffffffff81101cad:       pushq   %r12
    0.00 :   ffffffff81101caf:       movl    %ecx, %r12d
    0.00 :   ffffffff81101cb2:       pushq   %rbx
    0.00 :   ffffffff81101cb3:       movq    %rdi, %rbx
    0.00 :   ffffffff81101cb6:       subq    $0x8, %rsp
    0.00 :   ffffffff81101cba:       movq    0x128(%rdi), %rax
    0.00 :   ffffffff81101cc1:       testq   %rax, %rax
    0.00 :   ffffffff81101cc4:       je      0xffffffff81101d0f <dma_unmap_page_attrs+0x6f>
    0.00 :   ffffffff81101cc6:       cmpl    $0x2, %ecx
    0.00 :   ffffffff81101cc9:       ja      0xffffffff81101e47 <dma_unmap_page_attrs+0x1a7>
    0.00 :   ffffffff81101ccf:       movq    0x50(%rax), %rax
    0.00 :   ffffffff81101cd3:       testq   %rax, %rax
    0.00 :   ffffffff81101cd6:       je      0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101cd8:       movl    %r12d, %ecx
    0.00 :   ffffffff81101cdb:       movq    %r13, %rdx
    0.00 :   ffffffff81101cde:       movq    %rbx, %rdi
    0.00 :   ffffffff81101ce1:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81101ce6:       addq    $0x8, %rsp
    0.00 :   ffffffff81101cea:       popq    %rbx
    0.00 :   ffffffff81101ceb:       popq    %r12
    0.00 :   ffffffff81101ced:       popq    %r13
    0.00 :   ffffffff81101cef:       popq    %r14
    0.00 :   ffffffff81101cf1:       popq    %r15
    0.00 :   ffffffff81101cf3:       popq    %rbp
    0.00 :   ffffffff81101cf4:       xorl    %eax, %eax
    0.00 :   ffffffff81101cf6:       xorl    %edx, %edx
    0.00 :   ffffffff81101cf8:       xorl    %ecx, %ecx
    0.00 :   ffffffff81101cfa:       xorl    %esi, %esi
    0.00 :   ffffffff81101cfc:       xorl    %edi, %edi
    0.00 :   ffffffff81101cfe:       xorl    %r8d, %r8d
    0.00 :   ffffffff81101d01:       xorl    %r9d, %r9d
    0.00 :   ffffffff81101d04:       xorl    %r10d, %r10d
    0.00 :   ffffffff81101d07:       xorl    %r11d, %r11d
    0.00 :   ffffffff81101d0a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81101d0f:       cmpl    $0x2, %ecx
    0.00 :   ffffffff81101d12:       movq    0x14b7b7f(%rip), %rax # 0xffffffff825b9898 <dma_ops>
    0.00 :   ffffffff81101d19:       ja      0xffffffff81101e47 <dma_unmap_page_attrs+0x1a7>
    0.00 :   ffffffff81101d1f:       testq   %rax, %rax
    0.00 :   ffffffff81101d22:       jne     0xffffffff81101ccf <dma_unmap_page_attrs+0x2f>
    0.00 :   ffffffff81101d24:       movq    0x148(%rdi), %rdi
    0.00 :   ffffffff81101d2b:       movq    %r8, %r15
    0.00 :   ffffffff81101d2e:       movq    0x168(%rbx), %r11
    0.00 :   ffffffff81101d35:       andl    $0x20, %r15d
    0.00 :   ffffffff81101d39:       testq   %rdi, %rdi
    0.00 :   ffffffff81101d3c:       je      0xffffffff81101e08 <dma_unmap_page_attrs+0x168>
    0.00 :   ffffffff81101d42:       movq    0x10(%rdi), %r9
    0.00 :   ffffffff81101d46:       movq    %rdi, %rax
    0.00 :   ffffffff81101d49:       testq   %r9, %r9
    0.00 :   ffffffff81101d4c:       movq    %r9, %rdx
    0.00 :   ffffffff81101d4f:       je      0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101d51:       movq    0x8(%rax), %rcx
    0.00 :   ffffffff81101d55:       cmpq    %rcx, %rsi
    0.00 :   ffffffff81101d58:       jb      0xffffffff81101d69 <dma_unmap_page_attrs+0xc9>
    0.00 :   ffffffff81101d5a:       movq    %rsi, %r10
    0.00 :   ffffffff81101d5d:       subq    %rcx, %r10
    0.00 :   ffffffff81101d60:       cmpq    %rdx, %r10
    0.00 :   ffffffff81101d63:       jb      0xffffffff81101e49 <dma_unmap_page_attrs+0x1a9>
    0.00 :   ffffffff81101d69:       movq    0x30(%rax), %rdx
    0.00 :   ffffffff81101d6d:       addq    $0x20, %rax
    0.00 :   ffffffff81101d71:       testq   %rdx, %rdx
    0.00 :   ffffffff81101d74:       jne     0xffffffff81101d51 <dma_unmap_page_attrs+0xb1>
    0.00 :   ffffffff81101d76:       testq   %r15, %r15
    0.00 :   ffffffff81101d79:       jne     0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101d7f:       movq    $-0x1, %r14
    0.00 :   ffffffff81101d86:       movq    0x8(%rdi), %rax
    0.00 :   ffffffff81101d8a:       cmpq    %rax, %rsi
    0.00 :   ffffffff81101d8d:       jb      0xffffffff81101d9e <dma_unmap_page_attrs+0xfe>
    0.00 :   ffffffff81101d8f:       movq    %rsi, %rdx
    0.00 :   ffffffff81101d92:       subq    %rax, %rdx
    0.00 :   ffffffff81101d95:       cmpq    %r9, %rdx
    0.00 :   ffffffff81101d98:       jb      0xffffffff81101ea5 <dma_unmap_page_attrs+0x205>
    0.00 :   ffffffff81101d9e:       movq    0x30(%rdi), %r9
    0.00 :   ffffffff81101da2:       addq    $0x20, %rdi
    0.00 :   ffffffff81101da6:       testq   %r9, %r9
    0.00 :   ffffffff81101da9:       jne     0xffffffff81101d86 <dma_unmap_page_attrs+0xe6>
    0.00 :   ffffffff81101dab:       testq   %r11, %r11
    0.00 :   ffffffff81101dae:       je      0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101db4:       movq    (%r11), %rax
    0.00 :   ffffffff81101db7:       movq    %r14, %rsi
    0.00 :   ffffffff81101dba:       cmpq    %rax, %rsi
    0.00 :   ffffffff81101dbd:       jb      0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101dc3:       cmpq    0x8(%r11), %rsi
    0.00 :   ffffffff81101dc7:       jae     0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101dcd:       movl    %r12d, %ecx
    0.00 :   ffffffff81101dd0:       movq    %r13, %rdx
    0.00 :   ffffffff81101dd3:       movq    %rbx, %rdi
    0.00 :   ffffffff81101dd6:       orq     $0x20, %r8
    0.00 :   ffffffff81101dda:       callq   0xffffffff81104c30 <swiotlb_tbl_unmap_single>
    0.00 :   ffffffff81101ddf:       addq    $0x8, %rsp
    0.00 :   ffffffff81101de3:       popq    %rbx
    0.00 :   ffffffff81101de4:       popq    %r12
    0.00 :   ffffffff81101de6:       popq    %r13
    0.00 :   ffffffff81101de8:       popq    %r14
    0.00 :   ffffffff81101dea:       popq    %r15
    0.00 :   ffffffff81101dec:       popq    %rbp
    0.00 :   ffffffff81101ded:       xorl    %eax, %eax
    0.00 :   ffffffff81101def:       xorl    %edx, %edx
    0.00 :   ffffffff81101df1:       xorl    %ecx, %ecx
    0.00 :   ffffffff81101df3:       xorl    %esi, %esi
    0.00 :   ffffffff81101df5:       xorl    %edi, %edi
    0.00 :   ffffffff81101df7:       xorl    %r8d, %r8d
    0.00 :   ffffffff81101dfa:       xorl    %r9d, %r9d
    0.00 :   ffffffff81101dfd:       xorl    %r10d, %r10d
    0.00 :   ffffffff81101e00:       xorl    %r11d, %r11d
    0.00 :   ffffffff81101e03:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81101e08:       testq   %r15, %r15
    0.00 :   ffffffff81101e0b:       je      0xffffffff81101e5e <dma_unmap_page_attrs+0x1be>
    0.00 :   ffffffff81101e0d:       testq   %r11, %r11
    0.00 :   ffffffff81101e10:       je      0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101e16:       movq    (%r11), %rax
    0.00 :   ffffffff81101e19:       cmpq    %rax, %rsi
    0.00 :   ffffffff81101e1c:       jae     0xffffffff81101dc3 <dma_unmap_page_attrs+0x123>
    0.00 :   ffffffff81101e1e:       addq    $0x8, %rsp
    0.00 :   ffffffff81101e22:       popq    %rbx
    0.00 :   ffffffff81101e23:       popq    %r12
    0.00 :   ffffffff81101e25:       popq    %r13
    0.00 :   ffffffff81101e27:       popq    %r14
    0.00 :   ffffffff81101e29:       popq    %r15
    0.00 :   ffffffff81101e2b:       popq    %rbp
    0.00 :   ffffffff81101e2c:       xorl    %eax, %eax
    0.00 :   ffffffff81101e2e:       xorl    %edx, %edx
    0.00 :   ffffffff81101e30:       xorl    %ecx, %ecx
    0.00 :   ffffffff81101e32:       xorl    %esi, %esi
    0.00 :   ffffffff81101e34:       xorl    %edi, %edi
    0.00 :   ffffffff81101e36:       xorl    %r8d, %r8d
    0.00 :   ffffffff81101e39:       xorl    %r9d, %r9d
    0.00 :   ffffffff81101e3c:       xorl    %r10d, %r10d
    0.00 :   ffffffff81101e3f:       xorl    %r11d, %r11d
    0.00 :   ffffffff81101e42:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81101e47:       ud2
    0.00 :   ffffffff81101e49:       movq    0x18(%rax), %r14
    0.00 :   ffffffff81101e4d:       addq    %rsi, %r14
    0.00 :   ffffffff81101e50:       testq   %r15, %r15
    0.00 :   ffffffff81101e53:       je      0xffffffff81101d86 <dma_unmap_page_attrs+0xe6>
    0.00 :   ffffffff81101e59:       movq    %r14, %rsi
    0.00 :   ffffffff81101e5c:       jmp     0xffffffff81101e0d <dma_unmap_page_attrs+0x16d>
    0.00 :   ffffffff81101e5e:       movq    %rsi, %r14
    0.00 :   ffffffff81101e61:       testq   %r11, %r11
    0.00 :   ffffffff81101e64:       je      0xffffffff81101ce6 <dma_unmap_page_attrs+0x46>
    0.00 :   ffffffff81101e6a:       movq    (%r11), %rax
    0.00 :   ffffffff81101e6d:       cmpq    %rax, %rsi
    0.00 :   ffffffff81101e70:       jb      0xffffffff81101db7 <dma_unmap_page_attrs+0x117>
    0.00 :   ffffffff81101e76:       cmpq    0x8(%r11), %rsi
    0.00 :   ffffffff81101e7a:       jae     0xffffffff81101db7 <dma_unmap_page_attrs+0x117>
    0.00 :   ffffffff81101e80:       movl    %r12d, %ecx
    0.00 :   ffffffff81101e83:       movq    %r13, %rdx
    0.00 :   ffffffff81101e86:       movq    %rbx, %rdi
    0.00 :   ffffffff81101e89:       movq    %r8, -0x30(%rbp)
    0.00 :   ffffffff81101e8d:       callq   0xffffffff81104cf0 <swiotlb_sync_single_for_cpu>
    0.00 :   ffffffff81101e92:       movq    0x168(%rbx), %r11
    0.00 :   ffffffff81101e99:       movq    -0x30(%rbp), %r8
    0.00 :   ffffffff81101e9d:       movq    %r14, %rsi
    0.00 :   ffffffff81101ea0:       jmp     0xffffffff81101e0d <dma_unmap_page_attrs+0x16d>
    0.00 :   ffffffff81101ea5:       addq    0x18(%rdi), %rsi
    0.00 :   ffffffff81101ea9:       jmp     0xffffffff81101e61 <dma_unmap_page_attrs+0x1c1>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b4f20 <find_idlest_group>:
         : 5                ; find_idlest_group():
    0.00 :   ffffffff810b4f20:       pushq   %rbp
    0.00 :   ffffffff810b4f21:       movq    %rsp, %rbp
    0.00 :   ffffffff810b4f24:       pushq   %r15
    0.00 :   ffffffff810b4f26:       pushq   %r14
    0.00 :   ffffffff810b4f28:       pushq   %r13
    0.00 :   ffffffff810b4f2a:       pushq   %r12
    0.00 :   ffffffff810b4f2c:       pushq   %rbx
    0.00 :   ffffffff810b4f2d:       subq    $0x110, %rsp    # imm = 0x110
    0.00 :   ffffffff810b4f34:       movq    %rdi, -0xe8(%rbp)
    0.00 :   ffffffff810b4f3b:       movl    %edx, -0x10c(%rbp)
    0.00 :   ffffffff810b4f41:       movq    %gs:0x28, %rax
    0.00 :   ffffffff810b4f4a:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff810b4f4e:       xorl    %eax, %eax
    0.00 :   ffffffff810b4f50:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff810b4f55:       movq    0x10(%rdi), %r15
    0.00 :   ffffffff810b4f59:       leaq    -0xd0(%rbp), %rdi
    0.00 :   ffffffff810b4f60:       movl    $0xa, %ecx
    0.00 :   ffffffff810b4f65:       movq    $0x22f40, %r9   # imm = 0x22F40
    0.00 :   ffffffff810b4f6c:       movl    $0x5, -0x124(%rbp)
    0.00 :   ffffffff810b4f76:       movl    $0x0, -0x128(%rbp)
    0.00 :   ffffffff810b4f80:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff810b4f83:       leaq    -0x80(%rbp), %rdi
    0.00 :   ffffffff810b4f87:       movl    $0xa, %ecx
    0.00 :   ffffffff810b4f8c:       movq    $0x0, -0x138(%rbp)
    0.00 :   ffffffff810b4f97:       movq    $0x0, -0x108(%rbp)
    0.00 :   ffffffff810b4fa2:       movq    $0x0, -0x120(%rbp)
    0.00 :   ffffffff810b4fad:       movq    %rsi, %r14
    0.00 :   ffffffff810b4fb0:       movq    %r9, -0xf0(%rbp)
    0.00 :   ffffffff810b4fb7:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff810b4fba:       movl    $0xffffffff, %eax # imm = 0xFFFFFFFF
    0.00 :   ffffffff810b4fbf:       movq    %rax, -0x130(%rbp)
    0.00 :   ffffffff810b4fc6:       leaq    0x20(%r15), %rax
    0.00 :   ffffffff810b4fca:       movq    0x2e8(%r14), %rsi
    0.00 :   ffffffff810b4fd1:       movl    0x12b1a89(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b4fd7:       movq    %rax, %rdi
    0.00 :   ffffffff810b4fda:       movq    %rax, -0xd8(%rbp)
    0.00 :   ffffffff810b4fe1:       callq   0xffffffff815960c0 <__bitmap_intersects>
    0.00 :   ffffffff810b4fe6:       testb   %al, %al
    0.00 :   ffffffff810b4fe8:       je      0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b4fee:       movslq  -0x10c(%rbp), %rax
    0.00 :   ffffffff810b4ff5:       movq    -0x7dedc720(,%rax,8), %rax
    0.00 :   ffffffff810b4ffd:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b5002:       movl    -0x10c(%rbp), %eax
    0.00 :   ffffffff810b5008:       movq    -0xd8(%rbp), %rcx
    0.00 :   ffffffff810b500f:       btq     %rax, (%rcx)
    0.00 :   ffffffff810b5013:       movq    -0x108(%rbp), %rax
    0.00 :   ffffffff810b501a:       setb    %sil
    0.00 :   ffffffff810b501e:       leaq    -0xd0(%rbp), %r12
    0.00 :   ffffffff810b5025:       testb   %sil, %sil
    0.00 :   ffffffff810b5028:       movl    $0xa, %ecx
    0.00 :   ffffffff810b502d:       cmovneq %r15, %rax
    0.00 :   ffffffff810b5031:       movq    %rax, -0x108(%rbp)
    0.00 :   ffffffff810b5038:       leaq    -0x80(%rbp), %rax
    0.00 :   ffffffff810b503c:       cmoveq  %rax, %r12
    0.00 :   ffffffff810b5040:       xorl    %eax, %eax
    0.00 :   ffffffff810b5042:       movq    %r12, %rdi
    0.00 :   ffffffff810b5045:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff810b5048:       movq    -0xe8(%rbp), %rax
    0.00 :   ffffffff810b504f:       testb   $0x20, 0x3c(%rax)
    0.00 :   ffffffff810b5053:       je      0xffffffff810b505e <find_idlest_group+0x13e>
    0.00 :   ffffffff810b5055:       movq    $0x1, 0x40(%r12)
    0.00 :   ffffffff810b505e:       movq    %r15, -0x118(%rbp)
    0.00 :   ffffffff810b5065:       movq    $0x22f40, %r13  # imm = 0x22F40
    0.00 :   ffffffff810b506c:       movq    %r14, %r15
    0.00 :   ffffffff810b506f:       movl    0x12b19eb(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b5075:       movq    %r13, %r14
    0.00 :   ffffffff810b5078:       movq    -0xe8(%rbp), %r13
    0.00 :   ffffffff810b507f:       xorl    %ebx, %ebx
    0.00 :   ffffffff810b5081:       movb    %sil, -0x10d(%rbp)
    0.00 :   ffffffff810b5088:       movq    -0xd8(%rbp), %rdi
    0.00 :   ffffffff810b508f:       movslq  %ebx, %rbx
    0.00 :   ffffffff810b5092:       movl    %edx, %esi
    0.00 :   ffffffff810b5094:       movq    %rbx, %rdx
    0.00 :   ffffffff810b5097:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810b509c:       movl    0x12b19be(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b50a2:       movq    %rax, %rbx
    0.00 :   ffffffff810b50a5:       cmpl    %edx, %eax
    0.00 :   ffffffff810b50a7:       jae     0xffffffff810b54e4 <find_idlest_group+0x5c4>
    0.00 :   ffffffff810b50ad:       movslq  %ebx, %r9
    0.00 :   ffffffff810b50b0:       movl    0x14(%r15), %eax
    0.00 :   ffffffff810b50b4:       movq    -0x7dedc720(,%r9,8), %rdi
    0.00 :   ffffffff810b50bc:       leaq    (%r14,%rdi), %rsi
    0.00 :   ffffffff810b50c0:       cmpl    %eax, 0xa60(%rsi)
    0.00 :   ffffffff810b50c6:       jne     0xffffffff810b52db <find_idlest_group+0x3bb>
    0.00 :   ffffffff810b50cc:       movq    0x4c0(%r15), %rax
    0.00 :   ffffffff810b50d3:       testq   %rax, %rax
    0.00 :   ffffffff810b50d6:       je      0xffffffff810b52db <find_idlest_group+0x3bb>
    0.00 :   ffffffff810b50dc:       movq    0x120(%rsi), %rdx
    0.00 :   ffffffff810b50e3:       movq    %r15, %rdi
    0.00 :   ffffffff810b50e6:       movq    %r9, -0x100(%rbp)
    0.00 :   ffffffff810b50ed:       movq    %rsi, -0xf8(%rbp)
    0.00 :   ffffffff810b50f4:       movq    %rdx, -0xe0(%rbp)
    0.00 :   ffffffff810b50fb:       callq   0xffffffff810b31a0 <task_h_load>
    0.00 :   ffffffff810b5100:       movq    -0xe0(%rbp), %rdx
    0.00 :   ffffffff810b5107:       movq    -0x100(%rbp), %r9
    0.00 :   ffffffff810b510e:       movq    -0xf8(%rbp), %rsi
    0.00 :   ffffffff810b5115:       cmpl    %eax, %edx
    0.00 :   ffffffff810b5117:       cmovbel %edx, %eax
    0.00 :   ffffffff810b511a:       movl    %eax, %edi
    0.00 :   ffffffff810b511c:       movl    %edx, %eax
    0.00 :   ffffffff810b511e:       movl    0x12b193c(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b5124:       subl    %edi, %eax
    0.00 :   ffffffff810b5126:       addq    %rax, 0x8(%r12)
    0.00 :   ffffffff810b512b:       movl    0x14(%r15), %eax
    0.00 :   ffffffff810b512f:       movq    -0x7dedc720(,%r9,8), %rdi
    0.00 :   ffffffff810b5137:       cmpl    %eax, %ebx
    0.00 :   ffffffff810b5139:       jne     0xffffffff810b52f3 <find_idlest_group+0x3d3>
    0.00 :   ffffffff810b513f:       movq    0x4c0(%r15), %rax
    0.00 :   ffffffff810b5146:       testq   %rax, %rax
    0.00 :   ffffffff810b5149:       je      0xffffffff810b52f3 <find_idlest_group+0x3d3>
    0.00 :   ffffffff810b514f:       leaq    (%rdi,%r14), %r9
    0.00 :   ffffffff810b5153:       movq    0x130(%r9), %rax
    0.00 :   ffffffff810b515a:       movl    0x14(%r15), %r10d
    0.00 :   ffffffff810b515e:       cmpl    %r10d, %ebx
    0.00 :   ffffffff810b5161:       je      0xffffffff810b5625 <find_idlest_group+0x705>
    0.00 :   ffffffff810b5167:       movl    0x14(%r15), %r10d
    0.00 :   ffffffff810b516b:       cmpl    %r10d, %ebx
    0.00 :   ffffffff810b516e:       je      0xffffffff810b5767 <find_idlest_group+0x847>
    0.00 :   ffffffff810b5174:       cmpl    $-0x1, %ebx
    0.00 :   ffffffff810b5177:       je      0xffffffff810b57a7 <find_idlest_group+0x887>
    0.00 :   ffffffff810b517d:       movl    0x138(%r9), %r9d
    0.00 :   ffffffff810b5184:       cmpl    $0x1, 0xdc(%r15)
    0.00 :   ffffffff810b518c:       je      0xffffffff810b5654 <find_idlest_group+0x734>
    0.00 :   ffffffff810b5192:       movq    %gs:0x22700, %r10
    0.00 :   ffffffff810b519b:       cmpq    %r10, %r15
    0.00 :   ffffffff810b519e:       je      0xffffffff810b5654 <find_idlest_group+0x734>
    0.00 :   ffffffff810b51a4:       cmpq    %r9, %rax
    0.00 :   ffffffff810b51a7:       cmovbq  %r9, %rax
    0.00 :   ffffffff810b51ab:       movq    0xa08(%rdi,%r14), %r9
    0.00 :   ffffffff810b51b3:       cmpq    %r9, %rax
    0.00 :   ffffffff810b51b6:       cmovaq  %r9, %rax
    0.00 :   ffffffff810b51ba:       addq    %rax, 0x18(%r12)
    0.00 :   ffffffff810b51bf:       movl    0x14(%r15), %eax
  100.00 :   ffffffff810b51c3:       cmpl    %eax, 0xa60(%rsi)
    0.00 :   ffffffff810b51c9:       jne     0xffffffff810b5309 <find_idlest_group+0x3e9>
    0.00 :   ffffffff810b51cf:       movq    0x4c0(%r15), %rax
    0.00 :   ffffffff810b51d6:       testq   %rax, %rax
    0.00 :   ffffffff810b51d9:       je      0xffffffff810b5309 <find_idlest_group+0x3e9>
    0.00 :   ffffffff810b51df:       movq    0x128(%rsi), %rax
    0.00 :   ffffffff810b51e6:       movl    0x4e8(%r15), %r9d
    0.00 :   ffffffff810b51ed:       cmpl    %r9d, %eax
    0.00 :   ffffffff810b51f0:       cmovbel %eax, %r9d
    0.00 :   ffffffff810b51f4:       subl    %r9d, %eax
    0.00 :   ffffffff810b51f7:       addq    %rax, 0x20(%r12)
    0.00 :   ffffffff810b51fc:       movl    0x14(%r15), %eax
    0.00 :   ffffffff810b5200:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b5203:       cmpl    %ebx, %eax
    0.00 :   ffffffff810b5205:       jne     0xffffffff810b5222 <find_idlest_group+0x302>
    0.00 :   ffffffff810b5207:       movq    0x4c0(%r15), %rax
    0.00 :   ffffffff810b520e:       testq   %rax, %rax
    0.00 :   ffffffff810b5211:       je      0xffffffff810b5222 <find_idlest_group+0x302>
    0.00 :   ffffffff810b5213:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b5216:       cmpl    $0x1, 0xdc(%r15)
    0.00 :   ffffffff810b521e:       sete    %r9b
    0.00 :   ffffffff810b5222:       movl    0x94(%rsi), %eax
    0.00 :   ffffffff810b5228:       addl    0x2c(%r12), %eax
    0.00 :   ffffffff810b522d:       subl    %r9d, %eax
    0.00 :   ffffffff810b5230:       movl    %eax, 0x2c(%r12)
    0.00 :   ffffffff810b5235:       movl    0x4(%rsi), %eax
    0.00 :   ffffffff810b5238:       subl    %r9d, %eax
    0.00 :   ffffffff810b523b:       addl    %eax, 0x28(%r12)
    0.00 :   ffffffff810b5240:       testl   %eax, %eax
    0.00 :   ffffffff810b5242:       jne     0xffffffff810b526b <find_idlest_group+0x34b>
    0.00 :   ffffffff810b5244:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810b524b:       addq    %rdi, %rax
    0.00 :   ffffffff810b524e:       movq    0x970(%rax), %rsi
    0.00 :   ffffffff810b5255:       cmpq    %rsi, 0x978(%rax)
    0.00 :   ffffffff810b525c:       je      0xffffffff810b54cf <find_idlest_group+0x5af>
    0.00 :   ffffffff810b5262:       cmpq    %rsi, %r15
    0.00 :   ffffffff810b5265:       je      0xffffffff810b54cf <find_idlest_group+0x5af>
    0.00 :   ffffffff810b526b:       testb   $0x20, 0x3c(%r13)
    0.00 :   ffffffff810b5270:       je      0xffffffff810b527a <find_idlest_group+0x35a>
    0.00 :   ffffffff810b5272:       cmpq    $0x0, 0x40(%r12)
    0.00 :   ffffffff810b5278:       jne     0xffffffff810b5281 <find_idlest_group+0x361>
    0.00 :   ffffffff810b527a:       incl    %ebx
    0.00 :   ffffffff810b527c:       jmp     0xffffffff810b5088 <find_idlest_group+0x168>
    0.00 :   ffffffff810b5281:       movq    0x4f0(%r15), %r9
    0.00 :   ffffffff810b5288:       movq    0x4f8(%r15), %r10
    0.00 :   ffffffff810b528f:       movq    $0x22f40, %rsi  # imm = 0x22F40
    0.00 :   ffffffff810b5296:       movl    %r10d, %eax
    0.00 :   ffffffff810b5299:       shrq    $0x20, %r10
    0.00 :   ffffffff810b529d:       andl    $0x7fffffff, %eax # imm = 0x7FFFFFFF
    0.00 :   ffffffff810b52a2:       cmpl    %r10d, %eax
    0.00 :   ffffffff810b52a5:       cmovbl  %r10d, %eax
    0.00 :   ffffffff810b52a9:       movl    %eax, %eax
    0.00 :   ffffffff810b52ab:       cmpq    %r9, %rax
    0.00 :   ffffffff810b52ae:       cmovbq  %r9, %rax
    0.00 :   ffffffff810b52b2:       leaq    (%rax,%rax,4), %r9
    0.00 :   ffffffff810b52b6:       movq    0xa00(%rdi,%rsi), %rax
    0.00 :   ffffffff810b52be:       shlq    $0x8, %r9
    0.00 :   ffffffff810b52c2:       shlq    $0xa, %rax
    0.00 :   ffffffff810b52c6:       cmpq    %rax, %r9
    0.00 :   ffffffff810b52c9:       jae     0xffffffff810b527a <find_idlest_group+0x35a>
    0.00 :   ffffffff810b52cb:       movq    $0x0, 0x40(%r12)
    0.00 :   ffffffff810b52d4:       incl    %ebx
    0.00 :   ffffffff810b52d6:       jmp     0xffffffff810b5088 <find_idlest_group+0x168>
    0.00 :   ffffffff810b52db:       movq    0x120(%rsi), %rax
    0.00 :   ffffffff810b52e2:       addq    %rax, 0x8(%r12)
    0.00 :   ffffffff810b52e7:       movl    0x14(%r15), %eax
    0.00 :   ffffffff810b52eb:       cmpl    %eax, %ebx
    0.00 :   ffffffff810b52ed:       je      0xffffffff810b513f <find_idlest_group+0x21f>
    0.00 :   ffffffff810b52f3:       leaq    (%rdi,%r14), %rax
    0.00 :   ffffffff810b52f7:       movq    0x130(%rax), %r9
    0.00 :   ffffffff810b52fe:       movl    0x138(%rax), %eax
    0.00 :   ffffffff810b5304:       jmp     0xffffffff810b51a4 <find_idlest_group+0x284>
    0.00 :   ffffffff810b5309:       movq    0x128(%rsi), %rax
    0.00 :   ffffffff810b5310:       jmp     0xffffffff810b51f7 <find_idlest_group+0x2d7>
    0.00 :   ffffffff810b5315:       movq    -0xe0(%rbp), %r15
    0.00 :   ffffffff810b531c:       movq    -0xe8(%rbp), %rax
    0.00 :   ffffffff810b5323:       movq    (%r15), %r15
    0.00 :   ffffffff810b5326:       cmpq    %r15, 0x10(%rax)
    0.00 :   ffffffff810b532a:       jne     0xffffffff810b4fc6 <find_idlest_group+0xa6>
    0.00 :   ffffffff810b5330:       cmpq    $0x0, -0x120(%rbp)
    0.00 :   ffffffff810b5338:       je      0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b533e:       cmpq    $0x0, -0x108(%rbp)
    0.00 :   ffffffff810b5346:       je      0xffffffff810b548b <find_idlest_group+0x56b>
    0.00 :   ffffffff810b534c:       movl    -0x98(%rbp), %eax
    0.00 :   ffffffff810b5352:       movl    -0x124(%rbp), %ecx
    0.00 :   ffffffff810b5358:       cmpl    %ecx, %eax
    0.00 :   ffffffff810b535a:       jb      0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b5360:       cmpl    %eax, %ecx
    0.00 :   ffffffff810b5362:       jb      0xffffffff810b548b <find_idlest_group+0x56b>
    0.00 :   ffffffff810b5368:       cmpl    $0x2, %eax
    0.00 :   ffffffff810b536b:       je      0xffffffff810b59fd <find_idlest_group+0xadd>
    0.00 :   ffffffff810b5371:       ja      0xffffffff810b58a0 <find_idlest_group+0x980>
    0.00 :   ffffffff810b5377:       testl   %eax, %eax
    0.00 :   ffffffff810b5379:       jne     0xffffffff810b58b2 <find_idlest_group+0x992>
    0.00 :   ffffffff810b537f:       movq    -0xe8(%rbp), %rax
    0.00 :   ffffffff810b5386:       testb   $0x20, 0x3d(%rax)
    0.00 :   ffffffff810b538a:       je      0xffffffff810b5a57 <find_idlest_group+0xb37>
    0.00 :   ffffffff810b5390:       movq    -0xe8(%rbp), %rax
    0.00 :   ffffffff810b5397:       movq    $0x20740, %r12  # imm = 0x20740
    0.00 :   ffffffff810b539e:       movq    %r12, %rdx
    0.00 :   ffffffff810b53a1:       movl    0x34(%rax), %ebx
    0.00 :   ffffffff810b53a4:       movslq  -0x10c(%rbp), %rax
    0.00 :   ffffffff810b53ab:       movq    -0x7dedc720(,%rax,8), %rax
    0.00 :   ffffffff810b53b3:       movl    (%rax,%rdx), %eax
    0.00 :   ffffffff810b53b6:       cmpl    %eax, 0x8ac(%r14)
    0.00 :   ffffffff810b53bd:       je      0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b53c3:       movq    -0x120(%rbp), %rax
    0.00 :   ffffffff810b53ca:       movl    0x12b1690(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b53d0:       leaq    0x20(%rax), %rdi
    0.00 :   ffffffff810b53d4:       callq   0xffffffff815a0660 <_find_first_bit>
    0.00 :   ffffffff810b53d9:       movq    %rax, %rdx
    0.00 :   ffffffff810b53dc:       movq    %r12, %rax
    0.00 :   ffffffff810b53df:       movslq  %edx, %rdx
    0.00 :   ffffffff810b53e2:       movq    -0x7dedc720(,%rdx,8), %rdx
    0.00 :   ffffffff810b53ea:       movl    (%rdx,%rax), %eax
    0.00 :   ffffffff810b53ed:       cmpl    %eax, 0x8ac(%r14)
    0.00 :   ffffffff810b53f4:       je      0xffffffff810b548b <find_idlest_group+0x56b>
    0.00 :   ffffffff810b53fa:       cmpl    $0x80, 0x6d8(%r14)
    0.00 :   ffffffff810b5405:       je      0xffffffff810b544f <find_idlest_group+0x52f>
    0.00 :   ffffffff810b5407:       movq    -0x108(%rbp), %rsi
    0.00 :   ffffffff810b540e:       movq    0x2e8(%r14), %rdx
    0.00 :   ffffffff810b5415:       movq    $0x1b170, %rbx  # imm = 0x1B170
    0.00 :   ffffffff810b541c:       movl    0x12b163e(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b5422:       addq    %gs:0x7ef60606(%rip), %rbx
    0.00 :   ffffffff810b542a:       addq    $0x20, %rsi
    0.00 :   ffffffff810b542e:       movq    %rbx, %rdi
    0.00 :   ffffffff810b5431:       callq   0xffffffff81595e80 <__bitmap_and>
    0.00 :   ffffffff810b5436:       movq    %rbx, %rdi
    0.00 :   ffffffff810b5439:       callq   0xffffffff810b3860 <cpumask_weight>
    0.00 :   ffffffff810b543e:       movl    %eax, %ebx
    0.00 :   ffffffff810b5440:       movq    -0xe8(%rbp), %rax
    0.00 :   ffffffff810b5447:       movl    0x34(%rax), %eax
    0.00 :   ffffffff810b544a:       cmpl    %eax, %ebx
    0.00 :   ffffffff810b544c:       cmoval  %eax, %ebx
    0.00 :   ffffffff810b544f:       movl    -0xa8(%rbp), %ecx
    0.00 :   ffffffff810b5455:       movl    -0xa0(%rbp), %eax
    0.00 :   ffffffff810b545b:       leal    0x1(%rcx), %edx
    0.00 :   ffffffff810b545e:       cmpl    %ebx, %edx
    0.00 :   ffffffff810b5460:       jg      0xffffffff810b5ab0 <find_idlest_group+0xb90>
    0.00 :   ffffffff810b5466:       movl    -0x128(%rbp), %ebx
    0.00 :   ffffffff810b546c:       movl    %eax, %ecx
    0.00 :   ffffffff810b546e:       subl    %ebx, %ecx
    0.00 :   ffffffff810b5470:       movl    %ecx, %edx
    0.00 :   ffffffff810b5472:       negl    %edx
    0.00 :   ffffffff810b5474:       cmovsl  %ecx, %edx
    0.00 :   ffffffff810b5477:       cmpl    $0x2, %edx
    0.00 :   ffffffff810b547a:       jg      0xffffffff810b5a5d <find_idlest_group+0xb3d>
    0.00 :   ffffffff810b5480:       movq    $0x0, -0x120(%rbp)
    0.00 :   ffffffff810b548b:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff810b548f:       subq    %gs:0x28, %rax
    0.00 :   ffffffff810b5498:       jne     0xffffffff810b5abf <find_idlest_group+0xb9f>
    0.00 :   ffffffff810b549e:       movq    -0x120(%rbp), %rax
    0.00 :   ffffffff810b54a5:       addq    $0x110, %rsp    # imm = 0x110
    0.00 :   ffffffff810b54ac:       popq    %rbx
    0.00 :   ffffffff810b54ad:       popq    %r12
    0.00 :   ffffffff810b54af:       popq    %r13
    0.00 :   ffffffff810b54b1:       popq    %r14
    0.00 :   ffffffff810b54b3:       popq    %r15
    0.00 :   ffffffff810b54b5:       popq    %rbp
    0.00 :   ffffffff810b54b6:       xorl    %edx, %edx
    0.00 :   ffffffff810b54b8:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b54ba:       xorl    %esi, %esi
    0.00 :   ffffffff810b54bc:       xorl    %edi, %edi
    0.00 :   ffffffff810b54be:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b54c1:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b54c4:       xorl    %r10d, %r10d
    0.00 :   ffffffff810b54c7:       xorl    %r11d, %r11d
    0.00 :   ffffffff810b54ca:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b54cf:       movl    0x68(%rax), %eax
    0.00 :   ffffffff810b54d2:       testl   %eax, %eax
    0.00 :   ffffffff810b54d4:       jne     0xffffffff810b526b <find_idlest_group+0x34b>
    0.00 :   ffffffff810b54da:       incl    0x30(%r12)
    0.00 :   ffffffff810b54df:       jmp     0xffffffff810b526b <find_idlest_group+0x34b>
    0.00 :   ffffffff810b54e4:       movq    %r15, %r14
    0.00 :   ffffffff810b54e7:       movq    -0x118(%rbp), %r15
    0.00 :   ffffffff810b54ee:       movl    0x28(%r12), %r9d
    0.00 :   ffffffff810b54f3:       movq    -0xe8(%rbp), %rbx
    0.00 :   ffffffff810b54fa:       movzbl  -0x10d(%rbp), %esi
    0.00 :   ffffffff810b5501:       movq    0x10(%r15), %rax
    0.00 :   ffffffff810b5505:       movl    0x2c(%rbx), %edx
    0.00 :   ffffffff810b5508:       movq    0x8(%rax), %rcx
    0.00 :   ffffffff810b550c:       movq    %rcx, 0x10(%r12)
    0.00 :   ffffffff810b5511:       movl    0xc(%r15), %eax
    0.00 :   ffffffff810b5515:       cmpl    %r9d, %eax
    0.00 :   ffffffff810b5518:       movl    %eax, 0x34(%r12)
    0.00 :   ffffffff810b551d:       jae     0xffffffff810b555b <find_idlest_group+0x63b>
    0.00 :   ffffffff810b551f:       movq    0x18(%r12), %r10
    0.00 :   ffffffff810b5524:       movl    %edx, %edi
    0.00 :   ffffffff810b5526:       movq    %rcx, %r11
    0.00 :   ffffffff810b5529:       movl    $0x64, %r13d
    0.00 :   ffffffff810b552f:       imulq   %r13, %r11
    0.00 :   ffffffff810b5533:       imulq   %rdi, %r10
    0.00 :   ffffffff810b5537:       cmpq    %r10, %r11
    0.00 :   ffffffff810b553a:       jb      0xffffffff810b57ba <find_idlest_group+0x89a>
    0.00 :   ffffffff810b5540:       imulq   %rcx, %rdi
    0.00 :   ffffffff810b5544:       movq    0x20(%r12), %r10
    0.00 :   ffffffff810b5549:       movl    $0x64, %ebx
    0.00 :   ffffffff810b554e:       imulq   %rbx, %r10
    0.00 :   ffffffff810b5552:       cmpq    %r10, %rdi
    0.00 :   ffffffff810b5555:       jb      0xffffffff810b57ba <find_idlest_group+0x89a>
    0.00 :   ffffffff810b555b:       movq    0x10(%r15), %rdi
    0.00 :   ffffffff810b555f:       movl    0x28(%rdi), %r11d
    0.00 :   ffffffff810b5563:       testl   %r11d, %r11d
    0.00 :   ffffffff810b5566:       jne     0xffffffff810b5849 <find_idlest_group+0x929>
    0.00 :   ffffffff810b556c:       movl    0x3c(%r12), %r10d
    0.00 :   ffffffff810b5571:       testl   %r10d, %r10d
    0.00 :   ffffffff810b5574:       jne     0xffffffff810b5918 <find_idlest_group+0x9f8>
    0.00 :   ffffffff810b557a:       cmpq    $0x0, 0x40(%r12)
    0.00 :   ffffffff810b5580:       jne     0xffffffff810b5968 <find_idlest_group+0xa48>
    0.00 :   ffffffff810b5586:       cmpl    %eax, %r9d
    0.00 :   ffffffff810b5589:       jb      0xffffffff810b55ca <find_idlest_group+0x6aa>
    0.00 :   ffffffff810b558b:       movq    0x20(%r12), %rax
    0.00 :   ffffffff810b5590:       movq    %rcx, %rdi
    0.00 :   ffffffff810b5593:       movl    $0x64, %r8d
    0.00 :   ffffffff810b5599:       imulq   %rdx, %rdi
    0.00 :   ffffffff810b559d:       imulq   %r8, %rax
    0.00 :   ffffffff810b55a1:       cmpq    %rax, %rdi
    0.00 :   ffffffff810b55a4:       jb      0xffffffff810b5896 <find_idlest_group+0x976>
    0.00 :   ffffffff810b55aa:       imulq   0x18(%r12), %rdx
    0.00 :   ffffffff810b55b0:       movl    $0x64, %edi
    0.00 :   ffffffff810b55b5:       movq    %rcx, %rax
    0.00 :   ffffffff810b55b8:       imulq   %rdi, %rax
    0.00 :   ffffffff810b55bc:       movl    $0x1, %edi
    0.00 :   ffffffff810b55c1:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b55c4:       jae     0xffffffff810b57bf <find_idlest_group+0x89f>
    0.00 :   ffffffff810b55ca:       testb   %sil, %sil
    0.00 :   ffffffff810b55cd:       movl    $0x0, 0x38(%r12)
    0.00 :   ffffffff810b55d6:       jne     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b55dc:       movl    -0x124(%rbp), %edx
    0.00 :   ffffffff810b55e2:       movl    0x30(%r12), %eax
    0.00 :   ffffffff810b55e7:       testl   %edx, %edx
    0.00 :   ffffffff810b55e9:       jne     0xffffffff810b59d1 <find_idlest_group+0xab1>
    0.00 :   ffffffff810b55ef:       movl    -0x128(%rbp), %ecx
    0.00 :   ffffffff810b55f5:       cmpl    %ecx, %eax
    0.00 :   ffffffff810b55f7:       jb      0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b55fd:       movq    0x18(%r12), %rdx
    0.00 :   ffffffff810b5602:       je      0xffffffff810b5a89 <find_idlest_group+0xb69>
    0.00 :   ffffffff810b5608:       movq    (%r12), %rcx
    0.00 :   ffffffff810b560c:       movl    %eax, -0x128(%rbp)
    0.00 :   ffffffff810b5612:       movq    %rdx, -0x138(%rbp)
    0.00 :   ffffffff810b5619:       movq    %rcx, -0x130(%rbp)
    0.00 :   ffffffff810b5620:       jmp     0xffffffff810b5829 <find_idlest_group+0x909>
    0.00 :   ffffffff810b5625:       cmpl    $-0x1, %ebx
    0.00 :   ffffffff810b5628:       je      0xffffffff810b579e <find_idlest_group+0x87e>
    0.00 :   ffffffff810b562e:       movq    0x4f0(%r15), %r10
    0.00 :   ffffffff810b5635:       movl    0x138(%r9), %r9d
    0.00 :   ffffffff810b563c:       cmpq    %r10, %rax
    0.00 :   ffffffff810b563f:       cmovbeq %rax, %r10
    0.00 :   ffffffff810b5643:       subq    %r10, %rax
    0.00 :   ffffffff810b5646:       cmpl    $0x1, 0xdc(%r15)
    0.00 :   ffffffff810b564e:       jne     0xffffffff810b5192 <find_idlest_group+0x272>
    0.00 :   ffffffff810b5654:       movq    0x4f8(%r15), %r11
    0.00 :   ffffffff810b565b:       movl    %r11d, %r10d
    0.00 :   ffffffff810b565e:       shrq    $0x20, %r11
    0.00 :   ffffffff810b5662:       andl    $0x7fffffff, %r10d # imm = 0x7FFFFFFF
    0.00 :   ffffffff810b5669:       cmpl    %r11d, %r10d
    0.00 :   ffffffff810b566c:       cmovbl  %r11d, %r10d
    0.00 :   ffffffff810b5670:       movl    %r10d, %r10d
    0.00 :   ffffffff810b5673:       cmpq    %r9, %r10
    0.00 :   ffffffff810b5676:       cmovaq  %r9, %r10
    0.00 :   ffffffff810b567a:       subq    %r10, %r9
    0.00 :   ffffffff810b567d:       jmp     0xffffffff810b51a4 <find_idlest_group+0x284>
    0.00 :   ffffffff810b5682:       movq    -0xf0(%rbp), %rcx
    0.00 :   ffffffff810b5689:       movl    0xbf8(%rax,%rcx), %ecx
    0.00 :   ffffffff810b5690:       testl   %ecx, %ecx
    0.00 :   ffffffff810b5692:       je      0xffffffff810b5002 <find_idlest_group+0xe2>
    0.00 :   ffffffff810b5698:       xorl    %edx, %edx
    0.00 :   ffffffff810b569a:       movq    %r15, -0xe0(%rbp)
    0.00 :   ffffffff810b56a1:       movq    $0x158e0, %rbx  # imm = 0x158E0
    0.00 :   ffffffff810b56a8:       movl    %edx, %ecx
    0.00 :   ffffffff810b56aa:       movl    0x12b13b0(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b56b0:       movq    0x2e8(%r14), %rsi
    0.00 :   ffffffff810b56b7:       movslq  %ecx, %rcx
    0.00 :   ffffffff810b56ba:       movq    -0xd8(%rbp), %rdi
    0.00 :   ffffffff810b56c1:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff810b56c6:       movq    %rax, %r13
    0.00 :   ffffffff810b56c9:       movl    0x12b1391(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b56cf:       cmpl    %eax, %r13d
    0.00 :   ffffffff810b56d2:       jae     0xffffffff810b5315 <find_idlest_group+0x3f5>
    0.00 :   ffffffff810b56d8:       movslq  %r13d, %rdx
    0.00 :   ffffffff810b56db:       movq    -0x7dedc720(,%rdx,8), %rcx
    0.00 :   ffffffff810b56e3:       nop
    0.00 :   ffffffff810b56e5:       movq    -0xe0(%rbp), %r15
    0.00 :   ffffffff810b56ec:       jmp     0xffffffff810b5002 <find_idlest_group+0xe2>
    0.00 :   ffffffff810b56f1:       movq    -0xf0(%rbp), %rdx
    0.00 :   ffffffff810b56f8:       leaq    (%rdx,%rcx), %r15
    0.00 :   ffffffff810b56fc:       movl    0xbf8(%r15), %edx
    0.00 :   ffffffff810b5703:       testl   %edx, %edx
    0.00 :   ffffffff810b5705:       je      0xffffffff810b56e5 <find_idlest_group+0x7c5>
    0.00 :   ffffffff810b5707:       xorl    %r12d, %r12d
    0.00 :   ffffffff810b570a:       movl    %eax, %esi
    0.00 :   ffffffff810b570c:       jmp     0xffffffff810b5717 <find_idlest_group+0x7f7>
    0.00 :   ffffffff810b570e:       movl    0x12b134c(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b5714:       incl    %r12d
    0.00 :   ffffffff810b5717:       movslq  0xa60(%r15), %rax
    0.00 :   ffffffff810b571e:       movslq  %r12d, %rdx
    0.00 :   ffffffff810b5721:       movq    -0x7dedc720(,%rax,8), %rdi
    0.00 :   ffffffff810b5729:       addq    %rbx, %rdi
    0.00 :   ffffffff810b572c:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff810b5731:       cmpl    0x12b1329(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810b5737:       movq    %rax, %r12
    0.00 :   ffffffff810b573a:       movl    %eax, %edi
    0.00 :   ffffffff810b573c:       jae     0xffffffff810b56e5 <find_idlest_group+0x7c5>
    0.00 :   ffffffff810b573e:       callq   0xffffffff810acfd0 <available_idle_cpu>
    0.00 :   ffffffff810b5743:       testl   %eax, %eax
    0.00 :   ffffffff810b5745:       jne     0xffffffff810b570e <find_idlest_group+0x7ee>
    0.00 :   ffffffff810b5747:       movq    0xbe8(%r15), %rax
    0.00 :   ffffffff810b574e:       movq    0x8f0(%r14), %rcx
    0.00 :   ffffffff810b5755:       cmpq    %rcx, 0xc10(%rax)
    0.00 :   ffffffff810b575c:       je      0xffffffff810b56e5 <find_idlest_group+0x7c5>
    0.00 :   ffffffff810b575e:       leal    0x1(%r13), %ecx
    0.00 :   ffffffff810b5762:       jmp     0xffffffff810b56aa <find_idlest_group+0x78a>
    0.00 :   ffffffff810b5767:       cmpl    $-0x1, %ebx
    0.00 :   ffffffff810b576a:       movl    0x138(%r9), %r9d
    0.00 :   ffffffff810b5771:       jne     0xffffffff810b5184 <find_idlest_group+0x264>
    0.00 :   ffffffff810b5777:       movq    0x4f8(%r15), %r10
    0.00 :   ffffffff810b577e:       movl    %r10d, %r11d
    0.00 :   ffffffff810b5781:       shrq    $0x20, %r10
    0.00 :   ffffffff810b5785:       andl    $0x7fffffff, %r11d # imm = 0x7FFFFFFF
    0.00 :   ffffffff810b578c:       cmpl    %r10d, %r11d
    0.00 :   ffffffff810b578f:       cmovbl  %r10d, %r11d
    0.00 :   ffffffff810b5793:       movl    %r11d, %r11d
    0.00 :   ffffffff810b5796:       addq    %r11, %r9
    0.00 :   ffffffff810b5799:       jmp     0xffffffff810b51a4 <find_idlest_group+0x284>
    0.00 :   ffffffff810b579e:       movl    0x14(%r15), %r10d
    0.00 :   ffffffff810b57a2:       cmpl    %r10d, %ebx
    0.00 :   ffffffff810b57a5:       je      0xffffffff810b57b1 <find_idlest_group+0x891>
    0.00 :   ffffffff810b57a7:       movq    0x4f0(%r15), %r10
    0.00 :   ffffffff810b57ae:       addq    %r10, %rax
    0.00 :   ffffffff810b57b1:       movl    0x138(%r9), %r9d
    0.00 :   ffffffff810b57b8:       jmp     0xffffffff810b5777 <find_idlest_group+0x857>
    0.00 :   ffffffff810b57ba:       movl    $0x5, %edi
    0.00 :   ffffffff810b57bf:       movq    0x8(%r12), %rax
    0.00 :   ffffffff810b57c4:       xorl    %edx, %edx
    0.00 :   ffffffff810b57c6:       movl    %edi, 0x38(%r12)
    0.00 :   ffffffff810b57cb:       shlq    $0xa, %rax
    0.00 :   ffffffff810b57cf:       divq    %rcx
    0.00 :   ffffffff810b57d2:       testb   %sil, %sil
    0.00 :   ffffffff810b57d5:       movq    %rax, (%r12)
    0.00 :   ffffffff810b57d9:       jne     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b57df:       movl    -0x124(%rbp), %ecx
    0.00 :   ffffffff810b57e5:       cmpl    %ecx, %edi
    0.00 :   ffffffff810b57e7:       jb      0xffffffff810b5805 <find_idlest_group+0x8e5>
    0.00 :   ffffffff810b57e9:       cmpl    %edi, -0x124(%rbp)
    0.00 :   ffffffff810b57ef:       jb      0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b57f5:       movq    -0x130(%rbp), %rcx
    0.00 :   ffffffff810b57fc:       cmpq    %rcx, %rax
    0.00 :   ffffffff810b57ff:       jae     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b5805:       movq    0x18(%r12), %rcx
    0.00 :   ffffffff810b580a:       movq    %rax, -0x130(%rbp)
    0.00 :   ffffffff810b5811:       movl    %edi, -0x124(%rbp)
    0.00 :   ffffffff810b5817:       movq    %rcx, -0x138(%rbp)
    0.00 :   ffffffff810b581e:       movl    0x30(%r12), %ecx
    0.00 :   ffffffff810b5823:       movl    %ecx, -0x128(%rbp)
    0.00 :   ffffffff810b5829:       movq    -0xe8(%rbp), %rax
    0.00 :   ffffffff810b5830:       movq    %r15, -0x120(%rbp)
    0.00 :   ffffffff810b5837:       movq    (%r15), %r15
    0.00 :   ffffffff810b583a:       cmpq    %r15, 0x10(%rax)
    0.00 :   ffffffff810b583e:       jne     0xffffffff810b4fc6 <find_idlest_group+0xa6>
    0.00 :   ffffffff810b5844:       jmp     0xffffffff810b5330 <find_idlest_group+0x410>
    0.00 :   ffffffff810b5849:       testb   %sil, %sil
    0.00 :   ffffffff810b584c:       movl    $0x4, 0x38(%r12)
    0.00 :   ffffffff810b5855:       jne     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b585b:       cmpl    $0x4, -0x124(%rbp)
    0.00 :   ffffffff810b5862:       jbe     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b5868:       movq    0x18(%r12), %rax
    0.00 :   ffffffff810b586d:       movl    $0x4, -0x124(%rbp)
    0.00 :   ffffffff810b5877:       movq    %rax, -0x138(%rbp)
    0.00 :   ffffffff810b587e:       movl    0x30(%r12), %eax
    0.00 :   ffffffff810b5883:       movl    %eax, -0x128(%rbp)
    0.00 :   ffffffff810b5889:       movq    (%r12), %rax
    0.00 :   ffffffff810b588d:       movq    %rax, -0x130(%rbp)
    0.00 :   ffffffff810b5894:       jmp     0xffffffff810b5829 <find_idlest_group+0x909>
    0.00 :   ffffffff810b5896:       movl    $0x1, %edi
    0.00 :   ffffffff810b589b:       jmp     0xffffffff810b57bf <find_idlest_group+0x89f>
    0.00 :   ffffffff810b58a0:       cmpl    $0x4, %eax
    0.00 :   ffffffff810b58a3:       jbe     0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b58a9:       cmpl    $0x5, %eax
    0.00 :   ffffffff810b58ac:       jne     0xffffffff810b548b <find_idlest_group+0x56b>
    0.00 :   ffffffff810b58b2:       movq    -0xe8(%rbp), %rbx
    0.00 :   ffffffff810b58b9:       movabsq $0x28f5c28f5c28f5c3, %rdx # imm = 0x28F5C28F5C28F5C3
    0.00 :   ffffffff810b58c3:       movl    0x2c(%rbx), %ecx
    0.00 :   ffffffff810b58c6:       leal    -0x64(%rcx), %eax
    0.00 :   ffffffff810b58c9:       shlq    $0x8, %rax
    0.00 :   ffffffff810b58cd:       mulq    %rdx
    0.00 :   ffffffff810b58d0:       movq    %rdx, %rax
    0.00 :   ffffffff810b58d3:       movq    -0xd0(%rbp), %rdx
    0.00 :   ffffffff810b58da:       shrq    $0x2, %rax
    0.00 :   ffffffff810b58de:       testb   $0x20, 0x3d(%rbx)
    0.00 :   ffffffff810b58e2:       jne     0xffffffff810b5a70 <find_idlest_group+0xb50>
    0.00 :   ffffffff810b58e8:       movq    -0x130(%rbp), %rbx
    0.00 :   ffffffff810b58ef:       addq    %rdx, %rax
    0.00 :   ffffffff810b58f2:       cmpq    %rax, %rbx
    0.00 :   ffffffff810b58f5:       jae     0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b58fb:       movl    $0x64, %eax
    0.00 :   ffffffff810b5900:       imulq   %rax, %rdx
    0.00 :   ffffffff810b5904:       movl    %ecx, %eax
    0.00 :   ffffffff810b5906:       imulq   %rbx, %rax
    0.00 :   ffffffff810b590a:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b590d:       jb      0xffffffff810b548b <find_idlest_group+0x56b>
    0.00 :   ffffffff810b5913:       jmp     0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b5918:       testb   %sil, %sil
    0.00 :   ffffffff810b591b:       movl    $0x3, 0x38(%r12)
    0.00 :   ffffffff810b5924:       jne     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b592a:       cmpl    $0x3, -0x124(%rbp)
    0.00 :   ffffffff810b5931:       jbe     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b5937:       movq    0x18(%r12), %rax
    0.00 :   ffffffff810b593c:       movl    $0x3, -0x124(%rbp)
    0.00 :   ffffffff810b5946:       movq    %rax, -0x138(%rbp)
    0.00 :   ffffffff810b594d:       movl    0x30(%r12), %eax
    0.00 :   ffffffff810b5952:       movl    %eax, -0x128(%rbp)
    0.00 :   ffffffff810b5958:       movq    (%r12), %rax
    0.00 :   ffffffff810b595c:       movq    %rax, -0x130(%rbp)
    0.00 :   ffffffff810b5963:       jmp     0xffffffff810b5829 <find_idlest_group+0x909>
    0.00 :   ffffffff810b5968:       testb   %sil, %sil
    0.00 :   ffffffff810b596b:       movl    $0x2, 0x38(%r12)
    0.00 :   ffffffff810b5974:       jne     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b597a:       cmpl    $0x2, -0x124(%rbp)
    0.00 :   ffffffff810b5981:       ja      0xffffffff810b5a26 <find_idlest_group+0xb06>
    0.00 :   ffffffff810b5987:       jne     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b598d:       movq    -0x120(%rbp), %rax
    0.00 :   ffffffff810b5994:       movq    0x10(%rax), %rdx
    0.00 :   ffffffff810b5998:       movq    0x10(%r15), %rax
    0.00 :   ffffffff810b599c:       movq    0x18(%rax), %rax
    0.00 :   ffffffff810b59a0:       cmpq    %rax, 0x18(%rdx)
    0.00 :   ffffffff810b59a4:       jae     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b59aa:       movq    0x18(%r12), %rax
    0.00 :   ffffffff810b59af:       movq    %rax, -0x138(%rbp)
    0.00 :   ffffffff810b59b6:       movl    0x30(%r12), %eax
    0.00 :   ffffffff810b59bb:       movl    %eax, -0x128(%rbp)
    0.00 :   ffffffff810b59c1:       movq    (%r12), %rax
    0.00 :   ffffffff810b59c5:       movq    %rax, -0x130(%rbp)
    0.00 :   ffffffff810b59cc:       jmp     0xffffffff810b5829 <find_idlest_group+0x909>
    0.00 :   ffffffff810b59d1:       movq    0x18(%r12), %rcx
    0.00 :   ffffffff810b59d6:       movl    %eax, -0x128(%rbp)
    0.00 :   ffffffff810b59dc:       movl    $0x0, -0x124(%rbp)
    0.00 :   ffffffff810b59e6:       movq    %rcx, -0x138(%rbp)
    0.00 :   ffffffff810b59ed:       movq    (%r12), %rcx
    0.00 :   ffffffff810b59f1:       movq    %rcx, -0x130(%rbp)
    0.00 :   ffffffff810b59f8:       jmp     0xffffffff810b5829 <find_idlest_group+0x909>
    0.00 :   ffffffff810b59fd:       movq    -0x108(%rbp), %rax
    0.00 :   ffffffff810b5a04:       movq    0x10(%rax), %rdx
    0.00 :   ffffffff810b5a08:       movq    -0x120(%rbp), %rax
    0.00 :   ffffffff810b5a0f:       movq    0x10(%rax), %rax
    0.00 :   ffffffff810b5a13:       movq    0x18(%rax), %rax
    0.00 :   ffffffff810b5a17:       cmpq    %rax, 0x18(%rdx)
    0.00 :   ffffffff810b5a1b:       jb      0xffffffff810b548b <find_idlest_group+0x56b>
    0.00 :   ffffffff810b5a21:       jmp     0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b5a26:       movq    0x18(%r12), %rax
    0.00 :   ffffffff810b5a2b:       movl    $0x2, -0x124(%rbp)
    0.00 :   ffffffff810b5a35:       movq    %rax, -0x138(%rbp)
    0.00 :   ffffffff810b5a3c:       movl    0x30(%r12), %eax
    0.00 :   ffffffff810b5a41:       movl    %eax, -0x128(%rbp)
    0.00 :   ffffffff810b5a47:       movq    (%r12), %rax
    0.00 :   ffffffff810b5a4b:       movq    %rax, -0x130(%rbp)
    0.00 :   ffffffff810b5a52:       jmp     0xffffffff810b5829 <find_idlest_group+0x909>
    0.00 :   ffffffff810b5a57:       movl    -0xa0(%rbp), %eax
    0.00 :   ffffffff810b5a5d:       movl    -0x128(%rbp), %ecx
    0.00 :   ffffffff810b5a63:       cmpl    %ecx, %eax
    0.00 :   ffffffff810b5a65:       jb      0xffffffff810b548b <find_idlest_group+0x56b>
    0.00 :   ffffffff810b5a6b:       jmp     0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b5a70:       movq    -0x130(%rbp), %rbx
    0.00 :   ffffffff810b5a77:       leaq    (%rax,%rbx), %rsi
    0.00 :   ffffffff810b5a7b:       cmpq    %rdx, %rsi
    0.00 :   ffffffff810b5a7e:       jb      0xffffffff810b58e8 <find_idlest_group+0x9c8>
    0.00 :   ffffffff810b5a84:       jmp     0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b5a89:       movq    -0x138(%rbp), %rax
    0.00 :   ffffffff810b5a90:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b5a93:       jae     0xffffffff810b531c <find_idlest_group+0x3fc>
    0.00 :   ffffffff810b5a99:       movq    (%r12), %rax
    0.00 :   ffffffff810b5a9d:       movq    %rdx, -0x138(%rbp)
    0.00 :   ffffffff810b5aa4:       movq    %rax, -0x130(%rbp)
    0.00 :   ffffffff810b5aab:       jmp     0xffffffff810b5829 <find_idlest_group+0x909>
    0.00 :   ffffffff810b5ab0:       movl    -0x128(%rbp), %ecx
    0.00 :   ffffffff810b5ab6:       cmpl    %ecx, %eax
    0.00 :   ffffffff810b5ab8:       jne     0xffffffff810b5a5d <find_idlest_group+0xb3d>
    0.00 :   ffffffff810b5aba:       jmp     0xffffffff810b5480 <find_idlest_group+0x560>
    0.00 :   ffffffff810b5abf:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810fb830 <__rcu_read_unlock>:
         : 5                ; __rcu_read_unlock():
   99.92 :   ffffffff810fb830:       pushq   %rbp
    0.00 :   ffffffff810fb831:       movq    %rsp, %rbp
    0.00 :   ffffffff810fb834:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff810fb83d:       decl    0xa58(%rdi)
    0.00 :   ffffffff810fb843:       jne     0xffffffff810fb84f <__rcu_read_unlock+0x1f>
    0.00 :   ffffffff810fb845:       movl    0xa4(%rdi), %eax
    0.00 :   ffffffff810fb84b:       testl   %eax, %eax
    0.00 :   ffffffff810fb84d:       jne     0xffffffff810fb859 <__rcu_read_unlock+0x29>
    0.00 :   ffffffff810fb84f:       popq    %rbp
    0.00 :   ffffffff810fb850:       xorl    %eax, %eax
    0.08 :   ffffffff810fb852:       xorl    %edi, %edi
    0.00 :   ffffffff810fb854:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810fb859:       callq   0xffffffff810fb6d0 <rcu_read_unlock_special>
    0.00 :   ffffffff810fb85e:       popq    %rbp
    0.00 :   ffffffff810fb85f:       xorl    %eax, %eax
    0.00 :   ffffffff810fb861:       xorl    %edi, %edi
    0.00 :   ffffffff810fb863:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of bridge.ko for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    0000000000001f40 <fdb_find_rcu>:
         : 5    ; fdb_find_rcu():
    0.00 :   1f40:           pushq   %rbp
    0.00 :   1f41:           movq    %rsp, %rbp
    0.00 :   1f44:           subq    $0x50, %rsp
    0.00 :   1f48:           movq    %r13, -0x18(%rbp)
    0.00 :   1f4c:           movq    %rbx, -0x28(%rbp)
    0.00 :   1f50:           movq    %rdi, %r13
    0.00 :   1f53:           movq    %r12, -0x20(%rbp)
    0.00 :   1f57:           movq    %r14, -0x10(%rbp)
    0.00 :   1f5b:           movq    %r15, -0x8(%rbp)
    0.00 :   1f5f:           movq    %gs:0x28, %rax
    0.00 :   1f68:           movq    %rax, -0x30(%rbp)
    0.00 :   1f6c:           xorl    %eax, %eax
    0.00 :   1f6e:           movl    (%rsi), %eax
    0.00 :   1f70:           movq    (%rdi), %r14
    0.00 :   1f73:           movw    %dx, -0x32(%rbp)
    0.00 :   1f77:           movl    %eax, -0x38(%rbp)
    0.00 :   1f7a:           movzwl  0x4(%rsi), %eax
    0.00 :   1f7e:           movw    %ax, -0x34(%rbp)
         : 24   ; __msg.16():
    0.00 :   1f82:           movl    0x8(%r14), %edx
    0.00 :   1f86:           leaq    -0x38(%rbp), %rsi
    0.00 :   1f8a:           movq    %r13, %rdi
    0.00 :   1f8d:           callq   0x1aa0 <rht_key_get_hash.constprop.0>
    0.00 :   1f92:           movl    (%r14), %ecx
    0.00 :   1f95:           leal    -0x1(%rcx), %esi
    0.00 :   1f98:           andl    %eax, %esi
    0.00 :   1f9a:           movl    0x4(%r14), %eax
    0.00 :   1f9e:           testl   %eax, %eax
    0.00 :   1fa0:           jne     0x2061 <fdb_find_rcu+0x121>
    0.00 :   1fa6:           leaq    0x40(%r14,%rsi,8), %rax
    0.00 :   1fab:           movq    %rax, -0x40(%rbp)
    0.00 :   1faf:           movq    -0x40(%rbp), %rax
    0.00 :   1fb3:           orq     $0x1, %rax
    0.00 :   1fb7:           movq    %rax, -0x50(%rbp)
    0.00 :   1fbb:           movq    -0x40(%rbp), %rax
    0.00 :   1fbf:           movq    (%rax), %rbx
         : 42   ; __msg.17():
    0.00 :   1fc2:           andq    $-0x2, %rbx
    0.00 :   1fc6:           cmoveq  -0x50(%rbp), %rbx
    0.00 :   1fcb:           testb   $0x1, %bl
    0.00 :   1fce:           jne     0x203f <fdb_find_rcu+0xff>
    0.00 :   1fd0:           movzwl  0x12(%r13), %eax
    0.00 :   1fd5:           movzwl  0x14(%r13), %r12d
    0.00 :   1fda:           movzwl  0x16(%r13), %r15d
  100.00 :   1fdf:           movq    %rax, -0x48(%rbp)
    0.00 :   1fe3:           subq    %r15, %r12
    0.00 :   1fe6:           movq    -0x48(%rbp), %rdx
    0.00 :   1fea:           leaq    (%rbx,%r12), %rdi
    0.00 :   1fee:           leaq    -0x38(%rbp), %rsi
    0.00 :   1ff2:           callq   0x1ff7 <fdb_find_rcu+0xb7>
    0.00 :   1ff7:           testl   %eax, %eax
    0.00 :   1ff9:           jne     0x2037 <fdb_find_rcu+0xf7>
    0.00 :   1ffb:           movq    %rbx, %rax
    0.00 :   1ffe:           subq    %r15, %rax
         : 60   ; __msg.18():
    0.00 :   2001:           testq   %rbx, %rbx
    0.00 :   2004:           je      0x205d <fdb_find_rcu+0x11d>
    0.00 :   2006:           movq    -0x30(%rbp), %rdx
    0.00 :   200a:           subq    %gs:0x28, %rdx
    0.00 :   2013:           jne     0x2072 <fdb_find_rcu+0x132>
    0.00 :   2015:           movq    -0x28(%rbp), %rbx
    0.00 :   2019:           movq    -0x20(%rbp), %r12
    0.00 :   201d:           movq    -0x18(%rbp), %r13
    0.00 :   2021:           movq    -0x10(%rbp), %r14
    0.00 :   2025:           movq    -0x8(%rbp), %r15
    0.00 :   2029:           leave
    0.00 :   202a:           xorl    %edx, %edx
    0.00 :   202c:           xorl    %ecx, %ecx
    0.00 :   202e:           xorl    %esi, %esi
    0.00 :   2030:           xorl    %edi, %edi
    0.00 :   2032:           jmp     0x2037 <fdb_find_rcu+0xf7>
    0.00 :   2037:           movq    (%rbx), %rbx
    0.00 :   203a:           testb   $0x1, %bl
    0.00 :   203d:           je      0x1fe6 <fdb_find_rcu+0xa6>
    0.00 :   203f:           movq    -0x40(%rbp), %rax
         : 81   ; __msg.19():
    0.00 :   2043:           orq     $0x1, %rax
    0.00 :   2047:           cmpq    %rax, %rbx
    0.00 :   204a:           jne     0x1fbb <fdb_find_rcu+0x7b>
    0.00 :   2050:           movq    0x30(%r14), %r14
    0.00 :   2054:           testq   %r14, %r14
    0.00 :   2057:           jne     0x1f82 <fdb_find_rcu+0x42>
    0.00 :   205d:           xorl    %eax, %eax
    0.00 :   205f:           jmp     0x2006 <fdb_find_rcu+0xc6>
    0.00 :   2061:           movq    %r14, %rdi
    0.00 :   2064:           callq   0x2069 <fdb_find_rcu+0x129>
    0.00 :   2069:           movq    %rax, -0x40(%rbp)
    0.00 :   206d:           jmp     0x1faf <fdb_find_rcu+0x6f>
    0.00 :   2072:           callq   0x2077 <fdb_find_rcu+0x137>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81937d40 <__kfree_skb>:
         : 5                ; __kfree_skb():
    0.00 :   ffffffff81937d40:       pushq   %rbp
    0.00 :   ffffffff81937d41:       movq    %rsp, %rbp
    0.00 :   ffffffff81937d44:       pushq   %rbx
    0.00 :   ffffffff81937d45:       movq    %rdi, %rbx
    0.00 :   ffffffff81937d48:       callq   0xffffffff81935ab0 <skb_release_head_state>
    0.00 :   ffffffff81937d4d:       cmpq    $0x0, 0xc0(%rbx)
    0.00 :   ffffffff81937d55:       je      0xffffffff81937d66 <__kfree_skb+0x26>
    0.00 :   ffffffff81937d57:       xorl    %edx, %edx
    0.00 :   ffffffff81937d59:       movl    $0x2, %esi
    0.00 :   ffffffff81937d5e:       movq    %rbx, %rdi
    0.00 :   ffffffff81937d61:       callq   0xffffffff81935d00 <skb_release_data>
    0.00 :   ffffffff81937d66:       movq    %rbx, %rdi
    0.00 :   ffffffff81937d69:       callq   0xffffffff819338c0 <kfree_skbmem>
    0.00 :   ffffffff81937d6e:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81937d72:       leave
    0.00 :   ffffffff81937d73:       xorl    %edx, %edx
  100.00 :   ffffffff81937d75:       xorl    %esi, %esi
    0.00 :   ffffffff81937d77:       xorl    %edi, %edi
    0.00 :   ffffffff81937d79:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of nf_conntrack.ko for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         : 2   Disassembly of section .text:
         :
         : 4   00000000000006c0 <nf_ct_get_tuple>:
         : 5   ; nf_ct_get_tuple():
    0.00 :   6c0:            pushq   %rbp
    0.00 :   6c1:            movq    %rsp, %rbp
    0.00 :   6c4:            pushq   %r13
    0.00 :   6c6:            movl    %edx, %r13d
    0.00 :   6c9:            pushq   %r12
         : 11  ; __kstrtab___nf_ct_ext_find():
    0.00 :   6cb:            movl    %ecx, %r12d
    0.00 :   6ce:            pushq   %rbx
    0.00 :   6cf:            subq    $0x48, %rsp
    0.00 :   6d3:            movq    0x10(%rbp), %rbx
    0.00 :   6d7:            movq    %gs:0x28, %rax
         : 17  ; __kstrtab_nf_ct_seqadj_init():
    0.00 :   6e0:            movq    %rax, -0x20(%rbp)
    0.00 :   6e4:            xorl    %eax, %eax
    0.00 :   6e6:            cmpw    $0x2, %cx
    0.00 :   6ea:            movq    $0x0, 0x10(%rbx)
         : 22  ; __kstrtab_nf_ct_seqadj_set():
    0.00 :   6f2:            movq    $0x0, -0x40(%rbp)
    0.00 :   6fa:            movq    $0x0, -0x38(%rbp)
         : 25  ; __kstrtab_nf_ct_tcp_seqadj_set():
    0.00 :   702:            movq    $0x0, -0x30(%rbp)
    0.00 :   70a:            movq    $0x0, -0x28(%rbp)
    0.00 :   712:            movq    $0x0, (%rbx)
         : 29  ; __kstrtab_nf_ct_seq_adjust():
    0.00 :   719:            movq    $0x0, 0x8(%rbx)
    0.00 :   721:            movq    $0x0, 0x18(%rbx)
         : 32  ; __kstrtabns_nf_ct_seq_adjust():
    0.00 :   729:            movq    $0x0, 0x20(%rbx)
         : 34  ; __kstrtab_nf_ct_seq_offset():
    0.00 :   731:            movw    %cx, 0x12(%rbx)
    0.00 :   735:            je      0x829 <nf_ct_get_tuple+0x169>
         : 37  ; __kstrtabns_nf_ct_seq_offset():
    0.00 :   73b:            cmpw    $0xa, %cx
    0.00 :   73f:            jne     0x7de <nf_ct_get_tuple+0x11e>
    0.00 :   745:            addl    $0x8, %esi
    0.00 :   748:            movl    $0x20, %ecx
    0.00 :   74d:            movl    0x70(%rdi), %eax
    0.00 :   750:            subl    0x74(%rdi), %eax
    0.00 :   753:            movq    0xc8(%rdi), %rdx
    0.00 :   75a:            subl    %esi, %eax
    0.00 :   75c:            cmpl    %ecx, %eax
    0.00 :   75e:            jl      0x8a6 <nf_ct_get_tuple+0x1e6>
    0.00 :   764:            movslq  %esi, %rsi
    0.00 :   767:            addq    %rsi, %rdx
    0.00 :   76a:            je      0x89f <nf_ct_get_tuple+0x1df>
    0.00 :   770:            cmpw    $0x2, %r12w
    0.00 :   775:            je      0x87e <nf_ct_get_tuple+0x1be>
    0.00 :   77b:            cmpw    $0xa, %r12w
    0.00 :   780:            je      0x836 <nf_ct_get_tuple+0x176>
    0.00 :   786:            cmpb    $0x11, %r8b
    0.00 :   78a:            movb    %r8b, 0x26(%rbx)
    0.00 :   78e:            movb    $0x0, 0x27(%rbx)
    0.00 :   792:            je      0x7a6 <nf_ct_get_tuple+0xe6>
    0.00 :   794:            ja      0x813 <nf_ct_get_tuple+0x153>
    0.00 :   796:            cmpb    $0x1, %r8b
    0.00 :   79a:            je      0x86b <nf_ct_get_tuple+0x1ab>
    0.00 :   7a0:            cmpb    $0x6, %r8b
    0.00 :   7a4:            jne     0x7de <nf_ct_get_tuple+0x11e>
    0.00 :   7a6:            movl    0x70(%rdi), %eax
    0.00 :   7a9:            subl    0x74(%rdi), %eax
    0.00 :   7ac:            movq    0xc8(%rdi), %rdx
    0.00 :   7b3:            movl    $0x0, -0x44(%rbp)
    0.00 :   7ba:            subl    %r13d, %eax
    0.00 :   7bd:            cmpl    $0x3, %eax
    0.00 :   7c0:            jle     0x8d9 <nf_ct_get_tuple+0x219>
    0.00 :   7c6:            addq    %r13, %rdx
    0.00 :   7c9:            je      0x89f <nf_ct_get_tuple+0x1df>
    0.00 :   7cf:            movzwl  (%rdx), %eax
    0.00 :   7d2:            movw    %ax, 0x10(%rbx)
    0.00 :   7d6:            movzwl  0x2(%rdx), %eax
    0.00 :   7da:            movw    %ax, 0x24(%rbx)
    0.00 :   7de:            movl    $0x1, %eax
    0.00 :   7e3:            movq    -0x20(%rbp), %rdx
    0.00 :   7e7:            subq    %gs:0x28, %rdx
    0.00 :   7f0:            jne     0x8fc <nf_ct_get_tuple+0x23c>
    0.00 :   7f6:            addq    $0x48, %rsp
    0.00 :   7fa:            popq    %rbx
    0.00 :   7fb:            popq    %r12
    0.00 :   7fd:            popq    %r13
    0.00 :   7ff:            popq    %rbp
    0.00 :   800:            xorl    %edx, %edx
    0.00 :   802:            xorl    %ecx, %ecx
    0.00 :   804:            xorl    %esi, %esi
    0.00 :   806:            xorl    %edi, %edi
    0.00 :   808:            xorl    %r8d, %r8d
    0.00 :   80b:            xorl    %r9d, %r9d
    0.00 :   80e:            jmp     0x813 <nf_ct_get_tuple+0x153>
    0.00 :   813:            cmpb    $0x3a, %r8b
    0.00 :   817:            jne     0x7de <nf_ct_get_tuple+0x11e>
    0.00 :   819:            movq    %rbx, %rcx
    0.00 :   81c:            movq    %r9, %rdx
    0.00 :   81f:            movl    %r13d, %esi
    0.00 :   822:            callq   0x827 <nf_ct_get_tuple+0x167>
    0.00 :   827:            jmp     0x7e3 <nf_ct_get_tuple+0x123>
    0.00 :   829:            addl    $0xc, %esi
  100.00 :   82c:            movl    $0x8, %ecx
    0.00 :   831:            jmp     0x74d <nf_ct_get_tuple+0x8d>
    0.00 :   836:            movq    (%rdx), %rax
    0.00 :   839:            cmpb    $0x11, %r8b
    0.00 :   83d:            movq    %rax, (%rbx)
    0.00 :   840:            movq    0x8(%rdx), %rax
    0.00 :   844:            movq    %rax, 0x8(%rbx)
    0.00 :   848:            movq    0x10(%rdx), %rax
    0.00 :   84c:            movq    %rax, 0x14(%rbx)
    0.00 :   850:            movq    0x18(%rdx), %rax
    0.00 :   854:            movb    %r8b, 0x26(%rbx)
    0.00 :   858:            movb    $0x0, 0x27(%rbx)
    0.00 :   85c:            movq    %rax, 0x1c(%rbx)
    0.00 :   860:            jne     0x794 <nf_ct_get_tuple+0xd4>
    0.00 :   866:            jmp     0x7a6 <nf_ct_get_tuple+0xe6>
    0.00 :   86b:            movq    %rbx, %rcx
    0.00 :   86e:            movq    %r9, %rdx
    0.00 :   871:            movl    %r13d, %esi
    0.00 :   874:            callq   0x879 <nf_ct_get_tuple+0x1b9>
    0.00 :   879:            jmp     0x7e3 <nf_ct_get_tuple+0x123>
    0.00 :   87e:            movl    (%rdx), %eax
    0.00 :   880:            cmpb    $0x11, %r8b
    0.00 :   884:            movl    %eax, (%rbx)
    0.00 :   886:            movl    0x4(%rdx), %eax
    0.00 :   889:            movb    %r8b, 0x26(%rbx)
    0.00 :   88d:            movb    $0x0, 0x27(%rbx)
    0.00 :   891:            movl    %eax, 0x14(%rbx)
    0.00 :   894:            jne     0x794 <nf_ct_get_tuple+0xd4>
    0.00 :   89a:            jmp     0x7a6 <nf_ct_get_tuple+0xe6>
    0.00 :   89f:            xorl    %eax, %eax
    0.00 :   8a1:            jmp     0x7e3 <nf_ct_get_tuple+0x123>
    0.00 :   8a6:            testq   %rdi, %rdi
    0.00 :   8a9:            movq    %r9, -0x58(%rbp)
    0.00 :   8ad:            movl    %r8d, -0x4c(%rbp)
    0.00 :   8b1:            je      0x89f <nf_ct_get_tuple+0x1df>
    0.00 :   8b3:            leaq    -0x40(%rbp), %rdx
    0.00 :   8b7:            movq    %rdi, -0x60(%rbp)
    0.00 :   8bb:            callq   0x8c0 <nf_ct_get_tuple+0x200>
         : 139 ; ___once_key.0():
    0.00 :   8c0:            testl   %eax, %eax
    0.00 :   8c2:            js      0x89f <nf_ct_get_tuple+0x1df>
    0.00 :   8c4:            movq    -0x58(%rbp), %r9
    0.00 :   8c8:            movl    -0x4c(%rbp), %r8d
    0.00 :   8cc:            leaq    -0x40(%rbp), %rdx
    0.00 :   8d0:            movq    -0x60(%rbp), %rdi
    0.00 :   8d4:            jmp     0x770 <nf_ct_get_tuple+0xb0>
    0.00 :   8d9:            testq   %rdi, %rdi
    0.00 :   8dc:            je      0x89f <nf_ct_get_tuple+0x1df>
    0.00 :   8de:            leaq    -0x44(%rbp), %rdx
         : 150 ; nf_ct_helper_expectfn_list():
    0.00 :   8e2:            movl    $0x4, %ecx
    0.00 :   8e7:            movl    %r13d, %esi
    0.00 :   8ea:            callq   0x8ef <nf_ct_get_tuple+0x22f>
    0.00 :   8ef:            testl   %eax, %eax
    0.00 :   8f1:            js      0x89f <nf_ct_get_tuple+0x1df>
    0.00 :   8f3:            leaq    -0x44(%rbp), %rdx
    0.00 :   8f7:            jmp     0x7cf <nf_ct_get_tuple+0x10f>
    0.00 :   8fc:            nopl    (%rax)
         : 159 ; nf_ct_nat_helpers_mutex():
    0.00 :   900:            callq   0x905 <nf_ct_get_tuple+0x245>
 Percent |	Source code & Disassembly of nf_conntrack.ko for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    00000000000034f0 <nf_conntrack_in>:
         : 5    ; nf_conntrack_in():
    0.00 :   34f0:           pushq   %rbp
    0.00 :   34f1:           movq    %rsp, %rbp
    0.00 :   34f4:           pushq   %r15
    0.00 :   34f6:           pushq   %r14
    0.00 :   34f8:           pushq   %r13
    0.00 :   34fa:           movq    %rdi, %r13
    0.00 :   34fd:           pushq   %r12
    0.00 :   34ff:           movq    %rsi, %r12
    0.00 :   3502:           pushq   %rbx
    0.00 :   3503:           subq    $0x58, %rsp
    0.00 :   3507:           movq    %gs:0x28, %rax
    0.00 :   3510:           movq    %rax, -0x30(%rbp)
    0.00 :   3514:           xorl    %eax, %eax
    0.00 :   3516:           movq    0x68(%rdi), %rax
    0.00 :   351a:           movb    $0x0, -0x59(%rbp)
    0.00 :   351e:           movl    %eax, %edx
    0.00 :   3520:           movq    %rax, %rdi
    0.00 :   3523:           movq    %rax, -0x78(%rbp)
    0.00 :   3527:           andq    $-0x8, %rdi
    0.00 :   352b:           andl    $0x7, %edx
    0.00 :   352e:           cmpq    $0x7, %rax
    0.00 :   3532:           movq    %rdi, -0x70(%rbp)
    0.00 :   3536:           ja      0x38cc <nf_conntrack_in+0x3dc>
    0.00 :   353c:           cmpl    $0x7, %edx
    0.00 :   353f:           movl    $0x1, %eax
    0.00 :   3544:           je      0x3766 <nf_conntrack_in+0x276>
    0.00 :   354a:           movzwl  0xb0(%r13), %esi
    0.00 :   3552:           movzbl  0x1(%r12), %edx
    0.00 :   3558:           leaq    -0x59(%rbp), %rcx
    0.00 :   355c:           addq    0xc0(%r13), %rsi
    0.00 :   3563:           movq    %r13, %rdi
    0.00 :   3566:           subl    0xc8(%r13), %esi
    0.00 :   356d:           callq   0x920 <get_l4proto>
    0.00 :   3572:           testl   %eax, %eax
    0.00 :   3574:           movl    %eax, -0x64(%rbp)
    0.00 :   3577:           jle     0x372c <nf_conntrack_in+0x23c>
    0.00 :   357d:           movzbl  -0x59(%rbp), %r8d
    0.00 :   3582:           movzbl  0x1(%r12), %edx
    0.00 :   3588:           cmpb    $0x3a, %r8b
    0.00 :   358c:           sete    %al
    0.00 :   358f:           cmpb    $0x1, %r8b
    0.00 :   3593:           je      0x38ee <nf_conntrack_in+0x3fe>
    0.00 :   3599:           testb   %al, %al
    0.00 :   359b:           jne     0x38ee <nf_conntrack_in+0x3fe>
    0.00 :   35a1:           leaq    -0x58(%rbp), %rbx
    0.00 :   35a5:           jmp     0x36c4 <nf_conntrack_in+0x1d4>
    0.00 :   35aa:           movq    0x20(%r12), %rsi
    0.00 :   35af:           movq    %rbx, %rdi
    0.00 :   35b2:           callq   0x500 <hash_conntrack_raw.constprop.0>
    0.00 :   35b7:           movq    0x20(%r12), %rdi
    0.00 :   35bc:           movl    %eax, %edx
    0.00 :   35be:           movq    %rbx, %rsi
    0.00 :   35c1:           movl    %eax, %r14d
  100.00 :   35c4:           callq   0x17c0 <__nf_conntrack_find_get.isra.0>
    0.00 :   35c9:           testq   %rax, %rax
    0.00 :   35cc:           je      0x3884 <nf_conntrack_in+0x394>
    0.00 :   35d2:           movzbl  0x37(%rax), %esi
    0.00 :   35d6:           leaq    (,%rsi,8), %rdx
    0.00 :   35de:           movq    %rsi, %rcx
    0.00 :   35e1:           subq    %rsi, %rdx
    0.00 :   35e4:           movq    $-0x10, %rsi
    0.00 :   35eb:           shlq    $0x3, %rdx
    0.00 :   35ef:           subq    %rdx, %rsi
    0.00 :   35f2:           addq    %rsi, %rax
    0.00 :   35f5:           decb    %cl
    0.00 :   35f7:           movl    $0x3, %esi
    0.00 :   35fc:           je      0x3610 <nf_conntrack_in+0x120>
    0.00 :   35fe:           movq    0x80(%rax), %rdx
    0.00 :   3605:           xorl    %esi, %esi
    0.00 :   3607:           testb   $0x2, %dl
    0.00 :   360a:           je      0x391a <nf_conntrack_in+0x42a>
    0.00 :   3610:           movzbl  0x83(%r13), %ecx
    0.00 :   3618:           movl    %ecx, %edx
    0.00 :   361a:           shrb    $0x4, %dl
    0.00 :   361d:           andl    $0x1, %edx
    0.00 :   3620:           orq     %rsi, %rax
    0.00 :   3623:           setne   %sil
    0.00 :   3627:           andl    $-0x11, %ecx
    0.00 :   362a:           movq    %rax, 0x68(%r13)
    0.00 :   362e:           orl     %esi, %edx
    0.00 :   3630:           shll    $0x4, %edx
    0.00 :   3633:           orl     %edx, %ecx
    0.00 :   3635:           movb    %cl, 0x83(%r13)
    0.00 :   363c:           movl    %eax, %r14d
    0.00 :   363f:           movq    %rax, %r15
    0.00 :   3642:           andl    $0x7, %r14d
    0.00 :   3646:           andq    $-0x8, %r15
    0.00 :   364a:           cmpq    $0x7, %rax
    0.00 :   364e:           jbe     0x372c <nf_conntrack_in+0x23c>
    0.00 :   3654:           movzbl  0x46(%r15), %eax
    0.00 :   3659:           cmpb    $0x11, %al
    0.00 :   365b:           je      0x37fe <nf_conntrack_in+0x30e>
    0.00 :   3661:           ja      0x379a <nf_conntrack_in+0x2aa>
    0.00 :   3667:           cmpb    $0x1, %al
    0.00 :   3669:           je      0x3856 <nf_conntrack_in+0x366>
    0.00 :   366f:           cmpb    $0x6, %al
    0.00 :   3671:           jne     0x3817 <nf_conntrack_in+0x327>
    0.00 :   3677:           movl    -0x64(%rbp), %edx
    0.00 :   367a:           movq    %r12, %r8
    0.00 :   367d:           movl    %r14d, %ecx
    0.00 :   3680:           movq    %r13, %rsi
    0.00 :   3683:           movq    %r15, %rdi
    0.00 :   3686:           callq   0x368b <nf_conntrack_in+0x19b>
    0.00 :   368b:           testl   %eax, %eax
    0.00 :   368d:           jg      0x383d <nf_conntrack_in+0x34d>
    0.00 :   3693:           movl    $0xffffffff, %edx       # imm = 0xFFFFFFFF
    0.00 :   3698:           lock
    0.00 :   3699:           xaddl   %edx, (%r15)
    0.00 :   369d:           cmpl    $0x1, %edx
    0.00 :   36a0:           je      0x37b4 <nf_conntrack_in+0x2c4>
    0.00 :   36a6:           testl   %edx, %edx
    0.00 :   36a8:           jle     0x386c <nf_conntrack_in+0x37c>
    0.00 :   36ae:           cmpl    $-0x4, %eax
    0.00 :   36b1:           movq    $0x0, 0x68(%r13)
    0.00 :   36b9:           jne     0x37d3 <nf_conntrack_in+0x2e3>
    0.00 :   36bf:           movzbl  -0x59(%rbp), %r8d
    0.00 :   36c4:           movzwl  0xb0(%r13), %esi
    0.00 :   36cc:           movzbl  0x1(%r12), %ecx
    0.00 :   36d2:           movq    %r13, %rdi
    0.00 :   36d5:           addq    0xc0(%r13), %rsi
    0.00 :   36dc:           movq    $0x0, (%rbx)
    0.00 :   36e3:           movq    $0x0, 0x8(%rbx)
    0.00 :   36eb:           movq    $0x0, 0x10(%rbx)
    0.00 :   36f3:           movq    $0x0, 0x18(%rbx)
    0.00 :   36fb:           movq    $0x0, 0x20(%rbx)
    0.00 :   3703:           movq    %rbx, (%rsp)
    0.00 :   3707:           subl    0xc8(%r13), %esi
    0.00 :   370e:           movq    0x20(%r12), %r9
    0.00 :   3713:           movl    -0x64(%rbp), %edx
    0.00 :   3716:           callq   0x6c0 <nf_ct_get_tuple>
    0.00 :   371b:           testb   %al, %al
    0.00 :   371d:           jne     0x35aa <nf_conntrack_in+0xba>
    0.00 :   3723:           movq    0x68(%r13), %rax
    0.00 :   3727:           jmp     0x363c <nf_conntrack_in+0x14c>
    0.00 :   372c:           movq    0x20(%r12), %rax
    0.00 :   3731:           movq    0x9c0(%rax), %rax
    0.00 :   3738:           incl    %gs:0x4(%rax)
    0.00 :   373c:           movl    $0x1, %eax
    0.00 :   3741:           cmpq    $0x7, -0x78(%rbp)
    0.00 :   3746:           jbe     0x3766 <nf_conntrack_in+0x276>
    0.00 :   3748:           movq    -0x70(%rbp), %rdi
    0.00 :   374c:           movl    $0xffffffff, %edx       # imm = 0xFFFFFFFF
    0.00 :   3751:           lock
    0.00 :   3752:           xaddl   %edx, (%rdi)
    0.00 :   3755:           cmpl    $0x1, %edx
    0.00 :   3758:           je      0x3934 <nf_conntrack_in+0x444>
    0.00 :   375e:           testl   %edx, %edx
    0.00 :   3760:           jle     0x397f <nf_conntrack_in+0x48f>
    0.00 :   3766:           movq    -0x30(%rbp), %rdx
    0.00 :   376a:           subq    %gs:0x28, %rdx
    0.00 :   3773:           jne     0x39ac <nf_conntrack_in+0x4bc>
    0.00 :   3779:           addq    $0x58, %rsp
    0.00 :   377d:           popq    %rbx
    0.00 :   377e:           popq    %r12
    0.00 :   3780:           popq    %r13
    0.00 :   3782:           popq    %r14
    0.00 :   3784:           popq    %r15
    0.00 :   3786:           popq    %rbp
    0.00 :   3787:           xorl    %edx, %edx
    0.00 :   3789:           xorl    %ecx, %ecx
    0.00 :   378b:           xorl    %esi, %esi
    0.00 :   378d:           xorl    %edi, %edi
    0.00 :   378f:           xorl    %r8d, %r8d
    0.00 :   3792:           xorl    %r9d, %r9d
    0.00 :   3795:           jmp     0x379a <nf_conntrack_in+0x2aa>
    0.00 :   379a:           cmpb    $0x3a, %al
    0.00 :   379c:           jne     0x3817 <nf_conntrack_in+0x327>
    0.00 :   379e:           movq    %r12, %rcx
    0.00 :   37a1:           movl    %r14d, %edx
    0.00 :   37a4:           movq    %r13, %rsi
    0.00 :   37a7:           movq    %r15, %rdi
    0.00 :   37aa:           callq   0x37af <nf_conntrack_in+0x2bf>
    0.00 :   37af:           jmp     0x368b <nf_conntrack_in+0x19b>
    0.00 :   37b4:           movl    %eax, -0x68(%rbp)
    0.00 :   37b7:           movq    %r15, %rdi
    0.00 :   37ba:           callq   0x37bf <nf_conntrack_in+0x2cf>
    0.00 :   37bf:           movl    -0x68(%rbp), %eax
    0.00 :   37c2:           movq    $0x0, 0x68(%r13)
    0.00 :   37ca:           cmpl    $-0x4, %eax
    0.00 :   37cd:           je      0x36bf <nf_conntrack_in+0x1cf>
    0.00 :   37d3:           movq    0x20(%r12), %rdx
    0.00 :   37d8:           movq    0x9c0(%rdx), %rdx
    0.00 :   37df:           incl    %gs:0x4(%rdx)
    0.00 :   37e3:           testl   %eax, %eax
    0.00 :   37e5:           jne     0x37f7 <nf_conntrack_in+0x307>
    0.00 :   37e7:           movq    0x20(%r12), %rdx
    0.00 :   37ec:           movq    0x9c0(%rdx), %rdx
    0.00 :   37f3:           incl    %gs:0x14(%rdx)
    0.00 :   37f7:           negl    %eax
    0.00 :   37f9:           jmp     0x3741 <nf_conntrack_in+0x251>
    0.00 :   37fe:           movl    -0x64(%rbp), %edx
    0.00 :   3801:           movq    %r12, %r8
    0.00 :   3804:           movl    %r14d, %ecx
    0.00 :   3807:           movq    %r13, %rsi
    0.00 :   380a:           movq    %r15, %rdi
    0.00 :   380d:           callq   0x3812 <nf_conntrack_in+0x322>
    0.00 :   3812:           jmp     0x368b <nf_conntrack_in+0x19b>
    0.00 :   3817:           movq    0x88(%r15), %rax
    0.00 :   381e:           movl    $0x1, %r8d
    0.00 :   3824:           movq    %r13, %rdx
    0.00 :   3827:           movl    %r14d, %esi
    0.00 :   382a:           movq    %r15, %rdi
    0.00 :   382d:           movl    0x9d0(%rax), %ecx
    0.00 :   3833:           callq   0x3838 <nf_conntrack_in+0x348>
    0.00 :   3838:           movl    $0x1, %eax
    0.00 :   383d:           cmpl    $0x3, %r14d
    0.00 :   3841:           jne     0x3741 <nf_conntrack_in+0x251>
    0.00 :   3847:           lock
    0.00 :   3848:           btsq    $0x1, 0x80(%r15)
    0.00 :   3851:           jmp     0x3741 <nf_conntrack_in+0x251>
    0.00 :   3856:           movq    %r12, %rcx
    0.00 :   3859:           movl    %r14d, %edx
    0.00 :   385c:           movq    %r13, %rsi
    0.00 :   385f:           movq    %r15, %rdi
    0.00 :   3862:           callq   0x3867 <nf_conntrack_in+0x377>
    0.00 :   3867:           jmp     0x368b <nf_conntrack_in+0x19b>
    0.00 :   386c:           movl    $0x3, %esi
    0.00 :   3871:           movq    %r15, %rdi
    0.00 :   3874:           movl    %eax, -0x68(%rbp)
    0.00 :   3877:           callq   0x387c <nf_conntrack_in+0x38c>
    0.00 :   387c:           movl    -0x68(%rbp), %eax
    0.00 :   387f:           jmp     0x36ae <nf_conntrack_in+0x1be>
    0.00 :   3884:           movq    0x20(%r12), %rdi
    0.00 :   3889:           movq    -0x70(%rbp), %rsi
    0.00 :   388d:           movl    %r14d, %ecx
    0.00 :   3890:           movq    %rbx, %rdx
    0.00 :   3893:           callq   0x2130 <init_conntrack.constprop.0>
    0.00 :   3898:           testq   %rax, %rax
    0.00 :   389b:           je      0x3723 <nf_conntrack_in+0x233>
    0.00 :   38a1:           cmpq    $-0x1000, %rax          # imm = 0xF000
    0.00 :   38a7:           jbe     0x35d2 <nf_conntrack_in+0xe2>
    0.00 :   38ad:           testl   %eax, %eax
    0.00 :   38af:           jns     0x3723 <nf_conntrack_in+0x233>
    0.00 :   38b5:           movq    0x20(%r12), %rax
    0.00 :   38ba:           movq    0x9c0(%rax), %rax
    0.00 :   38c1:           incl    %gs:0x14(%rax)
    0.00 :   38c5:           xorl    %eax, %eax
    0.00 :   38c7:           jmp     0x3741 <nf_conntrack_in+0x251>
    0.00 :   38cc:           movq    -0x70(%rbp), %rax
    0.00 :   38d0:           movq    0x80(%rax), %rax
    0.00 :   38d7:           testb   $0x8, %ah
    0.00 :   38da:           je      0x392a <nf_conntrack_in+0x43a>
    0.00 :   38dc:           cmpl    $0x7, %edx
    0.00 :   38df:           je      0x392a <nf_conntrack_in+0x43a>
    0.00 :   38e1:           movq    $0x0, 0x68(%r13)
    0.00 :   38e9:           jmp     0x354a <nf_conntrack_in+0x5a>
    0.00 :   38ee:           cmpb    $0x2, %dl
    0.00 :   38f1:           je      0x3948 <nf_conntrack_in+0x458>
    0.00 :   38f3:           cmpb    $0xa, %dl
    0.00 :   38f6:           jne     0x3900 <nf_conntrack_in+0x410>
    0.00 :   38f8:           testb   %al, %al
    0.00 :   38fa:           jne     0x3998 <nf_conntrack_in+0x4a8>
    0.00 :   3900:           movl    $0x1, %eax
    0.00 :   3905:           cmpq    $0x0, 0x68(%r13)
    0.00 :   390a:           movzbl  -0x59(%rbp), %r8d
    0.00 :   390f:           je      0x35a1 <nf_conntrack_in+0xb1>
    0.00 :   3915:           jmp     0x3741 <nf_conntrack_in+0x251>
    0.00 :   391a:           andl    $0x1, %edx
    0.00 :   391d:           movl    $0x2, %esi
    0.00 :   3922:           subq    %rdx, %rsi
    0.00 :   3925:           jmp     0x3610 <nf_conntrack_in+0x120>
    0.00 :   392a:           movl    $0x1, %eax
    0.00 :   392f:           jmp     0x3766 <nf_conntrack_in+0x276>
    0.00 :   3934:           movl    %eax, -0x64(%rbp)
    0.00 :   3937:           movq    -0x70(%rbp), %rdi
    0.00 :   393b:           callq   0x3940 <nf_conntrack_in+0x450>
    0.00 :   3940:           movl    -0x64(%rbp), %eax
    0.00 :   3943:           jmp     0x3766 <nf_conntrack_in+0x276>
    0.00 :   3948:           decb    %r8b
    0.00 :   394b:           movl    $0x1, %eax
    0.00 :   3950:           jne     0x3905 <nf_conntrack_in+0x415>
    0.00 :   3952:           movl    -0x64(%rbp), %edx
    0.00 :   3955:           movq    -0x70(%rbp), %rdi
    0.00 :   3959:           movq    %r12, %rcx
    0.00 :   395c:           movq    %r13, %rsi
    0.00 :   395f:           callq   0x3964 <nf_conntrack_in+0x474>
    0.00 :   3964:           testl   %eax, %eax
    0.00 :   3966:           jg      0x3905 <nf_conntrack_in+0x415>
    0.00 :   3968:           movq    0x20(%r12), %rdx
    0.00 :   396d:           movq    0x9c0(%rdx), %rdx
    0.00 :   3974:           incl    %gs:0x1c(%rdx)
    0.00 :   3978:           negl    %eax
    0.00 :   397a:           jmp     0x3741 <nf_conntrack_in+0x251>
    0.00 :   397f:           movq    -0x70(%rbp), %rdi
    0.00 :   3983:           movl    $0x3, %esi
    0.00 :   3988:           movl    %eax, -0x64(%rbp)
    0.00 :   398b:           callq   0x3990 <nf_conntrack_in+0x4a0>
    0.00 :   3990:           movl    -0x64(%rbp), %eax
    0.00 :   3993:           jmp     0x3766 <nf_conntrack_in+0x276>
    0.00 :   3998:           movl    -0x64(%rbp), %edx
    0.00 :   399b:           movq    -0x70(%rbp), %rdi
    0.00 :   399f:           movq    %r12, %rcx
    0.00 :   39a2:           movq    %r13, %rsi
    0.00 :   39a5:           callq   0x39aa <nf_conntrack_in+0x4ba>
    0.00 :   39aa:           jmp     0x3964 <nf_conntrack_in+0x474>
    0.00 :   39ac:           callq   0x39b1 <nf_conntrack_in+0x4c1>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81a06570 <__tcp_ack_snd_check>:
         : 5                ; __tcp_ack_snd_check():
    0.00 :   ffffffff81a06570:       pushq   %rbp
    0.00 :   ffffffff81a06571:       movq    %rsp, %rbp
    0.00 :   ffffffff81a06574:       pushq   %r12
    0.00 :   ffffffff81a06576:       pushq   %rbx
    0.00 :   ffffffff81a06577:       movq    %rdi, %rbx
    0.00 :   ffffffff81a0657a:       subq    $0x8, %rsp
    0.00 :   ffffffff81a0657e:       movl    0x580(%rdi), %eax
    0.00 :   ffffffff81a06584:       movzwl  0x4e6(%rdi), %ecx
    0.00 :   ffffffff81a0658b:       movl    %eax, %edx
    0.00 :   ffffffff81a0658d:       subl    0x588(%rdi), %edx
    0.00 :   ffffffff81a06593:       cmpl    %edx, %ecx
    0.00 :   ffffffff81a06595:       jae     0xffffffff81a065d7 <__tcp_ack_snd_check+0x67>
    0.00 :   ffffffff81a06597:       subl    0x584(%rdi), %eax
    0.00 :   ffffffff81a0659d:       movl    %esi, -0x14(%rbp)
    0.00 :   ffffffff81a065a0:       cmpl    0xbc(%rdi), %eax
    0.00 :   ffffffff81a065a6:       jae     0xffffffff81a065c7 <__tcp_ack_snd_check+0x57>
    0.00 :   ffffffff81a065a8:       movq    %rbx, %rdi
    0.00 :   ffffffff81a065ab:       callq   0xffffffff81a183d0 <tcp_send_ack>
    0.00 :   ffffffff81a065b0:       addq    $0x8, %rsp
    0.00 :   ffffffff81a065b4:       popq    %rbx
    0.00 :   ffffffff81a065b5:       popq    %r12
    0.00 :   ffffffff81a065b7:       popq    %rbp
    0.00 :   ffffffff81a065b8:       xorl    %eax, %eax
    0.00 :   ffffffff81a065ba:       xorl    %edx, %edx
    0.00 :   ffffffff81a065bc:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a065be:       xorl    %esi, %esi
    0.00 :   ffffffff81a065c0:       xorl    %edi, %edi
    0.00 :   ffffffff81a065c2:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a065c7:       callq   0xffffffff81a13410 <__tcp_select_window>
    0.00 :   ffffffff81a065cc:       cmpl    0x700(%rbx), %eax
    0.00 :   ffffffff81a065d2:       movl    -0x14(%rbp), %esi
    0.00 :   ffffffff81a065d5:       jae     0xffffffff81a065a8 <__tcp_ack_snd_check+0x38>
    0.00 :   ffffffff81a065d7:       movq    0x140(%rbx), %rax
    0.00 :   ffffffff81a065de:       testq   %rax, %rax
    0.00 :   ffffffff81a065e1:       je      0xffffffff81a065f2 <__tcp_ack_snd_check+0x82>
    0.00 :   ffffffff81a065e3:       movq    0x10(%rax), %rax
    0.00 :   ffffffff81a065e7:       andq    $-0x4, %rax
    0.00 :   ffffffff81a065eb:       movl    0x38(%rax), %edx
    0.00 :   ffffffff81a065ee:       testl   %edx, %edx
    0.00 :   ffffffff81a065f0:       jne     0xffffffff81a065a8 <__tcp_ack_snd_check+0x38>
    0.00 :   ffffffff81a065f2:       cmpb    $0x0, 0x4d1(%rbx)
    0.00 :   ffffffff81a065f9:       jne     0xffffffff81a06717 <__tcp_ack_snd_check+0x1a7>
    0.00 :   ffffffff81a065ff:       testb   $0x10, 0x4d0(%rbx)
    0.00 :   ffffffff81a06606:       jne     0xffffffff81a065a8 <__tcp_ack_snd_check+0x38>
    0.00 :   ffffffff81a06608:       testl   %esi, %esi
    0.00 :   ffffffff81a0660a:       je      0xffffffff81a06729 <__tcp_ack_snd_check+0x1b9>
    0.00 :   ffffffff81a06610:       movq    0x7a8(%rbx), %rax
    0.00 :   ffffffff81a06617:       testq   %rax, %rax
    0.00 :   ffffffff81a0661a:       je      0xffffffff81a06729 <__tcp_ack_snd_check+0x1b9>
    0.00 :   ffffffff81a06620:       testb   $0x70, 0x6ac(%rbx)
    0.00 :   ffffffff81a06627:       je      0xffffffff81a065a8 <__tcp_ack_snd_check+0x38>
    0.00 :   ffffffff81a0662d:       movq    0x30(%rbx), %rsi
    0.00 :   ffffffff81a06631:       movzbl  0x61a(%rbx), %eax
    0.00 :   ffffffff81a06638:       movzbl  0x43d(%rsi), %edx
    0.00 :   ffffffff81a0663f:       cmpb    %dl, %al
    0.00 :   ffffffff81a06641:       jae     0xffffffff81a065a8 <__tcp_ack_snd_check+0x38>
    0.00 :   ffffffff81a06647:       movl    0x580(%rbx), %edx
    0.00 :   ffffffff81a0664d:       cmpl    %edx, 0x5c0(%rbx)
    0.00 :   ffffffff81a06653:       je      0xffffffff81a06662 <__tcp_ack_snd_check+0xf2>
    0.00 :   ffffffff81a06655:       andb    $-0x4, 0x61b(%rbx)
    0.00 :   ffffffff81a0665c:       movl    %edx, 0x5c0(%rbx)
    0.00 :   ffffffff81a06662:       movzbl  0x61b(%rbx), %edx
    0.00 :   ffffffff81a06669:       movl    %edx, %ecx
    0.00 :   ffffffff81a0666b:       andl    $0x3, %ecx
    0.00 :   ffffffff81a0666e:       cmpb    $0x3, %cl
    0.00 :   ffffffff81a06671:       jne     0xffffffff81a06736 <__tcp_ack_snd_check+0x1c6>
    0.00 :   ffffffff81a06677:       incl    %eax
    0.00 :   ffffffff81a06679:       movb    %al, 0x61a(%rbx)
    0.00 :   ffffffff81a0667f:       movzbl  0x790(%rbx), %eax
    0.00 :   ffffffff81a06686:       testb   $0x1, %al
    0.00 :   ffffffff81a06688:       jne     0xffffffff81a065b0 <__tcp_ack_snd_check+0x40>
    0.00 :   ffffffff81a0668e:       movl    0x650(%rbx), %edx
    0.00 :   ffffffff81a06694:       movl    0x848(%rbx), %eax
    0.00 :   ffffffff81a0669a:       testl   %edx, %edx
    0.00 :   ffffffff81a0669c:       je      0xffffffff81a066a6 <__tcp_ack_snd_check+0x136>
    0.00 :   ffffffff81a0669e:       movl    %edx, %edi
    0.00 :   ffffffff81a066a0:       cmpl    %eax, %edx
    0.00 :   ffffffff81a066a2:       cmovbq  %rdi, %rax
    0.00 :   ffffffff81a066a6:       movq    %rax, %rdx
    0.00 :   ffffffff81a066a9:       movl    $0x7d, %eax
    0.00 :   ffffffff81a066ae:       movq    0x4a8(%rsi), %rcx
    0.00 :   ffffffff81a066b5:       imulq   %rax, %rdx
    0.00 :   ffffffff81a066b9:       movabsq $-0x3333333333333333, %rax # imm = 0xCCCCCCCCCCCCCCCD
    0.00 :   ffffffff81a066c3:       leaq    0x80(%rbx), %rdi
    0.00 :   ffffffff81a066ca:       mulq    %rdx
    0.00 :   ffffffff81a066cd:       movl    $0x1, %eax
    0.00 :   ffffffff81a066d2:       shrq    $0x4, %rdx
    0.00 :   ffffffff81a066d6:       cmpq    %rcx, %rdx
    0.00 :   ffffffff81a066d9:       cmovbeq %rdx, %rcx
    0.00 :   ffffffff81a066dd:       movq    %rcx, %r12
    0.00 :   ffffffff81a066e0:       lock
    0.00 :   ffffffff81a066e1:       xaddl   %eax, 0x80(%rbx)
    0.00 :   ffffffff81a066e8:       testl   %eax, %eax
    0.00 :   ffffffff81a066ea:       je      0xffffffff81a06757 <__tcp_ack_snd_check+0x1e7>
    0.00 :   ffffffff81a066ec:       leal    0x1(%rax), %edx
    0.00 :   ffffffff81a066ef:       orl     %eax, %edx
    0.00 :   ffffffff81a066f1:       js      0xffffffff81a0674b <__tcp_ack_snd_check+0x1db>
    0.00 :   ffffffff81a066f3:       movq    0x30(%rbx), %rax
    0.00 :   ffffffff81a066f7:       leaq    0x758(%rbx), %rdi
    0.00 :   ffffffff81a066fe:       movl    $0x7, %ecx
    0.00 :   ffffffff81a06703:       movq    %r12, %rsi
    0.00 :   ffffffff81a06706:       movq    0x4b0(%rax), %rdx
    0.00 :   ffffffff81a0670d:       callq   0xffffffff81113290 <hrtimer_start_range_ns>
    0.00 :   ffffffff81a06712:       jmp     0xffffffff81a065b0 <__tcp_ack_snd_check+0x40>
    0.00 :   ffffffff81a06717:       cmpb    $0x0, 0x4d2(%rbx)
    0.00 :   ffffffff81a0671e:       je      0xffffffff81a065a8 <__tcp_ack_snd_check+0x38>
    0.00 :   ffffffff81a06724:       jmp     0xffffffff81a065ff <__tcp_ack_snd_check+0x8f>
  100.00 :   ffffffff81a06729:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0672c:       callq   0xffffffff81a18280 <tcp_send_delayed_ack>
    0.00 :   ffffffff81a06731:       jmp     0xffffffff81a065b0 <__tcp_ack_snd_check+0x40>
    0.00 :   ffffffff81a06736:       incl    %ecx
    0.00 :   ffffffff81a06738:       andl    $-0x4, %edx
    0.00 :   ffffffff81a0673b:       andl    $0x3, %ecx
    0.00 :   ffffffff81a0673e:       orl     %ecx, %edx
    0.00 :   ffffffff81a06740:       movb    %dl, 0x61b(%rbx)
    0.00 :   ffffffff81a06746:       jmp     0xffffffff81a065a8 <__tcp_ack_snd_check+0x38>
    0.00 :   ffffffff81a0674b:       movl    $0x1, %esi
    0.00 :   ffffffff81a06750:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a06755:       jmp     0xffffffff81a066f3 <__tcp_ack_snd_check+0x183>
    0.00 :   ffffffff81a06757:       movl    $0x2, %esi
    0.00 :   ffffffff81a0675c:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a06761:       jmp     0xffffffff81a066f3 <__tcp_ack_snd_check+0x183>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8127d410 <kmem_cache_free_bulk.part.0>:
         : 5                ; kmem_cache_free_bulk.part.0():
    0.00 :   ffffffff8127d410:       pushq   %rbp
    0.00 :   ffffffff8127d411:       movq    %rsi, %r10
    0.00 :   ffffffff8127d414:       movq    %rsp, %rbp
    0.00 :   ffffffff8127d417:       pushq   %r15
    0.00 :   ffffffff8127d419:       movq    %rdx, %r15
    0.00 :   ffffffff8127d41c:       pushq   %r14
    0.00 :   ffffffff8127d41e:       pushq   %r13
    0.00 :   ffffffff8127d420:       pushq   %r12
    0.00 :   ffffffff8127d422:       pushq   %rbx
    0.00 :   ffffffff8127d423:       subq    $0x68, %rsp
    0.00 :   ffffffff8127d427:       movq    %rdi, -0x60(%rbp)
    0.00 :   ffffffff8127d42b:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff8127d430:       decq    %r10
    0.00 :   ffffffff8127d433:       movq    $0x0, -0x50(%rbp)
    0.00 :   ffffffff8127d43b:       movq    $0x0, -0x48(%rbp)
    0.00 :   ffffffff8127d443:       movq    $0x0, -0x40(%rbp)
    0.00 :   ffffffff8127d44b:       movq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff8127d453:       movl    $0x80000000, %r12d # imm = 0x80000000
    0.00 :   ffffffff8127d459:       movq    $0x0, -0x30(%rbp)
    0.00 :   ffffffff8127d461:       movq    (%r15,%r10,8), %rsi
    0.00 :   ffffffff8127d465:       addq    %rsi, %r12
    0.00 :   ffffffff8127d468:       jb      0xffffffff8127d989 <kmem_cache_free_bulk.part.0+0x579>
    0.00 :   ffffffff8127d46e:       movq    $-0x80000000, %rax # imm = 0x80000000
    0.00 :   ffffffff8127d475:       subq    0xea4d7c(%rip), %rax # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff8127d47c:       addq    %rax, %r12
    0.00 :   ffffffff8127d47f:       shrq    $0xc, %r12
    0.00 :   ffffffff8127d483:       shlq    $0x6, %r12
    0.00 :   ffffffff8127d487:       addq    0xea4d5a(%rip), %r12 # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff8127d48e:       movq    0x8(%r12), %rax
    0.00 :   ffffffff8127d493:       testb   $0x1, %al
    0.00 :   ffffffff8127d495:       jne     0xffffffff8127d927 <kmem_cache_free_bulk.part.0+0x517>
    0.00 :   ffffffff8127d49b:       nopl    (%rax,%rax)
    0.00 :   ffffffff8127d4a0:       cmpq    $0x0, -0x60(%rbp)
    0.00 :   ffffffff8127d4a5:       je      0xffffffff8127d80a <kmem_cache_free_bulk.part.0+0x3fa>
    0.00 :   ffffffff8127d4ab:       movq    -0x60(%rbp), %rdi
    0.00 :   ffffffff8127d4af:       movq    %r10, -0x68(%rbp)
    0.00 :   ffffffff8127d4b3:       movq    %rsi, -0x58(%rbp)
    0.00 :   ffffffff8127d4b7:       callq   0xffffffff8127cfe0 <cache_from_obj>
    0.00 :   ffffffff8127d4bc:       movq    -0x68(%rbp), %r10
    0.00 :   ffffffff8127d4c0:       movq    -0x58(%rbp), %rsi
    0.00 :   ffffffff8127d4c4:       movq    %rax, %r11
    0.00 :   ffffffff8127d4c7:       movl    0x28(%r11), %eax
    0.00 :   ffffffff8127d4cb:       addq    %rsi, %rax
    0.00 :   ffffffff8127d4ce:       testq   %rsi, %rsi
    0.00 :   ffffffff8127d4d1:       je      0xffffffff8127d777 <kmem_cache_free_bulk.part.0+0x367>
    0.00 :   ffffffff8127d4d7:       movq    %rax, %rdx
    0.00 :   ffffffff8127d4da:       bswapq  %rdx
    0.00 :   ffffffff8127d4dd:       xorq    0xb8(%r11), %rdx
    0.00 :   ffffffff8127d4e4:       testq   %r10, %r10
    0.00 :   ffffffff8127d4e7:       movq    %rdx, (%rax)
  100.00 :   ffffffff8127d4ea:       je      0xffffffff8127d945 <kmem_cache_free_bulk.part.0+0x535>
    0.00 :   ffffffff8127d4f0:       movq    %r10, %rdi
    0.00 :   ffffffff8127d4f3:       movq    %rsi, %rbx
    0.00 :   ffffffff8127d4f6:       movl    $0x1, %r8d
    0.00 :   ffffffff8127d4fc:       movl    $0x3, %r9d
    0.00 :   ffffffff8127d502:       xorl    %r14d, %r14d
    0.00 :   ffffffff8127d505:       jmp     0xffffffff8127d519 <kmem_cache_free_bulk.part.0+0x109>
    0.00 :   ffffffff8127d507:       decl    %r9d
    0.00 :   ffffffff8127d50a:       je      0xffffffff8127d5c3 <kmem_cache_free_bulk.part.0+0x1b3>
    0.00 :   ffffffff8127d510:       decq    %rdi
    0.00 :   ffffffff8127d513:       je      0xffffffff8127d5c3 <kmem_cache_free_bulk.part.0+0x1b3>
    0.00 :   ffffffff8127d519:       movq    -0x8(%r15,%rdi,8), %rdx
    0.00 :   ffffffff8127d51e:       movl    $0x80000000, %eax # imm = 0x80000000
    0.00 :   ffffffff8127d523:       addq    %rdx, %rax
    0.00 :   ffffffff8127d526:       jb      0xffffffff8127d97d <kmem_cache_free_bulk.part.0+0x56d>
    0.00 :   ffffffff8127d52c:       movq    $-0x80000000, %rcx # imm = 0x80000000
    0.00 :   ffffffff8127d533:       subq    0xea4cbe(%rip), %rcx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff8127d53a:       addq    %rcx, %rax
    0.00 :   ffffffff8127d53d:       shrq    $0xc, %rax
    0.00 :   ffffffff8127d541:       shlq    $0x6, %rax
    0.00 :   ffffffff8127d545:       addq    0xea4c9c(%rip), %rax # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff8127d54c:       movq    0x8(%rax), %r13
    0.00 :   ffffffff8127d550:       movq    %rax, %rcx
    0.00 :   ffffffff8127d553:       testb   $0x1, %r13b
    0.00 :   ffffffff8127d557:       jne     0xffffffff8127d7a9 <kmem_cache_free_bulk.part.0+0x399>
    0.00 :   ffffffff8127d55d:       nopl    (%rax,%rax)
    0.00 :   ffffffff8127d562:       movq    (%rcx), %rax
    0.00 :   ffffffff8127d565:       testb   $0x2, %ah
    0.00 :   ffffffff8127d568:       cmoveq  %r14, %rcx
    0.00 :   ffffffff8127d56c:       cmpq    %r12, %rcx
    0.00 :   ffffffff8127d56f:       jne     0xffffffff8127d507 <kmem_cache_free_bulk.part.0+0xf7>
    0.00 :   ffffffff8127d571:       movl    0x28(%r11), %eax
    0.00 :   ffffffff8127d575:       addq    %rdx, %rax
    0.00 :   ffffffff8127d578:       cmpq    %rbx, %rdx
    0.00 :   ffffffff8127d57b:       je      0xffffffff8127d777 <kmem_cache_free_bulk.part.0+0x367>
    0.00 :   ffffffff8127d581:       xorq    0xb8(%r11), %rbx
    0.00 :   ffffffff8127d588:       movq    %rax, %rcx
    0.00 :   ffffffff8127d58b:       bswapq  %rcx
    0.00 :   ffffffff8127d58e:       xorq    %rcx, %rbx
    0.00 :   ffffffff8127d591:       cmpq    %rdi, %r10
    0.00 :   ffffffff8127d594:       movq    %rbx, (%rax)
    0.00 :   ffffffff8127d597:       leaq    -0x1(%r10), %rax
    0.00 :   ffffffff8127d59b:       je      0xffffffff8127d5b1 <kmem_cache_free_bulk.part.0+0x1a1>
    0.00 :   ffffffff8127d59d:       leaq    (%r15,%rax,8), %rcx
    0.00 :   ffffffff8127d5a1:       movq    -0x8(%r15,%rdi,8), %r10
    0.00 :   ffffffff8127d5a6:       movq    (%rcx), %rbx
    0.00 :   ffffffff8127d5a9:       movq    %rbx, -0x8(%r15,%rdi,8)
    0.00 :   ffffffff8127d5ae:       movq    %r10, (%rcx)
    0.00 :   ffffffff8127d5b1:       incl    %r8d
    0.00 :   ffffffff8127d5b4:       decq    %rdi
    0.00 :   ffffffff8127d5b7:       movq    %rdx, %rbx
    0.00 :   ffffffff8127d5ba:       movq    %rax, %r10
    0.00 :   ffffffff8127d5bd:       jne     0xffffffff8127d519 <kmem_cache_free_bulk.part.0+0x109>
    0.00 :   ffffffff8127d5c3:       testq   %r12, %r12
    0.00 :   ffffffff8127d5c6:       movslq  %r10d, %r10
    0.00 :   ffffffff8127d5c9:       je      0xffffffff8127d8d1 <kmem_cache_free_bulk.part.0+0x4c1>
    0.00 :   ffffffff8127d5cf:       movq    0x8(%rbp), %rax
    0.00 :   ffffffff8127d5d3:       movq    %rax, -0x88(%rbp)
    0.00 :   ffffffff8127d5da:       jmp     0xffffffff8127d6ff <kmem_cache_free_bulk.part.0+0x2ef>
    0.00 :   ffffffff8127d5df:       movq    0x38(%r12), %r13
    0.00 :   ffffffff8127d5e4:       cmpq    $0x3, %r13
    0.00 :   ffffffff8127d5e8:       jbe     0xffffffff8127d6ff <kmem_cache_free_bulk.part.0+0x2ef>
    0.00 :   ffffffff8127d5ee:       testl   %r8d, %r8d
    0.00 :   ffffffff8127d5f1:       jle     0xffffffff8127d6ff <kmem_cache_free_bulk.part.0+0x2ef>
    0.00 :   ffffffff8127d5f7:       movslq  %r8d, %rdx
    0.00 :   ffffffff8127d5fa:       leaq    (%r15,%r10,8), %r14
    0.00 :   ffffffff8127d5fe:       movq    %rbx, -0x78(%rbp)
    0.00 :   ffffffff8127d602:       addq    %r10, %rdx
    0.00 :   ffffffff8127d605:       movq    %r15, -0x90(%rbp)
    0.00 :   ffffffff8127d60c:       andq    $-0x4, %r13
    0.00 :   ffffffff8127d610:       leaq    (%r15,%rdx,8), %rax
    0.00 :   ffffffff8127d614:       movq    %rsi, -0x68(%rbp)
    0.00 :   ffffffff8127d618:       movl    %r8d, -0x70(%rbp)
    0.00 :   ffffffff8127d61c:       movq    %r14, %rbx
    0.00 :   ffffffff8127d61f:       movq    %r10, -0x80(%rbp)
    0.00 :   ffffffff8127d623:       movq    %r11, %r15
    0.00 :   ffffffff8127d626:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff8127d62a:       movq    %r12, %rdx
    0.00 :   ffffffff8127d62d:       subq    0xea4bb4(%rip), %rdx # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff8127d634:       movq    (%rbx), %rax
    0.00 :   ffffffff8127d637:       movl    0x20(%r15), %ecx
    0.00 :   ffffffff8127d63b:       sarq    $0x6, %rdx
    0.00 :   ffffffff8127d63f:       shlq    $0xc, %rdx
    0.00 :   ffffffff8127d643:       addq    0xea4bae(%rip), %rdx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff8127d64a:       subq    %rdx, %rax
    0.00 :   ffffffff8127d64d:       movl    %eax, %edx
    0.00 :   ffffffff8127d64f:       imulq   %rcx, %rdx
    0.00 :   ffffffff8127d653:       movzbl  0x24(%r15), %ecx
    0.00 :   ffffffff8127d658:       shrq    $0x20, %rdx
    0.00 :   ffffffff8127d65c:       subl    %edx, %eax
    0.00 :   ffffffff8127d65e:       shrl    %cl, %eax
    0.00 :   ffffffff8127d660:       movzbl  0x25(%r15), %ecx
    0.00 :   ffffffff8127d665:       addl    %edx, %eax
    0.00 :   ffffffff8127d667:       shrl    %cl, %eax
    0.00 :   ffffffff8127d669:       leaq    (%r13,%rax,8), %rax
    0.00 :   ffffffff8127d66e:       movq    (%rax), %r14
    0.00 :   ffffffff8127d671:       testq   %r14, %r14
    0.00 :   ffffffff8127d674:       je      0xffffffff8127d6d4 <kmem_cache_free_bulk.part.0+0x2c4>
    0.00 :   ffffffff8127d676:       movq    $0x0, (%rax)
    0.00 :   ffffffff8127d67d:       movl    0x18(%r15), %esi
    0.00 :   ffffffff8127d681:       movq    %r14, %rdi
    0.00 :   ffffffff8127d684:       addq    $0x8, %rsi
    0.00 :   ffffffff8127d688:       callq   0xffffffff8129d4c0 <obj_cgroup_uncharge>
    0.00 :   ffffffff8127d68d:       xorl    %edx, %edx
    0.00 :   ffffffff8127d68f:       movl    $0xfffffff8, %ecx # imm = 0xFFFFFFF8
    0.00 :   ffffffff8127d694:       subl    0x18(%r15), %ecx
    0.00 :   ffffffff8127d698:       testb   $0x2, 0xa(%r15)
    0.00 :   ffffffff8127d69d:       movq    (%r12), %rax
    0.00 :   ffffffff8127d6a1:       movq    %r14, %rdi
    0.00 :   ffffffff8127d6a4:       sete    %dl
    0.00 :   ffffffff8127d6a7:       shrq    $0x3a, %rax
    0.00 :   ffffffff8127d6ab:       movq    -0x7dc999e0(,%rax,8), %rsi
    0.00 :   ffffffff8127d6b3:       addl    $0x5, %edx
    0.00 :   ffffffff8127d6b6:       callq   0xffffffff8129d010 <mod_objcg_state>
    0.00 :   ffffffff8127d6bb:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff8127d6c0:       movq    (%r14), %rax
    0.00 :   ffffffff8127d6c3:       testb   $0x3, %al
    0.00 :   ffffffff8127d6c5:       jne     0xffffffff8127d903 <kmem_cache_free_bulk.part.0+0x4f3>
    0.00 :   ffffffff8127d6cb:       decq    %gs:(%rax)
    0.00 :   ffffffff8127d6cf:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff8127d6d4:       movq    -0x58(%rbp), %rax
    0.00 :   ffffffff8127d6d8:       addq    $0x8, %rbx
    0.00 :   ffffffff8127d6dc:       cmpq    %rax, %rbx
    0.00 :   ffffffff8127d6df:       jne     0xffffffff8127d62a <kmem_cache_free_bulk.part.0+0x21a>
    0.00 :   ffffffff8127d6e5:       movq    %r15, %r11
    0.00 :   ffffffff8127d6e8:       movq    -0x68(%rbp), %rsi
    0.00 :   ffffffff8127d6ec:       movl    -0x70(%rbp), %r8d
    0.00 :   ffffffff8127d6f0:       movq    -0x78(%rbp), %rbx
    0.00 :   ffffffff8127d6f4:       movq    -0x80(%rbp), %r10
    0.00 :   ffffffff8127d6f8:       movq    -0x90(%rbp), %r15
    0.00 :   ffffffff8127d6ff:       xorl    %r14d, %r14d
    0.00 :   ffffffff8127d702:       xorl    %ecx, %ecx
    0.00 :   ffffffff8127d704:       movq    %r12, -0x70(%rbp)
    0.00 :   ffffffff8127d708:       movq    %r14, %rax
    0.00 :   ffffffff8127d70b:       movq    %r15, -0x80(%rbp)
    0.00 :   ffffffff8127d70f:       movq    %rbx, %r14
    0.00 :   ffffffff8127d712:       movq    %rsi, -0x58(%rbp)
    0.00 :   ffffffff8127d716:       movl    %r8d, -0x68(%rbp)
    0.00 :   ffffffff8127d71a:       movq    %r11, %r12
    0.00 :   ffffffff8127d71d:       movq    %r10, -0x78(%rbp)
    0.00 :   ffffffff8127d721:       movq    %rcx, %r15
    0.00 :   ffffffff8127d724:       movq    %rax, %rbx
    0.00 :   ffffffff8127d727:       jmp     0xffffffff8127d757 <kmem_cache_free_bulk.part.0+0x347>
    0.00 :   ffffffff8127d729:       movq    0xb8(%r12), %rcx
    0.00 :   ffffffff8127d731:       movq    %rax, %rdx
    0.00 :   ffffffff8127d734:       bswapq  %rdx
    0.00 :   ffffffff8127d737:       xorq    %r15, %rcx
    0.00 :   ffffffff8127d73a:       movq    %r14, %r15
    0.00 :   ffffffff8127d73d:       xorq    %rdx, %rcx
    0.00 :   ffffffff8127d740:       testq   %rbx, %rbx
    0.00 :   ffffffff8127d743:       cmoveq  %r14, %rbx
    0.00 :   ffffffff8127d747:       cmpq    %r14, -0x58(%rbp)
    0.00 :   ffffffff8127d74b:       movq    %rcx, (%rax)
    0.00 :   ffffffff8127d74e:       je      0xffffffff8127d851 <kmem_cache_free_bulk.part.0+0x441>
    0.00 :   ffffffff8127d754:       movq    %r13, %r14
    0.00 :   ffffffff8127d757:       movl    0x28(%r12), %eax
    0.00 :   ffffffff8127d75c:       addq    %r14, %rax
    0.00 :   ffffffff8127d75f:       movq    %rax, %r13
    0.00 :   ffffffff8127d762:       bswapq  %r13
    0.00 :   ffffffff8127d765:       xorq    0xb8(%r12), %r13
    0.00 :   ffffffff8127d76d:       xorq    (%rax), %r13
    0.00 :   ffffffff8127d770:       nop
    0.00 :   ffffffff8127d772:       cmpq    %r15, %r14
    0.00 :   ffffffff8127d775:       jne     0xffffffff8127d729 <kmem_cache_free_bulk.part.0+0x319>
    0.00 :   ffffffff8127d777:       ud2
    0.00 :   ffffffff8127d779:       testl   $0xfff, %eax    # imm = 0xFFF
    0.00 :   ffffffff8127d77e:       jne     0xffffffff8127d562 <kmem_cache_free_bulk.part.0+0x152>
    0.00 :   ffffffff8127d784:       movq    (%rax), %r13
    0.00 :   ffffffff8127d787:       testl   $0x10000, %r13d # imm = 0x10000
    0.00 :   ffffffff8127d78e:       je      0xffffffff8127d562 <kmem_cache_free_bulk.part.0+0x152>
    0.00 :   ffffffff8127d794:       movq    0x48(%rax), %r13
    0.00 :   ffffffff8127d798:       leaq    -0x1(%r13), %rcx
    0.00 :   ffffffff8127d79c:       andl    $0x1, %r13d
    0.00 :   ffffffff8127d7a0:       cmoveq  %rax, %rcx
    0.00 :   ffffffff8127d7a4:       jmp     0xffffffff8127d562 <kmem_cache_free_bulk.part.0+0x152>
    0.00 :   ffffffff8127d7a9:       leaq    -0x1(%r13), %rcx
    0.00 :   ffffffff8127d7ad:       jmp     0xffffffff8127d562 <kmem_cache_free_bulk.part.0+0x152>
    0.00 :   ffffffff8127d7b2:       cmpq    $0x0, 0x48(%r12)
    0.00 :   ffffffff8127d7b8:       jne     0xffffffff8127d772 <kmem_cache_free_bulk.part.0+0x362>
    0.00 :   ffffffff8127d7ba:       testl   $0x80800, 0x8(%r12) # imm = 0x80800
    0.00 :   ffffffff8127d7c3:       jne     0xffffffff8127d772 <kmem_cache_free_bulk.part.0+0x362>
    0.00 :   ffffffff8127d7c5:       movl    0x1c(%r12), %edx
    0.00 :   ffffffff8127d7ca:       xorl    %esi, %esi
    0.00 :   ffffffff8127d7cc:       movq    %r14, %rdi
    0.00 :   ffffffff8127d7cf:       callq   0xffffffff81b6bf80 <memset>
    0.00 :   ffffffff8127d7d4:       movl    0x8(%r12), %eax
    0.00 :   ffffffff8127d7d9:       andl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff8127d7de:       je      0xffffffff8127d7e5 <kmem_cache_free_bulk.part.0+0x3d5>
    0.00 :   ffffffff8127d7e0:       movl    0x58(%r12), %eax
    0.00 :   ffffffff8127d7e5:       movl    0x50(%r12), %edi
    0.00 :   ffffffff8127d7ea:       movl    0x18(%r12), %edx
    0.00 :   ffffffff8127d7ef:       xorl    %esi, %esi
    0.00 :   ffffffff8127d7f1:       subl    %edi, %edx
    0.00 :   ffffffff8127d7f3:       addq    %r14, %rdi
    0.00 :   ffffffff8127d7f6:       subl    %eax, %edx
    0.00 :   ffffffff8127d7f8:       callq   0xffffffff81b6bf80 <memset>
    0.00 :   ffffffff8127d7fd:       movl    0x28(%r12), %eax
    0.00 :   ffffffff8127d802:       addq    %r14, %rax
    0.00 :   ffffffff8127d805:       jmp     0xffffffff8127d772 <kmem_cache_free_bulk.part.0+0x362>
    0.00 :   ffffffff8127d80a:       movq    (%r12), %rax
    0.00 :   ffffffff8127d80e:       testb   $0x2, %ah
    0.00 :   ffffffff8127d811:       je      0xffffffff8127d930 <kmem_cache_free_bulk.part.0+0x520>
    0.00 :   ffffffff8127d817:       movq    0x8(%r12), %r11
    0.00 :   ffffffff8127d81c:       jmp     0xffffffff8127d4c7 <kmem_cache_free_bulk.part.0+0xb7>
    0.00 :   ffffffff8127d821:       testl   $0xfff, %r12d   # imm = 0xFFF
    0.00 :   ffffffff8127d828:       jne     0xffffffff8127d4a0 <kmem_cache_free_bulk.part.0+0x90>
    0.00 :   ffffffff8127d82e:       movq    (%r12), %rax
    0.00 :   ffffffff8127d832:       testl   $0x10000, %eax  # imm = 0x10000
    0.00 :   ffffffff8127d837:       je      0xffffffff8127d4a0 <kmem_cache_free_bulk.part.0+0x90>
    0.00 :   ffffffff8127d83d:       movq    0x48(%r12), %rax
    0.00 :   ffffffff8127d842:       leaq    -0x1(%rax), %rdx
    0.00 :   ffffffff8127d846:       testb   $0x1, %al
    0.00 :   ffffffff8127d848:       cmovneq %rdx, %r12
    0.00 :   ffffffff8127d84c:       jmp     0xffffffff8127d4a0 <kmem_cache_free_bulk.part.0+0x90>
    0.00 :   ffffffff8127d851:       movq    %rbx, %rax
    0.00 :   ffffffff8127d854:       movq    %r14, %rbx
    0.00 :   ffffffff8127d857:       movq    %r12, %r11
    0.00 :   ffffffff8127d85a:       cmpq    %rax, %rbx
    0.00 :   ffffffff8127d85d:       movl    -0x68(%rbp), %r8d
    0.00 :   ffffffff8127d861:       movq    -0x70(%rbp), %r12
    0.00 :   ffffffff8127d865:       movq    -0x78(%rbp), %r10
    0.00 :   ffffffff8127d869:       movq    -0x80(%rbp), %r15
    0.00 :   ffffffff8127d86d:       movq    %rax, %r14
    0.00 :   ffffffff8127d870:       je      0xffffffff8127d879 <kmem_cache_free_bulk.part.0+0x469>
    0.00 :   ffffffff8127d872:       testq   %rax, %rax
    0.00 :   ffffffff8127d875:       cmoveq  %rbx, %r14
    0.00 :   ffffffff8127d879:       movq    (%r11), %rax
    0.00 :   ffffffff8127d87c:       addq    %gs:0x7ed981ac(%rip), %rax
    0.00 :   ffffffff8127d884:       movq    0x8(%rax), %rdx
    0.00 :   ffffffff8127d888:       cmpq    %r12, 0x10(%rax)
    0.00 :   ffffffff8127d88c:       jne     0xffffffff8127d958 <kmem_cache_free_bulk.part.0+0x548>
    0.00 :   ffffffff8127d892:       movl    0x28(%r11), %ecx
    0.00 :   ffffffff8127d896:       movq    (%rax), %rax
    0.00 :   ffffffff8127d899:       addq    %r14, %rcx
    0.00 :   ffffffff8127d89c:       cmpq    %rax, %r14
    0.00 :   ffffffff8127d89f:       je      0xffffffff8127d777 <kmem_cache_free_bulk.part.0+0x367>
    0.00 :   ffffffff8127d8a5:       movq    0xb8(%r11), %rsi
    0.00 :   ffffffff8127d8ac:       movq    %rcx, %rdi
    0.00 :   ffffffff8127d8af:       bswapq  %rdi
    0.00 :   ffffffff8127d8b2:       xorq    %rax, %rsi
    0.00 :   ffffffff8127d8b5:       xorq    %rdi, %rsi
    0.00 :   ffffffff8127d8b8:       movq    %rsi, (%rcx)
    0.00 :   ffffffff8127d8bb:       leaq    0x80(%rdx), %rcx
    0.00 :   ffffffff8127d8c2:       movq    (%r11), %rdi
    0.00 :   ffffffff8127d8c5:       leaq    (%rdi), %rsi
    0.00 :   ffffffff8127d8c8:       callq   0xffffffff81b62600 <this_cpu_cmpxchg16b_emu>
    0.00 :   ffffffff8127d8cd:       testb   %al, %al
    0.00 :   ffffffff8127d8cf:       je      0xffffffff8127d879 <kmem_cache_free_bulk.part.0+0x469>
    0.00 :   ffffffff8127d8d1:       testq   %r10, %r10
    0.00 :   ffffffff8127d8d4:       jne     0xffffffff8127d430 <kmem_cache_free_bulk.part.0+0x20>
    0.00 :   ffffffff8127d8da:       addq    $0x68, %rsp
    0.00 :   ffffffff8127d8de:       popq    %rbx
    0.00 :   ffffffff8127d8df:       popq    %r12
    0.00 :   ffffffff8127d8e1:       popq    %r13
    0.00 :   ffffffff8127d8e3:       popq    %r14
    0.00 :   ffffffff8127d8e5:       popq    %r15
    0.00 :   ffffffff8127d8e7:       popq    %rbp
    0.00 :   ffffffff8127d8e8:       xorl    %eax, %eax
    0.00 :   ffffffff8127d8ea:       xorl    %edx, %edx
    0.00 :   ffffffff8127d8ec:       xorl    %ecx, %ecx
    0.00 :   ffffffff8127d8ee:       xorl    %esi, %esi
    0.00 :   ffffffff8127d8f0:       xorl    %edi, %edi
    0.00 :   ffffffff8127d8f2:       xorl    %r8d, %r8d
    0.00 :   ffffffff8127d8f5:       xorl    %r9d, %r9d
    0.00 :   ffffffff8127d8f8:       xorl    %r10d, %r10d
    0.00 :   ffffffff8127d8fb:       xorl    %r11d, %r11d
    0.00 :   ffffffff8127d8fe:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8127d903:       movq    0x8(%r14), %rax
    0.00 :   ffffffff8127d907:       lock
    0.00 :   ffffffff8127d908:       subq    $0x1, (%rax)
    0.00 :   ffffffff8127d90c:       jne     0xffffffff8127d6cf <kmem_cache_free_bulk.part.0+0x2bf>
    0.00 :   ffffffff8127d912:       movq    0x8(%r14), %rax
    0.00 :   ffffffff8127d916:       movq    %r14, %rdi
    0.00 :   ffffffff8127d919:       movq    0x8(%rax), %rax
    0.00 :   ffffffff8127d91d:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8127d922:       jmp     0xffffffff8127d6cf <kmem_cache_free_bulk.part.0+0x2bf>
    0.00 :   ffffffff8127d927:       leaq    -0x1(%rax), %r12
    0.00 :   ffffffff8127d92b:       jmp     0xffffffff8127d4a0 <kmem_cache_free_bulk.part.0+0x90>
    0.00 :   ffffffff8127d930:       movq    %r12, %rdi
    0.00 :   ffffffff8127d933:       movq    %r10, -0x58(%rbp)
    0.00 :   ffffffff8127d937:       callq   0xffffffff812180d0 <free_large_kmalloc>
    0.00 :   ffffffff8127d93c:       movq    -0x58(%rbp), %r10
    0.00 :   ffffffff8127d940:       movslq  %r10d, %r10
    0.00 :   ffffffff8127d943:       jmp     0xffffffff8127d8d1 <kmem_cache_free_bulk.part.0+0x4c1>
    0.00 :   ffffffff8127d945:       testq   %r12, %r12
    0.00 :   ffffffff8127d948:       je      0xffffffff8127d8da <kmem_cache_free_bulk.part.0+0x4ca>
    0.00 :   ffffffff8127d94a:       movq    %rsi, %rbx
    0.00 :   ffffffff8127d94d:       movl    $0x1, %r8d
    0.00 :   ffffffff8127d953:       jmp     0xffffffff8127d5cf <kmem_cache_free_bulk.part.0+0x1bf>
    0.00 :   ffffffff8127d958:       movq    -0x88(%rbp), %r9
    0.00 :   ffffffff8127d95f:       movq    %r14, %rcx
    0.00 :   ffffffff8127d962:       movq    %rbx, %rdx
    0.00 :   ffffffff8127d965:       movq    %r12, %rsi
    0.00 :   ffffffff8127d968:       movq    %r11, %rdi
    0.00 :   ffffffff8127d96b:       movq    %r10, -0x58(%rbp)
    0.00 :   ffffffff8127d96f:       callq   0xffffffff8127cc10 <__slab_free>
    0.00 :   ffffffff8127d974:       movq    -0x58(%rbp), %r10
    0.00 :   ffffffff8127d978:       jmp     0xffffffff8127d8d1 <kmem_cache_free_bulk.part.0+0x4c1>
    0.00 :   ffffffff8127d97d:       movq    0xf9f68c(%rip), %rcx # 0xffffffff8221d010 <phys_base>
    0.00 :   ffffffff8127d984:       jmp     0xffffffff8127d53a <kmem_cache_free_bulk.part.0+0x12a>
    0.00 :   ffffffff8127d989:       movq    0xf9f680(%rip), %rax # 0xffffffff8221d010 <phys_base>
    0.00 :   ffffffff8127d990:       jmp     0xffffffff8127d47c <kmem_cache_free_bulk.part.0+0x6c>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff812462b0 <alloc_vmap_area>:
         : 5                ; alloc_vmap_area():
    0.00 :   ffffffff812462b0:       pushq   %rbp
    0.00 :   ffffffff812462b1:       movq    %rsp, %rbp
    0.00 :   ffffffff812462b4:       pushq   %r15
    0.00 :   ffffffff812462b6:       pushq   %r14
    0.00 :   ffffffff812462b8:       pushq   %r13
    0.00 :   ffffffff812462ba:       pushq   %r12
    0.00 :   ffffffff812462bc:       pushq   %rbx
    0.00 :   ffffffff812462bd:       subq    $0x50, %rsp
    0.00 :   ffffffff812462c1:       movq    %rdx, -0x40(%rbp)
    0.00 :   ffffffff812462c5:       movq    %rcx, -0x48(%rbp)
    0.00 :   ffffffff812462c9:       movl    %r8d, -0x4c(%rbp)
    0.00 :   ffffffff812462cd:       movq    %gs:0x28, %rax
    0.00 :   ffffffff812462d6:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff812462da:       xorl    %eax, %eax
    0.00 :   ffffffff812462dc:       testq   %rdi, %rdi
    0.00 :   ffffffff812462df:       movq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff812462e7:       je      0xffffffff8124640c <alloc_vmap_area+0x15c>
    0.00 :   ffffffff812462ed:       testl   $0xfff, %edi    # imm = 0xFFF
    0.00 :   ffffffff812462f3:       movq    %rdi, %r12
    0.00 :   ffffffff812462f6:       jne     0xffffffff8124640c <alloc_vmap_area+0x15c>
    0.00 :   ffffffff812462fc:       testq   %rsi, %rsi
    0.00 :   ffffffff812462ff:       je      0xffffffff8124640c <alloc_vmap_area+0x15c>
    0.00 :   ffffffff81246305:       leaq    -0x1(%rsi), %r13
    0.00 :   ffffffff81246309:       movq    %rsi, -0x58(%rbp)
    0.00 :   ffffffff8124630d:       testq   %r13, %rsi
    0.00 :   ffffffff81246310:       jne     0xffffffff8124640c <alloc_vmap_area+0x15c>
    0.00 :   ffffffff81246316:       cmpb    $0x0, 0x1120837(%rip) # 0xffffffff82366b54 <vmap_initialized>
    0.00 :   ffffffff8124631d:       je      0xffffffff81246ad5 <alloc_vmap_area+0x825>
    0.00 :   ffffffff81246323:       movl    %r9d, %ebx
    0.00 :   ffffffff81246326:       movl    %r8d, %r15d
    0.00 :   ffffffff81246329:       callq   0xffffffff81b789b8 <__SCT__might_resched>
    0.00 :   ffffffff8124632e:       movq    0x148c53b(%rip), %rdi # 0xffffffff826d2870 <vmap_area_cachep>
    0.00 :   ffffffff81246335:       movl    %ebx, %eax
    0.00 :   ffffffff81246337:       movl    %r15d, %edx
    0.00 :   ffffffff8124633a:       andl    $0xbece0, %eax  # imm = 0xBECE0
    0.00 :   ffffffff8124633f:       movl    %eax, %esi
    0.00 :   ffffffff81246341:       movl    %eax, -0x50(%rbp)
    0.00 :   ffffffff81246344:       callq   0xffffffff8127bc40 <kmem_cache_alloc_node>
    0.00 :   ffffffff81246349:       testq   %rax, %rax
    0.00 :   ffffffff8124634c:       je      0xffffffff81246771 <alloc_vmap_area+0x4c1>
    0.00 :   ffffffff81246352:       movq    -0x58(%rbp), %r11
    0.00 :   ffffffff81246356:       movl    %ebx, -0x68(%rbp)
    0.00 :   ffffffff81246359:       movl    $0x0, -0x64(%rbp)
    0.00 :   ffffffff81246360:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff81246364:       movq    %r11, %r14
    0.00 :   ffffffff81246367:       movq    %r11, %rbx
    0.00 :   ffffffff8124636a:       negq    %r14
    0.00 :   ffffffff8124636d:       movq    %gs:0x7edda233(%rip), %rcx
    0.00 :   ffffffff81246375:       testq   %rcx, %rcx
    0.00 :   ffffffff81246378:       je      0xffffffff81246719 <alloc_vmap_area+0x469>
    0.00 :   ffffffff8124637e:       movq    $-0x7d92d770, %rdi # imm = 0x826D2890
    0.00 :   ffffffff81246385:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff8124638a:       cmpq    $0x1000, %rbx   # imm = 0x1000
    0.00 :   ffffffff81246391:       movq    0x148c4d0(%rip), %rcx # 0xffffffff826d2868 <free_vmap_area_root>
    0.00 :   ffffffff81246398:       movq    %r12, %r9
    0.00 :   ffffffff8124639b:       jbe     0xffffffff812463b3 <alloc_vmap_area+0x103>
    0.00 :   ffffffff8124639d:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff812463a1:       movq    -0x48(%rbp), %r9
    0.00 :   ffffffff812463a5:       subq    %rax, %r9
    0.00 :   ffffffff812463a8:       leaq    (%r12,%r13), %rax
    0.00 :   ffffffff812463ac:       cmpq    %r9, %r12
    0.00 :   ffffffff812463af:       cmovneq %rax, %r9
    0.00 :   ffffffff812463b3:       testq   %rcx, %rcx
    0.00 :   ffffffff812463b6:       je      0xffffffff81246533 <alloc_vmap_area+0x283>
    0.00 :   ffffffff812463bc:       movq    -0x40(%rbp), %rsi
    0.00 :   ffffffff812463c0:       movq    0x10(%rcx), %rdx
    0.00 :   ffffffff812463c4:       movq    -0x10(%rcx), %rax
    0.00 :   ffffffff812463c8:       testq   %rdx, %rdx
    0.00 :   ffffffff812463cb:       je      0xffffffff812463f7 <alloc_vmap_area+0x147>
    0.00 :   ffffffff812463cd:       xorl    %edi, %edi
    0.00 :   ffffffff812463cf:       cmpq    $0x10, %rdx
    0.00 :   ffffffff812463d3:       je      0xffffffff812463d9 <alloc_vmap_area+0x129>
    0.00 :   ffffffff812463d5:       movq    0x28(%rdx), %rdi
    0.00 :   ffffffff812463d9:       cmpq    %r9, %rdi
    0.00 :   ffffffff812463dc:       jb      0xffffffff812463fc <alloc_vmap_area+0x14c>
    0.00 :   ffffffff812463de:       cmpq    %rax, %rsi
    0.00 :   ffffffff812463e1:       jae     0xffffffff81246477 <alloc_vmap_area+0x1c7>
    0.00 :   ffffffff812463e7:       movq    %rdx, %rcx
    0.00 :   ffffffff812463ea:       movq    0x10(%rcx), %rdx
    0.00 :   ffffffff812463ee:       movq    -0x10(%rcx), %rax
    0.00 :   ffffffff812463f2:       testq   %rdx, %rdx
    0.00 :   ffffffff812463f5:       jne     0xffffffff812463cd <alloc_vmap_area+0x11d>
    0.00 :   ffffffff812463f7:       testq   %r9, %r9
    0.00 :   ffffffff812463fa:       je      0xffffffff8124646e <alloc_vmap_area+0x1be>
    0.00 :   ffffffff812463fc:       cmpq    %rax, %rsi
    0.00 :   ffffffff812463ff:       jae     0xffffffff81246477 <alloc_vmap_area+0x1c7>
    0.00 :   ffffffff81246401:       addq    %r13, %rax
    0.00 :   ffffffff81246404:       movq    %rcx, %rdi
    0.00 :   ffffffff81246407:       andq    %r14, %rax
    0.00 :   ffffffff8124640a:       jmp     0xffffffff81246481 <alloc_vmap_area+0x1d1>
    0.00 :   ffffffff8124640c:       movq    $-0x16, %r15
    0.00 :   ffffffff81246413:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff81246417:       subq    %gs:0x28, %rax
    0.00 :   ffffffff81246420:       jne     0xffffffff81246b00 <alloc_vmap_area+0x850>
    0.00 :   ffffffff81246426:       addq    $0x50, %rsp
    0.00 :   ffffffff8124642a:       movq    %r15, %rax
    0.00 :   ffffffff8124642d:       popq    %rbx
    0.00 :   ffffffff8124642e:       popq    %r12
    0.00 :   ffffffff81246430:       popq    %r13
    0.00 :   ffffffff81246432:       popq    %r14
    0.00 :   ffffffff81246434:       popq    %r15
    0.00 :   ffffffff81246436:       popq    %rbp
    0.00 :   ffffffff81246437:       xorl    %edx, %edx
    0.00 :   ffffffff81246439:       xorl    %ecx, %ecx
    0.00 :   ffffffff8124643b:       xorl    %esi, %esi
    0.00 :   ffffffff8124643d:       xorl    %edi, %edi
    0.00 :   ffffffff8124643f:       xorl    %r8d, %r8d
    0.00 :   ffffffff81246442:       xorl    %r9d, %r9d
    0.00 :   ffffffff81246445:       xorl    %r10d, %r10d
    0.00 :   ffffffff81246448:       xorl    %r11d, %r11d
    0.00 :   ffffffff8124644b:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81246450:       testq   %r9, %r9
    0.00 :   ffffffff81246453:       jne     0xffffffff812464b5 <alloc_vmap_area+0x205>
    0.00 :   ffffffff81246455:       movq    0x20, %rdx
    0.00 :   ffffffff8124645d:       movq    0x0, %rax
    0.00 :   ffffffff81246465:       testq   %rdx, %rdx
    0.00 :   ffffffff81246468:       jne     0xffffffff812463cd <alloc_vmap_area+0x11d>
    0.00 :   ffffffff8124646e:       cmpq    %rax, %rsi
    0.00 :   ffffffff81246471:       jb      0xffffffff81246533 <alloc_vmap_area+0x283>
    0.00 :   ffffffff81246477:       leaq    (%rsi,%r13), %rax
    0.00 :   ffffffff8124647b:       movq    %rcx, %rdi
    0.00 :   ffffffff8124647e:       andq    %r14, %rax
    0.00 :   ffffffff81246481:       movq    %r12, %rdx
    0.00 :   ffffffff81246484:       addq    %rax, %rdx
    0.00 :   ffffffff81246487:       jb      0xffffffff81246498 <alloc_vmap_area+0x1e8>
    0.00 :   ffffffff81246489:       cmpq    %rsi, %rax
    0.00 :   ffffffff8124648c:       jb      0xffffffff81246498 <alloc_vmap_area+0x1e8>
    0.00 :   ffffffff8124648e:       cmpq    %rdx, -0x8(%rcx)
    0.00 :   ffffffff81246492:       jae     0xffffffff8124657b <alloc_vmap_area+0x2cb>
    0.00 :   ffffffff81246498:       movq    0x8(%rcx), %rcx
    0.00 :   ffffffff8124649c:       testq   %rcx, %rcx
    0.00 :   ffffffff8124649f:       je      0xffffffff8124652e <alloc_vmap_area+0x27e>
    0.00 :   ffffffff812464a5:       cmpq    $0x10, %rcx
    0.00 :   ffffffff812464a9:       je      0xffffffff81246450 <alloc_vmap_area+0x1a0>
    0.00 :   ffffffff812464ab:       cmpq    %r9, 0x28(%rcx)
    0.00 :   ffffffff812464af:       jae     0xffffffff812463c0 <alloc_vmap_area+0x110>
    0.00 :   ffffffff812464b5:       movq    (%rdi), %rax
    0.00 :   ffffffff812464b8:       movq    %rax, %rcx
    0.00 :   ffffffff812464bb:       andq    $-0x4, %rcx
    0.00 :   ffffffff812464bf:       cmpq    $0x3, %rax
    0.00 :   ffffffff812464c3:       jbe     0xffffffff81246523 <alloc_vmap_area+0x273>
    0.00 :   ffffffff812464c5:       leaq    (%rsi,%r13), %r8
    0.00 :   ffffffff812464c9:       andq    %r14, %r8
    0.00 :   ffffffff812464cc:       movq    -0x10(%rcx), %rdx
    0.00 :   ffffffff812464d0:       movq    %r12, %rdi
    0.00 :   ffffffff812464d3:       leaq    (%rdx,%r13), %rax
    0.00 :   ffffffff812464d7:       andq    %r14, %rax
    0.00 :   ffffffff812464da:       cmpq    %rdx, %rsi
    0.00 :   ffffffff812464dd:       cmovaeq %r8, %rax
    0.00 :   ffffffff812464e1:       addq    %rax, %rdi
    0.00 :   ffffffff812464e4:       jb      0xffffffff812464f5 <alloc_vmap_area+0x245>
    0.00 :   ffffffff812464e6:       cmpq    %rsi, %rax
    0.00 :   ffffffff812464e9:       jb      0xffffffff812464f5 <alloc_vmap_area+0x245>
    0.00 :   ffffffff812464eb:       cmpq    %rdi, -0x8(%rcx)
    0.00 :   ffffffff812464ef:       jae     0xffffffff8124657b <alloc_vmap_area+0x2cb>
    0.00 :   ffffffff812464f5:       movq    0x8(%rcx), %rax
    0.00 :   ffffffff812464f9:       testq   %rax, %rax
    0.00 :   ffffffff812464fc:       je      0xffffffff81246513 <alloc_vmap_area+0x263>
    0.00 :   ffffffff812464fe:       cmpq    $0x10, %rax
    0.00 :   ffffffff81246502:       je      0xffffffff81246513 <alloc_vmap_area+0x263>
    0.00 :   ffffffff81246504:       cmpq    %r9, 0x28(%rax)
    0.00 :   ffffffff81246508:       jb      0xffffffff81246513 <alloc_vmap_area+0x263>
    0.00 :   ffffffff8124650a:       cmpq    %rsi, %rdx
    0.00 :   ffffffff8124650d:       jae     0xffffffff812466f9 <alloc_vmap_area+0x449>
    0.00 :   ffffffff81246513:       movq    (%rcx), %rax
    0.00 :   ffffffff81246516:       movq    %rax, %rcx
    0.00 :   ffffffff81246519:       andq    $-0x4, %rcx
    0.00 :   ffffffff8124651d:       cmpq    $0x3, %rax
    0.00 :   ffffffff81246521:       ja      0xffffffff812464cc <alloc_vmap_area+0x21c>
    0.00 :   ffffffff81246523:       testq   %rcx, %rcx
    0.00 :   ffffffff81246526:       jne     0xffffffff812463c0 <alloc_vmap_area+0x110>
    0.00 :   ffffffff8124652c:       jmp     0xffffffff81246533 <alloc_vmap_area+0x283>
    0.00 :   ffffffff8124652e:       testq   %r9, %r9
    0.00 :   ffffffff81246531:       jne     0xffffffff812464b5 <alloc_vmap_area+0x205>
    0.00 :   ffffffff81246533:       movq    $-0x7d92d770, %rdi # imm = 0x826D2890
    0.00 :   ffffffff8124653a:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff8124653f:       movl    -0x64(%rbp), %eax
    0.00 :   ffffffff81246542:       testl   %eax, %eax
    0.00 :   ffffffff81246544:       je      0xffffffff8124696e <alloc_vmap_area+0x6be>
    0.00 :   ffffffff8124654a:       leaq    -0x38(%rbp), %rdx
    0.00 :   ffffffff8124654e:       xorl    %esi, %esi
    0.00 :   ffffffff81246550:       movq    $-0x7dcdbda0, %rdi # imm = 0x82324260
    0.00 :   ffffffff81246557:       movq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff8124655f:       callq   0xffffffff8109f740 <blocking_notifier_call_chain>
    0.00 :   ffffffff81246564:       cmpq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff81246569:       je      0xffffffff81246aba <alloc_vmap_area+0x80a>
    0.00 :   ffffffff8124656f:       movl    $0x0, -0x64(%rbp)
    0.00 :   ffffffff81246576:       jmp     0xffffffff8124636d <alloc_vmap_area+0xbd>
    0.00 :   ffffffff8124657b:       subq    $0x10, %rcx
    0.00 :   ffffffff8124657f:       testq   %rcx, %rcx
    0.00 :   ffffffff81246582:       je      0xffffffff81246533 <alloc_vmap_area+0x283>
    0.00 :   ffffffff81246584:       movq    %rbx, %r9
    0.00 :   ffffffff81246587:       movq    (%rcx), %rax
    0.00 :   ffffffff8124658a:       negq    %r9
    0.00 :   ffffffff8124658d:       cmpq    %rax, -0x40(%rbp)
    0.00 :   ffffffff81246591:       jae     0xffffffff81246705 <alloc_vmap_area+0x455>
    0.00 :   ffffffff81246597:       leaq    (%rax,%r13), %rdx
    0.00 :   ffffffff8124659b:       andq    %r9, %rdx
    0.00 :   ffffffff8124659e:       movq    %rdx, %r15
    0.00 :   ffffffff812465a1:       leaq    (%r12,%r15), %r10
    0.00 :   ffffffff812465a5:       cmpq    %r10, -0x48(%rbp)
    0.00 :   ffffffff812465a9:       jb      0xffffffff81246533 <alloc_vmap_area+0x283>
    0.00 :   ffffffff812465ab:       cmpq    %rax, %r15
    0.00 :   ffffffff812465ae:       jb      0xffffffff812466f2 <alloc_vmap_area+0x442>
    0.00 :   ffffffff812465b4:       movq    0x8(%rcx), %rdx
    0.00 :   ffffffff812465b8:       cmpq    %r10, %rdx
    0.00 :   ffffffff812465bb:       jb      0xffffffff812466f2 <alloc_vmap_area+0x442>
    0.00 :   ffffffff812465c1:       cmpq    %r15, %rax
    0.00 :   ffffffff812465c4:       je      0xffffffff8124677f <alloc_vmap_area+0x4cf>
    0.00 :   ffffffff812465ca:       cmpq    %rdx, %r10
    0.00 :   ffffffff812465cd:       je      0xffffffff812469a5 <alloc_vmap_area+0x6f5>
    0.00 :   ffffffff812465d3:       movq    %gs:0x7edd9fcd(%rip), %rax
    0.00 :   ffffffff812465db:       movq    $0x0, %gs:0x7edd9fc1(%rip)
    0.00 :   ffffffff812465e7:       testq   %rax, %rax
    0.00 :   ffffffff812465ea:       movq    %rax, %rdi
    0.00 :   ffffffff812465ed:       je      0xffffffff812469bd <alloc_vmap_area+0x70d>
    0.00 :   ffffffff812465f3:       movq    (%rcx), %rdx
    0.00 :   ffffffff812465f6:       movq    %r15, 0x8(%rax)
    0.00 :   ffffffff812465fa:       movq    %rdx, (%rax)
    0.00 :   ffffffff812465fd:       movq    %r10, (%rcx)
    0.00 :   ffffffff81246600:       addq    $0x10, %rcx
    0.00 :   ffffffff81246604:       movq    %rcx, %r11
    0.00 :   ffffffff81246607:       je      0xffffffff8124665d <alloc_vmap_area+0x3ad>
    0.00 :   ffffffff81246609:       movq    %r11, %rdx
    0.00 :   ffffffff8124660c:       jmp     0xffffffff81246622 <alloc_vmap_area+0x372>
    0.00 :   ffffffff8124660e:       movq    %rax, 0x28(%rdx)
    0.00 :   ffffffff81246612:       movq    (%rdx), %rax
  100.00 :   ffffffff81246615:       movq    %rax, %rdx
    0.00 :   ffffffff81246618:       andq    $-0x4, %rdx
    0.00 :   ffffffff8124661c:       cmpq    $0x3, %rax
    0.00 :   ffffffff81246620:       jbe     0xffffffff81246658 <alloc_vmap_area+0x3a8>
    0.00 :   ffffffff81246622:       movq    0x10(%rdx), %rcx
    0.00 :   ffffffff81246626:       movq    -0x8(%rdx), %rax
    0.00 :   ffffffff8124662a:       subq    -0x10(%rdx), %rax
    0.00 :   ffffffff8124662e:       testq   %rcx, %rcx
    0.00 :   ffffffff81246631:       je      0xffffffff8124663e <alloc_vmap_area+0x38e>
    0.00 :   ffffffff81246633:       movq    0x28(%rcx), %rcx
    0.00 :   ffffffff81246637:       cmpq    %rcx, %rax
    0.00 :   ffffffff8124663a:       cmovbq  %rcx, %rax
    0.00 :   ffffffff8124663e:       movq    0x8(%rdx), %rcx
    0.00 :   ffffffff81246642:       testq   %rcx, %rcx
    0.00 :   ffffffff81246645:       je      0xffffffff81246652 <alloc_vmap_area+0x3a2>
    0.00 :   ffffffff81246647:       movq    0x28(%rcx), %rcx
    0.00 :   ffffffff8124664b:       cmpq    %rcx, %rax
    0.00 :   ffffffff8124664e:       cmovbq  %rcx, %rax
    0.00 :   ffffffff81246652:       cmpq    %rax, 0x28(%rdx)
    0.00 :   ffffffff81246656:       jne     0xffffffff8124660e <alloc_vmap_area+0x35e>
    0.00 :   ffffffff81246658:       testq   %rdi, %rdi
    0.00 :   ffffffff8124665b:       je      0xffffffff8124666d <alloc_vmap_area+0x3bd>
    0.00 :   ffffffff8124665d:       movq    %r11, %rsi
    0.00 :   ffffffff81246660:       movq    %r10, -0x60(%rbp)
    0.00 :   ffffffff81246664:       callq   0xffffffff81245790 <insert_vmap_area_augment.constprop.0>
    0.00 :   ffffffff81246669:       movq    -0x60(%rbp), %r10
    0.00 :   ffffffff8124666d:       movq    $-0x7d92d770, %rdi # imm = 0x826D2890
    0.00 :   ffffffff81246674:       movq    %r10, -0x60(%rbp)
    0.00 :   ffffffff81246678:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff8124667d:       cmpq    %r15, -0x48(%rbp)
    0.00 :   ffffffff81246681:       movq    -0x60(%rbp), %r10
    0.00 :   ffffffff81246685:       je      0xffffffff8124653f <alloc_vmap_area+0x28f>
    0.00 :   ffffffff8124668b:       movq    0x10(%rbp), %rax
    0.00 :   ffffffff8124668f:       movq    %r15, %r9
    0.00 :   ffffffff81246692:       movq    -0x58(%rbp), %r15
    0.00 :   ffffffff81246696:       movq    $-0x7d92d76c, %rdi # imm = 0x826D2894
    0.00 :   ffffffff8124669d:       movq    %rax, 0x40(%r15)
    0.00 :   ffffffff812466a1:       movq    %r9, (%r15)
    0.00 :   ffffffff812466a4:       movq    %r10, 0x8(%r15)
    0.00 :   ffffffff812466a8:       movq    $0x0, 0x38(%r15)
    0.00 :   ffffffff812466b0:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff812466b5:       movq    %r15, %rdi
    0.00 :   ffffffff812466b8:       callq   0xffffffff81243ec0 <insert_vmap_area.constprop.0>
    0.00 :   ffffffff812466bd:       movq    $-0x7d92d76c, %rdi # imm = 0x826D2894
    0.00 :   ffffffff812466c4:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff812466c9:       movq    (%r15), %rax
    0.00 :   ffffffff812466cc:       testq   %r13, %rax
    0.00 :   ffffffff812466cf:       jne     0xffffffff8124677d <alloc_vmap_area+0x4cd>
    0.00 :   ffffffff812466d5:       movq    -0x40(%rbp), %rbx
    0.00 :   ffffffff812466d9:       cmpq    %rbx, %rax
    0.00 :   ffffffff812466dc:       jb      0xffffffff8124679b <alloc_vmap_area+0x4eb>
    0.00 :   ffffffff812466e2:       movq    -0x48(%rbp), %rax
    0.00 :   ffffffff812466e6:       cmpq    0x8(%r15), %rax
    0.00 :   ffffffff812466ea:       jae     0xffffffff81246413 <alloc_vmap_area+0x163>
    0.00 :   ffffffff812466f0:       ud2
    0.00 :   ffffffff812466f2:       ud2
    0.00 :   ffffffff812466f4:       jmp     0xffffffff81246533 <alloc_vmap_area+0x283>
    0.00 :   ffffffff812466f9:       leaq    0x1(%rdx), %rsi
    0.00 :   ffffffff812466fd:       movq    %rax, %rcx
    0.00 :   ffffffff81246700:       jmp     0xffffffff812463c0 <alloc_vmap_area+0x110>
    0.00 :   ffffffff81246705:       movq    -0x40(%rbp), %rsi
    0.00 :   ffffffff81246709:       leaq    -0x1(%rbx,%rsi), %rdx
    0.00 :   ffffffff8124670e:       andq    %r9, %rdx
    0.00 :   ffffffff81246711:       movq    %rdx, %r15
    0.00 :   ffffffff81246714:       jmp     0xffffffff812465a1 <alloc_vmap_area+0x2f1>
    0.00 :   ffffffff81246719:       movl    -0x4c(%rbp), %edx
    0.00 :   ffffffff8124671c:       movl    -0x50(%rbp), %esi
    0.00 :   ffffffff8124671f:       movq    0x148c14a(%rip), %rdi # 0xffffffff826d2870 <vmap_area_cachep>
    0.00 :   ffffffff81246726:       movq    %rcx, -0x60(%rbp)
    0.00 :   ffffffff8124672a:       callq   0xffffffff8127bc40 <kmem_cache_alloc_node>
    0.00 :   ffffffff8124672f:       movq    $-0x7d92d770, %rdi # imm = 0x826D2890
    0.00 :   ffffffff81246736:       movq    %rax, %r15
    0.00 :   ffffffff81246739:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff8124673e:       testq   %r15, %r15
    0.00 :   ffffffff81246741:       je      0xffffffff8124638a <alloc_vmap_area+0xda>
    0.00 :   ffffffff81246747:       movq    -0x60(%rbp), %rax
    0.00 :   ffffffff8124674b:       cmpxchgq        %r15, %gs:0x7edd9e54(%rip)
    0.00 :   ffffffff81246754:       testq   %rax, %rax
    0.00 :   ffffffff81246757:       je      0xffffffff8124638a <alloc_vmap_area+0xda>
    0.00 :   ffffffff8124675d:       movq    0x148c10c(%rip), %rdi # 0xffffffff826d2870 <vmap_area_cachep>
    0.00 :   ffffffff81246764:       movq    %r15, %rsi
    0.00 :   ffffffff81246767:       callq   0xffffffff8127d130 <kmem_cache_free>
    0.00 :   ffffffff8124676c:       jmp     0xffffffff8124638a <alloc_vmap_area+0xda>
    0.00 :   ffffffff81246771:       movq    $-0xc, %r15
    0.00 :   ffffffff81246778:       jmp     0xffffffff81246413 <alloc_vmap_area+0x163>
    0.00 :   ffffffff8124677d:       ud2
    0.00 :   ffffffff8124677f:       cmpq    %rdx, %r10
    0.00 :   ffffffff81246782:       leaq    0x10(%rcx), %r11
    0.00 :   ffffffff81246786:       je      0xffffffff8124679d <alloc_vmap_area+0x4ed>
    0.00 :   ffffffff81246788:       xorl    %edi, %edi
    0.00 :   ffffffff8124678a:       testq   %r11, %r11
    0.00 :   ffffffff8124678d:       movq    %r10, (%rcx)
    0.00 :   ffffffff81246790:       jne     0xffffffff81246609 <alloc_vmap_area+0x359>
    0.00 :   ffffffff81246796:       jmp     0xffffffff8124666d <alloc_vmap_area+0x3bd>
    0.00 :   ffffffff8124679b:       ud2
    0.00 :   ffffffff8124679d:       movq    0x10(%rcx), %r8
    0.00 :   ffffffff812467a1:       cmpq    %r11, %r8
    0.00 :   ffffffff812467a4:       je      0xffffffff81246a7b <alloc_vmap_area+0x7cb>
    0.00 :   ffffffff812467aa:       movq    0x20(%rcx), %rdi
    0.00 :   ffffffff812467ae:       movq    0x18(%rcx), %rsi
    0.00 :   ffffffff812467b2:       testq   %rdi, %rdi
    0.00 :   ffffffff812467b5:       je      0xffffffff81246a54 <alloc_vmap_area+0x7a4>
    0.00 :   ffffffff812467bb:       testq   %rsi, %rsi
    0.00 :   ffffffff812467be:       je      0xffffffff81246ae1 <alloc_vmap_area+0x831>
    0.00 :   ffffffff812467c4:       movq    0x10(%rsi), %r9
    0.00 :   ffffffff812467c8:       movq    %rsi, %rdi
    0.00 :   ffffffff812467cb:       testq   %r9, %r9
    0.00 :   ffffffff812467ce:       jne     0xffffffff812467db <alloc_vmap_area+0x52b>
    0.00 :   ffffffff812467d0:       jmp     0xffffffff81246a3c <alloc_vmap_area+0x78c>
    0.00 :   ffffffff812467d5:       movq    %r9, %rdi
    0.00 :   ffffffff812467d8:       movq    %rdx, %r9
    0.00 :   ffffffff812467db:       movq    0x10(%r9), %rdx
    0.00 :   ffffffff812467df:       movq    %r9, %rax
    0.00 :   ffffffff812467e2:       testq   %rdx, %rdx
    0.00 :   ffffffff812467e5:       jne     0xffffffff812467d5 <alloc_vmap_area+0x525>
    0.00 :   ffffffff812467e7:       movq    0x8(%r9), %r8
    0.00 :   ffffffff812467eb:       movq    %r9, -0x60(%rbp)
    0.00 :   ffffffff812467ef:       movq    %r8, 0x10(%rdi)
    0.00 :   ffffffff812467f3:       movq    %rsi, 0x8(%r9)
    0.00 :   ffffffff812467f7:       movq    (%rsi), %rdx
    0.00 :   ffffffff812467fa:       andl    $0x1, %edx
    0.00 :   ffffffff812467fd:       addq    %r9, %rdx
    0.00 :   ffffffff81246800:       cmpq    %rdi, %r9
    0.00 :   ffffffff81246803:       movq    %rdx, (%rsi)
    0.00 :   ffffffff81246806:       movq    0x38(%rcx), %rdx
    0.00 :   ffffffff8124680a:       movq    %rdx, 0x28(%r9)
    0.00 :   ffffffff8124680e:       je      0xffffffff81246867 <alloc_vmap_area+0x5b7>
    0.00 :   ffffffff81246810:       movq    %rdi, %rdx
    0.00 :   ffffffff81246813:       movq    %rcx, -0x70(%rbp)
    0.00 :   ffffffff81246817:       jmp     0xffffffff8124682d <alloc_vmap_area+0x57d>
    0.00 :   ffffffff81246819:       movq    %rcx, 0x28(%rdx)
    0.00 :   ffffffff8124681d:       movq    (%rdx), %rdx
    0.00 :   ffffffff81246820:       andq    $-0x4, %rdx
    0.00 :   ffffffff81246824:       cmpq    %rdx, %r9
    0.00 :   ffffffff81246827:       je      0xffffffff81246a2f <alloc_vmap_area+0x77f>
    0.00 :   ffffffff8124682d:       movq    0x10(%rdx), %rsi
    0.00 :   ffffffff81246831:       movq    -0x8(%rdx), %rcx
    0.00 :   ffffffff81246835:       subq    -0x10(%rdx), %rcx
    0.00 :   ffffffff81246839:       testq   %rsi, %rsi
    0.00 :   ffffffff8124683c:       je      0xffffffff81246849 <alloc_vmap_area+0x599>
    0.00 :   ffffffff8124683e:       movq    0x28(%rsi), %rsi
    0.00 :   ffffffff81246842:       cmpq    %rsi, %rcx
    0.00 :   ffffffff81246845:       cmovbq  %rsi, %rcx
    0.00 :   ffffffff81246849:       movq    0x8(%rdx), %rsi
    0.00 :   ffffffff8124684d:       testq   %rsi, %rsi
    0.00 :   ffffffff81246850:       je      0xffffffff8124685d <alloc_vmap_area+0x5ad>
    0.00 :   ffffffff81246852:       movq    0x28(%rsi), %rsi
    0.00 :   ffffffff81246856:       cmpq    %rsi, %rcx
    0.00 :   ffffffff81246859:       cmovbq  %rsi, %rcx
    0.00 :   ffffffff8124685d:       cmpq    %rcx, 0x28(%rdx)
    0.00 :   ffffffff81246861:       jne     0xffffffff81246819 <alloc_vmap_area+0x569>
    0.00 :   ffffffff81246863:       movq    -0x70(%rbp), %rcx
    0.00 :   ffffffff81246867:       movq    0x20(%rcx), %rsi
    0.00 :   ffffffff8124686b:       movq    -0x60(%rbp), %r9
    0.00 :   ffffffff8124686f:       movq    %rsi, 0x10(%rax)
    0.00 :   ffffffff81246873:       movq    (%rsi), %rdx
    0.00 :   ffffffff81246876:       andl    $0x1, %edx
    0.00 :   ffffffff81246879:       addq    %r9, %rdx
    0.00 :   ffffffff8124687c:       movq    %rdx, (%rsi)
    0.00 :   ffffffff8124687f:       movq    0x10(%rcx), %rsi
    0.00 :   ffffffff81246883:       cmpq    $0x3, %rsi
    0.00 :   ffffffff81246887:       jbe     0xffffffff81246a23 <alloc_vmap_area+0x773>
    0.00 :   ffffffff8124688d:       movq    %rsi, %rdx
    0.00 :   ffffffff81246890:       andq    $-0x4, %rdx
    0.00 :   ffffffff81246894:       cmpq    %r11, 0x10(%rdx)
    0.00 :   ffffffff81246898:       je      0xffffffff81246a1a <alloc_vmap_area+0x76a>
    0.00 :   ffffffff8124689e:       movq    %rax, 0x8(%rdx)
    0.00 :   ffffffff812468a2:       testq   %r8, %r8
    0.00 :   ffffffff812468a5:       je      0xffffffff81246a09 <alloc_vmap_area+0x759>
    0.00 :   ffffffff812468ab:       leaq    0x1(%rdi), %rdx
    0.00 :   ffffffff812468af:       movq    %rdx, (%r8)
    0.00 :   ffffffff812468b2:       movq    %rsi, (%rax)
    0.00 :   ffffffff812468b5:       xorl    %edi, %edi
    0.00 :   ffffffff812468b7:       jmp     0xffffffff812468cd <alloc_vmap_area+0x61d>
    0.00 :   ffffffff812468b9:       movq    %rdx, 0x28(%rax)
    0.00 :   ffffffff812468bd:       movq    (%rax), %rdx
    0.00 :   ffffffff812468c0:       movq    %rdx, %rax
    0.00 :   ffffffff812468c3:       andq    $-0x4, %rax
    0.00 :   ffffffff812468c7:       cmpq    $0x3, %rdx
    0.00 :   ffffffff812468cb:       jbe     0xffffffff81246903 <alloc_vmap_area+0x653>
    0.00 :   ffffffff812468cd:       movq    0x10(%rax), %rsi
    0.00 :   ffffffff812468d1:       movq    -0x8(%rax), %rdx
    0.00 :   ffffffff812468d5:       subq    -0x10(%rax), %rdx
    0.00 :   ffffffff812468d9:       testq   %rsi, %rsi
    0.00 :   ffffffff812468dc:       je      0xffffffff812468e9 <alloc_vmap_area+0x639>
    0.00 :   ffffffff812468de:       movq    0x28(%rsi), %rsi
    0.00 :   ffffffff812468e2:       cmpq    %rsi, %rdx
    0.00 :   ffffffff812468e5:       cmovbq  %rsi, %rdx
    0.00 :   ffffffff812468e9:       movq    0x8(%rax), %rsi
    0.00 :   ffffffff812468ed:       testq   %rsi, %rsi
    0.00 :   ffffffff812468f0:       je      0xffffffff812468fd <alloc_vmap_area+0x64d>
    0.00 :   ffffffff812468f2:       movq    0x28(%rsi), %rsi
    0.00 :   ffffffff812468f6:       cmpq    %rsi, %rdx
    0.00 :   ffffffff812468f9:       cmovbq  %rsi, %rdx
    0.00 :   ffffffff812468fd:       cmpq    %rdx, 0x28(%rax)
    0.00 :   ffffffff81246901:       jne     0xffffffff812468b9 <alloc_vmap_area+0x609>
    0.00 :   ffffffff81246903:       testq   %rdi, %rdi
    0.00 :   ffffffff81246906:       je      0xffffffff81246933 <alloc_vmap_area+0x683>
    0.00 :   ffffffff81246908:       movq    $-0x7edbc450, %rdx # imm = 0x81243BB0
    0.00 :   ffffffff8124690f:       movq    $-0x7d92d798, %rsi # imm = 0x826D2868
    0.00 :   ffffffff81246916:       movq    %r10, -0x78(%rbp)
    0.00 :   ffffffff8124691a:       movq    %r11, -0x70(%rbp)
    0.00 :   ffffffff8124691e:       movq    %rcx, -0x60(%rbp)
    0.00 :   ffffffff81246922:       callq   0xffffffff81b53660 <__rb_erase_color>
    0.00 :   ffffffff81246927:       movq    -0x78(%rbp), %r10
    0.00 :   ffffffff8124692b:       movq    -0x70(%rbp), %r11
    0.00 :   ffffffff8124692f:       movq    -0x60(%rbp), %rcx
    0.00 :   ffffffff81246933:       movq    0x28(%rcx), %rsi
    0.00 :   ffffffff81246937:       movq    0x30(%rcx), %rdx
    0.00 :   ffffffff8124693b:       leaq    0x28(%rcx), %rax
    0.00 :   ffffffff8124693f:       movq    %rdx, 0x8(%rsi)
    0.00 :   ffffffff81246943:       movq    %rsi, (%rdx)
    0.00 :   ffffffff81246946:       movq    %rax, 0x28(%rcx)
    0.00 :   ffffffff8124694a:       movq    %r11, 0x10(%rcx)
    0.00 :   ffffffff8124694e:       movq    %rax, 0x30(%rcx)
    0.00 :   ffffffff81246952:       movq    0x148bf17(%rip), %rdi # 0xffffffff826d2870 <vmap_area_cachep>
    0.00 :   ffffffff81246959:       movq    %rcx, %rsi
    0.00 :   ffffffff8124695c:       movq    %r10, -0x60(%rbp)
    0.00 :   ffffffff81246960:       callq   0xffffffff8127d130 <kmem_cache_free>
    0.00 :   ffffffff81246965:       movq    -0x60(%rbp), %r10
    0.00 :   ffffffff81246969:       jmp     0xffffffff8124666d <alloc_vmap_area+0x3bd>
    0.00 :   ffffffff8124696e:       movq    $-0x7dcdbde0, %rdi # imm = 0x82324220
    0.00 :   ffffffff81246975:       callq   0xffffffff81b726c0 <mutex_lock>
    0.00 :   ffffffff8124697a:       callq   0xffffffff81245550 <purge_fragmented_blocks_allcpus>
    0.00 :   ffffffff8124697f:       xorl    %esi, %esi
    0.00 :   ffffffff81246981:       movq    $-0x1, %rdi
    0.00 :   ffffffff81246988:       callq   0xffffffff81245970 <__purge_vmap_area_lazy>
    0.00 :   ffffffff8124698d:       movq    $-0x7dcdbde0, %rdi # imm = 0x82324220
    0.00 :   ffffffff81246994:       callq   0xffffffff81b71ef0 <mutex_unlock>
    0.00 :   ffffffff81246999:       movl    $0x1, -0x64(%rbp)
    0.00 :   ffffffff812469a0:       jmp     0xffffffff8124636d <alloc_vmap_area+0xbd>
    0.00 :   ffffffff812469a5:       movq    %r15, 0x8(%rcx)
    0.00 :   ffffffff812469a9:       xorl    %edi, %edi
    0.00 :   ffffffff812469ab:       addq    $0x10, %rcx
    0.00 :   ffffffff812469af:       movq    %rcx, %r11
    0.00 :   ffffffff812469b2:       jne     0xffffffff81246609 <alloc_vmap_area+0x359>
    0.00 :   ffffffff812469b8:       jmp     0xffffffff8124666d <alloc_vmap_area+0x3bd>
    0.00 :   ffffffff812469bd:       movq    0x148beac(%rip), %rdi # 0xffffffff826d2870 <vmap_area_cachep>
    0.00 :   ffffffff812469c4:       movl    $0x800, %esi    # imm = 0x800
    0.00 :   ffffffff812469c9:       movq    %r10, -0x70(%rbp)
    0.00 :   ffffffff812469cd:       movq    %rcx, -0x60(%rbp)
    0.00 :   ffffffff812469d1:       callq   0xffffffff8127b980 <kmem_cache_alloc>
    0.00 :   ffffffff812469d6:       testq   %rax, %rax
    0.00 :   ffffffff812469d9:       movq    %rax, %rdi
    0.00 :   ffffffff812469dc:       je      0xffffffff812466f2 <alloc_vmap_area+0x442>
    0.00 :   ffffffff812469e2:       movq    -0x60(%rbp), %rcx
    0.00 :   ffffffff812469e6:       movq    -0x70(%rbp), %r10
    0.00 :   ffffffff812469ea:       movq    (%rcx), %rax
    0.00 :   ffffffff812469ed:       movq    %r15, 0x8(%rdi)
    0.00 :   ffffffff812469f1:       movq    %rax, (%rdi)
    0.00 :   ffffffff812469f4:       movq    %r10, (%rcx)
    0.00 :   ffffffff812469f7:       addq    $0x10, %rcx
    0.00 :   ffffffff812469fb:       movq    %rcx, %r11
    0.00 :   ffffffff812469fe:       jne     0xffffffff81246609 <alloc_vmap_area+0x359>
    0.00 :   ffffffff81246a04:       jmp     0xffffffff8124665d <alloc_vmap_area+0x3ad>
    0.00 :   ffffffff81246a09:       testb   $0x1, (%rax)
    0.00 :   ffffffff81246a0c:       je      0xffffffff812468b2 <alloc_vmap_area+0x602>
    0.00 :   ffffffff81246a12:       movq    %rsi, (%rax)
    0.00 :   ffffffff81246a15:       jmp     0xffffffff812468cd <alloc_vmap_area+0x61d>
    0.00 :   ffffffff81246a1a:       movq    %rax, 0x10(%rdx)
    0.00 :   ffffffff81246a1e:       jmp     0xffffffff812468a2 <alloc_vmap_area+0x5f2>
    0.00 :   ffffffff81246a23:       movq    %rax, 0x148be3e(%rip) # 0xffffffff826d2868 <free_vmap_area_root>
    0.00 :   ffffffff81246a2a:       jmp     0xffffffff812468a2 <alloc_vmap_area+0x5f2>
    0.00 :   ffffffff81246a2f:       movq    -0x70(%rbp), %rcx
    0.00 :   ffffffff81246a33:       movq    %r9, -0x60(%rbp)
    0.00 :   ffffffff81246a37:       jmp     0xffffffff81246867 <alloc_vmap_area+0x5b7>
    0.00 :   ffffffff81246a3c:       movq    0x38(%rcx), %rax
    0.00 :   ffffffff81246a40:       movq    0x8(%rsi), %r8
    0.00 :   ffffffff81246a44:       movq    %rsi, -0x60(%rbp)
    0.00 :   ffffffff81246a48:       movq    %rax, 0x28(%rsi)
    0.00 :   ffffffff81246a4c:       movq    %rsi, %rax
    0.00 :   ffffffff81246a4f:       jmp     0xffffffff81246867 <alloc_vmap_area+0x5b7>
    0.00 :   ffffffff81246a54:       movq    %r8, %rdx
    0.00 :   ffffffff81246a57:       andq    $-0x4, %rdx
    0.00 :   ffffffff81246a5b:       cmpq    $0x3, %r8
    0.00 :   ffffffff81246a5f:       movq    %rdx, %rax
    0.00 :   ffffffff81246a62:       jbe     0xffffffff81246aa6 <alloc_vmap_area+0x7f6>
    0.00 :   ffffffff81246a64:       cmpq    0x10(%rdx), %r11
    0.00 :   ffffffff81246a68:       je      0xffffffff81246a82 <alloc_vmap_area+0x7d2>
    0.00 :   ffffffff81246a6a:       testq   %rsi, %rsi
    0.00 :   ffffffff81246a6d:       movq    %rsi, 0x8(%rdx)
    0.00 :   ffffffff81246a71:       je      0xffffffff81246a8b <alloc_vmap_area+0x7db>
    0.00 :   ffffffff81246a73:       movq    %r8, (%rsi)
    0.00 :   ffffffff81246a76:       jmp     0xffffffff812468cd <alloc_vmap_area+0x61d>
    0.00 :   ffffffff81246a7b:       ud2
    0.00 :   ffffffff81246a7d:       jmp     0xffffffff81246952 <alloc_vmap_area+0x6a2>
    0.00 :   ffffffff81246a82:       testq   %rsi, %rsi
    0.00 :   ffffffff81246a85:       movq    %rsi, 0x10(%rdx)
    0.00 :   ffffffff81246a89:       jne     0xffffffff81246a73 <alloc_vmap_area+0x7c3>
    0.00 :   ffffffff81246a8b:       andl    $0x1, %r8d
    0.00 :   ffffffff81246a8f:       je      0xffffffff812468cd <alloc_vmap_area+0x61d>
    0.00 :   ffffffff81246a95:       testq   %rdx, %rdx
    0.00 :   ffffffff81246a98:       je      0xffffffff81246933 <alloc_vmap_area+0x683>
    0.00 :   ffffffff81246a9e:       movq    %rdx, %rdi
    0.00 :   ffffffff81246aa1:       jmp     0xffffffff812468cd <alloc_vmap_area+0x61d>
    0.00 :   ffffffff81246aa6:       testq   %rsi, %rsi
    0.00 :   ffffffff81246aa9:       movq    %rsi, 0x148bdb8(%rip) # 0xffffffff826d2868 <free_vmap_area_root>
    0.00 :   ffffffff81246ab0:       je      0xffffffff81246b05 <alloc_vmap_area+0x855>
    0.00 :   ffffffff81246ab2:       movq    %r8, (%rsi)
    0.00 :   ffffffff81246ab5:       jmp     0xffffffff81246933 <alloc_vmap_area+0x683>
    0.00 :   ffffffff81246aba:       movl    -0x68(%rbp), %ebx
    0.00 :   ffffffff81246abd:       movq    -0x58(%rbp), %r15
    0.00 :   ffffffff81246ac1:       andb    $0x20, %bh
    0.00 :   ffffffff81246ac4:       je      0xffffffff81246b10 <alloc_vmap_area+0x860>
    0.00 :   ffffffff81246ac6:       movq    0x148bda3(%rip), %rdi # 0xffffffff826d2870 <vmap_area_cachep>
    0.00 :   ffffffff81246acd:       movq    %r15, %rsi
    0.00 :   ffffffff81246ad0:       callq   0xffffffff8127d130 <kmem_cache_free>
    0.00 :   ffffffff81246ad5:       movq    $-0x10, %r15
    0.00 :   ffffffff81246adc:       jmp     0xffffffff81246413 <alloc_vmap_area+0x163>
    0.00 :   ffffffff81246ae1:       cmpq    $0x3, %r8
    0.00 :   ffffffff81246ae5:       movq    %r8, (%rdi)
    0.00 :   ffffffff81246ae8:       jbe     0xffffffff81246b3a <alloc_vmap_area+0x88a>
    0.00 :   ffffffff81246aea:       movq    %r8, %rax
    0.00 :   ffffffff81246aed:       andq    $-0x4, %rax
    0.00 :   ffffffff81246af1:       cmpq    %r11, 0x10(%rax)
    0.00 :   ffffffff81246af5:       je      0xffffffff81246b31 <alloc_vmap_area+0x881>
    0.00 :   ffffffff81246af7:       movq    %rdi, 0x8(%rax)
    0.00 :   ffffffff81246afb:       jmp     0xffffffff812468b5 <alloc_vmap_area+0x605>
    0.00 :   ffffffff81246b00:       callq   0xffffffff81b6af40 <__stack_chk_fail>
    0.00 :   ffffffff81246b05:       andb    $0x1, %r8b
    0.00 :   ffffffff81246b09:       jne     0xffffffff81246a95 <alloc_vmap_area+0x7e5>
    0.00 :   ffffffff81246b0b:       jmp     0xffffffff81246933 <alloc_vmap_area+0x683>
    0.00 :   ffffffff81246b10:       movq    $-0x7e1e16c0, %rdi # imm = 0x81E1E940
    0.00 :   ffffffff81246b17:       callq   0xffffffff810da580 <__printk_ratelimit>
    0.00 :   ffffffff81246b1c:       testl   %eax, %eax
    0.00 :   ffffffff81246b1e:       je      0xffffffff81246ac6 <alloc_vmap_area+0x816>
    0.00 :   ffffffff81246b20:       movq    %r12, %rsi
    0.00 :   ffffffff81246b23:       movq    $-0x7df66780, %rdi # imm = 0x82099880
    0.00 :   ffffffff81246b2a:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81246b2f:       jmp     0xffffffff81246ac6 <alloc_vmap_area+0x816>
    0.00 :   ffffffff81246b31:       movq    %rdi, 0x10(%rax)
    0.00 :   ffffffff81246b35:       jmp     0xffffffff812468b5 <alloc_vmap_area+0x605>
    0.00 :   ffffffff81246b3a:       movq    %rdi, 0x148bd27(%rip) # 0xffffffff826d2868 <free_vmap_area_root>
    0.00 :   ffffffff81246b41:       jmp     0xffffffff81246933 <alloc_vmap_area+0x683>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b6bf80 <memset>:
         : 5                ; __memset():
  100.00 :   ffffffff81b6bf80:       jmp     0xffffffff81b6bfb0 <memset_orig>
    0.00 :   ffffffff81b6bf82:       movq    %rdi, %r9
    0.00 :   ffffffff81b6bf85:       movb    %sil, %al
    0.00 :   ffffffff81b6bf88:       movq    %rdx, %rcx
    0.00 :   ffffffff81b6bf8b:       rep             stosb   %al, %es:(%rdi)
    0.00 :   ffffffff81b6bf8d:       movq    %r9, %rax
    0.00 :   ffffffff81b6bf90:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of lab2_list for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    00000000000012f5 <main>:
         : 5    ; main():
         : 6    ; /home/tlam/cs134/project2b/lab2_list.c:44
         : 7    ; int main(int argc, char* argv[]) {
    0.00 :   12f5:           pushq   %rbp
    0.00 :   12f6:           movq    %rsp, %rbp
    0.00 :   12f9:           pushq   %rbx
    0.00 :   12fa:           subq    $0xc8, %rsp
    0.00 :   1301:           movl    %edi, -0xc4(%rbp)
    0.00 :   1307:           movq    %rsi, -0xd0(%rbp)
    0.00 :   130e:           movq    %fs:0x28, %rax
    0.00 :   1317:           movq    %rax, -0x18(%rbp)
    0.00 :   131b:           xorl    %eax, %eax
         : 17   ; /home/tlam/cs134/project2b/lab2_list.c:55
         : 18   ;     while ((c = getopt_long(argc, argv, "", long_options, NULL)) != -1) {
    0.00 :   131d:           jmp     0x15af <main+0x2ba>
         : 20   ; /home/tlam/cs134/project2b/lab2_list.c:56
         : 21   ;         switch (c) {
    0.00 :   1322:           cmpl    $0x3f, -0x8c(%rbp)
    0.00 :   1329:           je      0x15a4 <main+0x2af>
    0.00 :   132f:           cmpl    $0x3f, -0x8c(%rbp)
    0.00 :   1336:           jl      0x15af <main+0x2ba>
    0.00 :   133c:           cmpl    $0x79, -0x8c(%rbp)
    0.00 :   1343:           jg      0x15af <main+0x2ba>
    0.00 :   1349:           cmpl    $0x69, -0x8c(%rbp)
    0.00 :   1350:           jl      0x15af <main+0x2ba>
    0.00 :   1356:           movl    -0x8c(%rbp), %eax
    0.00 :   135c:           subl    $0x69, %eax
    0.00 :   135f:           cmpl    $0x10, %eax
    0.00 :   1362:           ja      0x15af <main+0x2ba>
    0.00 :   1368:           movl    %eax, %eax
    0.00 :   136a:           leaq    (,%rax,4), %rdx
    0.00 :   1372:           leaq    0x2f1f(%rip), %rax      # 0x4298 <_IO_stdin_used+0x298>
    0.00 :   1379:           movl    (%rdx,%rax), %eax
    0.00 :   137c:           cltq
    0.00 :   137e:           leaq    0x2f13(%rip), %rdx      # 0x4298 <_IO_stdin_used+0x298>
    0.00 :   1385:           addq    %rdx, %rax
    0.00 :   1388:           jmpq    *%rax
         : 42   ; /home/tlam/cs134/project2b/lab2_list.c:58
         : 43   ;                 iterations = atoi(optarg);
    0.00 :   138a:           movq    0x4e4f(%rip), %rax      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   1391:           movq    %rax, %rdi
    0.00 :   1394:           callq   0x1190 <atoi@plt>
    0.00 :   1399:           movl    %eax, 0x4d75(%rip)      # 0x6114 <iterations>
         : 48   ; /home/tlam/cs134/project2b/lab2_list.c:59
         : 49   ;                 break;
    0.00 :   139f:           jmp     0x15af <main+0x2ba>
         : 51   ; /home/tlam/cs134/project2b/lab2_list.c:61
         : 52   ;                 threads = atoi(optarg);
    0.00 :   13a4:           movq    0x4e35(%rip), %rax      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   13ab:           movq    %rax, %rdi
    0.00 :   13ae:           callq   0x1190 <atoi@plt>
    0.00 :   13b3:           movl    %eax, 0x4d57(%rip)      # 0x6110 <threads>
         : 57   ; /home/tlam/cs134/project2b/lab2_list.c:62
         : 58   ;                 break;
    0.00 :   13b9:           jmp     0x15af <main+0x2ba>
         : 60   ; /home/tlam/cs134/project2b/lab2_list.c:64
         : 61   ;                 list_count = atoi(optarg);
    0.00 :   13be:           movq    0x4e1b(%rip), %rax      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   13c5:           movq    %rax, %rdi
    0.00 :   13c8:           callq   0x1190 <atoi@plt>
    0.00 :   13cd:           movl    %eax, 0x4d49(%rip)      # 0x611c <list_count>
         : 66   ; /home/tlam/cs134/project2b/lab2_list.c:65
         : 67   ;                 break;
    0.00 :   13d3:           jmp     0x15af <main+0x2ba>
         : 69   ; /home/tlam/cs134/project2b/lab2_list.c:67
         : 70   ;                 if (strlen(optarg) != 1) {
    0.00 :   13d8:           movq    0x4e01(%rip), %rax      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   13df:           movq    %rax, %rdi
    0.00 :   13e2:           callq   0x1070 <strlen@plt>
    0.00 :   13e7:           cmpq    $0x1, %rax
    0.00 :   13eb:           je      0x141a <main+0x125>
         : 76   ; /home/tlam/cs134/project2b/lab2_list.c:68
         : 77   ;                     fprintf(stderr,
    0.00 :   13ed:           movq    0x4e0c(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   13f4:           movq    %rax, %rcx
    0.00 :   13f7:           movl    $0x35, %edx
    0.00 :   13fc:           movl    $0x1, %esi
    0.00 :   1401:           leaq    0x2c00(%rip), %rax      # 0x4008 <_IO_stdin_used+0x8>
    0.00 :   1408:           movq    %rax, %rdi
    0.00 :   140b:           callq   0x11b0 <fwrite@plt>
         : 85   ; /home/tlam/cs134/project2b/lab2_list.c:71
         : 86   ;                     exit(1);
    0.00 :   1410:           movl    $0x1, %edi
    0.00 :   1415:           callq   0x11a0 <exit@plt>
         : 89   ; /home/tlam/cs134/project2b/lab2_list.c:73
         : 90   ;                     strcpy(sync_opt, optarg);
    0.00 :   141a:           movq    0x4dbf(%rip), %rax      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   1421:           movq    %rax, %rsi
    0.00 :   1424:           leaq    0x4ced(%rip), %rax      # 0x6118 <sync_opt>
    0.00 :   142b:           movq    %rax, %rdi
    0.00 :   142e:           callq   0x1050 <strcpy@plt>
         : 96   ; /home/tlam/cs134/project2b/lab2_list.c:74
         : 97   ;                     if (*sync_opt != 'm' && *sync_opt != 's') {
    0.00 :   1433:           movzbl  0x4cde(%rip), %eax      # 0x6118 <sync_opt>
    0.00 :   143a:           cmpb    $0x6d, %al
    0.00 :   143c:           je      0x15ae <main+0x2b9>
    0.00 :   1442:           movzbl  0x4ccf(%rip), %eax      # 0x6118 <sync_opt>
    0.00 :   1449:           cmpb    $0x73, %al
    0.00 :   144b:           je      0x15ae <main+0x2b9>
         : 104  ; /home/tlam/cs134/project2b/lab2_list.c:75
         : 105  ;                         fprintf(stderr,
    0.00 :   1451:           movq    0x4d88(%rip), %rdx      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   1458:           movq    0x4da1(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   145f:           leaq    0x2bda(%rip), %rcx      # 0x4040 <_IO_stdin_used+0x40>
    0.00 :   1466:           movq    %rcx, %rsi
    0.00 :   1469:           movq    %rax, %rdi
    0.00 :   146c:           movl    $0x0, %eax
    0.00 :   1471:           callq   0x1120 <fprintf@plt>
         : 113  ; /home/tlam/cs134/project2b/lab2_list.c:79
         : 114  ;                         exit(1);
    0.00 :   1476:           movl    $0x1, %edi
    0.00 :   147b:           callq   0x11a0 <exit@plt>
         : 117  ; /home/tlam/cs134/project2b/lab2_list.c:84
         : 118  ;                 if (strlen(optarg) > 3) {
    0.00 :   1480:           movq    0x4d59(%rip), %rax      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   1487:           movq    %rax, %rdi
    0.00 :   148a:           callq   0x1070 <strlen@plt>
    0.00 :   148f:           cmpq    $0x3, %rax
    0.00 :   1493:           jbe     0x14c2 <main+0x1cd>
         : 124  ; /home/tlam/cs134/project2b/lab2_list.c:85
         : 125  ;                     fprintf(
    0.00 :   1495:           movq    0x4d64(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   149c:           movq    %rax, %rcx
    0.00 :   149f:           movl    $0x31, %edx
    0.00 :   14a4:           movl    $0x1, %esi
    0.00 :   14a9:           leaq    0x2bc8(%rip), %rax      # 0x4078 <_IO_stdin_used+0x78>
    0.00 :   14b0:           movq    %rax, %rdi
    0.00 :   14b3:           callq   0x11b0 <fwrite@plt>
         : 133  ; /home/tlam/cs134/project2b/lab2_list.c:88
         : 134  ;                     exit(1);
    0.00 :   14b8:           movl    $0x1, %edi
    0.00 :   14bd:           callq   0x11a0 <exit@plt>
         : 137  ; /home/tlam/cs134/project2b/lab2_list.c:90
         : 138  ;                     for (int i = 0; i < (int)strlen(optarg); i++) {
    0.00 :   14c2:           movl    $0x0, -0xbc(%rbp)
    0.00 :   14cc:           jmp     0x1587 <main+0x292>
         : 141  ; /home/tlam/cs134/project2b/lab2_list.c:91
         : 142  ;                         switch (optarg[i]) {
    0.00 :   14d1:           movq    0x4d08(%rip), %rdx      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   14d8:           movl    -0xbc(%rbp), %eax
    0.00 :   14de:           cltq
    0.00 :   14e0:           addq    %rdx, %rax
    0.00 :   14e3:           movzbl  (%rax), %eax
    0.00 :   14e6:           movsbl  %al, %eax
    0.00 :   14e9:           cmpl    $0x6c, %eax
    0.00 :   14ec:           je      0x152f <main+0x23a>
    0.00 :   14ee:           cmpl    $0x6c, %eax
    0.00 :   14f1:           jg      0x1580 <main+0x28b>
    0.00 :   14f7:           cmpl    $0x69, %eax
    0.00 :   14fa:           je      0x150d <main+0x218>
    0.00 :   14fc:           cmpl    $0x69, %eax
    0.00 :   14ff:           jg      0x1580 <main+0x28b>
    0.00 :   1501:           cmpl    $0x3f, %eax
    0.00 :   1504:           je      0x1540 <main+0x24b>
    0.00 :   1506:           cmpl    $0x64, %eax
    0.00 :   1509:           je      0x151e <main+0x229>
    0.00 :   150b:           jmp     0x1580 <main+0x28b>
         : 162  ; /home/tlam/cs134/project2b/lab2_list.c:93
         : 163  ;                                 opt_yield = opt_yield | INSERT_YIELD;
    0.00 :   150d:           movl    0x4d09(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   1513:           orl     $0x1, %eax
    0.00 :   1516:           movl    %eax, 0x4d00(%rip)      # 0x621c <opt_yield>
         : 167  ; /home/tlam/cs134/project2b/lab2_list.c:94
         : 168  ;                                 break;
    0.00 :   151c:           jmp     0x1580 <main+0x28b>
         : 170  ; /home/tlam/cs134/project2b/lab2_list.c:96
         : 171  ;                                 opt_yield = opt_yield | DELETE_YIELD;
    0.00 :   151e:           movl    0x4cf8(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   1524:           orl     $0x2, %eax
    0.00 :   1527:           movl    %eax, 0x4cef(%rip)      # 0x621c <opt_yield>
         : 175  ; /home/tlam/cs134/project2b/lab2_list.c:97
         : 176  ;                                 break;
    0.00 :   152d:           jmp     0x1580 <main+0x28b>
         : 178  ; /home/tlam/cs134/project2b/lab2_list.c:99
         : 179  ;                                 opt_yield = opt_yield | LOOKUP_YIELD;
    0.00 :   152f:           movl    0x4ce7(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   1535:           orl     $0x4, %eax
    0.00 :   1538:           movl    %eax, 0x4cde(%rip)      # 0x621c <opt_yield>
         : 183  ; /home/tlam/cs134/project2b/lab2_list.c:100
         : 184  ;                                 break;
    0.00 :   153e:           jmp     0x1580 <main+0x28b>
         : 186  ; /home/tlam/cs134/project2b/lab2_list.c:104
         : 187  ;                                         optarg[i]);
    0.00 :   1540:           movq    0x4c99(%rip), %rdx      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   1547:           movl    -0xbc(%rbp), %eax
    0.00 :   154d:           cltq
    0.00 :   154f:           addq    %rdx, %rax
    0.00 :   1552:           movzbl  (%rax), %eax
         : 193  ; /home/tlam/cs134/project2b/lab2_list.c:102
         : 194  ;                                 fprintf(stderr,
    0.00 :   1555:           movsbl  %al, %edx
    0.00 :   1558:           movq    0x4ca1(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   155f:           leaq    0x2b4a(%rip), %rcx      # 0x40b0 <_IO_stdin_used+0xb0>
    0.00 :   1566:           movq    %rcx, %rsi
    0.00 :   1569:           movq    %rax, %rdi
    0.00 :   156c:           movl    $0x0, %eax
    0.00 :   1571:           callq   0x1120 <fprintf@plt>
         : 202  ; /home/tlam/cs134/project2b/lab2_list.c:105
         : 203  ;                                 exit(1);
    0.00 :   1576:           movl    $0x1, %edi
    0.00 :   157b:           callq   0x11a0 <exit@plt>
         : 206  ; /home/tlam/cs134/project2b/lab2_list.c:90
         : 207  ;                     for (int i = 0; i < (int)strlen(optarg); i++) {
    0.00 :   1580:           addl    $0x1, -0xbc(%rbp)
    0.00 :   1587:           movq    0x4c52(%rip), %rax      # 0x61e0 <optarg@GLIBC_2.2.5>
    0.00 :   158e:           movq    %rax, %rdi
    0.00 :   1591:           callq   0x1070 <strlen@plt>
    0.00 :   1596:           cmpl    %eax, -0xbc(%rbp)
    0.00 :   159c:           jl      0x14d1 <main+0x1dc>
         : 214  ; /home/tlam/cs134/project2b/lab2_list.c:110
         : 215  ;                 break;
    0.00 :   15a2:           jmp     0x15af <main+0x2ba>
         : 217  ; /home/tlam/cs134/project2b/lab2_list.c:112
         : 218  ;                 exit(1);
    0.00 :   15a4:           movl    $0x1, %edi
    0.00 :   15a9:           callq   0x11a0 <exit@plt>
         : 221  ; /home/tlam/cs134/project2b/lab2_list.c:82
         : 222  ;                 break;
    0.00 :   15ae:           nop
         : 224  ; /home/tlam/cs134/project2b/lab2_list.c:55
         : 225  ;     while ((c = getopt_long(argc, argv, "", long_options, NULL)) != -1) {
    0.00 :   15af:           movq    -0xd0(%rbp), %rsi
    0.00 :   15b6:           movl    -0xc4(%rbp), %eax
    0.00 :   15bc:           movl    $0x0, %r8d
    0.00 :   15c2:           leaq    0x4b57(%rip), %rdx      # 0x6120 <long_options.0>
    0.00 :   15c9:           movq    %rdx, %rcx
    0.00 :   15cc:           leaq    0x2b00(%rip), %rdx      # 0x40d3 <_IO_stdin_used+0xd3>
    0.00 :   15d3:           movl    %eax, %edi
    0.00 :   15d5:           callq   0x1080 <getopt_long@plt>
    0.00 :   15da:           movl    %eax, -0x8c(%rbp)
    0.00 :   15e0:           cmpl    $-0x1, -0x8c(%rbp)
    0.00 :   15e7:           jne     0x1322 <main+0x2d>
         : 237  ; /home/tlam/cs134/project2b/lab2_list.c:117
         : 238  ;     srand(time(NULL));
    0.00 :   15ed:           movl    $0x0, %edi
    0.00 :   15f2:           callq   0x1130 <time@plt>
    0.00 :   15f7:           movl    %eax, %edi
    0.00 :   15f9:           callq   0x10e0 <srand@plt>
         : 243  ; /home/tlam/cs134/project2b/lab2_list.c:120
         : 244  ;     randomElems = malloc(sizeof(SortedListElement_t[threads * iterations]));
    0.00 :   15fe:           movl    0x4b0c(%rip), %edx      # 0x6110 <threads>
    0.00 :   1604:           movl    0x4b0a(%rip), %eax      # 0x6114 <iterations>
    0.00 :   160a:           imull   %edx, %eax
    0.00 :   160d:           movslq  %eax, %rdx
    0.00 :   1610:           movq    %rdx, %rax
    0.00 :   1613:           addq    %rax, %rax
    0.00 :   1616:           addq    %rdx, %rax
    0.00 :   1619:           shlq    $0x3, %rax
    0.00 :   161d:           movq    %rax, %rdi
    0.00 :   1620:           callq   0x1160 <malloc@plt>
    0.00 :   1625:           movq    %rax, 0x4c0c(%rip)      # 0x6238 <randomElems>
         : 256  ; /home/tlam/cs134/project2b/lab2_list.c:121
         : 257  ;     if (randomElems == NULL) {
    0.00 :   162c:           movq    0x4c05(%rip), %rax      # 0x6238 <randomElems>
    0.00 :   1633:           testq   %rax, %rax
    0.00 :   1636:           jne     0x1665 <main+0x370>
         : 261  ; /home/tlam/cs134/project2b/lab2_list.c:122
         : 262  ;         fprintf(stderr, "Failed to malloc randomElems");
    0.00 :   1638:           movq    0x4bc1(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   163f:           movq    %rax, %rcx
    0.00 :   1642:           movl    $0x1c, %edx
    0.00 :   1647:           movl    $0x1, %esi
    0.00 :   164c:           leaq    0x2a81(%rip), %rax      # 0x40d4 <_IO_stdin_used+0xd4>
    0.00 :   1653:           movq    %rax, %rdi
    0.00 :   1656:           callq   0x11b0 <fwrite@plt>
         : 270  ; /home/tlam/cs134/project2b/lab2_list.c:123
         : 271  ;         exit(1);
    0.00 :   165b:           movl    $0x1, %edi
    0.00 :   1660:           callq   0x11a0 <exit@plt>
         : 274  ; /home/tlam/cs134/project2b/lab2_list.c:127
         : 275  ;     sublists = malloc(sizeof(SortedListElement_t[list_count]));
    0.00 :   1665:           movl    0x4ab1(%rip), %eax      # 0x611c <list_count>
    0.00 :   166b:           movslq  %eax, %rdx
    0.00 :   166e:           movq    %rdx, %rax
    0.00 :   1671:           addq    %rax, %rax
    0.00 :   1674:           addq    %rdx, %rax
    0.00 :   1677:           shlq    $0x3, %rax
    0.00 :   167b:           movq    %rax, %rdi
    0.00 :   167e:           callq   0x1160 <malloc@plt>
    0.00 :   1683:           movq    %rax, 0x4bb6(%rip)      # 0x6240 <sublists>
         : 285  ; /home/tlam/cs134/project2b/lab2_list.c:128
         : 286  ;     if (sublists == NULL) {
    0.00 :   168a:           movq    0x4baf(%rip), %rax      # 0x6240 <sublists>
    0.00 :   1691:           testq   %rax, %rax
    0.00 :   1694:           jne     0x16c3 <main+0x3ce>
         : 290  ; /home/tlam/cs134/project2b/lab2_list.c:129
         : 291  ;         fprintf(stderr, "Failed to malloc sublists");
    0.00 :   1696:           movq    0x4b63(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   169d:           movq    %rax, %rcx
    0.00 :   16a0:           movl    $0x19, %edx
    0.00 :   16a5:           movl    $0x1, %esi
    0.00 :   16aa:           leaq    0x2a40(%rip), %rax      # 0x40f1 <_IO_stdin_used+0xf1>
    0.00 :   16b1:           movq    %rax, %rdi
    0.00 :   16b4:           callq   0x11b0 <fwrite@plt>
         : 299  ; /home/tlam/cs134/project2b/lab2_list.c:130
         : 300  ;         exit(1);
    0.00 :   16b9:           movl    $0x1, %edi
    0.00 :   16be:           callq   0x11a0 <exit@plt>
         : 303  ; /home/tlam/cs134/project2b/lab2_list.c:133
         : 304  ;     for (int i = 0; i < list_count; i++) {
    0.00 :   16c3:           movl    $0x0, -0xb8(%rbp)
    0.00 :   16cd:           jmp     0x1790 <main+0x49b>
         : 307  ; /home/tlam/cs134/project2b/lab2_list.c:134
         : 308  ;         sublists[i].prev = &sublists[i];
    0.00 :   16d2:           movq    0x4b67(%rip), %rcx      # 0x6240 <sublists>
    0.00 :   16d9:           movl    -0xb8(%rbp), %eax
    0.00 :   16df:           movslq  %eax, %rdx
    0.00 :   16e2:           movq    %rdx, %rax
    0.00 :   16e5:           addq    %rax, %rax
    0.00 :   16e8:           addq    %rdx, %rax
    0.00 :   16eb:           shlq    $0x3, %rax
    0.00 :   16ef:           movq    %rax, %rdi
    0.00 :   16f2:           movq    0x4b47(%rip), %rsi      # 0x6240 <sublists>
    0.00 :   16f9:           movl    -0xb8(%rbp), %eax
    0.00 :   16ff:           movslq  %eax, %rdx
    0.00 :   1702:           movq    %rdx, %rax
    0.00 :   1705:           addq    %rax, %rax
    0.00 :   1708:           addq    %rdx, %rax
    0.00 :   170b:           shlq    $0x3, %rax
    0.00 :   170f:           addq    %rsi, %rax
    0.00 :   1712:           leaq    (%rcx,%rdi), %rdx
    0.00 :   1716:           movq    %rdx, (%rax)
         : 327  ; /home/tlam/cs134/project2b/lab2_list.c:135
         : 328  ;         sublists[i].next = &sublists[i];
    0.00 :   1719:           movq    0x4b20(%rip), %rcx      # 0x6240 <sublists>
    0.00 :   1720:           movl    -0xb8(%rbp), %eax
    0.00 :   1726:           movslq  %eax, %rdx
    0.00 :   1729:           movq    %rdx, %rax
    0.00 :   172c:           addq    %rax, %rax
    0.00 :   172f:           addq    %rdx, %rax
    0.00 :   1732:           shlq    $0x3, %rax
    0.00 :   1736:           movq    %rax, %rdi
    0.00 :   1739:           movq    0x4b00(%rip), %rsi      # 0x6240 <sublists>
    0.00 :   1740:           movl    -0xb8(%rbp), %eax
    0.00 :   1746:           movslq  %eax, %rdx
    0.00 :   1749:           movq    %rdx, %rax
    0.00 :   174c:           addq    %rax, %rax
    0.00 :   174f:           addq    %rdx, %rax
    0.00 :   1752:           shlq    $0x3, %rax
    0.00 :   1756:           addq    %rsi, %rax
    0.00 :   1759:           leaq    (%rcx,%rdi), %rdx
    0.00 :   175d:           movq    %rdx, 0x8(%rax)
         : 347  ; /home/tlam/cs134/project2b/lab2_list.c:136
         : 348  ;         sublists[i].key = NULL;
    0.00 :   1761:           movq    0x4ad8(%rip), %rcx      # 0x6240 <sublists>
    0.00 :   1768:           movl    -0xb8(%rbp), %eax
    0.00 :   176e:           movslq  %eax, %rdx
    0.00 :   1771:           movq    %rdx, %rax
    0.00 :   1774:           addq    %rax, %rax
    0.00 :   1777:           addq    %rdx, %rax
    0.00 :   177a:           shlq    $0x3, %rax
    0.00 :   177e:           addq    %rcx, %rax
    0.00 :   1781:           movq    $0x0, 0x10(%rax)
         : 358  ; /home/tlam/cs134/project2b/lab2_list.c:133
         : 359  ;     for (int i = 0; i < list_count; i++) {
    0.00 :   1789:           addl    $0x1, -0xb8(%rbp)
    0.00 :   1790:           movl    0x4986(%rip), %eax      # 0x611c <list_count>
    0.00 :   1796:           cmpl    %eax, -0xb8(%rbp)
    0.00 :   179c:           jl      0x16d2 <main+0x3dd>
         : 364  ; /home/tlam/cs134/project2b/lab2_list.c:140
         : 365  ;     exclusions = calloc(list_count, sizeof(volatile int));
    0.00 :   17a2:           movl    0x4974(%rip), %eax      # 0x611c <list_count>
    0.00 :   17a8:           cltq
    0.00 :   17aa:           movl    $0x4, %esi
    0.00 :   17af:           movq    %rax, %rdi
    0.00 :   17b2:           callq   0x10f0 <calloc@plt>
    0.00 :   17b7:           movq    %rax, 0x4a6a(%rip)      # 0x6228 <exclusions>
         : 372  ; /home/tlam/cs134/project2b/lab2_list.c:141
         : 373  ;     if (exclusions == NULL) {
    0.00 :   17be:           movq    0x4a63(%rip), %rax      # 0x6228 <exclusions>
    0.00 :   17c5:           testq   %rax, %rax
    0.00 :   17c8:           jne     0x17f7 <main+0x502>
         : 377  ; /home/tlam/cs134/project2b/lab2_list.c:142
         : 378  ;         fprintf(stderr, "Failed to calloc exclusions");
    0.00 :   17ca:           movq    0x4a2f(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   17d1:           movq    %rax, %rcx
    0.00 :   17d4:           movl    $0x1b, %edx
    0.00 :   17d9:           movl    $0x1, %esi
    0.00 :   17de:           leaq    0x2926(%rip), %rax      # 0x410b <_IO_stdin_used+0x10b>
    0.00 :   17e5:           movq    %rax, %rdi
    0.00 :   17e8:           callq   0x11b0 <fwrite@plt>
         : 386  ; /home/tlam/cs134/project2b/lab2_list.c:143
         : 387  ;         exit(1);
    0.00 :   17ed:           movl    $0x1, %edi
    0.00 :   17f2:           callq   0x11a0 <exit@plt>
         : 390  ; /home/tlam/cs134/project2b/lab2_list.c:147
         : 391  ;     locks = malloc(sizeof(pthread_mutex_t) * list_count);
    0.00 :   17f7:           movl    0x491f(%rip), %eax      # 0x611c <list_count>
    0.00 :   17fd:           movslq  %eax, %rdx
    0.00 :   1800:           movq    %rdx, %rax
    0.00 :   1803:           shlq    $0x2, %rax
    0.00 :   1807:           addq    %rdx, %rax
    0.00 :   180a:           shlq    $0x3, %rax
    0.00 :   180e:           movq    %rax, %rdi
    0.00 :   1811:           callq   0x1160 <malloc@plt>
    0.00 :   1816:           movq    %rax, 0x4a03(%rip)      # 0x6220 <locks>
         : 401  ; /home/tlam/cs134/project2b/lab2_list.c:148
         : 402  ;     if (locks == NULL) {
    0.00 :   181d:           movq    0x49fc(%rip), %rax      # 0x6220 <locks>
    0.00 :   1824:           testq   %rax, %rax
    0.00 :   1827:           jne     0x1856 <main+0x561>
         : 406  ; /home/tlam/cs134/project2b/lab2_list.c:149
         : 407  ;         fprintf(stderr, "Failed to malloc locks");
    0.00 :   1829:           movq    0x49d0(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1830:           movq    %rax, %rcx
    0.00 :   1833:           movl    $0x16, %edx
    0.00 :   1838:           movl    $0x1, %esi
    0.00 :   183d:           leaq    0x28e3(%rip), %rax      # 0x4127 <_IO_stdin_used+0x127>
    0.00 :   1844:           movq    %rax, %rdi
    0.00 :   1847:           callq   0x11b0 <fwrite@plt>
         : 415  ; /home/tlam/cs134/project2b/lab2_list.c:150
         : 416  ;         exit(1);
    0.00 :   184c:           movl    $0x1, %edi
    0.00 :   1851:           callq   0x11a0 <exit@plt>
         : 419  ; /home/tlam/cs134/project2b/lab2_list.c:153
         : 420  ;     for (int i = 0; i < list_count; i++) {
    0.00 :   1856:           movl    $0x0, -0xb4(%rbp)
    0.00 :   1860:           jmp     0x18d4 <main+0x5df>
         : 423  ; /home/tlam/cs134/project2b/lab2_list.c:154
         : 424  ;         error = pthread_mutex_init(&locks[i], NULL);
    0.00 :   1862:           movq    0x49b7(%rip), %rcx      # 0x6220 <locks>
    0.00 :   1869:           movl    -0xb4(%rbp), %eax
    0.00 :   186f:           movslq  %eax, %rdx
    0.00 :   1872:           movq    %rdx, %rax
    0.00 :   1875:           shlq    $0x2, %rax
    0.00 :   1879:           addq    %rdx, %rax
    0.00 :   187c:           shlq    $0x3, %rax
    0.00 :   1880:           addq    %rcx, %rax
    0.00 :   1883:           movl    $0x0, %esi
    0.00 :   1888:           movq    %rax, %rdi
    0.00 :   188b:           callq   0x11d0 <pthread_mutex_init@plt>
    0.00 :   1890:           movl    %eax, 0x4982(%rip)      # 0x6218 <error>
         : 437  ; /home/tlam/cs134/project2b/lab2_list.c:155
         : 438  ;         if (error != 0) {
    0.00 :   1896:           movl    0x497c(%rip), %eax      # 0x6218 <error>
    0.00 :   189c:           testl   %eax, %eax
    0.00 :   189e:           je      0x18cd <main+0x5d8>
         : 442  ; /home/tlam/cs134/project2b/lab2_list.c:156
         : 443  ;             fprintf(stderr, "Failed to initialize the mutex");
    0.00 :   18a0:           movq    0x4959(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   18a7:           movq    %rax, %rcx
    0.00 :   18aa:           movl    $0x1e, %edx
    0.00 :   18af:           movl    $0x1, %esi
    0.00 :   18b4:           leaq    0x2885(%rip), %rax      # 0x4140 <_IO_stdin_used+0x140>
    0.00 :   18bb:           movq    %rax, %rdi
    0.00 :   18be:           callq   0x11b0 <fwrite@plt>
         : 451  ; /home/tlam/cs134/project2b/lab2_list.c:157
         : 452  ;             exit(1);
    0.00 :   18c3:           movl    $0x1, %edi
    0.00 :   18c8:           callq   0x11a0 <exit@plt>
         : 455  ; /home/tlam/cs134/project2b/lab2_list.c:153
         : 456  ;     for (int i = 0; i < list_count; i++) {
    0.00 :   18cd:           addl    $0x1, -0xb4(%rbp)
    0.00 :   18d4:           movl    0x4842(%rip), %eax      # 0x611c <list_count>
    0.00 :   18da:           cmpl    %eax, -0xb4(%rbp)
    0.00 :   18e0:           jl      0x1862 <main+0x56d>
         : 461  ; /home/tlam/cs134/project2b/lab2_list.c:165
         : 462  ;     for (int i = 0; i < threads; i++) {
    0.00 :   18e2:           movl    $0x0, -0xb0(%rbp)
    0.00 :   18ec:           jmp     0x1994 <main+0x69f>
         : 465  ; /home/tlam/cs134/project2b/lab2_list.c:166
         : 466  ;         for (int j = 0; j < iterations; j++) {
    0.00 :   18f1:           movl    $0x0, -0xac(%rbp)
    0.00 :   18fb:           jmp     0x197b <main+0x686>
         : 469  ; /home/tlam/cs134/project2b/lab2_list.c:167
         : 470  ;             r = rand();
    0.00 :   18fd:           callq   0x11f0 <rand@plt>
    0.00 :   1902:           movl    %eax, -0x84(%rbp)
         : 473  ; /home/tlam/cs134/project2b/lab2_list.c:168
         : 474  ;             snprintf(buf, MAXSTRLEN, "%d", r);
    0.00 :   1908:           movl    -0x84(%rbp), %edx
    0.00 :   190e:           leaq    -0x30(%rbp), %rax
    0.00 :   1912:           movl    %edx, %ecx
    0.00 :   1914:           leaq    0x2844(%rip), %rdx      # 0x415f <_IO_stdin_used+0x15f>
    0.00 :   191b:           movl    $0x10, %esi
    0.00 :   1920:           movq    %rax, %rdi
    0.00 :   1923:           movl    $0x0, %eax
    0.00 :   1928:           callq   0x10b0 <snprintf@plt>
         : 483  ; /home/tlam/cs134/project2b/lab2_list.c:169
         : 484  ;             randomElems[i * iterations + j].key = strndup(buf, MAXSTRLEN);
    0.00 :   192d:           movq    0x4904(%rip), %rcx      # 0x6238 <randomElems>
    0.00 :   1934:           movl    0x47da(%rip), %eax      # 0x6114 <iterations>
    0.00 :   193a:           imull   -0xb0(%rbp), %eax
    0.00 :   1941:           movl    %eax, %edx
    0.00 :   1943:           movl    -0xac(%rbp), %eax
    0.00 :   1949:           addl    %edx, %eax
    0.00 :   194b:           movslq  %eax, %rdx
    0.00 :   194e:           movq    %rdx, %rax
    0.00 :   1951:           addq    %rax, %rax
    0.00 :   1954:           addq    %rdx, %rax
    0.00 :   1957:           shlq    $0x3, %rax
    0.00 :   195b:           leaq    (%rcx,%rax), %rbx
    0.00 :   195f:           leaq    -0x30(%rbp), %rax
    0.00 :   1963:           movl    $0x10, %esi
    0.00 :   1968:           movq    %rax, %rdi
    0.00 :   196b:           callq   0x10d0 <strndup@plt>
  100.00 :   1970:           movq    %rax, 0x10(%rbx)
         : 502  ; /home/tlam/cs134/project2b/lab2_list.c:166
         : 503  ;         for (int j = 0; j < iterations; j++) {
    0.00 :   1974:           addl    $0x1, -0xac(%rbp)
    0.00 :   197b:           movl    0x4793(%rip), %eax      # 0x6114 <iterations>
    0.00 :   1981:           cmpl    %eax, -0xac(%rbp)
    0.00 :   1987:           jl      0x18fd <main+0x608>
         : 508  ; /home/tlam/cs134/project2b/lab2_list.c:165
         : 509  ;     for (int i = 0; i < threads; i++) {
    0.00 :   198d:           addl    $0x1, -0xb0(%rbp)
    0.00 :   1994:           movl    0x4776(%rip), %eax      # 0x6110 <threads>
    0.00 :   199a:           cmpl    %eax, -0xb0(%rbp)
    0.00 :   19a0:           jl      0x18f1 <main+0x5fc>
         : 514  ; /home/tlam/cs134/project2b/lab2_list.c:174
         : 515  ;     signal(SIGSEGV, signal_handler);
    0.00 :   19a6:           leaq    0x18da(%rip), %rax      # 0x3287 <signal_handler>
    0.00 :   19ad:           movq    %rax, %rsi
    0.00 :   19b0:           movl    $0xb, %edi
    0.00 :   19b5:           callq   0x1110 <signal@plt>
         : 520  ; /home/tlam/cs134/project2b/lab2_list.c:177
         : 521  ;     pthread_t* thread_ids = malloc(sizeof(pthread_t) * threads);
    0.00 :   19ba:           movl    0x4750(%rip), %eax      # 0x6110 <threads>
    0.00 :   19c0:           cltq
    0.00 :   19c2:           shlq    $0x3, %rax
    0.00 :   19c6:           movq    %rax, %rdi
    0.00 :   19c9:           callq   0x1160 <malloc@plt>
    0.00 :   19ce:           movq    %rax, -0x78(%rbp)
         : 528  ; /home/tlam/cs134/project2b/lab2_list.c:178
         : 529  ;     if (thread_ids == NULL) {
    0.00 :   19d2:           cmpq    $0x0, -0x78(%rbp)
    0.00 :   19d7:           jne     0x1a06 <main+0x711>
         : 532  ; /home/tlam/cs134/project2b/lab2_list.c:179
         : 533  ;         fprintf(stderr, "Failed to malloc thread_ids");
    0.00 :   19d9:           movq    0x4820(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   19e0:           movq    %rax, %rcx
    0.00 :   19e3:           movl    $0x1b, %edx
    0.00 :   19e8:           movl    $0x1, %esi
    0.00 :   19ed:           leaq    0x276e(%rip), %rax      # 0x4162 <_IO_stdin_used+0x162>
    0.00 :   19f4:           movq    %rax, %rdi
    0.00 :   19f7:           callq   0x11b0 <fwrite@plt>
         : 541  ; /home/tlam/cs134/project2b/lab2_list.c:180
         : 542  ;         exit(1);
    0.00 :   19fc:           movl    $0x1, %edi
    0.00 :   1a01:           callq   0x11a0 <exit@plt>
         : 545  ; /home/tlam/cs134/project2b/lab2_list.c:184
         : 546  ;     int* thread_indexes = malloc(sizeof(int) * threads);
    0.00 :   1a06:           movl    0x4704(%rip), %eax      # 0x6110 <threads>
    0.00 :   1a0c:           cltq
    0.00 :   1a0e:           shlq    $0x2, %rax
    0.00 :   1a12:           movq    %rax, %rdi
    0.00 :   1a15:           callq   0x1160 <malloc@plt>
    0.00 :   1a1a:           movq    %rax, -0x70(%rbp)
         : 553  ; /home/tlam/cs134/project2b/lab2_list.c:185
         : 554  ;     if (thread_indexes == NULL) {
    0.00 :   1a1e:           cmpq    $0x0, -0x70(%rbp)
    0.00 :   1a23:           jne     0x1a52 <main+0x75d>
         : 557  ; /home/tlam/cs134/project2b/lab2_list.c:186
         : 558  ;         fprintf(stderr, "Failed to malloc thread_indexes");
    0.00 :   1a25:           movq    0x47d4(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1a2c:           movq    %rax, %rcx
    0.00 :   1a2f:           movl    $0x1f, %edx
    0.00 :   1a34:           movl    $0x1, %esi
    0.00 :   1a39:           leaq    0x2740(%rip), %rax      # 0x4180 <_IO_stdin_used+0x180>
    0.00 :   1a40:           movq    %rax, %rdi
    0.00 :   1a43:           callq   0x11b0 <fwrite@plt>
         : 566  ; /home/tlam/cs134/project2b/lab2_list.c:187
         : 567  ;         exit(1);
    0.00 :   1a48:           movl    $0x1, %edi
    0.00 :   1a4d:           callq   0x11a0 <exit@plt>
         : 570  ; /home/tlam/cs134/project2b/lab2_list.c:190
         : 571  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1a52:           movl    $0x0, -0xa8(%rbp)
    0.00 :   1a5c:           jmp     0x1a84 <main+0x78f>
         : 574  ; /home/tlam/cs134/project2b/lab2_list.c:191
         : 575  ;         thread_indexes[i] = i;
    0.00 :   1a5e:           movl    -0xa8(%rbp), %eax
    0.00 :   1a64:           cltq
    0.00 :   1a66:           leaq    (,%rax,4), %rdx
    0.00 :   1a6e:           movq    -0x70(%rbp), %rax
    0.00 :   1a72:           addq    %rax, %rdx
    0.00 :   1a75:           movl    -0xa8(%rbp), %eax
    0.00 :   1a7b:           movl    %eax, (%rdx)
         : 583  ; /home/tlam/cs134/project2b/lab2_list.c:190
         : 584  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1a7d:           addl    $0x1, -0xa8(%rbp)
    0.00 :   1a84:           movl    0x4686(%rip), %eax      # 0x6110 <threads>
    0.00 :   1a8a:           cmpl    %eax, -0xa8(%rbp)
    0.00 :   1a90:           jl      0x1a5e <main+0x769>
         : 589  ; /home/tlam/cs134/project2b/lab2_list.c:195
         : 590  ;     locking_times = calloc(threads, sizeof(long long));
    0.00 :   1a92:           movl    0x4678(%rip), %eax      # 0x6110 <threads>
    0.00 :   1a98:           cltq
    0.00 :   1a9a:           movl    $0x8, %esi
    0.00 :   1a9f:           movq    %rax, %rdi
    0.00 :   1aa2:           callq   0x10f0 <calloc@plt>
    0.00 :   1aa7:           movq    %rax, 0x4782(%rip)      # 0x6230 <locking_times>
         : 597  ; /home/tlam/cs134/project2b/lab2_list.c:196
         : 598  ;     if (locking_times == NULL) {
    0.00 :   1aae:           movq    0x477b(%rip), %rax      # 0x6230 <locking_times>
    0.00 :   1ab5:           testq   %rax, %rax
    0.00 :   1ab8:           jne     0x1ae7 <main+0x7f2>
         : 602  ; /home/tlam/cs134/project2b/lab2_list.c:197
         : 603  ;         fprintf(stderr, "Failed to calloc locking_times");
    0.00 :   1aba:           movq    0x473f(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1ac1:           movq    %rax, %rcx
    0.00 :   1ac4:           movl    $0x1e, %edx
    0.00 :   1ac9:           movl    $0x1, %esi
    0.00 :   1ace:           leaq    0x26cb(%rip), %rax      # 0x41a0 <_IO_stdin_used+0x1a0>
    0.00 :   1ad5:           movq    %rax, %rdi
    0.00 :   1ad8:           callq   0x11b0 <fwrite@plt>
         : 611  ; /home/tlam/cs134/project2b/lab2_list.c:198
         : 612  ;         exit(1);
    0.00 :   1add:           movl    $0x1, %edi
    0.00 :   1ae2:           callq   0x11a0 <exit@plt>
         : 615  ; /home/tlam/cs134/project2b/lab2_list.c:204
         : 616  ;     if (clock_gettime(CLOCK_MONOTONIC, &start) == -1) {
    0.00 :   1ae7:           leaq    -0x50(%rbp), %rax
    0.00 :   1aeb:           movq    %rax, %rsi
    0.00 :   1aee:           movl    $0x1, %edi
    0.00 :   1af3:           callq   0x1060 <clock_gettime@plt>
    0.00 :   1af8:           cmpl    $-0x1, %eax
    0.00 :   1afb:           jne     0x1b2a <main+0x835>
         : 623  ; /home/tlam/cs134/project2b/lab2_list.c:205
         : 624  ;         fprintf(stderr, "clock gettime");
    0.00 :   1afd:           movq    0x46fc(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1b04:           movq    %rax, %rcx
    0.00 :   1b07:           movl    $0xd, %edx
    0.00 :   1b0c:           movl    $0x1, %esi
    0.00 :   1b11:           leaq    0x26a7(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   1b18:           movq    %rax, %rdi
    0.00 :   1b1b:           callq   0x11b0 <fwrite@plt>
         : 632  ; /home/tlam/cs134/project2b/lab2_list.c:206
         : 633  ;         exit(1);
    0.00 :   1b20:           movl    $0x1, %edi
    0.00 :   1b25:           callq   0x11a0 <exit@plt>
         : 636  ; /home/tlam/cs134/project2b/lab2_list.c:210
         : 637  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1b2a:           movl    $0x0, -0xa4(%rbp)
    0.00 :   1b34:           jmp     0x1c66 <main+0x971>
         : 640  ; /home/tlam/cs134/project2b/lab2_list.c:213
         : 641  ;         if (*sync_opt == 'n') {
    0.00 :   1b39:           movzbl  0x45d8(%rip), %eax      # 0x6118 <sync_opt>
    0.00 :   1b40:           cmpb    $0x6e, %al
    0.00 :   1b42:           jne     0x1b8e <main+0x899>
         : 645  ; /home/tlam/cs134/project2b/lab2_list.c:215
         : 646  ;                            &thread_indexes[i]);
    0.00 :   1b44:           movl    -0xa4(%rbp), %eax
    0.00 :   1b4a:           cltq
    0.00 :   1b4c:           leaq    (,%rax,4), %rdx
    0.00 :   1b54:           movq    -0x70(%rbp), %rax
    0.00 :   1b58:           addq    %rax, %rdx
         : 652  ; /home/tlam/cs134/project2b/lab2_list.c:214
         : 653  ;             pthread_create(&thread_ids[i], NULL, &thread_run_list,
    0.00 :   1b5b:           movl    -0xa4(%rbp), %eax
    0.00 :   1b61:           cltq
    0.00 :   1b63:           leaq    (,%rax,8), %rcx
    0.00 :   1b6b:           movq    -0x78(%rbp), %rax
    0.00 :   1b6f:           addq    %rcx, %rax
    0.00 :   1b72:           movq    %rdx, %rcx
    0.00 :   1b75:           leaq    0x50c(%rip), %rdx       # 0x2088 <thread_run_list>
    0.00 :   1b7c:           movl    $0x0, %esi
    0.00 :   1b81:           movq    %rax, %rdi
    0.00 :   1b84:           callq   0x1180 <pthread_create@plt>
    0.00 :   1b89:           jmp     0x1c5f <main+0x96a>
         : 665  ; /home/tlam/cs134/project2b/lab2_list.c:216
         : 666  ;         } else if (*sync_opt == 'm') {
    0.00 :   1b8e:           movzbl  0x4583(%rip), %eax      # 0x6118 <sync_opt>
    0.00 :   1b95:           cmpb    $0x6d, %al
    0.00 :   1b97:           jne     0x1be0 <main+0x8eb>
         : 670  ; /home/tlam/cs134/project2b/lab2_list.c:218
         : 671  ;                            &thread_indexes[i]);
    0.00 :   1b99:           movl    -0xa4(%rbp), %eax
    0.00 :   1b9f:           cltq
    0.00 :   1ba1:           leaq    (,%rax,4), %rdx
    0.00 :   1ba9:           movq    -0x70(%rbp), %rax
    0.00 :   1bad:           addq    %rax, %rdx
         : 677  ; /home/tlam/cs134/project2b/lab2_list.c:217
         : 678  ;             pthread_create(&thread_ids[i], NULL, &thread_run_list_mutex,
    0.00 :   1bb0:           movl    -0xa4(%rbp), %eax
    0.00 :   1bb6:           cltq
    0.00 :   1bb8:           leaq    (,%rax,8), %rcx
    0.00 :   1bc0:           movq    -0x78(%rbp), %rax
    0.00 :   1bc4:           addq    %rcx, %rax
    0.00 :   1bc7:           movq    %rdx, %rcx
    0.00 :   1bca:           leaq    0xeda(%rip), %rdx       # 0x2aab <thread_run_list_mutex>
    0.00 :   1bd1:           movl    $0x0, %esi
    0.00 :   1bd6:           movq    %rax, %rdi
    0.00 :   1bd9:           callq   0x1180 <pthread_create@plt>
    0.00 :   1bde:           jmp     0x1c5f <main+0x96a>
         : 690  ; /home/tlam/cs134/project2b/lab2_list.c:219
         : 691  ;         } else if (*sync_opt == 's') {
    0.00 :   1be0:           movzbl  0x4531(%rip), %eax      # 0x6118 <sync_opt>
    0.00 :   1be7:           cmpb    $0x73, %al
    0.00 :   1be9:           jne     0x1c32 <main+0x93d>
         : 695  ; /home/tlam/cs134/project2b/lab2_list.c:221
         : 696  ;                            &thread_indexes[i]);
    0.00 :   1beb:           movl    -0xa4(%rbp), %eax
    0.00 :   1bf1:           cltq
    0.00 :   1bf3:           leaq    (,%rax,4), %rdx
    0.00 :   1bfb:           movq    -0x70(%rbp), %rax
    0.00 :   1bff:           addq    %rax, %rdx
         : 702  ; /home/tlam/cs134/project2b/lab2_list.c:220
         : 703  ;             pthread_create(&thread_ids[i], NULL, &thread_run_list_test,
    0.00 :   1c02:           movl    -0xa4(%rbp), %eax
    0.00 :   1c08:           cltq
    0.00 :   1c0a:           leaq    (,%rax,8), %rcx
    0.00 :   1c12:           movq    -0x78(%rbp), %rax
    0.00 :   1c16:           addq    %rcx, %rax
    0.00 :   1c19:           movq    %rdx, %rcx
    0.00 :   1c1c:           leaq    0x711(%rip), %rdx       # 0x2334 <thread_run_list_test>
    0.00 :   1c23:           movl    $0x0, %esi
    0.00 :   1c28:           movq    %rax, %rdi
    0.00 :   1c2b:           callq   0x1180 <pthread_create@plt>
    0.00 :   1c30:           jmp     0x1c5f <main+0x96a>
         : 715  ; /home/tlam/cs134/project2b/lab2_list.c:223
         : 716  ;             fprintf(stderr, "sync_opt has a bad value");
    0.00 :   1c32:           movq    0x45c7(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1c39:           movq    %rax, %rcx
    0.00 :   1c3c:           movl    $0x18, %edx
    0.00 :   1c41:           movl    $0x1, %esi
    0.00 :   1c46:           leaq    0x2580(%rip), %rax      # 0x41cd <_IO_stdin_used+0x1cd>
    0.00 :   1c4d:           movq    %rax, %rdi
    0.00 :   1c50:           callq   0x11b0 <fwrite@plt>
         : 724  ; /home/tlam/cs134/project2b/lab2_list.c:224
         : 725  ;             exit(1);
    0.00 :   1c55:           movl    $0x1, %edi
    0.00 :   1c5a:           callq   0x11a0 <exit@plt>
         : 728  ; /home/tlam/cs134/project2b/lab2_list.c:210
         : 729  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1c5f:           addl    $0x1, -0xa4(%rbp)
    0.00 :   1c66:           movl    0x44a4(%rip), %eax      # 0x6110 <threads>
    0.00 :   1c6c:           cmpl    %eax, -0xa4(%rbp)
    0.00 :   1c72:           jl      0x1b39 <main+0x844>
         : 734  ; /home/tlam/cs134/project2b/lab2_list.c:229
         : 735  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1c78:           movl    $0x0, -0xa0(%rbp)
    0.00 :   1c82:           jmp     0x1cb2 <main+0x9bd>
         : 738  ; /home/tlam/cs134/project2b/lab2_list.c:230
         : 739  ;         pthread_join(thread_ids[i], NULL);
    0.00 :   1c84:           movl    -0xa0(%rbp), %eax
    0.00 :   1c8a:           cltq
    0.00 :   1c8c:           leaq    (,%rax,8), %rdx
    0.00 :   1c94:           movq    -0x78(%rbp), %rax
    0.00 :   1c98:           addq    %rdx, %rax
    0.00 :   1c9b:           movq    (%rax), %rax
    0.00 :   1c9e:           movl    $0x0, %esi
    0.00 :   1ca3:           movq    %rax, %rdi
    0.00 :   1ca6:           callq   0x11c0 <pthread_join@plt>
         : 749  ; /home/tlam/cs134/project2b/lab2_list.c:229
         : 750  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1cab:           addl    $0x1, -0xa0(%rbp)
    0.00 :   1cb2:           movl    0x4458(%rip), %eax      # 0x6110 <threads>
    0.00 :   1cb8:           cmpl    %eax, -0xa0(%rbp)
    0.00 :   1cbe:           jl      0x1c84 <main+0x98f>
         : 755  ; /home/tlam/cs134/project2b/lab2_list.c:234
         : 756  ;     if (clock_gettime(CLOCK_MONOTONIC, &stop) == -1) {
    0.00 :   1cc0:           leaq    -0x40(%rbp), %rax
    0.00 :   1cc4:           movq    %rax, %rsi
    0.00 :   1cc7:           movl    $0x1, %edi
    0.00 :   1ccc:           callq   0x1060 <clock_gettime@plt>
    0.00 :   1cd1:           cmpl    $-0x1, %eax
    0.00 :   1cd4:           jne     0x1d03 <main+0xa0e>
         : 763  ; /home/tlam/cs134/project2b/lab2_list.c:235
         : 764  ;         fprintf(stderr, "clock gettime");
    0.00 :   1cd6:           movq    0x4523(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1cdd:           movq    %rax, %rcx
    0.00 :   1ce0:           movl    $0xd, %edx
    0.00 :   1ce5:           movl    $0x1, %esi
    0.00 :   1cea:           leaq    0x24ce(%rip), %rax      # 0x41bf <_IO_stdin_used+0x1bf>
    0.00 :   1cf1:           movq    %rax, %rdi
    0.00 :   1cf4:           callq   0x11b0 <fwrite@plt>
         : 772  ; /home/tlam/cs134/project2b/lab2_list.c:236
         : 773  ;         exit(1);
    0.00 :   1cf9:           movl    $0x1, %edi
    0.00 :   1cfe:           callq   0x11a0 <exit@plt>
         : 776  ; /home/tlam/cs134/project2b/lab2_list.c:240
         : 777  ;     for (int i = 0; i < list_count; i++) {
    0.00 :   1d03:           movl    $0x0, -0x9c(%rbp)
    0.00 :   1d0d:           jmp     0x1db8 <main+0xac3>
         : 780  ; /home/tlam/cs134/project2b/lab2_list.c:241
         : 781  ;         error = SortedList_length(&sublists[i]);
    0.00 :   1d12:           movq    0x4527(%rip), %rcx      # 0x6240 <sublists>
    0.00 :   1d19:           movl    -0x9c(%rbp), %eax
    0.00 :   1d1f:           movslq  %eax, %rdx
    0.00 :   1d22:           movq    %rdx, %rax
    0.00 :   1d25:           addq    %rax, %rax
    0.00 :   1d28:           addq    %rdx, %rax
    0.00 :   1d2b:           shlq    $0x3, %rax
    0.00 :   1d2f:           addq    %rcx, %rax
    0.00 :   1d32:           movq    %rax, %rdi
    0.00 :   1d35:           callq   0x345e <SortedList_length>
    0.00 :   1d3a:           movl    %eax, 0x44d8(%rip)      # 0x6218 <error>
         : 793  ; /home/tlam/cs134/project2b/lab2_list.c:242
         : 794  ;         if (error == -1) {
    0.00 :   1d40:           movl    0x44d2(%rip), %eax      # 0x6218 <error>
    0.00 :   1d46:           cmpl    $-0x1, %eax
    0.00 :   1d49:           jne     0x1d79 <main+0xa84>
         : 798  ; /home/tlam/cs134/project2b/lab2_list.c:243
         : 799  ;             fprintf(stderr, "corruption found in list %d while finding length\n", i);
    0.00 :   1d4b:           movq    0x44ae(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1d52:           movl    -0x9c(%rbp), %edx
    0.00 :   1d58:           leaq    0x2489(%rip), %rcx      # 0x41e8 <_IO_stdin_used+0x1e8>
    0.00 :   1d5f:           movq    %rcx, %rsi
    0.00 :   1d62:           movq    %rax, %rdi
    0.00 :   1d65:           movl    $0x0, %eax
    0.00 :   1d6a:           callq   0x1120 <fprintf@plt>
         : 807  ; /home/tlam/cs134/project2b/lab2_list.c:244
         : 808  ;             exit(2);
    0.00 :   1d6f:           movl    $0x2, %edi
    0.00 :   1d74:           callq   0x11a0 <exit@plt>
         : 811  ; /home/tlam/cs134/project2b/lab2_list.c:245
         : 812  ;         } else if (error > 0) {
    0.00 :   1d79:           movl    0x4499(%rip), %eax      # 0x6218 <error>
    0.00 :   1d7f:           testl   %eax, %eax
    0.00 :   1d81:           jle     0x1db1 <main+0xabc>
         : 816  ; /home/tlam/cs134/project2b/lab2_list.c:246
         : 817  ;             fprintf(stderr, "non-zero length in list %d means corrupted list\n", i);
    0.00 :   1d83:           movq    0x4476(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   1d8a:           movl    -0x9c(%rbp), %edx
    0.00 :   1d90:           leaq    0x2489(%rip), %rcx      # 0x4220 <_IO_stdin_used+0x220>
    0.00 :   1d97:           movq    %rcx, %rsi
    0.00 :   1d9a:           movq    %rax, %rdi
    0.00 :   1d9d:           movl    $0x0, %eax
    0.00 :   1da2:           callq   0x1120 <fprintf@plt>
         : 825  ; /home/tlam/cs134/project2b/lab2_list.c:247
         : 826  ;             exit(2);
    0.00 :   1da7:           movl    $0x2, %edi
    0.00 :   1dac:           callq   0x11a0 <exit@plt>
         : 829  ; /home/tlam/cs134/project2b/lab2_list.c:240
         : 830  ;     for (int i = 0; i < list_count; i++) {
    0.00 :   1db1:           addl    $0x1, -0x9c(%rbp)
    0.00 :   1db8:           movl    0x435e(%rip), %eax      # 0x611c <list_count>
    0.00 :   1dbe:           cmpl    %eax, -0x9c(%rbp)
    0.00 :   1dc4:           jl      0x1d12 <main+0xa1d>
         : 835  ; /home/tlam/cs134/project2b/lab2_list.c:253
         : 836  ;         stop.tv_nsec - start.tv_nsec + (stop.tv_sec - start.tv_sec) * BILLION;
    0.00 :   1dca:           movq    -0x38(%rbp), %rdx
    0.00 :   1dce:           movq    -0x48(%rbp), %rax
    0.00 :   1dd2:           movq    %rdx, %rcx
    0.00 :   1dd5:           subq    %rax, %rcx
    0.00 :   1dd8:           movq    -0x40(%rbp), %rdx
    0.00 :   1ddc:           movq    -0x50(%rbp), %rax
    0.00 :   1de0:           subq    %rax, %rdx
    0.00 :   1de3:           imulq   $0x3b9aca00, %rdx, %rax # imm = 0x3B9ACA00
         : 845  ; /home/tlam/cs134/project2b/lab2_list.c:252
         : 846  ;     total_runtime =
    0.00 :   1dea:           addq    %rcx, %rax
    0.00 :   1ded:           movq    %rax, -0x68(%rbp)
         : 849  ; /home/tlam/cs134/project2b/lab2_list.c:254
         : 850  ;     int total_operations = 3 * threads * iterations;
    0.00 :   1df1:           movl    0x4319(%rip), %edx      # 0x6110 <threads>
    0.00 :   1df7:           movl    0x4317(%rip), %eax      # 0x6114 <iterations>
    0.00 :   1dfd:           imull   %eax, %edx
    0.00 :   1e00:           movl    %edx, %eax
    0.00 :   1e02:           addl    %eax, %eax
    0.00 :   1e04:           addl    %edx, %eax
    0.00 :   1e06:           movl    %eax, -0x88(%rbp)
         : 858  ; /home/tlam/cs134/project2b/lab2_list.c:255
         : 859  ;     long long avg_runtime = total_runtime / total_operations;
    0.00 :   1e0c:           movl    -0x88(%rbp), %eax
    0.00 :   1e12:           movslq  %eax, %rbx
    0.00 :   1e15:           movq    -0x68(%rbp), %rax
    0.00 :   1e19:           cqto
    0.00 :   1e1b:           idivq   %rbx
    0.00 :   1e1e:           movq    %rax, -0x60(%rbp)
         : 866  ; /home/tlam/cs134/project2b/lab2_list.c:257
         : 867  ;     long long total_locking_time = 0;
    0.00 :   1e22:           movq    $0x0, -0x80(%rbp)
         : 869  ; /home/tlam/cs134/project2b/lab2_list.c:258
         : 870  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1e2a:           movl    $0x0, -0x98(%rbp)
    0.00 :   1e34:           jmp     0x1e5b <main+0xb66>
         : 873  ; /home/tlam/cs134/project2b/lab2_list.c:259
         : 874  ;         total_locking_time += locking_times[i];
    0.00 :   1e36:           movq    0x43f3(%rip), %rax      # 0x6230 <locking_times>
    0.00 :   1e3d:           movl    -0x98(%rbp), %edx
    0.00 :   1e43:           movslq  %edx, %rdx
    0.00 :   1e46:           shlq    $0x3, %rdx
    0.00 :   1e4a:           addq    %rdx, %rax
    0.00 :   1e4d:           movq    (%rax), %rax
    0.00 :   1e50:           addq    %rax, -0x80(%rbp)
         : 882  ; /home/tlam/cs134/project2b/lab2_list.c:258
         : 883  ;     for (int i = 0; i < threads; i++) {
    0.00 :   1e54:           addl    $0x1, -0x98(%rbp)
    0.00 :   1e5b:           movl    0x42af(%rip), %eax      # 0x6110 <threads>
    0.00 :   1e61:           cmpl    %eax, -0x98(%rbp)
    0.00 :   1e67:           jl      0x1e36 <main+0xb41>
         : 888  ; /home/tlam/cs134/project2b/lab2_list.c:262
         : 889  ;     long long avg_locking_time = total_locking_time / total_operations;
    0.00 :   1e69:           movl    -0x88(%rbp), %eax
    0.00 :   1e6f:           movslq  %eax, %rbx
    0.00 :   1e72:           movq    -0x80(%rbp), %rax
    0.00 :   1e76:           cqto
    0.00 :   1e78:           idivq   %rbx
    0.00 :   1e7b:           movq    %rax, -0x58(%rbp)
         : 896  ; /home/tlam/cs134/project2b/lab2_list.c:264
         : 897  ;     printf("list-");
    0.00 :   1e7f:           leaq    0x23cb(%rip), %rax      # 0x4251 <_IO_stdin_used+0x251>
    0.00 :   1e86:           movq    %rax, %rdi
    0.00 :   1e89:           movl    $0x0, %eax
    0.00 :   1e8e:           callq   0x1090 <printf@plt>
         : 902  ; /home/tlam/cs134/project2b/lab2_list.c:265
         : 903  ;     if (opt_yield & INSERT_YIELD) printf("i");
    0.00 :   1e93:           movl    0x4383(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   1e99:           andl    $0x1, %eax
    0.00 :   1e9c:           testl   %eax, %eax
    0.00 :   1e9e:           je      0x1eaa <main+0xbb5>
    0.00 :   1ea0:           movl    $0x69, %edi
    0.00 :   1ea5:           callq   0x1040 <putchar@plt>
         : 910  ; /home/tlam/cs134/project2b/lab2_list.c:266
         : 911  ;     if (opt_yield & DELETE_YIELD) printf("d");
    0.00 :   1eaa:           movl    0x436c(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   1eb0:           andl    $0x2, %eax
    0.00 :   1eb3:           testl   %eax, %eax
    0.00 :   1eb5:           je      0x1ec1 <main+0xbcc>
    0.00 :   1eb7:           movl    $0x64, %edi
    0.00 :   1ebc:           callq   0x1040 <putchar@plt>
         : 918  ; /home/tlam/cs134/project2b/lab2_list.c:267
         : 919  ;     if (opt_yield & LOOKUP_YIELD) printf("l");
    0.00 :   1ec1:           movl    0x4355(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   1ec7:           andl    $0x4, %eax
    0.00 :   1eca:           testl   %eax, %eax
    0.00 :   1ecc:           je      0x1ed8 <main+0xbe3>
    0.00 :   1ece:           movl    $0x6c, %edi
    0.00 :   1ed3:           callq   0x1040 <putchar@plt>
         : 926  ; /home/tlam/cs134/project2b/lab2_list.c:268
         : 927  ;     if (opt_yield == 0) printf("none");
    0.00 :   1ed8:           movl    0x433e(%rip), %eax      # 0x621c <opt_yield>
    0.00 :   1ede:           testl   %eax, %eax
    0.00 :   1ee0:           jne     0x1ef6 <main+0xc01>
    0.00 :   1ee2:           leaq    0x236e(%rip), %rax      # 0x4257 <_IO_stdin_used+0x257>
    0.00 :   1ee9:           movq    %rax, %rdi
    0.00 :   1eec:           movl    $0x0, %eax
    0.00 :   1ef1:           callq   0x1090 <printf@plt>
         : 935  ; /home/tlam/cs134/project2b/lab2_list.c:270
         : 936  ;     printf("-");
    0.00 :   1ef6:           movl    $0x2d, %edi
    0.00 :   1efb:           callq   0x1040 <putchar@plt>
         : 939  ; /home/tlam/cs134/project2b/lab2_list.c:272
         : 940  ;     if (*sync_opt == 'n') {
    0.00 :   1f00:           movzbl  0x4211(%rip), %eax      # 0x6118 <sync_opt>
    0.00 :   1f07:           cmpb    $0x6e, %al
    0.00 :   1f09:           jne     0x1f21 <main+0xc2c>
         : 944  ; /home/tlam/cs134/project2b/lab2_list.c:273
         : 945  ;         printf("none");
    0.00 :   1f0b:           leaq    0x2345(%rip), %rax      # 0x4257 <_IO_stdin_used+0x257>
    0.00 :   1f12:           movq    %rax, %rdi
    0.00 :   1f15:           movl    $0x0, %eax
    0.00 :   1f1a:           callq   0x1090 <printf@plt>
    0.00 :   1f1f:           jmp     0x1f35 <main+0xc40>
         : 951  ; /home/tlam/cs134/project2b/lab2_list.c:275
         : 952  ;         printf(sync_opt);
    0.00 :   1f21:           leaq    0x41f0(%rip), %rax      # 0x6118 <sync_opt>
    0.00 :   1f28:           movq    %rax, %rdi
    0.00 :   1f2b:           movl    $0x0, %eax
    0.00 :   1f30:           callq   0x1090 <printf@plt>
         : 957  ; /home/tlam/cs134/project2b/lab2_list.c:278
         : 958  ;     printf(",%d,%d,%d,%d,%lld,%lld,%lld\n", threads, iterations, list_count,
    0.00 :   1f35:           movl    0x41e1(%rip), %ecx      # 0x611c <list_count>
    0.00 :   1f3b:           movl    0x41d3(%rip), %edx      # 0x6114 <iterations>
    0.00 :   1f41:           movl    0x41c9(%rip), %eax      # 0x6110 <threads>
    0.00 :   1f47:           movq    -0x68(%rbp), %rdi
    0.00 :   1f4b:           movl    -0x88(%rbp), %esi
    0.00 :   1f51:           pushq   -0x58(%rbp)
    0.00 :   1f54:           pushq   -0x60(%rbp)
    0.00 :   1f57:           movq    %rdi, %r9
    0.00 :   1f5a:           movl    %esi, %r8d
    0.00 :   1f5d:           movl    %eax, %esi
    0.00 :   1f5f:           leaq    0x22f6(%rip), %rax      # 0x425c <_IO_stdin_used+0x25c>
    0.00 :   1f66:           movq    %rax, %rdi
    0.00 :   1f69:           movl    $0x0, %eax
    0.00 :   1f6e:           callq   0x1090 <printf@plt>
    0.00 :   1f73:           addq    $0x10, %rsp
         : 974  ; /home/tlam/cs134/project2b/lab2_list.c:281
         : 975  ;     for (int i = 0; i < threads * iterations; i++) {
    0.00 :   1f77:           movl    $0x0, -0x94(%rbp)
    0.00 :   1f81:           jmp     0x1fb6 <main+0xcc1>
         : 978  ; /home/tlam/cs134/project2b/lab2_list.c:282
         : 979  ;         free((char*)randomElems[i].key);
    0.00 :   1f83:           movq    0x42ae(%rip), %rcx      # 0x6238 <randomElems>
    0.00 :   1f8a:           movl    -0x94(%rbp), %eax
    0.00 :   1f90:           movslq  %eax, %rdx
    0.00 :   1f93:           movq    %rdx, %rax
    0.00 :   1f96:           addq    %rax, %rax
    0.00 :   1f99:           addq    %rdx, %rax
    0.00 :   1f9c:           shlq    $0x3, %rax
    0.00 :   1fa0:           addq    %rcx, %rax
    0.00 :   1fa3:           movq    0x10(%rax), %rax
    0.00 :   1fa7:           movq    %rax, %rdi
    0.00 :   1faa:           callq   0x1030 <free@plt>
         : 991  ; /home/tlam/cs134/project2b/lab2_list.c:281
         : 992  ;     for (int i = 0; i < threads * iterations; i++) {
    0.00 :   1faf:           addl    $0x1, -0x94(%rbp)
    0.00 :   1fb6:           movl    0x4154(%rip), %edx      # 0x6110 <threads>
    0.00 :   1fbc:           movl    0x4152(%rip), %eax      # 0x6114 <iterations>
    0.00 :   1fc2:           imull   %edx, %eax
    0.00 :   1fc5:           cmpl    %eax, -0x94(%rbp)
    0.00 :   1fcb:           jl      0x1f83 <main+0xc8e>
         : 999  ; /home/tlam/cs134/project2b/lab2_list.c:286
         : 1000 ;     free(randomElems);
    0.00 :   1fcd:           movq    0x4264(%rip), %rax      # 0x6238 <randomElems>
    0.00 :   1fd4:           movq    %rax, %rdi
    0.00 :   1fd7:           callq   0x1030 <free@plt>
         : 1004 ; /home/tlam/cs134/project2b/lab2_list.c:287
         : 1005 ;     free(thread_ids);
    0.00 :   1fdc:           movq    -0x78(%rbp), %rax
    0.00 :   1fe0:           movq    %rax, %rdi
    0.00 :   1fe3:           callq   0x1030 <free@plt>
         : 1009 ; /home/tlam/cs134/project2b/lab2_list.c:288
         : 1010 ;     free(locking_times);
    0.00 :   1fe8:           movq    0x4241(%rip), %rax      # 0x6230 <locking_times>
    0.00 :   1fef:           movq    %rax, %rdi
    0.00 :   1ff2:           callq   0x1030 <free@plt>
         : 1014 ; /home/tlam/cs134/project2b/lab2_list.c:290
         : 1015 ;     for (int i = 0; i < list_count; i++) {
    0.00 :   1ff7:           movl    $0x0, -0x90(%rbp)
    0.00 :   2001:           jmp     0x2070 <main+0xd7b>
         : 1018 ; /home/tlam/cs134/project2b/lab2_list.c:291
         : 1019 ;         error = pthread_mutex_destroy(&locks[i]);
    0.00 :   2003:           movq    0x4216(%rip), %rcx      # 0x6220 <locks>
    0.00 :   200a:           movl    -0x90(%rbp), %eax
    0.00 :   2010:           movslq  %eax, %rdx
    0.00 :   2013:           movq    %rdx, %rax
    0.00 :   2016:           shlq    $0x2, %rax
    0.00 :   201a:           addq    %rdx, %rax
    0.00 :   201d:           shlq    $0x3, %rax
    0.00 :   2021:           addq    %rcx, %rax
    0.00 :   2024:           movq    %rax, %rdi
    0.00 :   2027:           callq   0x10a0 <pthread_mutex_destroy@plt>
    0.00 :   202c:           movl    %eax, 0x41e6(%rip)      # 0x6218 <error>
         : 1031 ; /home/tlam/cs134/project2b/lab2_list.c:292
         : 1032 ;         if (error != 0) {
    0.00 :   2032:           movl    0x41e0(%rip), %eax      # 0x6218 <error>
    0.00 :   2038:           testl   %eax, %eax
    0.00 :   203a:           je      0x2069 <main+0xd74>
         : 1036 ; /home/tlam/cs134/project2b/lab2_list.c:293
         : 1037 ;             fprintf(stderr, "Failed to destroy the mutex");
    0.00 :   203c:           movq    0x41bd(%rip), %rax      # 0x6200 <stderr@GLIBC_2.2.5>
    0.00 :   2043:           movq    %rax, %rcx
    0.00 :   2046:           movl    $0x1b, %edx
    0.00 :   204b:           movl    $0x1, %esi
    0.00 :   2050:           leaq    0x2222(%rip), %rax      # 0x4279 <_IO_stdin_used+0x279>
    0.00 :   2057:           movq    %rax, %rdi
    0.00 :   205a:           callq   0x11b0 <fwrite@plt>
         : 1045 ; /home/tlam/cs134/project2b/lab2_list.c:294
         : 1046 ;             exit(1);
    0.00 :   205f:           movl    $0x1, %edi
    0.00 :   2064:           callq   0x11a0 <exit@plt>
         : 1049 ; /home/tlam/cs134/project2b/lab2_list.c:290
         : 1050 ;     for (int i = 0; i < list_count; i++) {
    0.00 :   2069:           addl    $0x1, -0x90(%rbp)
    0.00 :   2070:           movl    0x40a6(%rip), %eax      # 0x611c <list_count>
    0.00 :   2076:           cmpl    %eax, -0x90(%rbp)
    0.00 :   207c:           jl      0x2003 <main+0xd0e>
         : 1055 ; /home/tlam/cs134/project2b/lab2_list.c:298
         : 1056 ;     exit(0);
    0.00 :   207e:           movl    $0x0, %edi
    0.00 :   2083:           callq   0x11a0 <exit@plt>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8112fec0 <smp_call_function_many_cond>:
         : 5                ; smp_call_function_many_cond():
    0.00 :   ffffffff8112fec0:       pushq   %rbp
    0.00 :   ffffffff8112fec1:       movq    %rsp, %rbp
    0.00 :   ffffffff8112fec4:       pushq   %r15
    0.00 :   ffffffff8112fec6:       pushq   %r14
    0.00 :   ffffffff8112fec8:       pushq   %r13
    0.00 :   ffffffff8112feca:       pushq   %r12
    0.00 :   ffffffff8112fecc:       pushq   %rbx
    0.00 :   ffffffff8112fecd:       movq    %r8, %rbx
    0.00 :   ffffffff8112fed0:       subq    $0x50, %rsp
    0.00 :   ffffffff8112fed4:       movq    %rdi, -0x38(%rbp)
    0.00 :   ffffffff8112fed8:       movq    %rsi, -0x50(%rbp)
    0.00 :   ffffffff8112fedc:       movq    %rdx, -0x30(%rbp)
    0.00 :   ffffffff8112fee0:       movl    %ecx, -0x44(%rbp)
    0.00 :   ffffffff8112fee3:       movl    %gs:0x7eef2822(%rip), %eax
    0.00 :   ffffffff8112feea:       movl    %eax, -0x48(%rbp)
    0.00 :   ffffffff8112feed:       movl    %eax, %r15d
    0.00 :   ffffffff8112fef0:       btq     %r15, 0x1236978(%rip) # 0xffffffff82366870 <__cpu_online_mask>
    0.00 :   ffffffff8112fef8:       movl    %gs:0x7eef2809(%rip), %eax
    0.00 :   ffffffff8112feff:       testl   $0xff0100, %eax # imm = 0xFF0100
    0.00 :   ffffffff8112ff04:       jne     0xffffffff8113018a <smp_call_function_many_cond+0x2ca>
    0.00 :   ffffffff8112ff0a:       testb   $0x2, -0x44(%rbp)
    0.00 :   ffffffff8112ff0e:       movb    $0x0, -0x51(%rbp)
    0.00 :   ffffffff8112ff12:       je      0xffffffff8112ff20 <smp_call_function_many_cond+0x60>
    0.00 :   ffffffff8112ff14:       movq    -0x38(%rbp), %rax
    0.00 :   ffffffff8112ff18:       btq     %r15, (%rax)
    0.00 :   ffffffff8112ff1c:       setb    -0x51(%rbp)
    0.00 :   ffffffff8112ff20:       movl    0x1236b3a(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8112ff26:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff8112ff2a:       movq    $-0x7dc99790, %rsi # imm = 0x82366870
    0.00 :   ffffffff8112ff31:       callq   0xffffffff815a06c0 <_find_first_and_bit>
    0.00 :   ffffffff8112ff36:       cmpl    %eax, -0x48(%rbp)
    0.00 :   ffffffff8112ff39:       movl    %eax, %edx
    0.00 :   ffffffff8112ff3b:       je      0xffffffff81130164 <smp_call_function_many_cond+0x2a4>
    0.00 :   ffffffff8112ff41:       movl    0x1236b19(%rip), %ecx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8112ff47:       cmpl    %ecx, %edx
    0.00 :   ffffffff8112ff49:       jb      0xffffffff8112fffb <smp_call_function_many_cond+0x13b>
    0.00 :   ffffffff8112ff4f:       cmpb    $0x0, -0x51(%rbp)
    0.00 :   ffffffff8112ff53:       je      0xffffffff8112ffb9 <smp_call_function_many_cond+0xf9>
    0.00 :   ffffffff8112ff55:       xorl    %r13d, %r13d
    0.00 :   ffffffff8112ff58:       xorl    %r12d, %r12d
    0.00 :   ffffffff8112ff5b:       testq   %rbx, %rbx
    0.00 :   ffffffff8112ff5e:       je      0xffffffff8112ffdc <smp_call_function_many_cond+0x11c>
    0.00 :   ffffffff8112ff60:       movq    -0x30(%rbp), %rsi
    0.00 :   ffffffff8112ff64:       movl    -0x48(%rbp), %edi
    0.00 :   ffffffff8112ff67:       callq   0xffffffff81b781e0 <__x86_indirect_thunk_rbx>
    0.00 :   ffffffff8112ff6c:       testb   %al, %al
    0.00 :   ffffffff8112ff6e:       jne     0xffffffff8112ffdc <smp_call_function_many_cond+0x11c>
    0.00 :   ffffffff8112ff70:       testb   %r12b, %r12b
    0.00 :   ffffffff8112ff73:       je      0xffffffff8112ffb9 <smp_call_function_many_cond+0xf9>
    0.00 :   ffffffff8112ff75:       leaq    0x8(%r13), %rbx
    0.00 :   ffffffff8112ff79:       xorl    %eax, %eax
    0.00 :   ffffffff8112ff7b:       movl    0x1236adf(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8112ff81:       movslq  %eax, %rdx
    0.00 :   ffffffff8112ff84:       movq    %rbx, %rdi
    0.00 :   ffffffff8112ff87:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff8112ff8c:       cmpl    0x1236ace(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8112ff92:       jae     0xffffffff8112ffb9 <smp_call_function_many_cond+0xf9>
    0.00 :   ffffffff8112ff94:       movslq  %eax, %rdx
    0.00 :   ffffffff8112ff97:       movq    (%r13), %rsi
    0.00 :   ffffffff8112ff9b:       addq    -0x7dedc720(,%rdx,8), %rsi
    0.00 :   ffffffff8112ffa3:       movl    0x8(%rsi), %edx
    0.00 :   ffffffff8112ffa6:       andl    $0x1, %edx
    0.00 :   ffffffff8112ffa9:       je      0xffffffff8112ffb5 <smp_call_function_many_cond+0xf5>
  100.00 :   ffffffff8112ffab:       pause
    0.00 :   ffffffff8112ffad:       movl    0x8(%rsi), %ecx
    0.00 :   ffffffff8112ffb0:       andl    $0x1, %ecx
    0.00 :   ffffffff8112ffb3:       jne     0xffffffff8112ffab <smp_call_function_many_cond+0xeb>
    0.00 :   ffffffff8112ffb5:       incl    %eax
    0.00 :   ffffffff8112ffb7:       jmp     0xffffffff8112ff7b <smp_call_function_many_cond+0xbb>
    0.00 :   ffffffff8112ffb9:       addq    $0x50, %rsp
    0.00 :   ffffffff8112ffbd:       popq    %rbx
    0.00 :   ffffffff8112ffbe:       popq    %r12
    0.00 :   ffffffff8112ffc0:       popq    %r13
    0.00 :   ffffffff8112ffc2:       popq    %r14
    0.00 :   ffffffff8112ffc4:       popq    %r15
    0.00 :   ffffffff8112ffc6:       popq    %rbp
    0.00 :   ffffffff8112ffc7:       xorl    %eax, %eax
    0.00 :   ffffffff8112ffc9:       xorl    %edx, %edx
    0.00 :   ffffffff8112ffcb:       xorl    %ecx, %ecx
    0.00 :   ffffffff8112ffcd:       xorl    %esi, %esi
    0.00 :   ffffffff8112ffcf:       xorl    %edi, %edi
    0.00 :   ffffffff8112ffd1:       xorl    %r8d, %r8d
    0.00 :   ffffffff8112ffd4:       xorl    %r9d, %r9d
    0.00 :   ffffffff8112ffd7:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8112ffdc:       pushfq
    0.00 :   ffffffff8112ffdd:       popq    %rbx
    0.00 :   ffffffff8112ffde:       cli
    0.00 :   ffffffff8112ffdf:       movq    -0x30(%rbp), %rdi
    0.00 :   ffffffff8112ffe3:       movq    -0x50(%rbp), %rax
    0.00 :   ffffffff8112ffe7:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8112ffec:       andb    $0x2, %bh
    0.00 :   ffffffff8112ffef:       je      0xffffffff8112ff70 <smp_call_function_many_cond+0xb0>
    0.00 :   ffffffff8112fff5:       sti
    0.00 :   ffffffff8112fff6:       jmp     0xffffffff8112ff70 <smp_call_function_many_cond+0xb0>
    0.00 :   ffffffff8112fffb:       movl    -0x44(%rbp), %eax
    0.00 :   ffffffff8112fffe:       movq    -0x38(%rbp), %rsi
    0.00 :   ffffffff81130002:       movq    $0x23f40, %r14  # imm = 0x23F40
    0.00 :   ffffffff81130009:       addq    %gs:0x7eee5a1f(%rip), %r14
    0.00 :   ffffffff81130011:       leaq    0x8(%r14), %r12
    0.00 :   ffffffff81130015:       movq    $-0x7dc99790, %rdx # imm = 0x82366870
    0.00 :   ffffffff8113001c:       movl    $0x0, -0x68(%rbp)
    0.00 :   ffffffff81130023:       andl    $0x1, %eax
    0.00 :   ffffffff81130026:       movq    %r12, %rdi
    0.00 :   ffffffff81130029:       movl    %eax, -0x58(%rbp)
    0.00 :   ffffffff8113002c:       callq   0xffffffff81595e80 <__bitmap_and>
    0.00 :   ffffffff81130031:       btrq    %r15, (%r12)
    0.00 :   ffffffff81130036:       leaq    0x18(%r14), %r9
    0.00 :   ffffffff8113003a:       xorl    %eax, %eax
    0.00 :   ffffffff8113003c:       movq    $0x23f00, %rcx  # imm = 0x23F00
    0.00 :   ffffffff81130043:       movq    $0x0, 0x18(%r14)
    0.00 :   ffffffff8113004b:       movq    $0x0, 0x20(%r14)
    0.00 :   ffffffff81130053:       movl    %eax, %edx
    0.00 :   ffffffff81130055:       movl    $0x0, -0x64(%rbp)
    0.00 :   ffffffff8113005c:       movq    %r14, -0x78(%rbp)
    0.00 :   ffffffff81130060:       movq    %r12, -0x38(%rbp)
    0.00 :   ffffffff81130064:       movq    %r9, -0x70(%rbp)
    0.00 :   ffffffff81130068:       movq    %rcx, -0x60(%rbp)
    0.00 :   ffffffff8113006c:       jmp     0xffffffff8113007d <smp_call_function_many_cond+0x1bd>
    0.00 :   ffffffff8113006e:       movl    %r15d, %eax
    0.00 :   ffffffff81130071:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff81130075:       btrq    %rax, (%rdi)
    0.00 :   ffffffff81130079:       leal    0x1(%r15), %edx
    0.00 :   ffffffff8113007d:       movl    0x12369dd(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff81130083:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff81130087:       movslq  %edx, %rdx
    0.00 :   ffffffff8113008a:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff8113008f:       cmpl    0x12369cb(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff81130095:       movq    %rax, %r15
    0.00 :   ffffffff81130098:       movl    %eax, %edi
    0.00 :   ffffffff8113009a:       jae     0xffffffff8113012d <smp_call_function_many_cond+0x26d>
    0.00 :   ffffffff811300a0:       movslq  %r15d, %r12
    0.00 :   ffffffff811300a3:       movq    (%r14), %r13
    0.00 :   ffffffff811300a6:       movq    -0x7dedc720(,%r12,8), %rax
    0.00 :   ffffffff811300ae:       testq   %rbx, %rbx
    0.00 :   ffffffff811300b1:       movq    %rax, -0x40(%rbp)
    0.00 :   ffffffff811300b5:       je      0xffffffff811300c4 <smp_call_function_many_cond+0x204>
    0.00 :   ffffffff811300b7:       movq    -0x30(%rbp), %rsi
    0.00 :   ffffffff811300bb:       callq   0xffffffff81b781e0 <__x86_indirect_thunk_rbx>
    0.00 :   ffffffff811300c0:       testb   %al, %al
    0.00 :   ffffffff811300c2:       je      0xffffffff8113006e <smp_call_function_many_cond+0x1ae>
    0.00 :   ffffffff811300c4:       movq    -0x40(%rbp), %rdi
    0.00 :   ffffffff811300c8:       addq    %r13, %rdi
    0.00 :   ffffffff811300cb:       movl    0x8(%rdi), %eax
    0.00 :   ffffffff811300ce:       testb   $0x1, %al
    0.00 :   ffffffff811300d0:       je      0xffffffff811300db <smp_call_function_many_cond+0x21b>
    0.00 :   ffffffff811300d2:       pause
    0.00 :   ffffffff811300d4:       movl    0x8(%rdi), %eax
    0.00 :   ffffffff811300d7:       testb   $0x1, %al
    0.00 :   ffffffff811300d9:       jne     0xffffffff811300d2 <smp_call_function_many_cond+0x212>
    0.00 :   ffffffff811300db:       orl     $0x1, 0x8(%rdi)
    0.00 :   ffffffff811300df:       movl    -0x58(%rbp), %eax
    0.00 :   ffffffff811300e2:       testl   %eax, %eax
    0.00 :   ffffffff811300e4:       je      0xffffffff811300ea <smp_call_function_many_cond+0x22a>
    0.00 :   ffffffff811300e6:       orl     $0x10, 0x8(%rdi)
    0.00 :   ffffffff811300ea:       movq    -0x50(%rbp), %rax
    0.00 :   ffffffff811300ee:       movq    -0x60(%rbp), %rdx
    0.00 :   ffffffff811300f2:       movq    %rdi, %rsi
    0.00 :   ffffffff811300f5:       movq    %rax, 0x10(%rdi)
    0.00 :   ffffffff811300f9:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff811300fd:       movq    %rax, 0x18(%rdi)
    0.00 :   ffffffff81130101:       addq    -0x7dedc720(,%r12,8), %rdx
    0.00 :   ffffffff81130109:       callq   0xffffffff815a10b0 <llist_add_batch>
    0.00 :   ffffffff8113010e:       testb   %al, %al
    0.00 :   ffffffff81130110:       je      0xffffffff81130079 <smp_call_function_many_cond+0x1b9>
    0.00 :   ffffffff81130116:       movq    -0x70(%rbp), %rdi
    0.00 :   ffffffff8113011a:       movl    %r15d, %eax
    0.00 :   ffffffff8113011d:       btsq    %rax, (%rdi)
    0.00 :   ffffffff81130121:       incl    -0x64(%rbp)
    0.00 :   ffffffff81130124:       movl    %r15d, -0x68(%rbp)
    0.00 :   ffffffff81130128:       jmp     0xffffffff81130079 <smp_call_function_many_cond+0x1b9>
    0.00 :   ffffffff8113012d:       cmpl    $0x1, -0x64(%rbp)
    0.00 :   ffffffff81130131:       movq    -0x78(%rbp), %r13
    0.00 :   ffffffff81130135:       movq    -0x70(%rbp), %r9
    0.00 :   ffffffff81130139:       je      0xffffffff81130191 <smp_call_function_many_cond+0x2d1>
    0.00 :   ffffffff8113013b:       jle     0xffffffff8113014c <smp_call_function_many_cond+0x28c>
    0.00 :   ffffffff8113013d:       movq    0x10eefec(%rip), %rax # 0xffffffff8221f130 <smp_ops+0x30>
    0.00 :   ffffffff81130144:       movq    %r9, %rdi
    0.00 :   ffffffff81130147:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff8113014c:       movzbl  -0x44(%rbp), %r12d
    0.00 :   ffffffff81130151:       andl    $0x1, %r12d
    0.00 :   ffffffff81130155:       cmpb    $0x0, -0x51(%rbp)
    0.00 :   ffffffff81130159:       je      0xffffffff8112ff70 <smp_call_function_many_cond+0xb0>
    0.00 :   ffffffff8113015f:       jmp     0xffffffff8112ff5b <smp_call_function_many_cond+0x9b>
    0.00 :   ffffffff81130164:       movl    -0x48(%rbp), %eax
    0.00 :   ffffffff81130167:       movl    0x12368f3(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff8113016d:       movq    $-0x7dc99790, %rsi # imm = 0x82366870
    0.00 :   ffffffff81130174:       movq    -0x38(%rbp), %rdi
    0.00 :   ffffffff81130178:       leal    0x1(%rax), %ecx
    0.00 :   ffffffff8113017b:       movslq  %ecx, %rcx
    0.00 :   ffffffff8113017e:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff81130183:       movl    %eax, %edx
    0.00 :   ffffffff81130185:       jmp     0xffffffff8112ff41 <smp_call_function_many_cond+0x81>
    0.00 :   ffffffff8113018a:       ud2
    0.00 :   ffffffff8113018c:       jmp     0xffffffff8112ff0a <smp_call_function_many_cond+0x4a>
    0.00 :   ffffffff81130191:       movl    -0x68(%rbp), %edi
    0.00 :   ffffffff81130194:       callq   0xffffffff810abce0 <call_function_single_prep_ipi>
    0.00 :   ffffffff81130199:       testb   %al, %al
    0.00 :   ffffffff8113019b:       je      0xffffffff8113014c <smp_call_function_many_cond+0x28c>
    0.00 :   ffffffff8113019d:       movl    -0x68(%rbp), %edi
    0.00 :   ffffffff811301a0:       movq    0x10eef91(%rip), %rax # 0xffffffff8221f138 <smp_ops+0x38>
    0.00 :   ffffffff811301a7:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811301ac:       jmp     0xffffffff8113014c <smp_call_function_many_cond+0x28c>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81279fb0 <deactivate_slab>:
         : 5                ; deactivate_slab():
    0.00 :   ffffffff81279fb0:       pushq   %rbp
    0.00 :   ffffffff81279fb1:       movq    %rsp, %rbp
    0.00 :   ffffffff81279fb4:       pushq   %r15
    0.00 :   ffffffff81279fb6:       pushq   %r14
    0.00 :   ffffffff81279fb8:       movq    %rdi, %r14
    0.00 :   ffffffff81279fbb:       pushq   %r13
    0.00 :   ffffffff81279fbd:       pushq   %r12
    0.00 :   ffffffff81279fbf:       movq    %rsi, %r12
    0.00 :   ffffffff81279fc2:       pushq   %rbx
    0.00 :   ffffffff81279fc3:       movq    %rdx, %rbx
    0.00 :   ffffffff81279fc6:       subq    $0xa8, %rsp
    0.00 :   ffffffff81279fcd:       movq    %rdx, -0xb8(%rbp)
    0.00 :   ffffffff81279fd4:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff81279fd9:       movq    (%rsi), %rax
    0.00 :   ffffffff81279fdc:       leaq    -0xa8(%rbp), %rdx
    0.00 :   ffffffff81279fe3:       movl    $0x8, %ecx
    0.00 :   ffffffff81279fe8:       shrq    $0x3a, %rax
    0.00 :   ffffffff81279fec:       movq    0xd8(%rdi,%rax,8), %rax
    0.00 :   ffffffff81279ff4:       movq    %rdx, %rdi
    0.00 :   ffffffff81279ff7:       leaq    -0x68(%rbp), %rdx
    0.00 :   ffffffff81279ffb:       movq    %rax, -0xb0(%rbp)
    0.00 :   ffffffff8127a002:       xorl    %eax, %eax
    0.00 :   ffffffff8127a004:       cmpq    $0x1, 0x20(%rsi)
    0.00 :   ffffffff8127a009:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff8127a00c:       movl    $0x8, %ecx
    0.00 :   ffffffff8127a011:       movq    %rdx, %rdi
    0.00 :   ffffffff8127a014:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff8127a017:       sbbl    %eax, %eax
    0.00 :   ffffffff8127a019:       addl    $0x10, %eax
    0.00 :   ffffffff8127a01c:       testq   %rbx, %rbx
    0.00 :   ffffffff8127a01f:       movl    %eax, -0xcc(%rbp)
    0.00 :   ffffffff8127a025:       je      0xffffffff8127a350 <deactivate_slab+0x3a0>
    0.00 :   ffffffff8127a02b:       movl    0x8(%r14), %eax
    0.00 :   ffffffff8127a02f:       subq    0xea81b2(%rip), %rsi # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff8127a036:       xorl    %r15d, %r15d
    0.00 :   ffffffff8127a039:       movl    0x28(%r14), %r10d
    0.00 :   ffffffff8127a03d:       movq    0xb8(%r14), %r9
    0.00 :   ffffffff8127a044:       xorl    %r13d, %r13d
    0.00 :   ffffffff8127a047:       movl    %eax, %edi
    0.00 :   ffffffff8127a049:       andl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff8127a04e:       shrl    $0x8, %edi
    0.00 :   ffffffff8127a051:       sarq    $0x6, %rsi
    0.00 :   ffffffff8127a055:       movl    %eax, %r8d
    0.00 :   ffffffff8127a058:       xorl    $0x1, %edi
    0.00 :   ffffffff8127a05b:       shlq    $0xc, %rsi
    0.00 :   ffffffff8127a05f:       addq    0xea8192(%rip), %rsi # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff8127a066:       andl    $0x1, %edi
    0.00 :   ffffffff8127a069:       jmp     0xffffffff8127a0c2 <deactivate_slab+0x112>
    0.00 :   ffffffff8127a06b:       testb   %dil, %dil
    0.00 :   ffffffff8127a06e:       jne     0xffffffff8127a0da <deactivate_slab+0x12a>
    0.00 :   ffffffff8127a070:       testl   %r8d, %r8d
    0.00 :   ffffffff8127a073:       movq    %rcx, %rax
    0.00 :   ffffffff8127a076:       je      0xffffffff8127a07f <deactivate_slab+0xcf>
    0.00 :   ffffffff8127a078:       movl    0x58(%r14), %edx
    0.00 :   ffffffff8127a07c:       subq    %rdx, %rax
    0.00 :   ffffffff8127a07f:       cmpq    %rsi, %rax
    0.00 :   ffffffff8127a082:       jb      0xffffffff8127a1d4 <deactivate_slab+0x224>
    0.00 :   ffffffff8127a088:       movzwl  0x2a(%r12), %edx
    0.00 :   ffffffff8127a08e:       movl    0x18(%r14), %r11d
    0.00 :   ffffffff8127a092:       andl    $0x7fff, %edx   # imm = 0x7FFF
    0.00 :   ffffffff8127a098:       imull   %r11d, %edx
    0.00 :   ffffffff8127a09c:       addq    %rsi, %rdx
    0.00 :   ffffffff8127a09f:       cmpq    %rdx, %rax
    0.00 :   ffffffff8127a0a2:       jae     0xffffffff8127a1d4 <deactivate_slab+0x224>
    0.00 :   ffffffff8127a0a8:       subq    %rsi, %rax
    0.00 :   ffffffff8127a0ab:       cqto
    0.00 :   ffffffff8127a0ad:       idivq   %r11
    0.00 :   ffffffff8127a0b0:       testq   %rdx, %rdx
    0.00 :   ffffffff8127a0b3:       jne     0xffffffff8127a1d4 <deactivate_slab+0x224>
    0.00 :   ffffffff8127a0b9:       incl    %r13d
    0.00 :   ffffffff8127a0bc:       movq    %rbx, %r15
    0.00 :   ffffffff8127a0bf:       movq    %rcx, %rbx
    0.00 :   ffffffff8127a0c2:       leaq    (%rbx,%r10), %rax
    0.00 :   ffffffff8127a0c6:       movq    (%rax), %rdx
    0.00 :   ffffffff8127a0c9:       bswapq  %rax
    0.00 :   ffffffff8127a0cc:       xorq    %r9, %rdx
    0.00 :   ffffffff8127a0cf:       movq    %rdx, %rcx
    0.00 :   ffffffff8127a0d2:       xorq    %rax, %rcx
    0.00 :   ffffffff8127a0d5:       cmpq    %rax, %rdx
  100.00 :   ffffffff8127a0d8:       jne     0xffffffff8127a06b <deactivate_slab+0xbb>
    0.00 :   ffffffff8127a0da:       incl    %r13d
    0.00 :   ffffffff8127a0dd:       cmpq    %rax, %rdx
    0.00 :   ffffffff8127a0e0:       jne     0xffffffff8127a0bc <deactivate_slab+0x10c>
    0.00 :   ffffffff8127a0e2:       movq    %rbx, %r15
    0.00 :   ffffffff8127a0e5:       xorl    %esi, %esi
    0.00 :   ffffffff8127a0e7:       movq    0x20(%r12), %r8
    0.00 :   ffffffff8127a0ec:       movq    0x28(%r12), %rdx
    0.00 :   ffffffff8127a0f1:       testq   %r15, %r15
    0.00 :   ffffffff8127a0f4:       movq    %rdx, -0x80(%rbp)
    0.00 :   ffffffff8127a0f8:       movl    %edx, %ecx
    0.00 :   ffffffff8127a0fa:       movq    %r8, %rbx
    0.00 :   ffffffff8127a0fd:       je      0xffffffff8127a133 <deactivate_slab+0x183>
    0.00 :   ffffffff8127a0ff:       movl    0x28(%r14), %eax
    0.00 :   ffffffff8127a103:       subl    %r13d, %ecx
    0.00 :   ffffffff8127a106:       movw    %cx, -0x80(%rbp)
    0.00 :   ffffffff8127a10a:       addq    %r15, %rax
    0.00 :   ffffffff8127a10d:       cmpq    %r15, %r8
    0.00 :   ffffffff8127a110:       je      0xffffffff8127a2c8 <deactivate_slab+0x318>
    0.00 :   ffffffff8127a116:       movq    0xb8(%r14), %rdi
    0.00 :   ffffffff8127a11d:       movq    %rax, %r9
    0.00 :   ffffffff8127a120:       movq    -0xb8(%rbp), %rbx
    0.00 :   ffffffff8127a127:       bswapq  %r9
    0.00 :   ffffffff8127a12a:       xorq    %r8, %rdi
    0.00 :   ffffffff8127a12d:       xorq    %r9, %rdi
    0.00 :   ffffffff8127a130:       movq    %rdi, (%rax)
    0.00 :   ffffffff8127a133:       andb    $0x7f, -0x7d(%rbp)
    0.00 :   ffffffff8127a137:       testw   %cx, %cx
    0.00 :   ffffffff8127a13a:       jne     0xffffffff8127a152 <deactivate_slab+0x1a2>
    0.00 :   ffffffff8127a13c:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff8127a143:       movq    0x10(%r14), %rcx
    0.00 :   ffffffff8127a147:       movl    $0x2, %edi
    0.00 :   ffffffff8127a14c:       cmpq    %rcx, 0x8(%rax)
    0.00 :   ffffffff8127a150:       jae     0xffffffff8127a18c <deactivate_slab+0x1dc>
    0.00 :   ffffffff8127a152:       testq   %rbx, %rbx
    0.00 :   ffffffff8127a155:       movl    $0x3, %edi
    0.00 :   ffffffff8127a15a:       je      0xffffffff8127a18c <deactivate_slab+0x1dc>
    0.00 :   ffffffff8127a15c:       movq    -0xb0(%rbp), %rdi
    0.00 :   ffffffff8127a163:       movq    %rdx, -0xc8(%rbp)
    0.00 :   ffffffff8127a16a:       movq    %r8, -0xc0(%rbp)
    0.00 :   ffffffff8127a171:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff8127a176:       movq    -0xc8(%rbp), %rdx
    0.00 :   ffffffff8127a17d:       movq    -0xc0(%rbp), %r8
    0.00 :   ffffffff8127a184:       movq    %rax, %rsi
    0.00 :   ffffffff8127a187:       movl    $0x1, %edi
    0.00 :   ffffffff8127a18c:       testb   $0x40, 0xb(%r14)
    0.00 :   ffffffff8127a191:       movq    -0x80(%rbp), %rcx
    0.00 :   ffffffff8127a195:       je      0xffffffff8127a21b <deactivate_slab+0x26b>
    0.00 :   ffffffff8127a19b:       movq    %r8, %rax
    0.00 :   ffffffff8127a19e:       lock
    0.00 :   ffffffff8127a19f:       cmpxchg16b      0x20(%r12)
    0.00 :   ffffffff8127a1a5:       je      0xffffffff8127a28e <deactivate_slab+0x2de>
    0.00 :   ffffffff8127a1ab:       pause
    0.00 :   ffffffff8127a1ad:       decl    %edi
    0.00 :   ffffffff8127a1af:       jne     0xffffffff8127a0e7 <deactivate_slab+0x137>
    0.00 :   ffffffff8127a1b5:       movq    -0xb0(%rbp), %rdi
    0.00 :   ffffffff8127a1bc:       movq    %rsi, -0xc0(%rbp)
    0.00 :   ffffffff8127a1c3:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff8127a1c8:       movq    -0xc0(%rbp), %rsi
    0.00 :   ffffffff8127a1cf:       jmp     0xffffffff8127a0e7 <deactivate_slab+0x137>
    0.00 :   ffffffff8127a1d4:       movq    %r14, %rdi
    0.00 :   ffffffff8127a1d7:       movq    $-0x7df640cc, %rdx # imm = 0x8209BF34
    0.00 :   ffffffff8127a1de:       movq    $-0x7df21524, %rsi # imm = 0x820DEADC
    0.00 :   ffffffff8127a1e5:       callq   0xffffffff81275c60 <slab_bug>
    0.00 :   ffffffff8127a1ea:       movq    %rbx, %rdx
    0.00 :   ffffffff8127a1ed:       movq    %r12, %rsi
    0.00 :   ffffffff8127a1f0:       movq    %r14, %rdi
    0.00 :   ffffffff8127a1f3:       callq   0xffffffff81279430 <print_trailer>
    0.00 :   ffffffff8127a1f8:       movl    $0x1, %esi
    0.00 :   ffffffff8127a1fd:       movl    $0x5, %edi
    0.00 :   ffffffff8127a202:       callq   0xffffffff8106a5f0 <add_taint>
    0.00 :   ffffffff8127a207:       movq    $-0x7df6400d, %rsi # imm = 0x8209BFF3
    0.00 :   ffffffff8127a20e:       movq    %r14, %rdi
    0.00 :   ffffffff8127a211:       callq   0xffffffff81275d40 <slab_fix>
    0.00 :   ffffffff8127a216:       jmp     0xffffffff8127a0e5 <deactivate_slab+0x135>
    0.00 :   ffffffff8127a21b:       pushfq
    0.00 :   ffffffff8127a21c:       popq    %r10
    0.00 :   ffffffff8127a21e:       cli
    0.00 :   ffffffff8127a21f:       incl    %gs:0x7eda84e2(%rip)
    0.00 :   ffffffff8127a226:       lock
    0.00 :   ffffffff8127a227:       btsq    $0x0, (%r12)
    0.00 :   ffffffff8127a22d:       jb      0xffffffff8127a2ca <deactivate_slab+0x31a>
    0.00 :   ffffffff8127a233:       cmpq    0x20(%r12), %r8
    0.00 :   ffffffff8127a238:       je      0xffffffff8127a260 <deactivate_slab+0x2b0>
    0.00 :   ffffffff8127a23a:       btrq    $0x0, (%r12)
    0.00 :   ffffffff8127a240:       decl    %gs:0x7eda84c1(%rip)
    0.00 :   ffffffff8127a247:       je      0xffffffff8127a2e6 <deactivate_slab+0x336>
    0.00 :   ffffffff8127a24d:       testl   $0x200, %r10d   # imm = 0x200
    0.00 :   ffffffff8127a254:       je      0xffffffff8127a1ab <deactivate_slab+0x1fb>
    0.00 :   ffffffff8127a25a:       sti
    0.00 :   ffffffff8127a25b:       jmp     0xffffffff8127a1ab <deactivate_slab+0x1fb>
    0.00 :   ffffffff8127a260:       cmpq    0x28(%r12), %rdx
    0.00 :   ffffffff8127a265:       jne     0xffffffff8127a23a <deactivate_slab+0x28a>
    0.00 :   ffffffff8127a267:       movq    %rbx, 0x20(%r12)
    0.00 :   ffffffff8127a26c:       movq    %rcx, 0x28(%r12)
    0.00 :   ffffffff8127a271:       btrq    $0x0, (%r12)
    0.00 :   ffffffff8127a277:       decl    %gs:0x7eda848a(%rip)
    0.00 :   ffffffff8127a27e:       je      0xffffffff8127a37c <deactivate_slab+0x3cc>
    0.00 :   ffffffff8127a284:       testl   $0x200, %r10d   # imm = 0x200
    0.00 :   ffffffff8127a28b:       je      0xffffffff8127a28e <deactivate_slab+0x2de>
    0.00 :   ffffffff8127a28d:       sti
    0.00 :   ffffffff8127a28e:       cmpl    $0x1, %edi
    0.00 :   ffffffff8127a291:       je      0xffffffff8127a2f5 <deactivate_slab+0x345>
    0.00 :   ffffffff8127a293:       cmpl    $0x2, %edi
    0.00 :   ffffffff8127a296:       je      0xffffffff8127a340 <deactivate_slab+0x390>
    0.00 :   ffffffff8127a29c:       addq    $0xa8, %rsp
    0.00 :   ffffffff8127a2a3:       popq    %rbx
    0.00 :   ffffffff8127a2a4:       popq    %r12
    0.00 :   ffffffff8127a2a6:       popq    %r13
    0.00 :   ffffffff8127a2a8:       popq    %r14
    0.00 :   ffffffff8127a2aa:       popq    %r15
    0.00 :   ffffffff8127a2ac:       popq    %rbp
    0.00 :   ffffffff8127a2ad:       xorl    %eax, %eax
    0.00 :   ffffffff8127a2af:       xorl    %edx, %edx
    0.00 :   ffffffff8127a2b1:       xorl    %ecx, %ecx
    0.00 :   ffffffff8127a2b3:       xorl    %esi, %esi
    0.00 :   ffffffff8127a2b5:       xorl    %edi, %edi
    0.00 :   ffffffff8127a2b7:       xorl    %r8d, %r8d
    0.00 :   ffffffff8127a2ba:       xorl    %r9d, %r9d
    0.00 :   ffffffff8127a2bd:       xorl    %r10d, %r10d
    0.00 :   ffffffff8127a2c0:       xorl    %r11d, %r11d
    0.00 :   ffffffff8127a2c3:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8127a2c8:       ud2
    0.00 :   ffffffff8127a2ca:       decl    %gs:0x7eda8437(%rip)
    0.00 :   ffffffff8127a2d1:       je      0xffffffff8127a372 <deactivate_slab+0x3c2>
    0.00 :   ffffffff8127a2d7:       pause
    0.00 :   ffffffff8127a2d9:       movq    (%r12), %rax
    0.00 :   ffffffff8127a2dd:       testb   $0x1, %al
    0.00 :   ffffffff8127a2df:       jne     0xffffffff8127a2d7 <deactivate_slab+0x327>
    0.00 :   ffffffff8127a2e1:       jmp     0xffffffff8127a21f <deactivate_slab+0x26f>
    0.00 :   ffffffff8127a2e6:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff8127a2eb:       nopl    (%rax,%rax)
    0.00 :   ffffffff8127a2f0:       jmp     0xffffffff8127a24d <deactivate_slab+0x29d>
    0.00 :   ffffffff8127a2f5:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff8127a2fc:       movq    -0xb0(%rbp), %rbx
    0.00 :   ffffffff8127a303:       incq    0x8(%rax)
    0.00 :   ffffffff8127a307:       cmpl    $0x10, -0xcc(%rbp)
    0.00 :   ffffffff8127a30e:       leaq    0x10(%rax), %rdx
    0.00 :   ffffffff8127a312:       leaq    0x10(%r12), %rax
    0.00 :   ffffffff8127a317:       je      0xffffffff8127a35b <deactivate_slab+0x3ab>
    0.00 :   ffffffff8127a319:       movq    0x10(%rbx), %rcx
    0.00 :   ffffffff8127a31d:       movq    %rax, 0x8(%rcx)
    0.00 :   ffffffff8127a321:       movq    %rcx, 0x10(%r12)
    0.00 :   ffffffff8127a326:       movq    %rdx, 0x18(%r12)
    0.00 :   ffffffff8127a32b:       movq    %rax, 0x10(%rbx)
    0.00 :   ffffffff8127a32f:       movq    -0xb0(%rbp), %rdi
    0.00 :   ffffffff8127a336:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff8127a33b:       jmp     0xffffffff8127a29c <deactivate_slab+0x2ec>
    0.00 :   ffffffff8127a340:       movq    %r12, %rsi
    0.00 :   ffffffff8127a343:       movq    %r14, %rdi
    0.00 :   ffffffff8127a346:       callq   0xffffffff81279f60 <discard_slab>
    0.00 :   ffffffff8127a34b:       jmp     0xffffffff8127a29c <deactivate_slab+0x2ec>
    0.00 :   ffffffff8127a350:       xorl    %r15d, %r15d
    0.00 :   ffffffff8127a353:       xorl    %r13d, %r13d
    0.00 :   ffffffff8127a356:       jmp     0xffffffff8127a0e5 <deactivate_slab+0x135>
    0.00 :   ffffffff8127a35b:       movq    0x18(%rbx), %rcx
    0.00 :   ffffffff8127a35f:       movq    %rax, 0x18(%rbx)
    0.00 :   ffffffff8127a363:       movq    %rdx, 0x10(%r12)
    0.00 :   ffffffff8127a368:       movq    %rcx, 0x18(%r12)
    0.00 :   ffffffff8127a36d:       movq    %rax, (%rcx)
    0.00 :   ffffffff8127a370:       jmp     0xffffffff8127a32f <deactivate_slab+0x37f>
    0.00 :   ffffffff8127a372:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff8127a377:       jmp     0xffffffff8127a2d7 <deactivate_slab+0x327>
    0.00 :   ffffffff8127a37c:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff8127a381:       jmp     0xffffffff8127a284 <deactivate_slab+0x2d4>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810d27f0 <calc_global_load_tick>:
         : 5                ; calc_global_load_tick():
    0.00 :   ffffffff810d27f0:       pushq   %rbp
    0.00 :   ffffffff810d27f1:       movq    %rsp, %rbp
    0.00 :   ffffffff810d27f4:       subq    $0x8, %rsp
    0.00 :   ffffffff810d27f8:       movq    0xb30(%rdi), %rdx
  100.00 :   ffffffff810d27ff:       movq    $0x0, -0x8(%rbp)
    0.00 :   ffffffff810d2807:       movq    0x11351b2(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810d280e:       cmpq    %rdx, %rax
    0.00 :   ffffffff810d2811:       js      0xffffffff810d2853 <calc_global_load_tick+0x63>
    0.00 :   ffffffff810d2813:       movslq  0x968(%rdi), %rcx
    0.00 :   ffffffff810d281a:       movl    0x4(%rdi), %eax
    0.00 :   ffffffff810d281d:       addq    %rcx, %rax
    0.00 :   ffffffff810d2820:       movq    0xb38(%rdi), %rcx
    0.00 :   ffffffff810d2827:       cmpq    %rcx, %rax
    0.00 :   ffffffff810d282a:       je      0xffffffff810d2845 <calc_global_load_tick+0x55>
    0.00 :   ffffffff810d282c:       movq    %rax, 0xb38(%rdi)
    0.00 :   ffffffff810d2833:       subq    %rcx, %rax
    0.00 :   ffffffff810d2836:       lock
    0.00 :   ffffffff810d2837:       addq    %rax, 0x15b9e12(%rip) # 0xffffffff8268c650 <calc_load_tasks>
    0.00 :   ffffffff810d283e:       movq    0xb30(%rdi), %rdx
    0.00 :   ffffffff810d2845:       addq    $0x1389, %rdx   # imm = 0x1389
    0.00 :   ffffffff810d284c:       movq    %rdx, 0xb30(%rdi)
    0.00 :   ffffffff810d2853:       leave
    0.00 :   ffffffff810d2854:       xorl    %eax, %eax
    0.00 :   ffffffff810d2856:       xorl    %edx, %edx
    0.00 :   ffffffff810d2858:       xorl    %ecx, %ecx
    0.00 :   ffffffff810d285a:       xorl    %edi, %edi
    0.00 :   ffffffff810d285c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811d69c0 <perf_event_alloc>:
         : 5                ; perf_event_alloc():
    0.00 :   ffffffff811d69c0:       pushq   %rbp
    0.00 :   ffffffff811d69c1:       movq    %rsp, %rbp
    0.00 :   ffffffff811d69c4:       pushq   %r15
    0.00 :   ffffffff811d69c6:       movq    %r8, %r15
    0.00 :   ffffffff811d69c9:       pushq   %r14
    0.00 :   ffffffff811d69cb:       pushq   %r13
    0.00 :   ffffffff811d69cd:       movq    %r9, %r13
    0.00 :   ffffffff811d69d0:       pushq   %r12
    0.00 :   ffffffff811d69d2:       movq    %rdx, %r12
    0.00 :   ffffffff811d69d5:       pushq   %rbx
    0.00 :   ffffffff811d69d6:       movl    %esi, %ebx
    0.00 :   ffffffff811d69d8:       subq    $0x48, %rsp
    0.00 :   ffffffff811d69dc:       movq    %rdi, -0x30(%rbp)
    0.00 :   ffffffff811d69e0:       movq    0x10(%rbp), %r14
    0.00 :   ffffffff811d69e4:       movq    %rcx, -0x38(%rbp)
    0.00 :   ffffffff811d69e8:       testq   %rdx, %rdx
    0.00 :   ffffffff811d69eb:       sete    %al
    0.00 :   ffffffff811d69ee:       cmpl    0x119006c(%rip), %esi # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff811d69f4:       jb      0xffffffff811d701e <perf_event_alloc+0x65e>
    0.00 :   ffffffff811d69fa:       cmpl    $-0x1, %esi
    0.00 :   ffffffff811d69fd:       jne     0xffffffff811d7269 <perf_event_alloc+0x8a9>
    0.00 :   ffffffff811d6a03:       testb   %al, %al
    0.00 :   ffffffff811d6a05:       jne     0xffffffff811d7269 <perf_event_alloc+0x8a9>
    0.00 :   ffffffff811d6a0b:       movl    $0xffffffff, %edx # imm = 0xFFFFFFFF
    0.00 :   ffffffff811d6a10:       movq    0x14fb5f1(%rip), %rdi # 0xffffffff826d2008 <perf_event_cache>
    0.00 :   ffffffff811d6a17:       movl    $0xdc0, %esi    # imm = 0xDC0
    0.00 :   ffffffff811d6a1c:       callq   0xffffffff8127bc40 <kmem_cache_alloc_node>
    0.00 :   ffffffff811d6a21:       testq   %rax, %rax
    0.00 :   ffffffff811d6a24:       movq    %rax, %r10
    0.00 :   ffffffff811d6a27:       je      0xffffffff811d7873 <perf_event_alloc+0xeb3>
    0.00 :   ffffffff811d6a2d:       movq    -0x38(%rbp), %rax
    0.00 :   ffffffff811d6a31:       leaq    0x250(%r10), %rdi
    0.00 :   ffffffff811d6a38:       movq    $-0x7d92e040, %rdx # imm = 0x826D1FC0
    0.00 :   ffffffff811d6a3f:       movq    $-0x7df6a951, %rsi # imm = 0x820956AF
    0.00 :   ffffffff811d6a46:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d6a4a:       testq   %rax, %rax
    0.00 :   ffffffff811d6a4d:       cmoveq  %r10, %rax
    0.00 :   ffffffff811d6a51:       movq    %rax, -0x38(%rbp)
    0.00 :   ffffffff811d6a55:       callq   0xffffffff810d75e0 <__mutex_init>
    0.00 :   ffffffff811d6a5a:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6a5e:       movq    $-0x7d92e040, %rdx # imm = 0x826D1FC0
    0.00 :   ffffffff811d6a65:       movq    $-0x7df6a93d, %rsi # imm = 0x820956C3
    0.00 :   ffffffff811d6a6c:       leaq    0x270(%r10), %rax
    0.00 :   ffffffff811d6a73:       leaq    0x2f8(%r10), %rdi
    0.00 :   ffffffff811d6a7a:       movq    $0x0, 0x48(%r10)
    0.00 :   ffffffff811d6a82:       movq    $0x0, 0x60(%r10)
    0.00 :   ffffffff811d6a8a:       movq    $0x0, 0x68(%r10)
    0.00 :   ffffffff811d6a92:       movq    %rax, 0x270(%r10)
    0.00 :   ffffffff811d6a99:       movq    %rax, 0x278(%r10)
    0.00 :   ffffffff811d6aa0:       leaq    0x10(%r10), %rax
    0.00 :   ffffffff811d6aa4:       movq    %r10, (%r10)
    0.00 :   ffffffff811d6aa7:       movq    %r10, 0x8(%r10)
    0.00 :   ffffffff811d6aab:       movq    %rax, 0x10(%r10)
    0.00 :   ffffffff811d6aaf:       movq    %rax, 0x18(%r10)
    0.00 :   ffffffff811d6ab3:       leaq    0x20(%r10), %rax
    0.00 :   ffffffff811d6ab7:       movq    %rax, 0x20(%r10)
    0.00 :   ffffffff811d6abb:       movq    %rax, 0x28(%r10)
    0.00 :   ffffffff811d6abf:       leaq    0x30(%r10), %rax
    0.00 :   ffffffff811d6ac3:       movq    %rax, 0x30(%r10)
    0.00 :   ffffffff811d6ac7:       leaq    0x2d8(%r10), %rax
    0.00 :   ffffffff811d6ace:       movq    %rax, 0x2d8(%r10)
    0.00 :   ffffffff811d6ad5:       movq    %rax, 0x2e0(%r10)
    0.00 :   ffffffff811d6adc:       leaq    0x70(%r10), %rax
    0.00 :   ffffffff811d6ae0:       movq    %rax, 0x70(%r10)
    0.00 :   ffffffff811d6ae4:       movq    %rax, 0x78(%r10)
    0.00 :   ffffffff811d6ae8:       leaq    0x368(%r10), %rax
    0.00 :   ffffffff811d6aef:       movq    %rax, 0x368(%r10)
    0.00 :   ffffffff811d6af6:       movq    %rax, 0x370(%r10)
    0.00 :   ffffffff811d6afd:       callq   0xffffffff810cd740 <__init_waitqueue_head>
    0.00 :   ffffffff811d6b02:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6b06:       movq    $-0x7d92e040, %rdx # imm = 0x826D1FC0
    0.00 :   ffffffff811d6b0d:       movq    $-0x7df6a92f, %rsi # imm = 0x820956D1
    0.00 :   ffffffff811d6b14:       leaq    0x2a8(%r10), %rdi
    0.00 :   ffffffff811d6b1b:       movq    $0x0, 0x330(%r10)
    0.00 :   ffffffff811d6b26:       movq    $0x0, 0x338(%r10)
    0.00 :   ffffffff811d6b31:       movq    $0x0, 0x348(%r10)
    0.00 :   ffffffff811d6b3c:       movq    $-0x7ee212e0, 0x340(%r10) # imm = 0x811DED20
    0.00 :   ffffffff811d6b47:       movq    $-0x7ee24130, 0x358(%r10) # imm = 0x811DBED0
    0.00 :   ffffffff811d6b52:       callq   0xffffffff810d75e0 <__mutex_init>
    0.00 :   ffffffff811d6b57:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6b5b:       movq    -0x30(%rbp), %rsi
    0.00 :   ffffffff811d6b5f:       movl    $0x11, %ecx
    0.00 :   ffffffff811d6b64:       movq    -0x38(%rbp), %rax
    0.00 :   ffffffff811d6b68:       movl    %ebx, 0x28c(%r10)
    0.00 :   ffffffff811d6b6f:       leaq    0xd8(%r10), %rdi
    0.00 :   ffffffff811d6b76:       movl    $0x0, 0x378(%r10)
    0.00 :   ffffffff811d6b81:       movq    $0x1, 0x238(%r10)
    0.00 :   ffffffff811d6b8c:       rep             movsq   (%rsi), %es:(%rdi)
    0.00 :   ffffffff811d6b8f:       movq    %rax, 0x90(%r10)
    0.00 :   ffffffff811d6b96:       movq    $0x0, 0x98(%r10)
    0.00 :   ffffffff811d6ba1:       movl    $0xffffffff, 0x288(%r10) # imm = 0xFFFFFFFF
    0.00 :   ffffffff811d6bac:       movq    %r15, 0x280(%r10)
    0.00 :   ffffffff811d6bb3:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff811d6bbc:       callq   0xffffffff81093250 <task_active_pid_ns>
    0.00 :   ffffffff811d6bc1:       cmpq    $-0x7ddcb3c0, %rax # imm = 0x82234C40
    0.00 :   ffffffff811d6bc7:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6bcb:       movq    %rax, %rbx
    0.00 :   ffffffff811d6bce:       je      0xffffffff811d6bf1 <perf_event_alloc+0x231>
    0.00 :   ffffffff811d6bd0:       leaq    0x7c(%rax), %rdi
    0.00 :   ffffffff811d6bd4:       movl    $0x1, %eax
    0.00 :   ffffffff811d6bd9:       lock
    0.00 :   ffffffff811d6bda:       xaddl   %eax, 0x7c(%rbx)
    0.00 :   ffffffff811d6bde:       testl   %eax, %eax
    0.00 :   ffffffff811d6be0:       je      0xffffffff811d7694 <perf_event_alloc+0xcd4>
    0.00 :   ffffffff811d6be6:       leal    0x1(%rax), %edx
    0.00 :   ffffffff811d6be9:       orl     %eax, %edx
    0.00 :   ffffffff811d6beb:       js      0xffffffff811d75b7 <perf_event_alloc+0xbf7>
    0.00 :   ffffffff811d6bf1:       movq    %rbx, 0x3b0(%r10)
    0.00 :   ffffffff811d6bf8:       movl    $0x1, %eax
    0.00 :   ffffffff811d6bfd:       lock
    0.00 :   ffffffff811d6bfe:       xaddq   %rax, 0x14fb3ea(%rip) # 0xffffffff826d1ff0 <perf_event_id>
  100.00 :   ffffffff811d6c06:       incq    %rax
    0.00 :   ffffffff811d6c09:       testq   %r15, %r15
    0.00 :   ffffffff811d6c0c:       movl    $0x0, 0xa8(%r10)
    0.00 :   ffffffff811d6c17:       movq    %rax, 0x3b8(%r10)
    0.00 :   ffffffff811d6c1e:       je      0xffffffff811d71dc <perf_event_alloc+0x81c>
    0.00 :   ffffffff811d6c24:       movl    0x84(%r15), %eax
    0.00 :   ffffffff811d6c2b:       testq   %r12, %r12
    0.00 :   ffffffff811d6c2e:       movl    %eax, 0x84(%r10)
    0.00 :   ffffffff811d6c35:       je      0xffffffff811d6c83 <perf_event_alloc+0x2c3>
    0.00 :   ffffffff811d6c37:       leaq    0x9c8(%r12), %rdi
    0.00 :   ffffffff811d6c3f:       movl    $0x4, 0xac(%r10)
    0.00 :   ffffffff811d6c4a:       movl    $0x1, %eax
    0.00 :   ffffffff811d6c4f:       lock
    0.00 :   ffffffff811d6c50:       xaddl   %eax, 0x9c8(%r12)
    0.00 :   ffffffff811d6c59:       testl   %eax, %eax
    0.00 :   ffffffff811d6c5b:       je      0xffffffff811d76ab <perf_event_alloc+0xceb>
    0.00 :   ffffffff811d6c61:       leal    0x1(%rax), %edx
    0.00 :   ffffffff811d6c64:       orl     %eax, %edx
    0.00 :   ffffffff811d6c66:       js      0xffffffff811d75ce <perf_event_alloc+0xc0e>
    0.00 :   ffffffff811d6c6c:       testq   %r15, %r15
    0.00 :   ffffffff811d6c6f:       movq    %r12, 0x1c8(%r10)
    0.00 :   ffffffff811d6c76:       movq    $-0x7e495090, 0x3c8(%r10) # imm = 0x81B6AF70
    0.00 :   ffffffff811d6c81:       je      0xffffffff811d6ca9 <perf_event_alloc+0x2e9>
    0.00 :   ffffffff811d6c83:       movq    0x3c8(%r15), %rax
    0.00 :   ffffffff811d6c8a:       testq   %r13, %r13
    0.00 :   ffffffff811d6c8d:       movq    %rax, 0x3c8(%r10)
    0.00 :   ffffffff811d6c94:       jne     0xffffffff811d6cb2 <perf_event_alloc+0x2f2>
    0.00 :   ffffffff811d6c96:       testq   %r15, %r15
    0.00 :   ffffffff811d6c99:       je      0xffffffff811d6ca9 <perf_event_alloc+0x2e9>
    0.00 :   ffffffff811d6c9b:       movq    0x3d0(%r15), %r13
    0.00 :   ffffffff811d6ca2:       movq    0x3d8(%r15), %r14
    0.00 :   ffffffff811d6ca9:       testq   %r13, %r13
    0.00 :   ffffffff811d6cac:       je      0xffffffff811d71b7 <perf_event_alloc+0x7f7>
    0.00 :   ffffffff811d6cb2:       movzbl  0x100(%r10), %eax
    0.00 :   ffffffff811d6cba:       movq    -0x30(%rbp), %rcx
    0.00 :   ffffffff811d6cbe:       movq    %r13, 0x3d0(%r10)
    0.00 :   ffffffff811d6cc5:       movq    %r14, 0x3d8(%r10)
    0.00 :   ffffffff811d6ccc:       andl    $0x1, %eax
    0.00 :   ffffffff811d6ccf:       negl    %eax
    0.00 :   ffffffff811d6cd1:       testb   $0x4, 0x29(%rcx)
    0.00 :   ffffffff811d6cd5:       movl    %eax, 0xa8(%r10)
    0.00 :   ffffffff811d6cdc:       movq    0x10(%rcx), %rax
    0.00 :   ffffffff811d6ce0:       movq    %rax, 0x1f0(%r10)
    0.00 :   ffffffff811d6ce7:       je      0xffffffff811d6cf2 <perf_event_alloc+0x332>
    0.00 :   ffffffff811d6ce9:       testq   %rax, %rax
    0.00 :   ffffffff811d6cec:       jne     0xffffffff811d733d <perf_event_alloc+0x97d>
    0.00 :   ffffffff811d6cf2:       movq    %rax, %rdx
    0.00 :   ffffffff811d6cf5:       movq    %rax, 0x1f8(%r10)
    0.00 :   ffffffff811d6cfc:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff811d6d00:       movq    %rdx, 0x200(%r10)
    0.00 :   ffffffff811d6d07:       testb   $0x2, 0x28(%rax)
    0.00 :   ffffffff811d6d0b:       je      0xffffffff811d6d17 <perf_event_alloc+0x357>
    0.00 :   ffffffff811d6d0d:       testb   $0x10, 0x18(%rax)
    0.00 :   ffffffff811d6d11:       jne     0xffffffff811d739f <perf_event_alloc+0x9df>
    0.00 :   ffffffff811d6d17:       testb   $0x8, 0xf1(%r10)
    0.00 :   ffffffff811d6d1f:       jne     0xffffffff811d6d2c <perf_event_alloc+0x36c>
    0.00 :   ffffffff811d6d21:       movq    $0x0, 0x120(%r10)
    0.00 :   ffffffff811d6d2c:       movq    $-0x7d92dfe0, %rdi # imm = 0x826D2020
    0.00 :   ffffffff811d6d33:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d6d37:       callq   0xffffffff810f3380 <__srcu_read_lock>
    0.00 :   ffffffff811d6d3c:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6d40:       movl    %eax, %r13d
    0.00 :   ffffffff811d6d43:       movq    0x280(%r10), %rax
    0.00 :   ffffffff811d6d4a:       testq   %rax, %rax
    0.00 :   ffffffff811d6d4d:       je      0xffffffff811d6d76 <perf_event_alloc+0x3b6>
    0.00 :   ffffffff811d6d4f:       movq    0x98(%rax), %r14
    0.00 :   ffffffff811d6d56:       testq   %r14, %r14
    0.00 :   ffffffff811d6d59:       je      0xffffffff811d6d76 <perf_event_alloc+0x3b6>
    0.00 :   ffffffff811d6d5b:       movq    %r10, %rsi
    0.00 :   ffffffff811d6d5e:       movq    %r14, %rdi
    0.00 :   ffffffff811d6d61:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d6d65:       callq   0xffffffff811d2e60 <perf_try_init_event>
    0.00 :   ffffffff811d6d6a:       testl   %eax, %eax
    0.00 :   ffffffff811d6d6c:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6d70:       je      0xffffffff811d6e6f <perf_event_alloc+0x4af>
    0.00 :   ffffffff811d6d76:       movl    0xd8(%r10), %r15d
    0.00 :   ffffffff811d6d7d:       testl   %r15d, %r15d
    0.00 :   ffffffff811d6d80:       sete    %bl
    0.00 :   ffffffff811d6d83:       cmpl    $0x3, %r15d
    0.00 :   ffffffff811d6d87:       sete    %dl
    0.00 :   ffffffff811d6d8a:       orb     %dl, %bl
    0.00 :   ffffffff811d6d8c:       je      0xffffffff811d6daf <perf_event_alloc+0x3ef>
    0.00 :   ffffffff811d6d8e:       movq    0xe0(%r10), %rdx
    0.00 :   ffffffff811d6d95:       movq    %rdx, %rcx
    0.00 :   ffffffff811d6d98:       shrq    $0x20, %rcx
    0.00 :   ffffffff811d6d9c:       testl   %ecx, %ecx
    0.00 :   ffffffff811d6d9e:       movl    %ecx, %r15d
    0.00 :   ffffffff811d6da1:       jne     0xffffffff811d71f5 <perf_event_alloc+0x835>
    0.00 :   ffffffff811d6da7:       movl    $0x4, %r15d
    0.00 :   ffffffff811d6dad:       xorl    %ebx, %ebx
    0.00 :   ffffffff811d6daf:       movq    %r12, -0x40(%rbp)
    0.00 :   ffffffff811d6db3:       movq    %r10, %r12
    0.00 :   ffffffff811d6db6:       jmp     0xffffffff811d6e03 <perf_event_alloc+0x443>
    0.00 :   ffffffff811d6db8:       cmpl    %r15d, 0xd8(%r12)
    0.00 :   ffffffff811d6dc0:       je      0xffffffff811d6dd3 <perf_event_alloc+0x413>
    0.00 :   ffffffff811d6dc2:       cmpl    $0x4, %r15d
    0.00 :   ffffffff811d6dc6:       je      0xffffffff811d6dd3 <perf_event_alloc+0x413>
    0.00 :   ffffffff811d6dc8:       testb   $0x2, 0x3d(%r14)
    0.00 :   ffffffff811d6dcd:       je      0xffffffff811d73ac <perf_event_alloc+0x9ec>
    0.00 :   ffffffff811d6dd3:       movq    %r12, %rsi
    0.00 :   ffffffff811d6dd6:       movq    %r14, %rdi
    0.00 :   ffffffff811d6dd9:       callq   0xffffffff811d2e60 <perf_try_init_event>
    0.00 :   ffffffff811d6dde:       cmpl    $-0x2, %eax
    0.00 :   ffffffff811d6de1:       jne     0xffffffff811d7388 <perf_event_alloc+0x9c8>
    0.00 :   ffffffff811d6de7:       movl    0xd8(%r12), %eax
    0.00 :   ffffffff811d6def:       cmpl    %eax, %r15d
    0.00 :   ffffffff811d6df2:       je      0xffffffff811d7357 <perf_event_alloc+0x997>
    0.00 :   ffffffff811d6df8:       testb   %bl, %bl
    0.00 :   ffffffff811d6dfa:       jne     0xffffffff811d7357 <perf_event_alloc+0x997>
    0.00 :   ffffffff811d6e00:       movl    %eax, %r15d
    0.00 :   ffffffff811d6e03:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff811d6e08:       movslq  %r15d, %rsi
    0.00 :   ffffffff811d6e0b:       movq    $-0x7d92e030, %rdi # imm = 0x826D1FD0
    0.00 :   ffffffff811d6e12:       callq   0xffffffff81b3fa80 <idr_find>
    0.00 :   ffffffff811d6e17:       movq    %rax, %r14
    0.00 :   ffffffff811d6e1a:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff811d6e1f:       testq   %r14, %r14
    0.00 :   ffffffff811d6e22:       jne     0xffffffff811d6db8 <perf_event_alloc+0x3f8>
    0.00 :   ffffffff811d6e24:       movq    0x114c315(%rip), %r14 # 0xffffffff82323140 <pmus>
    0.00 :   ffffffff811d6e2b:       movq    %r12, %r10
    0.00 :   ffffffff811d6e2e:       movq    -0x40(%rbp), %r12
    0.00 :   ffffffff811d6e32:       cmpq    $-0x7dcdcec0, %r14 # imm = 0x82323140
    0.00 :   ffffffff811d6e39:       je      0xffffffff811d73af <perf_event_alloc+0x9ef>
    0.00 :   ffffffff811d6e3f:       movq    %r10, %rbx
    0.00 :   ffffffff811d6e42:       jmp     0xffffffff811d6e5d <perf_event_alloc+0x49d>
    0.00 :   ffffffff811d6e44:       cmpl    $-0x2, %eax
    0.00 :   ffffffff811d6e47:       jne     0xffffffff811d76c2 <perf_event_alloc+0xd02>
    0.00 :   ffffffff811d6e4d:       movq    (%r14), %r14
    0.00 :   ffffffff811d6e50:       cmpq    $-0x7dcdcec0, %r14 # imm = 0x82323140
    0.00 :   ffffffff811d6e57:       je      0xffffffff811d76cd <perf_event_alloc+0xd0d>
    0.00 :   ffffffff811d6e5d:       movq    %rbx, %rsi
    0.00 :   ffffffff811d6e60:       movq    %r14, %rdi
    0.00 :   ffffffff811d6e63:       callq   0xffffffff811d2e60 <perf_try_init_event>
    0.00 :   ffffffff811d6e68:       testl   %eax, %eax
    0.00 :   ffffffff811d6e6a:       jne     0xffffffff811d6e44 <perf_event_alloc+0x484>
    0.00 :   ffffffff811d6e6c:       movq    %rbx, %r10
    0.00 :   ffffffff811d6e6f:       cmpl    $0x1, %r13d
    0.00 :   ffffffff811d6e73:       ja      0xffffffff811d76d5 <perf_event_alloc+0xd15>
    0.00 :   ffffffff811d6e79:       movl    %r13d, %esi
    0.00 :   ffffffff811d6e7c:       movq    $-0x7d92dfe0, %rdi # imm = 0x826D2020
    0.00 :   ffffffff811d6e83:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d6e87:       callq   0xffffffff810f33c0 <__srcu_read_unlock>
    0.00 :   ffffffff811d6e8c:       cmpq    $-0x1000, %r14  # imm = 0xF000
    0.00 :   ffffffff811d6e93:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6e97:       ja      0xffffffff811d7880 <perf_event_alloc+0xec0>
    0.00 :   ffffffff811d6e9d:       cmpl    $-0x1, 0x54(%r14)
    0.00 :   ffffffff811d6ea2:       je      0xffffffff811d730c <perf_event_alloc+0x94c>
    0.00 :   ffffffff811d6ea8:       cmpb    $0x0, 0x103(%r10)
    0.00 :   ffffffff811d6eb0:       js      0xffffffff811d705a <perf_event_alloc+0x69a>
    0.00 :   ffffffff811d6eb6:       cmpl    $-0x1, 0x18(%rbp)
    0.00 :   ffffffff811d6eba:       je      0xffffffff811d715c <perf_event_alloc+0x79c>
    0.00 :   ffffffff811d6ec0:       movl    0x18(%rbp), %edi
    0.00 :   ffffffff811d6ec3:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d6ec7:       callq   0xffffffff812d9380 <__fdget>
    0.00 :   ffffffff811d6ecc:       movq    %rax, %r13
    0.00 :   ffffffff811d6ecf:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6ed3:       movq    %rax, %rbx
    0.00 :   ffffffff811d6ed6:       andq    $-0x4, %r13
    0.00 :   ffffffff811d6eda:       cmpq    $0x3, %rax
    0.00 :   ffffffff811d6ede:       jbe     0xffffffff811d782c <perf_event_alloc+0xe6c>
    0.00 :   ffffffff811d6ee4:       movq    0x40(%r13), %rdi
    0.00 :   ffffffff811d6ee8:       movq    $-0x7dcdd560, %rsi # imm = 0x82322AA0
    0.00 :   ffffffff811d6eef:       callq   0xffffffff8113f5d0 <css_tryget_online_from_dir>
    0.00 :   ffffffff811d6ef4:       movq    %rax, %r8
    0.00 :   ffffffff811d6ef7:       movl    %ebx, %eax
    0.00 :   ffffffff811d6ef9:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d6efd:       andl    $0x1, %eax
    0.00 :   ffffffff811d6f00:       cmpq    $-0x1000, %r8   # imm = 0xF000
    0.00 :   ffffffff811d6f07:       movl    %eax, -0x6c(%rbp)
    0.00 :   ffffffff811d6f0a:       ja      0xffffffff811d771b <perf_event_alloc+0xd5b>
    0.00 :   ffffffff811d6f10:       testq   %r8, %r8
    0.00 :   ffffffff811d6f13:       movq    %r8, %rax
    0.00 :   ffffffff811d6f16:       movl    $0x1, %r12d
    0.00 :   ffffffff811d6f1c:       je      0xffffffff811d774c <perf_event_alloc+0xd8c>
    0.00 :   ffffffff811d6f22:       movq    0xc0(%rax), %rax
    0.00 :   ffffffff811d6f29:       incl    %r12d
    0.00 :   ffffffff811d6f2c:       testq   %rax, %rax
    0.00 :   ffffffff811d6f2f:       jne     0xffffffff811d6f22 <perf_event_alloc+0x562>
    0.00 :   ffffffff811d6f31:       movslq  %r12d, %r15
    0.00 :   ffffffff811d6f34:       leaq    (,%r15,8), %rax
    0.00 :   ffffffff811d6f3c:       movq    %rax, -0x48(%rbp)
    0.00 :   ffffffff811d6f40:       movl    0x118fb1a(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff811d6f46:       movq    $0x20740, %rcx  # imm = 0x20740
    0.00 :   ffffffff811d6f4d:       xorl    %ebx, %ebx
    0.00 :   ffffffff811d6f4f:       movq    %r10, -0x50(%rbp)
    0.00 :   ffffffff811d6f53:       movq    %r14, -0x58(%rbp)
    0.00 :   ffffffff811d6f57:       movq    $0x1f9e0, %r15  # imm = 0x1F9E0
    0.00 :   ffffffff811d6f5e:       movq    %r13, -0x60(%rbp)
    0.00 :   ffffffff811d6f62:       movq    %r8, -0x68(%rbp)
    0.00 :   ffffffff811d6f66:       movq    %rcx, -0x40(%rbp)
    0.00 :   ffffffff811d6f6a:       movslq  %ebx, %rdx
    0.00 :   ffffffff811d6f6d:       movl    %eax, %esi
    0.00 :   ffffffff811d6f6f:       movq    $-0x7dc99780, %rdi # imm = 0x82366880
    0.00 :   ffffffff811d6f76:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff811d6f7b:       movq    %rax, %rbx
    0.00 :   ffffffff811d6f7e:       movl    0x118fadc(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff811d6f84:       cmpl    %eax, %ebx
    0.00 :   ffffffff811d6f86:       jae     0xffffffff811d7129 <perf_event_alloc+0x769>
    0.00 :   ffffffff811d6f8c:       movslq  %ebx, %rdx
    0.00 :   ffffffff811d6f8f:       movq    -0x7dedc720(,%rdx,8), %rdx
    0.00 :   ffffffff811d6f97:       leaq    (%r15,%rdx), %r14
    0.00 :   ffffffff811d6f9b:       cmpl    0xf8(%r14), %r12d
    0.00 :   ffffffff811d6fa2:       jle     0xffffffff811d7017 <perf_event_alloc+0x657>
    0.00 :   ffffffff811d6fa4:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff811d6fa8:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff811d6fac:       movl    $0xcc0, %esi    # imm = 0xCC0
    0.00 :   ffffffff811d6fb1:       movl    (%rdx,%rax), %edx
    0.00 :   ffffffff811d6fb4:       callq   0xffffffff81217f10 <__kmalloc_node>
    0.00 :   ffffffff811d6fb9:       testq   %rax, %rax
    0.00 :   ffffffff811d6fbc:       movq    %rax, %r13
    0.00 :   ffffffff811d6fbf:       je      0xffffffff811d7593 <perf_event_alloc+0xbd3>
    0.00 :   ffffffff811d6fc5:       movq    %r14, %rdi
    0.00 :   ffffffff811d6fc8:       callq   0xffffffff81b77bc0 <_raw_spin_lock_irq>
    0.00 :   ffffffff811d6fcd:       cmpl    0xf8(%r14), %r12d
    0.00 :   ffffffff811d6fd4:       jle     0xffffffff811d7001 <perf_event_alloc+0x641>
    0.00 :   ffffffff811d6fd6:       movq    0x100(%r14), %rax
    0.00 :   ffffffff811d6fdd:       leaq    0x108(%r14), %rdx
    0.00 :   ffffffff811d6fe4:       movq    %r13, 0x100(%r14)
    0.00 :   ffffffff811d6feb:       movl    %r12d, 0xf8(%r14)
    0.00 :   ffffffff811d6ff2:       cmpq    %rdx, %rax
    0.00 :   ffffffff811d6ff5:       movl    $0x0, %edx
    0.00 :   ffffffff811d6ffa:       cmoveq  %rdx, %rax
    0.00 :   ffffffff811d6ffe:       movq    %rax, %r13
    0.00 :   ffffffff811d7001:       movq    %r14, %rdi
    0.00 :   ffffffff811d7004:       callq   0xffffffff81b77800 <_raw_spin_unlock_irq>
    0.00 :   ffffffff811d7009:       movq    %r13, %rdi
    0.00 :   ffffffff811d700c:       callq   0xffffffff81218190 <kfree>
    0.00 :   ffffffff811d7011:       movl    0x118fa49(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff811d7017:       incl    %ebx
    0.00 :   ffffffff811d7019:       jmp     0xffffffff811d6f6a <perf_event_alloc+0x5aa>
    0.00 :   ffffffff811d701e:       movq    -0x30(%rbp), %rcx
    0.00 :   ffffffff811d7022:       testb   $0x20, 0x2c(%rcx)
    0.00 :   ffffffff811d7026:       je      0xffffffff811d7038 <perf_event_alloc+0x678>
    0.00 :   ffffffff811d7028:       testb   %al, %al
    0.00 :   ffffffff811d702a:       movq    $-0x16, -0x40(%rbp)
    0.00 :   ffffffff811d7032:       jne     0xffffffff811d7101 <perf_event_alloc+0x741>
    0.00 :   ffffffff811d7038:       testl   %ebx, %ebx
    0.00 :   ffffffff811d703a:       js      0xffffffff811d6a0b <perf_event_alloc+0x4b>
    0.00 :   ffffffff811d7040:       movslq  %ebx, %rdx
    0.00 :   ffffffff811d7043:       movq    $0x20740, %rax  # imm = 0x20740
    0.00 :   ffffffff811d704a:       movq    -0x7dedc720(,%rdx,8), %rdx
    0.00 :   ffffffff811d7052:       movl    (%rdx,%rax), %edx
    0.00 :   ffffffff811d7055:       jmp     0xffffffff811d6a10 <perf_event_alloc+0x50>
    0.00 :   ffffffff811d705a:       testb   $0x1, 0x3d(%r14)
    0.00 :   ffffffff811d705f:       jne     0xffffffff811d6eb6 <perf_event_alloc+0x4f6>
    0.00 :   ffffffff811d7065:       movq    $-0x5f, -0x40(%rbp)
    0.00 :   ffffffff811d706d:       movq    0x3f8(%r10), %r12
    0.00 :   ffffffff811d7074:       testq   %r12, %r12
    0.00 :   ffffffff811d7077:       je      0xffffffff811d7090 <perf_event_alloc+0x6d0>
    0.00 :   ffffffff811d7079:       testb   $0x1, 0x54(%r12)
    0.00 :   ffffffff811d707f:       je      0xffffffff811d75e5 <perf_event_alloc+0xc25>
    0.00 :   ffffffff811d7085:       movq    $0x0, 0x3f8(%r10)
    0.00 :   ffffffff811d7090:       movq    0x398(%r10), %rax
    0.00 :   ffffffff811d7097:       testq   %rax, %rax
    0.00 :   ffffffff811d709a:       je      0xffffffff811d70ac <perf_event_alloc+0x6ec>
    0.00 :   ffffffff811d709c:       movq    %r10, %rdi
    0.00 :   ffffffff811d709f:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d70a3:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d70a8:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d70ac:       movq    0x10(%r14), %rdi
    0.00 :   ffffffff811d70b0:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d70b4:       callq   0xffffffff81105fa0 <module_put>
    0.00 :   ffffffff811d70b9:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d70bd:       movq    0x1c8(%r10), %rdi
    0.00 :   ffffffff811d70c4:       testq   %rdi, %rdi
    0.00 :   ffffffff811d70c7:       je      0xffffffff811d70ee <perf_event_alloc+0x72e>
    0.00 :   ffffffff811d70c9:       leaq    0x9c8(%rdi), %rdx
    0.00 :   ffffffff811d70d0:       movl    $0xffffffff, %eax # imm = 0xFFFFFFFF
    0.00 :   ffffffff811d70d5:       lock
    0.00 :   ffffffff811d70d6:       xaddl   %eax, 0x9c8(%rdi)
    0.00 :   ffffffff811d70dd:       cmpl    $0x1, %eax
    0.00 :   ffffffff811d70e0:       je      0xffffffff811d7581 <perf_event_alloc+0xbc1>
    0.00 :   ffffffff811d70e6:       testl   %eax, %eax
    0.00 :   ffffffff811d70e8:       jle     0xffffffff811d767a <perf_event_alloc+0xcba>
    0.00 :   ffffffff811d70ee:       leaq    0x3a0(%r10), %rdi
    0.00 :   ffffffff811d70f5:       movq    $-0x7ee31fc0, %rsi # imm = 0x811CE040
    0.00 :   ffffffff811d70fc:       callq   0xffffffff810fd160 <call_rcu>
    0.00 :   ffffffff811d7101:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff811d7105:       addq    $0x48, %rsp
    0.00 :   ffffffff811d7109:       popq    %rbx
    0.00 :   ffffffff811d710a:       popq    %r12
    0.00 :   ffffffff811d710c:       popq    %r13
    0.00 :   ffffffff811d710e:       popq    %r14
    0.00 :   ffffffff811d7110:       popq    %r15
    0.00 :   ffffffff811d7112:       popq    %rbp
    0.00 :   ffffffff811d7113:       xorl    %edx, %edx
    0.00 :   ffffffff811d7115:       xorl    %ecx, %ecx
    0.00 :   ffffffff811d7117:       xorl    %esi, %esi
    0.00 :   ffffffff811d7119:       xorl    %edi, %edi
    0.00 :   ffffffff811d711b:       xorl    %r8d, %r8d
    0.00 :   ffffffff811d711e:       xorl    %r9d, %r9d
    0.00 :   ffffffff811d7121:       xorl    %r10d, %r10d
    0.00 :   ffffffff811d7124:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff811d7129:       movq    -0x68(%rbp), %r8
    0.00 :   ffffffff811d712d:       movq    -0x50(%rbp), %r10
    0.00 :   ffffffff811d7131:       movq    -0x38(%rbp), %rax
    0.00 :   ffffffff811d7135:       movq    -0x58(%rbp), %r14
    0.00 :   ffffffff811d7139:       movq    -0x60(%rbp), %r13
    0.00 :   ffffffff811d713d:       movq    %r8, 0x3f8(%r10)
    0.00 :   ffffffff811d7144:       cmpq    0x3f8(%rax), %r8
    0.00 :   ffffffff811d714b:       jne     0xffffffff811d720b <perf_event_alloc+0x84b>
    0.00 :   ffffffff811d7151:       movl    -0x6c(%rbp), %ecx
    0.00 :   ffffffff811d7154:       testl   %ecx, %ecx
    0.00 :   ffffffff811d7156:       jne     0xffffffff811d7665 <perf_event_alloc+0xca5>
    0.00 :   ffffffff811d715c:       movq    0x98(%r10), %rdx
    0.00 :   ffffffff811d7163:       testb   $0x10, 0x3c(%rdx)
    0.00 :   ffffffff811d7167:       je      0xffffffff811d7193 <perf_event_alloc+0x7d3>
    0.00 :   ffffffff811d7169:       testb   $0x4, 0xac(%r10)
    0.00 :   ffffffff811d7171:       movl    0x50(%rdx), %eax
    0.00 :   ffffffff811d7174:       jne     0xffffffff811d7251 <perf_event_alloc+0x891>
    0.00 :   ffffffff811d717a:       testl   %eax, %eax
    0.00 :   ffffffff811d717c:       jg      0xffffffff811d7839 <perf_event_alloc+0xe79>
    0.00 :   ffffffff811d7182:       leal    -0x1(%rax), %ecx
    0.00 :   ffffffff811d7185:       lock
    0.00 :   ffffffff811d7186:       cmpxchgl        %ecx, 0x50(%rdx)
    0.00 :   ffffffff811d718a:       jne     0xffffffff811d717a <perf_event_alloc+0x7ba>
    0.00 :   ffffffff811d718c:       movq    0x98(%r10), %rdx
    0.00 :   ffffffff811d7193:       movl    0x5c(%rdx), %edx
    0.00 :   ffffffff811d7196:       testl   %edx, %edx
    0.00 :   ffffffff811d7198:       jne     0xffffffff811d7276 <perf_event_alloc+0x8b6>
    0.00 :   ffffffff811d719e:       movq    0x280(%r10), %rax
    0.00 :   ffffffff811d71a5:       testq   %rax, %rax
    0.00 :   ffffffff811d71a8:       je      0xffffffff811d73dd <perf_event_alloc+0xa1d>
    0.00 :   ffffffff811d71ae:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d71b2:       jmp     0xffffffff811d7101 <perf_event_alloc+0x741>
    0.00 :   ffffffff811d71b7:       testb   $0x8, 0x103(%r10)
    0.00 :   ffffffff811d71bf:       movq    $-0x7ee1fda0, %r9 # imm = 0x811E0260
    0.00 :   ffffffff811d71c6:       movq    $-0x7ee1feb0, %rax # imm = 0x811E0150
    0.00 :   ffffffff811d71cd:       cmovneq %r9, %rax
    0.00 :   ffffffff811d71d1:       xorl    %r14d, %r14d
    0.00 :   ffffffff811d71d4:       movq    %rax, %r13
    0.00 :   ffffffff811d71d7:       jmp     0xffffffff811d6cb2 <perf_event_alloc+0x2f2>
    0.00 :   ffffffff811d71dc:       testq   %r12, %r12
    0.00 :   ffffffff811d71df:       jne     0xffffffff811d6c37 <perf_event_alloc+0x277>
    0.00 :   ffffffff811d71e5:       movq    $-0x7e495090, 0x3c8(%r10) # imm = 0x81B6AF70
    0.00 :   ffffffff811d71f0:       jmp     0xffffffff811d6ca9 <perf_event_alloc+0x2e9>
    0.00 :   ffffffff811d71f5:       andl    $-0x1, %edx
    0.00 :   ffffffff811d71f8:       movq    %r12, -0x40(%rbp)
    0.00 :   ffffffff811d71fc:       movq    %r10, %r12
    0.00 :   ffffffff811d71ff:       movq    %rdx, 0xe0(%r10)
    0.00 :   ffffffff811d7206:       jmp     0xffffffff811d6e03 <perf_event_alloc+0x443>
    0.00 :   ffffffff811d720b:       testb   $0x1, 0x54(%r8)
    0.00 :   ffffffff811d7210:       je      0xffffffff811d762e <perf_event_alloc+0xc6e>
    0.00 :   ffffffff811d7216:       movl    -0x6c(%rbp), %esi
    0.00 :   ffffffff811d7219:       movq    $0x0, 0x3f8(%r10)
    0.00 :   ffffffff811d7224:       movq    $-0x16, -0x40(%rbp)
    0.00 :   ffffffff811d722c:       testl   %esi, %esi
    0.00 :   ffffffff811d722e:       je      0xffffffff811d7090 <perf_event_alloc+0x6d0>
    0.00 :   ffffffff811d7234:       movq    %r13, %rdi
    0.00 :   ffffffff811d7237:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d723b:       callq   0xffffffff812aed50 <fput>
    0.00 :   ffffffff811d7240:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7244:       movq    $-0x16, -0x40(%rbp)
    0.00 :   ffffffff811d724c:       jmp     0xffffffff811d706d <perf_event_alloc+0x6ad>
    0.00 :   ffffffff811d7251:       testl   %eax, %eax
    0.00 :   ffffffff811d7253:       js      0xffffffff811d7839 <perf_event_alloc+0xe79>
    0.00 :   ffffffff811d7259:       leal    0x1(%rax), %ecx
    0.00 :   ffffffff811d725c:       lock
    0.00 :   ffffffff811d725d:       cmpxchgl        %ecx, 0x50(%rdx)
    0.00 :   ffffffff811d7261:       je      0xffffffff811d718c <perf_event_alloc+0x7cc>
    0.00 :   ffffffff811d7267:       jmp     0xffffffff811d7251 <perf_event_alloc+0x891>
    0.00 :   ffffffff811d7269:       movq    $-0x16, -0x40(%rbp)
    0.00 :   ffffffff811d7271:       jmp     0xffffffff811d7101 <perf_event_alloc+0x741>
    0.00 :   ffffffff811d7276:       movl    0x5c(%r14), %edi
    0.00 :   ffffffff811d727a:       movl    $0xdc0, %esi    # imm = 0xDC0
    0.00 :   ffffffff811d727f:       movq    %r10, -0x38(%rbp)
    0.00 :   ffffffff811d7283:       shlq    $0x4, %rdi
    0.00 :   ffffffff811d7287:       callq   0xffffffff81217fa0 <__kmalloc>
    0.00 :   ffffffff811d728c:       movq    -0x38(%rbp), %r10
    0.00 :   ffffffff811d7290:       testq   %rax, %rax
    0.00 :   ffffffff811d7293:       movq    %rax, 0x380(%r10)
    0.00 :   ffffffff811d729a:       je      0xffffffff811d7889 <perf_event_alloc+0xec9>
    0.00 :   ffffffff811d72a0:       movq    0x280(%r10), %rax
    0.00 :   ffffffff811d72a7:       testq   %rax, %rax
    0.00 :   ffffffff811d72aa:       je      0xffffffff811d73d2 <perf_event_alloc+0xa12>
    0.00 :   ffffffff811d72b0:       leaq    0x378(%rax), %rbx
    0.00 :   ffffffff811d72b7:       movq    %r10, -0x38(%rbp)
    0.00 :   ffffffff811d72bb:       movq    %rbx, %rdi
    0.00 :   ffffffff811d72be:       callq   0xffffffff81b77bc0 <_raw_spin_lock_irq>
    0.00 :   ffffffff811d72c3:       movq    -0x38(%rbp), %r10
    0.00 :   ffffffff811d72c7:       movl    0x5c(%r14), %edx
    0.00 :   ffffffff811d72cb:       movq    0x280(%r10), %rax
    0.00 :   ffffffff811d72d2:       movq    0x380(%r10), %rdi
    0.00 :   ffffffff811d72d9:       shlq    $0x4, %rdx
    0.00 :   ffffffff811d72dd:       movq    0x380(%rax), %rsi
    0.00 :   ffffffff811d72e4:       callq   0xffffffff81b6bc60 <memcpy>
    0.00 :   ffffffff811d72e9:       movq    %rbx, %rdi
    0.00 :   ffffffff811d72ec:       callq   0xffffffff81b77800 <_raw_spin_unlock_irq>
    0.00 :   ffffffff811d72f1:       movq    -0x38(%rbp), %r10
    0.00 :   ffffffff811d72f5:       movq    0x280(%r10), %rax
    0.00 :   ffffffff811d72fc:       movq    $0x1, 0x388(%r10)
    0.00 :   ffffffff811d7307:       jmp     0xffffffff811d71a5 <perf_event_alloc+0x7e5>
    0.00 :   ffffffff811d730c:       testq   %r12, %r12
    0.00 :   ffffffff811d730f:       jne     0xffffffff811d7244 <perf_event_alloc+0x884>
    0.00 :   ffffffff811d7315:       cmpl    $-0x1, 0x18(%rbp)
    0.00 :   ffffffff811d7319:       jne     0xffffffff811d7244 <perf_event_alloc+0x884>
    0.00 :   ffffffff811d731f:       cmpb    $0x0, 0x103(%r10)
    0.00 :   ffffffff811d7327:       jns     0xffffffff811d715c <perf_event_alloc+0x79c>
    0.00 :   ffffffff811d732d:       testb   $0x1, 0x3d(%r14)
    0.00 :   ffffffff811d7332:       jne     0xffffffff811d715c <perf_event_alloc+0x79c>
    0.00 :   ffffffff811d7338:       jmp     0xffffffff811d7065 <perf_event_alloc+0x6a5>
    0.00 :   ffffffff811d733d:       movq    $0x1, 0x1f0(%r10)
    0.00 :   ffffffff811d7348:       movl    $0x1, %edx
    0.00 :   ffffffff811d734d:       movl    $0x1, %eax
    0.00 :   ffffffff811d7352:       jmp     0xffffffff811d6cf5 <perf_event_alloc+0x335>
    0.00 :   ffffffff811d7357:       cmpl    $0x1, %r13d
    0.00 :   ffffffff811d735b:       movq    %r12, %r10
    0.00 :   ffffffff811d735e:       ja      0xffffffff811d7710 <perf_event_alloc+0xd50>
    0.00 :   ffffffff811d7364:       movl    %r13d, %esi
    0.00 :   ffffffff811d7367:       movq    $-0x7d92dfe0, %rdi # imm = 0x826D2020
    0.00 :   ffffffff811d736e:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7372:       callq   0xffffffff810f33c0 <__srcu_read_unlock>
    0.00 :   ffffffff811d7377:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d737b:       movq    $-0x2, -0x40(%rbp)
    0.00 :   ffffffff811d7383:       jmp     0xffffffff811d70bd <perf_event_alloc+0x6fd>
    0.00 :   ffffffff811d7388:       testl   %eax, %eax
    0.00 :   ffffffff811d738a:       movq    %r12, %r10
    0.00 :   ffffffff811d738d:       movq    -0x40(%rbp), %r12
    0.00 :   ffffffff811d7391:       je      0xffffffff811d6e6f <perf_event_alloc+0x4af>
    0.00 :   ffffffff811d7397:       movslq  %eax, %r14
    0.00 :   ffffffff811d739a:       jmp     0xffffffff811d6e6f <perf_event_alloc+0x4af>
    0.00 :   ffffffff811d739f:       movq    $-0x16, -0x40(%rbp)
    0.00 :   ffffffff811d73a7:       jmp     0xffffffff811d70bd <perf_event_alloc+0x6fd>
    0.00 :   ffffffff811d73ac:       movq    %r12, %r10
    0.00 :   ffffffff811d73af:       cmpl    $0x1, %r13d
    0.00 :   ffffffff811d73b3:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d73b7:       ja      0xffffffff811d7714 <perf_event_alloc+0xd54>
    0.00 :   ffffffff811d73bd:       movl    %r13d, %esi
    0.00 :   ffffffff811d73c0:       movq    $-0x7d92dfe0, %rdi # imm = 0x826D2020
    0.00 :   ffffffff811d73c7:       callq   0xffffffff810f33c0 <__srcu_read_unlock>
    0.00 :   ffffffff811d73cc:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d73d0:       jmp     0xffffffff811d737b <perf_event_alloc+0x9bb>
    0.00 :   ffffffff811d73d2:       movq    $0x1, 0x388(%r10)
    0.00 :   ffffffff811d73dd:       testb   $0x20, 0xf0(%r10)
    0.00 :   ffffffff811d73e5:       jne     0xffffffff811d76dc <perf_event_alloc+0xd1c>
    0.00 :   ffffffff811d73eb:       testl   $0x20100, 0x100(%r10) # imm = 0x20100
    0.00 :   ffffffff811d73f6:       movl    0xac(%r10), %ecx
    0.00 :   ffffffff811d73fd:       je      0xffffffff811d7406 <perf_event_alloc+0xa46>
    0.00 :   ffffffff811d73ff:       lock
    0.00 :   ffffffff811d7400:       incl    0x118f6ce(%rip) # 0xffffffff82366ad4 <nr_mmap_events>
    0.00 :   ffffffff811d7406:       testb   $0x4, 0x104(%r10)
    0.00 :   ffffffff811d740e:       je      0xffffffff811d7417 <perf_event_alloc+0xa57>
    0.00 :   ffffffff811d7410:       lock
    0.00 :   ffffffff811d7411:       incl    0x118f695(%rip) # 0xffffffff82366aac <nr_build_id_events>
    0.00 :   ffffffff811d7417:       testb   $0x2, 0x101(%r10)
    0.00 :   ffffffff811d741f:       je      0xffffffff811d7428 <perf_event_alloc+0xa68>
    0.00 :   ffffffff811d7421:       lock
    0.00 :   ffffffff811d7422:       incl    0x118f6a8(%rip) # 0xffffffff82366ad0 <nr_comm_events>
    0.00 :   ffffffff811d7428:       testb   $0x10, 0x103(%r10)
    0.00 :   ffffffff811d7430:       je      0xffffffff811d7439 <perf_event_alloc+0xa79>
    0.00 :   ffffffff811d7432:       lock
    0.00 :   ffffffff811d7433:       incl    0x118f693(%rip) # 0xffffffff82366acc <nr_namespaces_events>
    0.00 :   ffffffff811d7439:       testb   $0x1, 0x104(%r10)
    0.00 :   ffffffff811d7441:       je      0xffffffff811d744a <perf_event_alloc+0xa8a>
    0.00 :   ffffffff811d7443:       lock
    0.00 :   ffffffff811d7444:       incl    0x118f66a(%rip) # 0xffffffff82366ab4 <nr_cgroup_events>
    0.00 :   ffffffff811d744a:       movzbl  0x101(%r10), %eax
    0.00 :   ffffffff811d7452:       testb   $0x20, %al
    0.00 :   ffffffff811d7454:       je      0xffffffff811d7465 <perf_event_alloc+0xaa5>
    0.00 :   ffffffff811d7456:       lock
    0.00 :   ffffffff811d7457:       incl    0x118f66b(%rip) # 0xffffffff82366ac8 <nr_task_events>
    0.00 :   ffffffff811d745d:       movzbl  0x101(%r10), %eax
    0.00 :   ffffffff811d7465:       testb   $0x4, %al
    0.00 :   ffffffff811d7467:       je      0xffffffff811d7470 <perf_event_alloc+0xab0>
    0.00 :   ffffffff811d7469:       lock
    0.00 :   ffffffff811d746a:       incl    0x118f654(%rip) # 0xffffffff82366ac4 <nr_freq_events>
    0.00 :   ffffffff811d7470:       movzbl  0x103(%r10), %edx
    0.00 :   ffffffff811d7478:       testb   $0x4, %dl
    0.00 :   ffffffff811d747b:       jne     0xffffffff811d7615 <perf_event_alloc+0xc55>
    0.00 :   ffffffff811d7481:       andl    $0x24, %ecx
    0.00 :   ffffffff811d7484:       setne   %al
    0.00 :   ffffffff811d7487:       testb   $0x8, 0xf1(%r10)
    0.00 :   ffffffff811d748f:       movl    $0x1, %ecx
    0.00 :   ffffffff811d7494:       cmovnel %ecx, %eax
    0.00 :   ffffffff811d7497:       cmpq    $0x0, 0x3f8(%r10)
    0.00 :   ffffffff811d749f:       cmovnel %ecx, %eax
    0.00 :   ffffffff811d74a2:       testb   $0x20, %dl
    0.00 :   ffffffff811d74a5:       je      0xffffffff811d74b6 <perf_event_alloc+0xaf6>
    0.00 :   ffffffff811d74a7:       lock
    0.00 :   ffffffff811d74a8:       incl    0x118f60e(%rip) # 0xffffffff82366abc <nr_ksymbol_events>
    0.00 :   ffffffff811d74ae:       movzbl  0x103(%r10), %edx
    0.00 :   ffffffff811d74b6:       andl    $0x40, %edx
    0.00 :   ffffffff811d74b9:       je      0xffffffff811d74c2 <perf_event_alloc+0xb02>
    0.00 :   ffffffff811d74bb:       lock
    0.00 :   ffffffff811d74bc:       incl    0x118f5f6(%rip) # 0xffffffff82366ab8 <nr_bpf_events>
    0.00 :   ffffffff811d74c2:       testb   $0x2, 0x104(%r10)
    0.00 :   ffffffff811d74ca:       je      0xffffffff811d74d3 <perf_event_alloc+0xb13>
    0.00 :   ffffffff811d74cc:       lock
    0.00 :   ffffffff811d74cd:       incl    0x118f5dd(%rip) # 0xffffffff82366ab0 <nr_text_poke_events>
    0.00 :   ffffffff811d74d3:       testb   %al, %al
    0.00 :   ffffffff811d74d5:       je      0xffffffff811d74f2 <perf_event_alloc+0xb32>
    0.00 :   ffffffff811d74d7:       movl    0x14fab5b(%rip), %eax # 0xffffffff826d2038 <perf_sched_count>
    0.00 :   ffffffff811d74dd:       testl   %eax, %eax
    0.00 :   ffffffff811d74df:       je      0xffffffff811d7759 <perf_event_alloc+0xd99>
    0.00 :   ffffffff811d74e5:       leal    0x1(%rax), %edx
    0.00 :   ffffffff811d74e8:       lock
    0.00 :   ffffffff811d74e9:       cmpxchgl        %edx, 0x14fab48(%rip) # 0xffffffff826d2038 <perf_sched_count>
    0.00 :   ffffffff811d74f0:       jne     0xffffffff811d74dd <perf_event_alloc+0xb1d>
    0.00 :   ffffffff811d74f2:       cmpq    $0x0, 0x280(%r10)
    0.00 :   ffffffff811d74fa:       jne     0xffffffff811d71ae <perf_event_alloc+0x7ee>
    0.00 :   ffffffff811d7500:       testb   $0x4, 0xac(%r10)
    0.00 :   ffffffff811d7508:       jne     0xffffffff811d71ae <perf_event_alloc+0x7ee>
    0.00 :   ffffffff811d750e:       movabsq $0x265822300, %rax # imm = 0x265822300
    0.00 :   ffffffff811d7518:       andq    0x100(%r10), %rax
    0.00 :   ffffffff811d751f:       je      0xffffffff811d71ae <perf_event_alloc+0x7ee>
    0.00 :   ffffffff811d7525:       movslq  0x28c(%r10), %rax
    0.00 :   ffffffff811d752c:       movq    $0x1f9b0, %rbx  # imm = 0x1F9B0
    0.00 :   ffffffff811d7533:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7537:       addq    -0x7dedc720(,%rax,8), %rbx
    0.00 :   ffffffff811d753f:       movq    %rbx, %rdi
    0.00 :   ffffffff811d7542:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff811d7547:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d754b:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff811d754f:       leaq    0x8(%rbx), %rcx
    0.00 :   ffffffff811d7553:       leaq    0x400(%r10), %rdx
    0.00 :   ffffffff811d755a:       movq    %rax, 0x400(%r10)
    0.00 :   ffffffff811d7561:       movq    %rcx, 0x408(%r10)
    0.00 :   ffffffff811d7568:       movq    %rdx, 0x8(%rbx)
    0.00 :   ffffffff811d756c:       movq    %rbx, %rdi
    0.00 :   ffffffff811d756f:       movq    %rdx, 0x8(%rax)
    0.00 :   ffffffff811d7573:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff811d7578:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d757c:       jmp     0xffffffff811d71ae <perf_event_alloc+0x7ee>
    0.00 :   ffffffff811d7581:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7585:       callq   0xffffffff81066020 <__put_task_struct>
    0.00 :   ffffffff811d758a:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d758e:       jmp     0xffffffff811d70ee <perf_event_alloc+0x72e>
    0.00 :   ffffffff811d7593:       movl    -0x6c(%rbp), %eax
    0.00 :   ffffffff811d7596:       movq    -0x50(%rbp), %r10
    0.00 :   ffffffff811d759a:       movq    -0x58(%rbp), %r14
    0.00 :   ffffffff811d759e:       movq    -0x60(%rbp), %r13
    0.00 :   ffffffff811d75a2:       testl   %eax, %eax
    0.00 :   ffffffff811d75a4:       jne     0xffffffff811d7737 <perf_event_alloc+0xd77>
    0.00 :   ffffffff811d75aa:       movq    $-0xc, -0x40(%rbp)
    0.00 :   ffffffff811d75b2:       jmp     0xffffffff811d706d <perf_event_alloc+0x6ad>
    0.00 :   ffffffff811d75b7:       movl    $0x1, %esi
    0.00 :   ffffffff811d75bc:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d75c0:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff811d75c5:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d75c9:       jmp     0xffffffff811d6bf1 <perf_event_alloc+0x231>
    0.00 :   ffffffff811d75ce:       movl    $0x1, %esi
    0.00 :   ffffffff811d75d3:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d75d7:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff811d75dc:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d75e0:       jmp     0xffffffff811d6c6c <perf_event_alloc+0x2ac>
    0.00 :   ffffffff811d75e5:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d75e9:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff811d75ee:       movq    0x10(%r12), %rax
    0.00 :   ffffffff811d75f3:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d75f7:       testb   $0x3, %al
    0.00 :   ffffffff811d75f9:       jne     0xffffffff811d77fc <perf_event_alloc+0xe3c>
    0.00 :   ffffffff811d75ff:       decq    %gs:(%rax)
    0.00 :   ffffffff811d7603:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7607:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff811d760c:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7610:       jmp     0xffffffff811d7085 <perf_event_alloc+0x6c5>
    0.00 :   ffffffff811d7615:       lock
    0.00 :   ffffffff811d7616:       incl    0x118f4a4(%rip) # 0xffffffff82366ac0 <nr_switch_events>
    0.00 :   ffffffff811d761c:       movl    $0x1, %eax
    0.00 :   ffffffff811d7621:       movzbl  0x103(%r10), %edx
    0.00 :   ffffffff811d7629:       jmp     0xffffffff811d7487 <perf_event_alloc+0xac7>
    0.00 :   ffffffff811d762e:       movq    %r8, -0x38(%rbp)
    0.00 :   ffffffff811d7632:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7636:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff811d763b:       movq    -0x38(%rbp), %r8
    0.00 :   ffffffff811d763f:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7643:       movq    0x10(%r8), %rax
    0.00 :   ffffffff811d7647:       testb   $0x3, %al
    0.00 :   ffffffff811d7649:       jne     0xffffffff811d7846 <perf_event_alloc+0xe86>
    0.00 :   ffffffff811d764f:       decq    %gs:(%rax)
    0.00 :   ffffffff811d7653:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7657:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff811d765c:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7660:       jmp     0xffffffff811d7216 <perf_event_alloc+0x856>
    0.00 :   ffffffff811d7665:       movq    %r13, %rdi
    0.00 :   ffffffff811d7668:       movq    %r10, -0x38(%rbp)
    0.00 :   ffffffff811d766c:       callq   0xffffffff812aed50 <fput>
    0.00 :   ffffffff811d7671:       movq    -0x38(%rbp), %r10
    0.00 :   ffffffff811d7675:       jmp     0xffffffff811d715c <perf_event_alloc+0x79c>
    0.00 :   ffffffff811d767a:       movl    $0x3, %esi
    0.00 :   ffffffff811d767f:       movq    %rdx, %rdi
    0.00 :   ffffffff811d7682:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7686:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff811d768b:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d768f:       jmp     0xffffffff811d70ee <perf_event_alloc+0x72e>
    0.00 :   ffffffff811d7694:       movl    $0x2, %esi
    0.00 :   ffffffff811d7699:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d769d:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff811d76a2:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d76a6:       jmp     0xffffffff811d6bf1 <perf_event_alloc+0x231>
    0.00 :   ffffffff811d76ab:       movl    $0x2, %esi
    0.00 :   ffffffff811d76b0:       movq    %r10, -0x40(%rbp)
    0.00 :   ffffffff811d76b4:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff811d76b9:       movq    -0x40(%rbp), %r10
    0.00 :   ffffffff811d76bd:       jmp     0xffffffff811d6c6c <perf_event_alloc+0x2ac>
    0.00 :   ffffffff811d76c2:       movq    %rbx, %r10
    0.00 :   ffffffff811d76c5:       movslq  %eax, %r14
    0.00 :   ffffffff811d76c8:       jmp     0xffffffff811d6e6f <perf_event_alloc+0x4af>
    0.00 :   ffffffff811d76cd:       movq    %rbx, %r10
    0.00 :   ffffffff811d76d0:       jmp     0xffffffff811d73af <perf_event_alloc+0x9ef>
    0.00 :   ffffffff811d76d5:       ud2
    0.00 :   ffffffff811d76d7:       jmp     0xffffffff811d6e79 <perf_event_alloc+0x4b9>
    0.00 :   ffffffff811d76dc:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff811d76e0:       movq    %r10, -0x38(%rbp)
    0.00 :   ffffffff811d76e4:       movzwl  0x6c(%rax), %edi
    0.00 :   ffffffff811d76e8:       callq   0xffffffff811e4060 <get_callchain_buffers>
    0.00 :   ffffffff811d76ed:       movslq  %eax, %rbx
    0.00 :   ffffffff811d76f0:       movq    -0x38(%rbp), %r10
    0.00 :   ffffffff811d76f4:       testq   %rbx, %rbx
    0.00 :   ffffffff811d76f7:       jne     0xffffffff811d77cf <perf_event_alloc+0xe0f>
    0.00 :   ffffffff811d76fd:       cmpq    $0x0, 0x280(%r10)
    0.00 :   ffffffff811d7705:       je      0xffffffff811d73eb <perf_event_alloc+0xa2b>
    0.00 :   ffffffff811d770b:       jmp     0xffffffff811d71ae <perf_event_alloc+0x7ee>
    0.00 :   ffffffff811d7710:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7714:       ud2
    0.00 :   ffffffff811d7716:       jmp     0xffffffff811d73bd <perf_event_alloc+0x9fd>
    0.00 :   ffffffff811d771b:       movl    -0x6c(%rbp), %edi
    0.00 :   ffffffff811d771e:       testl   %edi, %edi
    0.00 :   ffffffff811d7720:       jne     0xffffffff811d7797 <perf_event_alloc+0xdd7>
    0.00 :   ffffffff811d7722:       movslq  %r8d, %r8
    0.00 :   ffffffff811d7725:       testq   %r8, %r8
    0.00 :   ffffffff811d7728:       je      0xffffffff811d715c <perf_event_alloc+0x79c>
    0.00 :   ffffffff811d772e:       movq    %r8, -0x40(%rbp)
    0.00 :   ffffffff811d7732:       jmp     0xffffffff811d706d <perf_event_alloc+0x6ad>
    0.00 :   ffffffff811d7737:       movq    %r13, %rdi
    0.00 :   ffffffff811d773a:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d773e:       callq   0xffffffff812aed50 <fput>
    0.00 :   ffffffff811d7743:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7747:       jmp     0xffffffff811d75aa <perf_event_alloc+0xbea>
    0.00 :   ffffffff811d774c:       movq    $0x8, -0x48(%rbp)
    0.00 :   ffffffff811d7754:       jmp     0xffffffff811d6f40 <perf_event_alloc+0x580>
    0.00 :   ffffffff811d7759:       movq    $-0x7dcdcea0, %rdi # imm = 0x82323160
    0.00 :   ffffffff811d7760:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7764:       callq   0xffffffff81b726c0 <mutex_lock>
    0.00 :   ffffffff811d7769:       movl    0x14fa8c9(%rip), %eax # 0xffffffff826d2038 <perf_sched_count>
    0.00 :   ffffffff811d776f:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7773:       testl   %eax, %eax
    0.00 :   ffffffff811d7775:       je      0xffffffff811d77b4 <perf_event_alloc+0xdf4>
    0.00 :   ffffffff811d7777:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d777b:       lock
    0.00 :   ffffffff811d777c:       incl    0x14fa8b6(%rip) # 0xffffffff826d2038 <perf_sched_count>
    0.00 :   ffffffff811d7782:       movq    $-0x7dcdcea0, %rdi # imm = 0x82323160
    0.00 :   ffffffff811d7789:       callq   0xffffffff81b71ef0 <mutex_unlock>
    0.00 :   ffffffff811d778e:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7792:       jmp     0xffffffff811d74f2 <perf_event_alloc+0xb32>
    0.00 :   ffffffff811d7797:       movq    %r13, %rdi
    0.00 :   ffffffff811d779a:       movq    %r8, -0x40(%rbp)
    0.00 :   ffffffff811d779e:       movq    %r10, -0x38(%rbp)
    0.00 :   ffffffff811d77a2:       callq   0xffffffff812aed50 <fput>
    0.00 :   ffffffff811d77a7:       movq    -0x40(%rbp), %r8
    0.00 :   ffffffff811d77ab:       movq    -0x38(%rbp), %r10
    0.00 :   ffffffff811d77af:       jmp     0xffffffff811d7722 <perf_event_alloc+0xd62>
    0.00 :   ffffffff811d77b4:       movq    $-0x7d92e050, %rdi # imm = 0x826D1FB0
    0.00 :   ffffffff811d77bb:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d77bf:       callq   0xffffffff811e6c10 <static_key_enable>
    0.00 :   ffffffff811d77c4:       callq   0xffffffff810fabe0 <synchronize_rcu>
    0.00 :   ffffffff811d77c9:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d77cd:       jmp     0xffffffff811d7777 <perf_event_alloc+0xdb7>
    0.00 :   ffffffff811d77cf:       movq    0x380(%r10), %rdi
    0.00 :   ffffffff811d77d6:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d77da:       callq   0xffffffff81218190 <kfree>
    0.00 :   ffffffff811d77df:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d77e3:       movq    %r10, %rdi
    0.00 :   ffffffff811d77e6:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d77ea:       callq   0xffffffff811cd5b0 <exclusive_event_destroy>
    0.00 :   ffffffff811d77ef:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d77f3:       movq    %rbx, -0x40(%rbp)
    0.00 :   ffffffff811d77f7:       jmp     0xffffffff811d706d <perf_event_alloc+0x6ad>
    0.00 :   ffffffff811d77fc:       movq    0x18(%r12), %rax
    0.00 :   ffffffff811d7801:       lock
    0.00 :   ffffffff811d7802:       subq    $0x1, (%rax)
    0.00 :   ffffffff811d7806:       jne     0xffffffff811d7603 <perf_event_alloc+0xc43>
    0.00 :   ffffffff811d780c:       movq    0x18(%r12), %rax
    0.00 :   ffffffff811d7811:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d7815:       leaq    0x10(%r12), %rdi
    0.00 :   ffffffff811d781a:       movq    0x8(%rax), %rax
    0.00 :   ffffffff811d781e:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d7823:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d7827:       jmp     0xffffffff811d7603 <perf_event_alloc+0xc43>
    0.00 :   ffffffff811d782c:       movq    $-0x9, -0x40(%rbp)
    0.00 :   ffffffff811d7834:       jmp     0xffffffff811d706d <perf_event_alloc+0x6ad>
    0.00 :   ffffffff811d7839:       movq    $-0x10, -0x40(%rbp)
    0.00 :   ffffffff811d7841:       jmp     0xffffffff811d706d <perf_event_alloc+0x6ad>
    0.00 :   ffffffff811d7846:       movq    0x18(%r8), %rax
    0.00 :   ffffffff811d784a:       lock
    0.00 :   ffffffff811d784b:       subq    $0x1, (%rax)
    0.00 :   ffffffff811d784f:       jne     0xffffffff811d7653 <perf_event_alloc+0xc93>
    0.00 :   ffffffff811d7855:       movq    0x18(%r8), %rax
    0.00 :   ffffffff811d7859:       movq    %r10, -0x30(%rbp)
    0.00 :   ffffffff811d785d:       leaq    0x10(%r8), %rdi
    0.00 :   ffffffff811d7861:       movq    0x8(%rax), %rax
    0.00 :   ffffffff811d7865:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d786a:       movq    -0x30(%rbp), %r10
    0.00 :   ffffffff811d786e:       jmp     0xffffffff811d7653 <perf_event_alloc+0xc93>
    0.00 :   ffffffff811d7873:       movq    $-0xc, -0x40(%rbp)
    0.00 :   ffffffff811d787b:       jmp     0xffffffff811d7101 <perf_event_alloc+0x741>
    0.00 :   ffffffff811d7880:       movq    %r14, -0x40(%rbp)
    0.00 :   ffffffff811d7884:       jmp     0xffffffff811d70bd <perf_event_alloc+0x6fd>
    0.00 :   ffffffff811d7889:       movq    $-0xc, %rbx
    0.00 :   ffffffff811d7890:       jmp     0xffffffff811d77e3 <perf_event_alloc+0xe23>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81a1ebf0 <tcp_v4_rcv>:
         : 5                ; tcp_v4_rcv():
    0.00 :   ffffffff81a1ebf0:       pushq   %rbp
    0.00 :   ffffffff81a1ebf1:       movq    %rsp, %rbp
    0.00 :   ffffffff81a1ebf4:       subq    $0x88, %rsp
    0.00 :   ffffffff81a1ebfb:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff81a1ebff:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff81a1ec03:       movq    %rdi, %rbx
    0.00 :   ffffffff81a1ec06:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff81a1ec0a:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff81a1ec0e:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff81a1ec12:       movq    %gs:0x28, %rax
    0.00 :   ffffffff81a1ec1b:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff81a1ec1f:       xorl    %eax, %eax
    0.00 :   ffffffff81a1ec21:       movq    0x10(%rdi), %rax
    0.00 :   ffffffff81a1ec25:       xorl    %r12d, %r12d
    0.00 :   ffffffff81a1ec28:       testq   %rdi, %rdi
    0.00 :   ffffffff81a1ec2b:       movq    0x4b0(%rax), %r15
    0.00 :   ffffffff81a1ec32:       je      0xffffffff81a1ec3a <tcp_v4_rcv+0x4a>
    0.00 :   ffffffff81a1ec34:       testb   $-0x80, 0x3c(%rdi)
    0.00 :   ffffffff81a1ec38:       jne     0xffffffff81a1ec9e <tcp_v4_rcv+0xae>
    0.00 :   ffffffff81a1ec3a:       testb   $0x7, 0x80(%rbx)
    0.00 :   ffffffff81a1ec41:       movl    $0x2, -0x34(%rbp)
    0.00 :   ffffffff81a1ec48:       je      0xffffffff81a1ecb2 <tcp_v4_rcv+0xc2>
    0.00 :   ffffffff81a1ec4a:       movl    $0x2, %esi
    0.00 :   ffffffff81a1ec4f:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1ec52:       callq   0xffffffff81937d90 <kfree_skb_reason>
    0.00 :   ffffffff81a1ec57:       xorl    %r12d, %r12d
    0.00 :   ffffffff81a1ec5a:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff81a1ec5e:       subq    %gs:0x28, %rax
    0.00 :   ffffffff81a1ec67:       jne     0xffffffff81a1f5c5 <tcp_v4_rcv+0x9d5>
    0.00 :   ffffffff81a1ec6d:       movl    %r12d, %eax
    0.00 :   ffffffff81a1ec70:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff81a1ec74:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff81a1ec78:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff81a1ec7c:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff81a1ec80:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff81a1ec84:       leave
    0.00 :   ffffffff81a1ec85:       xorl    %edx, %edx
    0.00 :   ffffffff81a1ec87:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a1ec89:       xorl    %esi, %esi
    0.00 :   ffffffff81a1ec8b:       xorl    %edi, %edi
    0.00 :   ffffffff81a1ec8d:       xorl    %r8d, %r8d
    0.00 :   ffffffff81a1ec90:       xorl    %r9d, %r9d
    0.00 :   ffffffff81a1ec93:       xorl    %r10d, %r10d
    0.00 :   ffffffff81a1ec96:       xorl    %r11d, %r11d
    0.00 :   ffffffff81a1ec99:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a1ec9e:       testb   $0x7, 0x80(%rbx)
    0.00 :   ffffffff81a1eca5:       movl    0x28(%rdi), %r12d
    0.00 :   ffffffff81a1eca9:       movl    $0x2, -0x34(%rbp)
    0.00 :   ffffffff81a1ecb0:       jne     0xffffffff81a1ec4a <tcp_v4_rcv+0x5a>
    0.00 :   ffffffff81a1ecb2:       movq    0x150(%r15), %rax
    0.00 :   ffffffff81a1ecb9:       incq    %gs:0x50(%rax)
    0.00 :   ffffffff81a1ecbe:       movl    0x70(%rbx), %edi
    0.00 :   ffffffff81a1ecc1:       movl    0x74(%rbx), %eax
    0.00 :   ffffffff81a1ecc4:       movl    %edi, %esi
    0.00 :   ffffffff81a1ecc6:       subl    %eax, %esi
    0.00 :   ffffffff81a1ecc8:       cmpl    $0x13, %esi
    0.00 :   ffffffff81a1eccb:       jbe     0xffffffff81a1f022 <tcp_v4_rcv+0x432>
    0.00 :   ffffffff81a1ecd1:       movq    0xc8(%rbx), %rax
    0.00 :   ffffffff81a1ecd8:       movzbl  0xc(%rax), %esi
    0.00 :   ffffffff81a1ecdc:       movl    %esi, %eax
    0.00 :   ffffffff81a1ecde:       shrb    $0x4, %al
    0.00 :   ffffffff81a1ece1:       cmpb    $0x4f, %sil
    0.00 :   ffffffff81a1ece5:       jbe     0xffffffff81a1f1c5 <tcp_v4_rcv+0x5d5>
    0.00 :   ffffffff81a1eceb:       movl    0x70(%rbx), %edi
    0.00 :   ffffffff81a1ecee:       movl    0x74(%rbx), %esi
    0.00 :   ffffffff81a1ecf1:       movzbl  %al, %eax
    0.00 :   ffffffff81a1ecf4:       shll    $0x2, %eax
    0.00 :   ffffffff81a1ecf7:       movl    %edi, %r8d
    0.00 :   ffffffff81a1ecfa:       subl    %esi, %r8d
    0.00 :   ffffffff81a1ecfd:       cmpl    %eax, %r8d
    0.00 :   ffffffff81a1ed00:       jb      0xffffffff81a1f1d1 <tcp_v4_rcv+0x5e1>
    0.00 :   ffffffff81a1ed06:       movzbl  0x80(%rbx), %edi
    0.00 :   ffffffff81a1ed0d:       movzwl  0xb0(%rbx), %r9d
    0.00 :   ffffffff81a1ed15:       movzbl  0x82(%rbx), %eax
    0.00 :   ffffffff81a1ed1c:       movq    0xc0(%rbx), %r8
    0.00 :   ffffffff81a1ed23:       movl    %edi, %esi
    0.00 :   ffffffff81a1ed25:       leaq    (%r8,%r9), %rcx
    0.00 :   ffffffff81a1ed29:       andl    $0x60, %esi
    0.00 :   ffffffff81a1ed2c:       andl    $-0x21, %eax
    0.00 :   ffffffff81a1ed2f:       cmpb    $0x20, %sil
    0.00 :   ffffffff81a1ed33:       movb    %al, 0x82(%rbx)
    0.00 :   ffffffff81a1ed39:       movq    %rcx, -0x40(%rbp)
    0.00 :   ffffffff81a1ed3d:       je      0xffffffff81a1ed92 <tcp_v4_rcv+0x1a2>
    0.00 :   ffffffff81a1ed3f:       cmpb    $0x60, %sil
    0.00 :   ffffffff81a1ed43:       je      0xffffffff81a1f21d <tcp_v4_rcv+0x62d>
    0.00 :   ffffffff81a1ed49:       movl    0x70(%rbx), %r9d
    0.00 :   ffffffff81a1ed4d:       xorl    %edi, %edi
    0.00 :   ffffffff81a1ed4f:       movq    -0x40(%rbp), %rdx
    0.00 :   ffffffff81a1ed53:       leal    0x6(%r9), %r8d
    0.00 :   ffffffff81a1ed57:       shll    $0x8, %r8d
    0.00 :   ffffffff81a1ed5b:       addl    0x10(%rdx), %edi
    0.00 :   ffffffff81a1ed5e:       adcl    0xc(%rdx), %edi
    0.00 :   ffffffff81a1ed61:       adcl    %r8d, %edi
    0.00 :   ffffffff81a1ed64:       adcl    $0x0, %edi
    0.00 :   ffffffff81a1ed67:       cmpb    $0x40, %sil
    0.00 :   ffffffff81a1ed6b:       movl    %edi, %r8d
    0.00 :   ffffffff81a1ed6e:       je      0xffffffff81a1eeab <tcp_v4_rcv+0x2bb>
    0.00 :   ffffffff81a1ed74:       cmpl    $0x4c, %r9d
    0.00 :   ffffffff81a1ed78:       movl    %r8d, 0x88(%rbx)
    0.00 :   ffffffff81a1ed7f:       jbe     0xffffffff81a1f247 <tcp_v4_rcv+0x657>
    0.00 :   ffffffff81a1ed85:       movq    0xc8(%rbx), %r14
    0.00 :   ffffffff81a1ed8c:       movl    %r12d, -0x44(%rbp)
    0.00 :   ffffffff81a1ed90:       jmp     0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1ed92:       orl     $0x20, %eax
    0.00 :   ffffffff81a1ed95:       movq    0xc8(%rbx), %r14
    0.00 :   ffffffff81a1ed9c:       movb    %al, 0x82(%rbx)
    0.00 :   ffffffff81a1eda2:       movzbl  0x81(%rbx), %eax
    0.00 :   ffffffff81a1eda9:       testb   $0x60, %al
    0.00 :   ffffffff81a1edab:       jne     0xffffffff81a1f28c <tcp_v4_rcv+0x69c>
    0.00 :   ffffffff81a1edb1:       andl    $-0x61, %edi
    0.00 :   ffffffff81a1edb4:       movl    %r12d, -0x44(%rbp)
    0.00 :   ffffffff81a1edb8:       movb    %dil, 0x80(%rbx)
    0.00 :   ffffffff81a1edbf:       movzbl  0xc(%r14), %ecx
    0.00 :   ffffffff81a1edc4:       movq    0x18(%rbx), %r13
    0.00 :   ffffffff81a1edc8:       movzwl  0x2(%r14), %eax
    0.00 :   ffffffff81a1edcd:       movzwl  (%r14), %r12d
    0.00 :   ffffffff81a1edd1:       movq    0x300(%r15), %rsi
    0.00 :   ffffffff81a1edd8:       shrb    $0x4, %cl
    0.00 :   ffffffff81a1eddb:       testq   %r13, %r13
    0.00 :   ffffffff81a1edde:       movb    %cl, -0x45(%rbp)
    0.00 :   ffffffff81a1ede1:       je      0xffffffff81a1ef45 <tcp_v4_rcv+0x355>
    0.00 :   ffffffff81a1ede7:       cmpq    $-0x7e6d6050, 0x60(%rbx) # imm = 0x81929FB0
    0.00 :   ffffffff81a1edef:       movl    $0x1, %edx
    0.00 :   ffffffff81a1edf4:       je      0xffffffff81a1f1f3 <tcp_v4_rcv+0x603>
    0.00 :   ffffffff81a1edfa:       movq    $0x0, 0x60(%rbx)
    0.00 :   ffffffff81a1ee02:       movq    $0x0, 0x18(%rbx)
    0.00 :   ffffffff81a1ee0a:       movzbl  0x12(%r13), %eax
    0.00 :   ffffffff81a1ee0f:       cmpb    $0x6, %al
    0.00 :   ffffffff81a1ee11:       jne     0xffffffff81a1f171 <tcp_v4_rcv+0x581>
    0.00 :   ffffffff81a1ee17:       xorl    %edi, %edi
    0.00 :   ffffffff81a1ee19:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1ee1c:       callq   0xffffffff81a1b5d0 <__xfrm_policy_check2.constprop.0>
    0.00 :   ffffffff81a1ee21:       testl   %eax, %eax
    0.00 :   ffffffff81a1ee23:       je      0xffffffff81a1f2d5 <tcp_v4_rcv+0x6e5>
    0.00 :   ffffffff81a1ee29:       movq    -0x40(%rbp), %rsi
    0.00 :   ffffffff81a1ee2d:       movq    %r14, %rdx
    0.00 :   ffffffff81a1ee30:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1ee33:       callq   0xffffffff81a1a0c0 <tcp_v4_fill_cb>
    0.00 :   ffffffff81a1ee38:       movzbl  0x80(%rbx), %eax
    0.00 :   ffffffff81a1ee3f:       andl    $0x60, %eax
    0.00 :   ffffffff81a1ee42:       cmpb    $0x20, %al
    0.00 :   ffffffff81a1ee44:       je      0xffffffff81a1ef05 <tcp_v4_rcv+0x315>
    0.00 :   ffffffff81a1ee4a:       testb   $0x20, 0x82(%rbx)
    0.00 :   ffffffff81a1ee51:       jne     0xffffffff81a1ef05 <tcp_v4_rcv+0x315>
    0.00 :   ffffffff81a1ee57:       cmpb    $0x60, %al
    0.00 :   ffffffff81a1ee59:       je      0xffffffff81a1eee8 <tcp_v4_rcv+0x2f8>
    0.00 :   ffffffff81a1ee5f:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1ee62:       callq   0xffffffff81932ec0 <__skb_checksum_complete>
    0.00 :   ffffffff81a1ee67:       testw   %ax, %ax
    0.00 :   ffffffff81a1ee6a:       je      0xffffffff81a1ef05 <tcp_v4_rcv+0x315>
    0.00 :   ffffffff81a1ee70:       movq    %r13, %rdi
    0.00 :   ffffffff81a1ee73:       callq   0xffffffff819f79c0 <inet_twsk_put>
    0.00 :   ffffffff81a1ee78:       movl    $0x5, -0x34(%rbp)
    0.00 :   ffffffff81a1ee7f:       movq    0x150(%r15), %rax
    0.00 :   ffffffff81a1ee86:       incq    %gs:0x78(%rax)
    0.00 :   ffffffff81a1ee8b:       movq    0x150(%r15), %rax
    0.00 :   ffffffff81a1ee92:       incq    %gs:0x68(%rax)
    0.00 :   ffffffff81a1ee97:       movl    -0x34(%rbp), %esi
    0.00 :   ffffffff81a1ee9a:       testl   $0xfffffffd, %esi # imm = 0xFFFFFFFD
    0.00 :   ffffffff81a1eea0:       jne     0xffffffff81a1ec4f <tcp_v4_rcv+0x5f>
    0.00 :   ffffffff81a1eea6:       jmp     0xffffffff81a1ec4a <tcp_v4_rcv+0x5a>
    0.00 :   ffffffff81a1eeab:       addl    0x88(%rbx), %edi
    0.00 :   ffffffff81a1eeb1:       adcl    $0x0, %edi
    0.00 :   ffffffff81a1eeb4:       movl    %edi, %esi
    0.00 :   ffffffff81a1eeb6:       xorw    %di, %di
    0.00 :   ffffffff81a1eeb9:       shll    $0x10, %esi
    0.00 :   ffffffff81a1eebc:       addl    %esi, %edi
    0.00 :   ffffffff81a1eebe:       adcl    $0xffff, %edi   # imm = 0xFFFF
    0.00 :   ffffffff81a1eec4:       notl    %edi
    0.00 :   ffffffff81a1eec6:       shrl    $0x10, %edi
    0.00 :   ffffffff81a1eec9:       jne     0xffffffff81a1ed74 <tcp_v4_rcv+0x184>
    0.00 :   ffffffff81a1eecf:       orl     $0x20, %eax
    0.00 :   ffffffff81a1eed2:       movq    0xc8(%rbx), %r14
    0.00 :   ffffffff81a1eed9:       movb    %al, 0x82(%rbx)
    0.00 :   ffffffff81a1eedf:       movl    %r12d, -0x44(%rbp)
    0.00 :   ffffffff81a1eee3:       jmp     0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1eee8:       movzwl  0x88(%rbx), %edx
    0.00 :   ffffffff81a1eeef:       movq    0xc8(%rbx), %rax
    0.00 :   ffffffff81a1eef6:       subq    0xc0(%rbx), %rax
    0.00 :   ffffffff81a1eefd:       cmpl    %eax, %edx
    0.00 :   ffffffff81a1eeff:       js      0xffffffff81a1ee5f <tcp_v4_rcv+0x26f>
    0.00 :   ffffffff81a1ef05:       movq    %r14, %rdx
    0.00 :   ffffffff81a1ef08:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1ef0b:       movq    %r13, %rdi
    0.00 :   ffffffff81a1ef0e:       callq   0xffffffff81a20540 <tcp_timewait_state_process>
    0.00 :   ffffffff81a1ef13:       cmpl    $0x2, %eax
    0.00 :   ffffffff81a1ef16:       je      0xffffffff81a1f046 <tcp_v4_rcv+0x456>
    0.00 :   ffffffff81a1ef1c:       cmpl    $0x3, %eax
    0.00 :   ffffffff81a1ef1f:       je      0xffffffff81a1f0d4 <tcp_v4_rcv+0x4e4>
    0.00 :   ffffffff81a1ef25:       decl    %eax
    0.00 :   ffffffff81a1ef27:       jne     0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1ef2d:       movq    %r13, %rdi
    0.00 :   ffffffff81a1ef30:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1ef33:       callq   0xffffffff81a1b0f0 <tcp_v4_send_reset>
    0.00 :   ffffffff81a1ef38:       movq    %r13, %rdi
    0.00 :   ffffffff81a1ef3b:       callq   0xffffffff819f7d00 <inet_twsk_deschedule_put>
    0.00 :   ffffffff81a1ef40:       jmp     0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1ef45:       movq    0x58(%rbx), %rcx
    0.00 :   ffffffff81a1ef49:       movzwl  0xb0(%rbx), %edx
    0.00 :   ffffffff81a1ef50:       addq    0xc0(%rbx), %rdx
    0.00 :   ffffffff81a1ef57:       movq    %rcx, %rdi
    0.00 :   ffffffff81a1ef5a:       andq    $-0x2, %rdi
    0.00 :   ffffffff81a1ef5e:       cmpq    $0x1, %rcx
    0.00 :   ffffffff81a1ef62:       jbe     0xffffffff81a1ef70 <tcp_v4_rcv+0x380>
    0.00 :   ffffffff81a1ef64:       movl    0x94(%rdi), %r10d
    0.00 :   ffffffff81a1ef6b:       testl   %r10d, %r10d
    0.00 :   ffffffff81a1ef6e:       jne     0xffffffff81a1ef77 <tcp_v4_rcv+0x387>
    0.00 :   ffffffff81a1ef70:       movl    0x90(%rbx), %r10d
    0.00 :   ffffffff81a1ef77:       movl    0x10(%rdx), %r8d
    0.00 :   ffffffff81a1ef7b:       movl    0xc(%rdx), %r11d
    0.00 :   ffffffff81a1ef7f:       rolw    $0x8, %ax
    0.00 :   ffffffff81a1ef83:       movq    (%rdi), %rdx
    0.00 :   ffffffff81a1ef86:       movzwl  %ax, %r9d
    0.00 :   ffffffff81a1ef8a:       movl    -0x44(%rbp), %eax
    0.00 :   ffffffff81a1ef8d:       movl    %r12d, %ecx
    0.00 :   ffffffff81a1ef90:       movl    %r10d, -0x5c(%rbp)
    0.00 :   ffffffff81a1ef94:       movl    %r9d, -0x58(%rbp)
    0.00 :   ffffffff81a1ef98:       movl    %r8d, -0x54(%rbp)
    0.00 :   ffffffff81a1ef9c:       movq    %rsi, -0x50(%rbp)
    0.00 :   ffffffff81a1efa0:       movq    0x4b0(%rdx), %rdi
    0.00 :   ffffffff81a1efa7:       movl    %r10d, (%rsp)
    0.00 :   ffffffff81a1efab:       movl    %r11d, %edx
    0.00 :   ffffffff81a1efae:       movl    %eax, 0x8(%rsp)
    0.00 :   ffffffff81a1efb2:       movl    %r11d, -0x60(%rbp)
    0.00 :   ffffffff81a1efb6:       movq    %rdi, -0x68(%rbp)
    0.00 :   ffffffff81a1efba:       callq   0xffffffff819f43d0 <__inet_lookup_established>
    0.00 :   ffffffff81a1efbf:       testq   %rax, %rax
    0.00 :   ffffffff81a1efc2:       movq    -0x50(%rbp), %rsi
    0.00 :   ffffffff81a1efc6:       movl    -0x54(%rbp), %r8d
    0.00 :   ffffffff81a1efca:       movl    -0x58(%rbp), %r9d
    0.00 :   ffffffff81a1efce:       movl    -0x5c(%rbp), %r10d
    0.00 :   ffffffff81a1efd2:       movq    %rax, %r13
    0.00 :   ffffffff81a1efd5:       movl    $0x1, %edx
    0.00 :   ffffffff81a1efda:       jne     0xffffffff81a1ee0a <tcp_v4_rcv+0x21a>
    0.00 :   ffffffff81a1efe0:       movzbl  -0x45(%rbp), %ecx
    0.00 :   ffffffff81a1efe4:       movl    -0x44(%rbp), %eax
    0.00 :   ffffffff81a1efe7:       movq    %rbx, %rdx
    0.00 :   ffffffff81a1efea:       movl    %r8d, (%rsp)
    0.00 :   ffffffff81a1efee:       movq    -0x68(%rbp), %rdi
    0.00 :   ffffffff81a1eff2:       movl    -0x60(%rbp), %r8d
    0.00 :   ffffffff81a1eff6:       movl    %r9d, 0x8(%rsp)
    0.00 :   ffffffff81a1effb:       movl    %r12d, %r9d
    0.00 :   ffffffff81a1effe:       movl    %eax, 0x18(%rsp)
    0.00 :   ffffffff81a1f002:       movl    %r10d, 0x10(%rsp)
    0.00 :   ffffffff81a1f007:       shll    $0x2, %ecx
    0.00 :   ffffffff81a1f00a:       callq   0xffffffff819f49d0 <__inet_lookup_listener>
    0.00 :   ffffffff81a1f00f:       testq   %rax, %rax
    0.00 :   ffffffff81a1f012:       movq    %rax, %r13
    0.00 :   ffffffff81a1f015:       je      0xffffffff81a1f413 <tcp_v4_rcv+0x823>
    0.00 :   ffffffff81a1f01b:       xorl    %edx, %edx
    0.00 :   ffffffff81a1f01d:       jmp     0xffffffff81a1ee0a <tcp_v4_rcv+0x21a>
    0.00 :   ffffffff81a1f022:       cmpl    $0x13, %edi
    0.00 :   ffffffff81a1f025:       jbe     0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1f02b:       leal    0x14(%rax), %esi
    0.00 :   ffffffff81a1f02e:       subl    %edi, %esi
    0.00 :   ffffffff81a1f030:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f033:       callq   0xffffffff819390e0 <__pskb_pull_tail>
    0.00 :   ffffffff81a1f038:       testq   %rax, %rax
    0.00 :   ffffffff81a1f03b:       jne     0xffffffff81a1ecd1 <tcp_v4_rcv+0xe1>
    0.00 :   ffffffff81a1f041:       jmp     0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1f046:       movl    0xf0(%r13), %esi
    0.00 :   ffffffff81a1f04d:       movzbl  0x93(%r13), %r15d
    0.00 :   ffffffff81a1f055:       movzbl  0x90(%r13), %r12d
    0.00 :   ffffffff81a1f05d:       movl    0x14(%r13), %r14d
    0.00 :   ffffffff81a1f061:       movl    %esi, -0x40(%rbp)
    0.00 :   ffffffff81a1f064:       callq   0xffffffff811160b0 <ktime_get>
    0.00 :   ffffffff81a1f069:       movabsq $0x431bde82d7b634db, %rdx # imm = 0x431BDE82D7B634DB
    0.00 :   ffffffff81a1f073:       movl    0xec(%r13), %r9d
    0.00 :   ffffffff81a1f07a:       movzbl  0x8d(%r13), %ecx
    0.00 :   ffffffff81a1f082:       mulq    %rdx
    0.00 :   ffffffff81a1f085:       movl    0xe8(%r13), %r8d
    0.00 :   ffffffff81a1f08c:       movl    0x7c(%r13), %eax
    0.00 :   ffffffff81a1f090:       movl    -0x40(%rbp), %esi
    0.00 :   ffffffff81a1f093:       andl    $0x1, %r12d
    0.00 :   ffffffff81a1f097:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f09a:       shrl    %cl, %r8d
    0.00 :   ffffffff81a1f09d:       movl    %eax, %ecx
    0.00 :   ffffffff81a1f09f:       shrq    $0x12, %rdx
    0.00 :   ffffffff81a1f0a3:       addl    %edx, %r9d
    0.00 :   ffffffff81a1f0a6:       movl    0x84(%r13), %edx
    0.00 :   ffffffff81a1f0ad:       movl    %r15d, 0x18(%rsp)
    0.00 :   ffffffff81a1f0b2:       movl    %r12d, 0x10(%rsp)
    0.00 :   ffffffff81a1f0b7:       movl    %r14d, 0x8(%rsp)
    0.00 :   ffffffff81a1f0bc:       movl    %esi, (%rsp)
    0.00 :   ffffffff81a1f0bf:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f0c2:       callq   0xffffffff81a1b8a0 <tcp_v4_send_ack.constprop.0>
    0.00 :   ffffffff81a1f0c7:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f0ca:       callq   0xffffffff819f79c0 <inet_twsk_put>
    0.00 :   ffffffff81a1f0cf:       jmp     0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1f0d4:       movq    0x58(%rbx), %rax
    0.00 :   ffffffff81a1f0d8:       cmpq    $0x1, %rax
    0.00 :   ffffffff81a1f0dc:       jbe     0xffffffff81a1f0ec <tcp_v4_rcv+0x4fc>
    0.00 :   ffffffff81a1f0de:       andq    $-0x2, %rax
    0.00 :   ffffffff81a1f0e2:       movl    0x94(%rax), %edx
    0.00 :   ffffffff81a1f0e8:       testl   %edx, %edx
    0.00 :   ffffffff81a1f0ea:       jne     0xffffffff81a1f0f2 <tcp_v4_rcv+0x502>
    0.00 :   ffffffff81a1f0ec:       movl    0x90(%rbx), %edx
    0.00 :   ffffffff81a1f0f2:       movzwl  0x2(%r14), %eax
    0.00 :   ffffffff81a1f0f7:       movzbl  0xc(%r14), %ecx
    0.00 :   ffffffff81a1f0fc:       movq    -0x40(%rbp), %rdi
    0.00 :   ffffffff81a1f100:       movl    -0x44(%rbp), %r11d
    0.00 :   ffffffff81a1f104:       movzwl  (%r14), %r9d
    0.00 :   ffffffff81a1f108:       movq    0x300(%r15), %rsi
    0.00 :   ffffffff81a1f10f:       rolw    $0x8, %ax
    0.00 :   ffffffff81a1f113:       movl    0xc(%rdi), %r8d
    0.00 :   ffffffff81a1f117:       movl    %edx, 0x10(%rsp)
    0.00 :   ffffffff81a1f11b:       movzwl  %ax, %eax
    0.00 :   ffffffff81a1f11e:       movl    %r11d, 0x18(%rsp)
    0.00 :   ffffffff81a1f123:       shrb    $0x4, %cl
    0.00 :   ffffffff81a1f126:       movl    %eax, 0x8(%rsp)
    0.00 :   ffffffff81a1f12a:       movl    0x10(%rdi), %eax
    0.00 :   ffffffff81a1f12d:       movzbl  %cl, %ecx
    0.00 :   ffffffff81a1f130:       shll    $0x2, %ecx
    0.00 :   ffffffff81a1f133:       movq    %rbx, %rdx
    0.00 :   ffffffff81a1f136:       movq    %r15, %rdi
    0.00 :   ffffffff81a1f139:       movl    %eax, (%rsp)
    0.00 :   ffffffff81a1f13c:       callq   0xffffffff819f49d0 <__inet_lookup_listener>
    0.00 :   ffffffff81a1f141:       testq   %rax, %rax
    0.00 :   ffffffff81a1f144:       movq    %rax, %r12
    0.00 :   ffffffff81a1f147:       je      0xffffffff81a1f046 <tcp_v4_rcv+0x456>
    0.00 :   ffffffff81a1f14d:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f150:       movq    %r12, %r13
    0.00 :   ffffffff81a1f153:       callq   0xffffffff819f7d00 <inet_twsk_deschedule_put>
    0.00 :   ffffffff81a1f158:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f15b:       callq   0xffffffff81a1a190 <tcp_v4_restore_cb>
    0.00 :   ffffffff81a1f160:       movzbl  0x12(%r12), %edx
    0.00 :   ffffffff81a1f166:       cmpb    $0x6, %dl
    0.00 :   ffffffff81a1f169:       je      0xffffffff81a1ee17 <tcp_v4_rcv+0x227>
    0.00 :   ffffffff81a1f16f:       xorl    %edx, %edx
    0.00 :   ffffffff81a1f171:       movzbl  0x12(%r13), %eax
    0.00 :   ffffffff81a1f176:       cmpb    $0xc, %al
    0.00 :   ffffffff81a1f178:       jne     0xffffffff81a1f640 <tcp_v4_rcv+0xa50>
    0.00 :   ffffffff81a1f17e:       movq    0x60(%r13), %r12
    0.00 :   ffffffff81a1f182:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f185:       movb    $0x0, -0x35(%rbp)
    0.00 :   ffffffff81a1f189:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f18c:       callq   0xffffffff81a1b5d0 <__xfrm_policy_check2.constprop.0>
    0.00 :   ffffffff81a1f191:       testl   %eax, %eax
    0.00 :   ffffffff81a1f193:       jne     0xffffffff81a1f2e7 <tcp_v4_rcv+0x6f7>
    0.00 :   ffffffff81a1f199:       movl    0xb8(%rbx), %esi
    0.00 :   ffffffff81a1f19f:       movq    0xc0(%rbx), %rdx
    0.00 :   ffffffff81a1f1a6:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f1a9:       movl    $0xe, -0x34(%rbp)
    0.00 :   ffffffff81a1f1b0:       callq   0xffffffff81a1b590 <sk_drops_add.isra.0>
    0.00 :   ffffffff81a1f1b5:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f1b8:       callq   0xffffffff81a1dbd0 <reqsk_put>
    0.00 :   ffffffff81a1f1bd:       movl    -0x34(%rbp), %esi
    0.00 :   ffffffff81a1f1c0:       jmp     0xffffffff81a1ec4f <tcp_v4_rcv+0x5f>
    0.00 :   ffffffff81a1f1c5:       movl    $0x4, -0x34(%rbp)
    0.00 :   ffffffff81a1f1cc:       jmp     0xffffffff81a1ee8b <tcp_v4_rcv+0x29b>
    0.00 :   ffffffff81a1f1d1:       cmpl    %eax, %edi
    0.00 :   ffffffff81a1f1d3:       jb      0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1f1d9:       subl    %edi, %esi
    0.00 :   ffffffff81a1f1db:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f1de:       addl    %eax, %esi
    0.00 :   ffffffff81a1f1e0:       callq   0xffffffff819390e0 <__pskb_pull_tail>
    0.00 :   ffffffff81a1f1e5:       testq   %rax, %rax
    0.00 :   ffffffff81a1f1e8:       jne     0xffffffff81a1ed06 <tcp_v4_rcv+0x116>
    0.00 :   ffffffff81a1f1ee:       jmp     0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1f1f3:       movzbl  0x12(%r13), %ecx
    0.00 :   ffffffff81a1f1f8:       movl    $0x1, %eax
    0.00 :   ffffffff81a1f1fd:       shll    %cl, %eax
    0.00 :   ffffffff81a1f1ff:       testl   $0xffffefbf, %eax # imm = 0xFFFFEFBF
    0.00 :   ffffffff81a1f204:       je      0xffffffff81a1edfa <tcp_v4_rcv+0x20a>
    0.00 :   ffffffff81a1f20a:       movq    0x60(%r13), %rdx
    0.00 :   ffffffff81a1f20e:       shrq    $0x17, %rdx
    0.00 :   ffffffff81a1f212:       andl    $0x1, %edx
    0.00 :   ffffffff81a1f215:       xorl    $0x1, %edx
    0.00 :   ffffffff81a1f218:       jmp     0xffffffff81a1edfa <tcp_v4_rcv+0x20a>
    0.00 :   ffffffff81a1f21d:       movq    0xc8(%rbx), %r14
    0.00 :   ffffffff81a1f224:       movzwl  0x88(%rbx), %edi
    0.00 :   ffffffff81a1f22b:       movq    %r14, %rsi
    0.00 :   ffffffff81a1f22e:       subq    %r8, %rsi
    0.00 :   ffffffff81a1f231:       cmpl    %esi, %edi
    0.00 :   ffffffff81a1f233:       js      0xffffffff81a1f2af <tcp_v4_rcv+0x6bf>
    0.00 :   ffffffff81a1f235:       orl     $0x20, %eax
    0.00 :   ffffffff81a1f238:       movb    %al, 0x82(%rbx)
    0.00 :   ffffffff81a1f23e:       movl    %r12d, -0x44(%rbp)
    0.00 :   ffffffff81a1f242:       jmp     0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1f247:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f24a:       callq   0xffffffff81932ec0 <__skb_checksum_complete>
    0.00 :   ffffffff81a1f24f:       movzbl  0x82(%rbx), %esi
    0.00 :   ffffffff81a1f256:       testw   %ax, %ax
    0.00 :   ffffffff81a1f259:       sete    %dil
    0.00 :   ffffffff81a1f25d:       shll    $0x5, %edi
    0.00 :   ffffffff81a1f260:       andl    $-0x21, %esi
    0.00 :   ffffffff81a1f263:       orl     %edi, %esi
    0.00 :   ffffffff81a1f265:       testw   %ax, %ax
    0.00 :   ffffffff81a1f268:       movb    %sil, 0x82(%rbx)
    0.00 :   ffffffff81a1f26f:       jne     0xffffffff81a1ee78 <tcp_v4_rcv+0x288>
    0.00 :   ffffffff81a1f275:       movzwl  0xb0(%rbx), %eax
    0.00 :   ffffffff81a1f27c:       addq    0xc0(%rbx), %rax
    0.00 :   ffffffff81a1f283:       movq    %rax, -0x40(%rbp)
    0.00 :   ffffffff81a1f287:       jmp     0xffffffff81a1ed85 <tcp_v4_rcv+0x195>
    0.00 :   ffffffff81a1f28c:       movl    %eax, %esi
    0.00 :   ffffffff81a1f28e:       andl    $-0x61, %eax
    0.00 :   ffffffff81a1f291:       movl    %r12d, -0x44(%rbp)
    0.00 :   ffffffff81a1f295:       shrb    $0x5, %sil
    0.00 :   ffffffff81a1f299:       addl    $0x3, %esi
    0.00 :   ffffffff81a1f29c:       andl    $0x3, %esi
    0.00 :   ffffffff81a1f29f:       shll    $0x5, %esi
    0.00 :   ffffffff81a1f2a2:       orl     %esi, %eax
    0.00 :   ffffffff81a1f2a4:       movb    %al, 0x81(%rbx)
    0.00 :   ffffffff81a1f2aa:       jmp     0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1f2af:       movl    0x70(%rbx), %r9d
    0.00 :   ffffffff81a1f2b3:       movq    -0x40(%rbp), %rcx
    0.00 :   ffffffff81a1f2b7:       xorl    %r8d, %r8d
    0.00 :   ffffffff81a1f2ba:       leal    0x6(%r9), %eax
    0.00 :   ffffffff81a1f2be:       shll    $0x8, %eax
    0.00 :   ffffffff81a1f2c1:       addl    0x10(%rcx), %r8d
    0.00 :   ffffffff81a1f2c5:       adcl    0xc(%rcx), %r8d
    0.00 :   ffffffff81a1f2c9:       adcl    %eax, %r8d
    0.00 :   ffffffff81a1f2cc:       adcl    $0x0, %r8d
    0.00 :   ffffffff81a1f2d0:       jmp     0xffffffff81a1ed74 <tcp_v4_rcv+0x184>
    0.00 :   ffffffff81a1f2d5:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f2d8:       callq   0xffffffff819f79c0 <inet_twsk_put>
    0.00 :   ffffffff81a1f2dd:       movl    $0xe, %esi
    0.00 :   ffffffff81a1f2e2:       jmp     0xffffffff81a1ec4f <tcp_v4_rcv+0x5f>
    0.00 :   ffffffff81a1f2e7:       movzbl  0x80(%rbx), %eax
    0.00 :   ffffffff81a1f2ee:       movl    $0x0, -0x34(%rbp)
    0.00 :   ffffffff81a1f2f5:       andl    $0x60, %eax
    0.00 :   ffffffff81a1f2f8:       cmpb    $0x20, %al
    0.00 :   ffffffff81a1f2fa:       je      0xffffffff81a1f33e <tcp_v4_rcv+0x74e>
    0.00 :   ffffffff81a1f2fc:       testb   $0x20, 0x82(%rbx)
    0.00 :   ffffffff81a1f303:       jne     0xffffffff81a1f33e <tcp_v4_rcv+0x74e>
    0.00 :   ffffffff81a1f305:       cmpb    $0x60, %al
    0.00 :   ffffffff81a1f307:       je      0xffffffff81a1f325 <tcp_v4_rcv+0x735>
    0.00 :   ffffffff81a1f309:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f30c:       callq   0xffffffff81932ec0 <__skb_checksum_complete>
    0.00 :   ffffffff81a1f311:       testw   %ax, %ax
    0.00 :   ffffffff81a1f314:       je      0xffffffff81a1f33e <tcp_v4_rcv+0x74e>
    0.00 :   ffffffff81a1f316:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f319:       callq   0xffffffff81a1dbd0 <reqsk_put>
    0.00 :   ffffffff81a1f31e:       nop
    0.00 :   ffffffff81a1f320:       jmp     0xffffffff81a1ee78 <tcp_v4_rcv+0x288>
    0.00 :   ffffffff81a1f325:       movzwl  0x88(%rbx), %edx
    0.00 :   ffffffff81a1f32c:       movq    0xc8(%rbx), %rax
    0.00 :   ffffffff81a1f333:       subq    0xc0(%rbx), %rax
    0.00 :   ffffffff81a1f33a:       cmpl    %eax, %edx
    0.00 :   ffffffff81a1f33c:       js      0xffffffff81a1f309 <tcp_v4_rcv+0x719>
    0.00 :   ffffffff81a1f33e:       movzbl  0x12(%r12), %eax
    0.00 :   ffffffff81a1f344:       cmpb    $0xa, %al
    0.00 :   ffffffff81a1f346:       jne     0xffffffff81a1f5d9 <tcp_v4_rcv+0x9e9>
    0.00 :   ffffffff81a1f34c:       leaq    0x80(%r12), %rdi
    0.00 :   ffffffff81a1f354:       movl    $0x1, %eax
    0.00 :   ffffffff81a1f359:       lock
    0.00 :   ffffffff81a1f35a:       xaddl   %eax, 0x80(%r12)
    0.00 :   ffffffff81a1f363:       testl   %eax, %eax
    0.00 :   ffffffff81a1f365:       je      0xffffffff81a1f5ca <tcp_v4_rcv+0x9da>
    0.00 :   ffffffff81a1f36b:       leal    0x1(%rax), %edx
    0.00 :   ffffffff81a1f36e:       orl     %eax, %edx
    0.00 :   ffffffff81a1f370:       js      0xffffffff81a1f5b5 <tcp_v4_rcv+0x9c5>
    0.00 :   ffffffff81a1f376:       movq    0xc8(%rbx), %rax
    0.00 :   ffffffff81a1f37d:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f380:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f383:       movzbl  0xc(%rax), %edx
    0.00 :   ffffffff81a1f387:       shrb    $0x4, %dl
    0.00 :   ffffffff81a1f38a:       movzbl  %dl, %edx
    0.00 :   ffffffff81a1f38d:       shll    $0x2, %edx
    0.00 :   ffffffff81a1f390:       callq   0xffffffff81985cf0 <sk_filter_trim_cap>
    0.00 :   ffffffff81a1f395:       testl   %eax, %eax
    0.00 :   ffffffff81a1f397:       je      0xffffffff81a1f4fc <tcp_v4_rcv+0x90c>
    0.00 :   ffffffff81a1f39d:       movl    $0x6, -0x34(%rbp)
    0.00 :   ffffffff81a1f3a4:       leaq    0x80(%r13), %rdi
    0.00 :   ffffffff81a1f3ab:       movl    $0xffffffff, %eax # imm = 0xFFFFFFFF
    0.00 :   ffffffff81a1f3b0:       lock
    0.00 :   ffffffff81a1f3b1:       xaddl   %eax, 0x80(%r13)
    0.00 :   ffffffff81a1f3b9:       cmpl    $0x1, %eax
    0.00 :   ffffffff81a1f3bc:       je      0xffffffff81a1f48a <tcp_v4_rcv+0x89a>
    0.00 :   ffffffff81a1f3c2:       testl   %eax, %eax
    0.00 :   ffffffff81a1f3c4:       jle     0xffffffff81a1f5a5 <tcp_v4_rcv+0x9b5>
    0.00 :   ffffffff81a1f3ca:       cmpb    $0x0, -0x35(%rbp)
    0.00 :   ffffffff81a1f3ce:       je      0xffffffff81a1f580 <tcp_v4_rcv+0x990>
    0.00 :   ffffffff81a1f3d4:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f3d7:       callq   0xffffffff81a1a190 <tcp_v4_restore_cb>
    0.00 :   ffffffff81a1f3dc:       leaq    0x80(%r12), %rdi
    0.00 :   ffffffff81a1f3e4:       movl    $0xffffffff, %eax # imm = 0xFFFFFFFF
    0.00 :   ffffffff81a1f3e9:       lock
    0.00 :   ffffffff81a1f3ea:       xaddl   %eax, 0x80(%r12)
    0.00 :   ffffffff81a1f3f3:       cmpl    $0x1, %eax
    0.00 :   ffffffff81a1f3f6:       je      0xffffffff81a1f47d <tcp_v4_rcv+0x88d>
    0.00 :   ffffffff81a1f3fc:       testl   %eax, %eax
    0.00 :   ffffffff81a1f3fe:       jg      0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1f404:       movl    $0x3, %esi
    0.00 :   ffffffff81a1f409:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a1f40e:       jmp     0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1f413:       xorl    %edi, %edi
    0.00 :   ffffffff81a1f415:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f418:       movl    $0x3, -0x34(%rbp)
    0.00 :   ffffffff81a1f41f:       callq   0xffffffff81a1b5d0 <__xfrm_policy_check2.constprop.0>
    0.00 :   ffffffff81a1f424:       testl   %eax, %eax
    0.00 :   ffffffff81a1f426:       jne     0xffffffff81a1f432 <tcp_v4_rcv+0x842>
    0.00 :   ffffffff81a1f428:       movl    $0x3, %esi
    0.00 :   ffffffff81a1f42d:       jmp     0xffffffff81a1ec4f <tcp_v4_rcv+0x5f>
    0.00 :   ffffffff81a1f432:       movq    -0x40(%rbp), %rsi
    0.00 :   ffffffff81a1f436:       movq    %r14, %rdx
    0.00 :   ffffffff81a1f439:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f43c:       callq   0xffffffff81a1a0c0 <tcp_v4_fill_cb>
    0.00 :   ffffffff81a1f441:       movzbl  0x80(%rbx), %eax
    0.00 :   ffffffff81a1f448:       andl    $0x60, %eax
    0.00 :   ffffffff81a1f44b:       cmpb    $0x20, %al
    0.00 :   ffffffff81a1f44d:       je      0xffffffff81a1f471 <tcp_v4_rcv+0x881>
    0.00 :   ffffffff81a1f44f:       testb   $0x20, 0x82(%rbx)
    0.00 :   ffffffff81a1f456:       jne     0xffffffff81a1f471 <tcp_v4_rcv+0x881>
    0.00 :   ffffffff81a1f458:       cmpb    $0x60, %al
    0.00 :   ffffffff81a1f45a:       je      0xffffffff81a1f61e <tcp_v4_rcv+0xa2e>
    0.00 :   ffffffff81a1f460:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f463:       callq   0xffffffff81932ec0 <__skb_checksum_complete>
    0.00 :   ffffffff81a1f468:       testw   %ax, %ax
    0.00 :   ffffffff81a1f46b:       jne     0xffffffff81a1ee78 <tcp_v4_rcv+0x288>
    0.00 :   ffffffff81a1f471:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f474:       xorl    %edi, %edi
    0.00 :   ffffffff81a1f476:       callq   0xffffffff81a1b0f0 <tcp_v4_send_reset>
    0.00 :   ffffffff81a1f47b:       jmp     0xffffffff81a1f428 <tcp_v4_rcv+0x838>
    0.00 :   ffffffff81a1f47d:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f480:       callq   0xffffffff8192b220 <sk_free>
    0.00 :   ffffffff81a1f485:       jmp     0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1f48a:       movl    0x80(%r13), %eax
    0.00 :   ffffffff81a1f491:       testl   %eax, %eax
    0.00 :   ffffffff81a1f493:       jne     0xffffffff81a1f617 <tcp_v4_rcv+0xa27>
    0.00 :   ffffffff81a1f499:       movq    0xc0(%r13), %rax
    0.00 :   ffffffff81a1f4a0:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f4a3:       movq    0x30(%rax), %rax
    0.00 :   ffffffff81a1f4a7:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81a1f4ac:       movq    0x60(%r13), %rdi
    0.00 :   ffffffff81a1f4b0:       testq   %rdi, %rdi
    0.00 :   ffffffff81a1f4b3:       je      0xffffffff81a1f4d8 <tcp_v4_rcv+0x8e8>
    0.00 :   ffffffff81a1f4b5:       leaq    0x80(%rdi), %rdx
    0.00 :   ffffffff81a1f4bc:       orl     $-0x1, %eax
    0.00 :   ffffffff81a1f4bf:       lock
    0.00 :   ffffffff81a1f4c0:       xaddl   %eax, 0x80(%rdi)
    0.00 :   ffffffff81a1f4c7:       cmpl    $0x1, %eax
    0.00 :   ffffffff81a1f4ca:       je      0xffffffff81a1f5f8 <tcp_v4_rcv+0xa08>
    0.00 :   ffffffff81a1f4d0:       testl   %eax, %eax
    0.00 :   ffffffff81a1f4d2:       jle     0xffffffff81a1f605 <tcp_v4_rcv+0xa15>
    0.00 :   ffffffff81a1f4d8:       movq    0xd0(%r13), %rdi
    0.00 :   ffffffff81a1f4df:       callq   0xffffffff81218190 <kfree>
    0.00 :   ffffffff81a1f4e4:       movq    0xc0(%r13), %rax
    0.00 :   ffffffff81a1f4eb:       movq    %r13, %rsi
    0.00 :   ffffffff81a1f4ee:       movq    0x8(%rax), %rdi
    0.00 :   ffffffff81a1f4f2:       callq   0xffffffff8127d130 <kmem_cache_free>
    0.00 :   ffffffff81a1f4f7:       jmp     0xffffffff81a1f3ca <tcp_v4_rcv+0x7da>
    0.00 :   ffffffff81a1f4fc:       movzwl  0xb0(%rbx), %eax
    0.00 :   ffffffff81a1f503:       movq    0xc8(%rbx), %r14
    0.00 :   ffffffff81a1f50a:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f50d:       addq    0xc0(%rbx), %rax
    0.00 :   ffffffff81a1f514:       movq    %r14, %rdx
    0.00 :   ffffffff81a1f517:       movq    %rax, %rsi
    0.00 :   ffffffff81a1f51a:       movq    %rax, -0x40(%rbp)
    0.00 :   ffffffff81a1f51e:       callq   0xffffffff81a1a0c0 <tcp_v4_fill_cb>
    0.00 :   ffffffff81a1f523:       leaq    -0x35(%rbp), %r8
    0.00 :   ffffffff81a1f527:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a1f529:       movq    %r13, %rdx
    0.00 :   ffffffff81a1f52c:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f52f:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f532:       callq   0xffffffff81a20900 <tcp_check_req>
    0.00 :   ffffffff81a1f537:       testq   %rax, %rax
    0.00 :   ffffffff81a1f53a:       je      0xffffffff81a1f3a4 <tcp_v4_rcv+0x7b4>
    0.00 :   ffffffff81a1f540:       movq    0x68(%rbx), %rdi
    0.00 :   ffffffff81a1f544:       movq    %rax, %r14
    0.00 :   ffffffff81a1f547:       andq    $-0x8, %rdi
    0.00 :   ffffffff81a1f54b:       callq   0xffffffff81a1afa0 <nf_conntrack_put>
    0.00 :   ffffffff81a1f550:       xorl    %esi, %esi
    0.00 :   ffffffff81a1f552:       cmpq    %r14, %r12
    0.00 :   ffffffff81a1f555:       movq    %rsi, 0x68(%rbx)
    0.00 :   ffffffff81a1f559:       je      0xffffffff81a1f833 <tcp_v4_rcv+0xc43>
    0.00 :   ffffffff81a1f55f:       movq    %rbx, %rdx
    0.00 :   ffffffff81a1f562:       movq    %r14, %rsi
    0.00 :   ffffffff81a1f565:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f568:       callq   0xffffffff81a20320 <tcp_child_process>
    0.00 :   ffffffff81a1f56d:       testl   %eax, %eax
    0.00 :   ffffffff81a1f56f:       je      0xffffffff81a1f826 <tcp_v4_rcv+0xc36>
    0.00 :   ffffffff81a1f575:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f578:       movq    %r14, %rdi
    0.00 :   ffffffff81a1f57b:       callq   0xffffffff81a1b0f0 <tcp_v4_send_reset>
    0.00 :   ffffffff81a1f580:       movq    0xc0(%rbx), %rdx
    0.00 :   ffffffff81a1f587:       movl    0xb8(%rbx), %esi
    0.00 :   ffffffff81a1f58d:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f590:       movq    %r12, %r13
    0.00 :   ffffffff81a1f593:       callq   0xffffffff81a1b590 <sk_drops_add.isra.0>
    0.00 :   ffffffff81a1f598:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f59b:       callq   0xffffffff81a1c450 <sock_put>
    0.00 :   ffffffff81a1f5a0:       jmp     0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1f5a5:       movl    $0x3, %esi
    0.00 :   ffffffff81a1f5aa:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a1f5af:       nop
    0.00 :   ffffffff81a1f5b0:       jmp     0xffffffff81a1f3ca <tcp_v4_rcv+0x7da>
    0.00 :   ffffffff81a1f5b5:       movl    $0x1, %esi
    0.00 :   ffffffff81a1f5ba:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a1f5bf:       nop
    0.00 :   ffffffff81a1f5c0:       jmp     0xffffffff81a1f376 <tcp_v4_rcv+0x786>
    0.00 :   ffffffff81a1f5c5:       callq   0xffffffff81b6af40 <__stack_chk_fail>
    0.00 :   ffffffff81a1f5ca:       movl    $0x2, %esi
    0.00 :   ffffffff81a1f5cf:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a1f5d4:       jmp     0xffffffff81a1f376 <tcp_v4_rcv+0x786>
    0.00 :   ffffffff81a1f5d9:       movq    %rbx, %rdx
    0.00 :   ffffffff81a1f5dc:       movq    %r13, %rsi
    0.00 :   ffffffff81a1f5df:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f5e2:       callq   0xffffffff8198d980 <reuseport_migrate_sock>
    0.00 :   ffffffff81a1f5e7:       testq   %rax, %rax
    0.00 :   ffffffff81a1f5ea:       je      0xffffffff81a1f693 <tcp_v4_rcv+0xaa3>
    0.00 :   ffffffff81a1f5f0:       movq    %rax, %r12
    0.00 :   ffffffff81a1f5f3:       jmp     0xffffffff81a1f376 <tcp_v4_rcv+0x786>
    0.00 :   ffffffff81a1f5f8:       callq   0xffffffff8192b220 <sk_free>
    0.00 :   ffffffff81a1f5fd:       nopl    (%rax)
    0.00 :   ffffffff81a1f600:       jmp     0xffffffff81a1f4d8 <tcp_v4_rcv+0x8e8>
    0.00 :   ffffffff81a1f605:       movl    $0x3, %esi
    0.00 :   ffffffff81a1f60a:       movq    %rdx, %rdi
    0.00 :   ffffffff81a1f60d:       callq   0xffffffff815a4f60 <refcount_warn_saturate>
    0.00 :   ffffffff81a1f612:       jmp     0xffffffff81a1f4d8 <tcp_v4_rcv+0x8e8>
    0.00 :   ffffffff81a1f617:       ud2
    0.00 :   ffffffff81a1f619:       jmp     0xffffffff81a1f499 <tcp_v4_rcv+0x8a9>
    0.00 :   ffffffff81a1f61e:       movzwl  0x88(%rbx), %edx
    0.00 :   ffffffff81a1f625:       movq    0xc8(%rbx), %rax
    0.00 :   ffffffff81a1f62c:       subq    0xc0(%rbx), %rax
    0.00 :   ffffffff81a1f633:       cmpl    %eax, %edx
    0.00 :   ffffffff81a1f635:       jns     0xffffffff81a1f471 <tcp_v4_rcv+0x881>
    0.00 :   ffffffff81a1f63b:       jmp     0xffffffff81a1f460 <tcp_v4_rcv+0x870>
    0.00 :   ffffffff81a1f640:       movl    %edx, %r10d
    0.00 :   ffffffff81a1f643:       nopl    (%rax,%rax)
    0.00 :   ffffffff81a1f648:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f64b:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f64e:       movb    %r10b, -0x40(%rbp)
    0.00 :   ffffffff81a1f652:       callq   0xffffffff81a1b5d0 <__xfrm_policy_check2.constprop.0>
    0.00 :   ffffffff81a1f657:       testl   %eax, %eax
    0.00 :   ffffffff81a1f659:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f65e:       jne     0xffffffff81a1f6a5 <tcp_v4_rcv+0xab5>
    0.00 :   ffffffff81a1f660:       movl    $0xe, -0x34(%rbp)
    0.00 :   ffffffff81a1f667:       movq    0xc0(%rbx), %rdx
    0.00 :   ffffffff81a1f66e:       movl    0xb8(%rbx), %esi
    0.00 :   ffffffff81a1f674:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f677:       movb    %r10b, -0x40(%rbp)
    0.00 :   ffffffff81a1f67b:       callq   0xffffffff81a1b590 <sk_drops_add.isra.0>
    0.00 :   ffffffff81a1f680:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f685:       testb   %r10b, %r10b
    0.00 :   ffffffff81a1f688:       je      0xffffffff81a1ee97 <tcp_v4_rcv+0x2a7>
    0.00 :   ffffffff81a1f68e:       jmp     0xffffffff81a1f598 <tcp_v4_rcv+0x9a8>
    0.00 :   ffffffff81a1f693:       movq    %r13, %rsi
    0.00 :   ffffffff81a1f696:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f699:       callq   0xffffffff819fa320 <inet_csk_reqsk_queue_drop_and_put>
    0.00 :   ffffffff81a1f69e:       nop
    0.00 :   ffffffff81a1f6a0:       jmp     0xffffffff81a1edbf <tcp_v4_rcv+0x1cf>
    0.00 :   ffffffff81a1f6a5:       movq    0x68(%rbx), %rdi
    0.00 :   ffffffff81a1f6a9:       xorl    %edx, %edx
    0.00 :   ffffffff81a1f6ab:       movb    %r10b, -0x40(%rbp)
    0.00 :   ffffffff81a1f6af:       movl    %edx, -0x34(%rbp)
    0.00 :   ffffffff81a1f6b2:       andq    $-0x8, %rdi
    0.00 :   ffffffff81a1f6b6:       callq   0xffffffff81a1afa0 <nf_conntrack_put>
    0.00 :   ffffffff81a1f6bb:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a1f6bd:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f6c0:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f6c3:       movq    %rcx, 0x68(%rbx)
    0.00 :   ffffffff81a1f6c7:       callq   0xffffffff81a1a2e0 <tcp_filter>
    0.00 :   ffffffff81a1f6cc:       testl   %eax, %eax
    0.00 :   ffffffff81a1f6ce:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f6d3:       movl    %eax, %r12d
    0.00 :   ffffffff81a1f6d6:       je      0xffffffff81a1f711 <tcp_v4_rcv+0xb21>
    0.00 :   ffffffff81a1f6d8:       movl    $0x6, -0x34(%rbp)
    0.00 :   ffffffff81a1f6df:       jmp     0xffffffff81a1f667 <tcp_v4_rcv+0xa77>
    0.00 :   ffffffff81a1f6e1:       movq    -0x40(%rbp), %rdx
    0.00 :   ffffffff81a1f6e5:       movzbl  0x315(%r13), %eax
    0.00 :   ffffffff81a1f6ed:       cmpb    %al, 0x8(%rdx)
    0.00 :   ffffffff81a1f6f0:       jae     0xffffffff81a1f648 <tcp_v4_rcv+0xa58>
    0.00 :   ffffffff81a1f6f6:       movq    0x158(%r15), %rax
    0.00 :   ffffffff81a1f6fd:       movl    $0x45, -0x34(%rbp)
    0.00 :   ffffffff81a1f704:       incq    %gs:0x230(%rax)
    0.00 :   ffffffff81a1f70c:       jmp     0xffffffff81a1f667 <tcp_v4_rcv+0xa77>
    0.00 :   ffffffff81a1f711:       movzwl  0xb0(%rbx), %esi
    0.00 :   ffffffff81a1f718:       movq    0xc8(%rbx), %rdx
    0.00 :   ffffffff81a1f71f:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f722:       addq    0xc0(%rbx), %rsi
    0.00 :   ffffffff81a1f729:       movb    %r10b, -0x40(%rbp)
    0.00 :   ffffffff81a1f72d:       callq   0xffffffff81a1a0c0 <tcp_v4_fill_cb>
    0.00 :   ffffffff81a1f732:       xorl    %eax, %eax
    0.00 :   ffffffff81a1f734:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f739:       movq    %rax, 0x10(%rbx)
    0.00 :   ffffffff81a1f73d:       movzbl  0x12(%r13), %eax
    0.00 :   ffffffff81a1f742:       cmpb    $0xa, %al
    0.00 :   ffffffff81a1f744:       je      0xffffffff81a1f851 <tcp_v4_rcv+0xc61>
    0.00 :   ffffffff81a1f74a:       movl    %gs:0x7e602fbb(%rip), %eax
    0.00 :   ffffffff81a1f751:       movl    0x7c(%r13), %edx
    0.00 :   ffffffff81a1f755:       cmpl    %edx, %eax
    0.00 :   ffffffff81a1f757:       jne     0xffffffff81a1f81d <tcp_v4_rcv+0xc2d>
    0.00 :   ffffffff81a1f75d:       leaq    0x98(%r13), %r14
    0.00 :   ffffffff81a1f764:       movb    %r10b, -0x40(%rbp)
    0.00 :   ffffffff81a1f768:       movq    %r14, %rdi
    0.00 :   ffffffff81a1f76b:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff81a1f770:       movl    0xb8(%rbx), %eax
    0.00 :   ffffffff81a1f776:       movq    0xc0(%rbx), %rdx
    0.00 :   ffffffff81a1f77d:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f782:       movzwl  0x6(%rdx,%rax), %eax
    0.00 :   ffffffff81a1f787:       movl    $0x1, %edx
    0.00 :   ffffffff81a1f78c:       testw   %ax, %ax
  100.00 :   ffffffff81a1f78f:       cmovel  %edx, %eax
    0.00 :   ffffffff81a1f792:       movl    0x578(%r13), %edx
    0.00 :   ffffffff81a1f799:       addl    %eax, %edx
    0.00 :   ffffffff81a1f79b:       movl    %edx, 0x578(%r13)
    0.00 :   ffffffff81a1f7a2:       movzwl  0xae(%rbx), %edx
    0.00 :   ffffffff81a1f7a9:       movq    0xc0(%rbx), %rcx
    0.00 :   ffffffff81a1f7b0:       movzbl  0xc(%rcx,%rdx), %edx
    0.00 :   ffffffff81a1f7b5:       shrb    $0x4, %dl
    0.00 :   ffffffff81a1f7b8:       movzbl  %dl, %edx
    0.00 :   ffffffff81a1f7bb:       shll    $0x2, %edx
    0.00 :   ffffffff81a1f7be:       cmpl    0x70(%rbx), %edx
    0.00 :   ffffffff81a1f7c1:       jae     0xffffffff81a1f7d1 <tcp_v4_rcv+0xbe1>
    0.00 :   ffffffff81a1f7c3:       addl    0x57c(%r13), %eax
    0.00 :   ffffffff81a1f7ca:       movl    %eax, 0x57c(%r13)
    0.00 :   ffffffff81a1f7d1:       cmpl    $0x0, 0x9c(%r13)
    0.00 :   ffffffff81a1f7d9:       movb    %r10b, -0x40(%rbp)
    0.00 :   ffffffff81a1f7dd:       jne     0xffffffff81a1f866 <tcp_v4_rcv+0xc76>
    0.00 :   ffffffff81a1f7e3:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f7e6:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f7e9:       callq   0xffffffff81a1cdb0 <tcp_v4_do_rcv>
    0.00 :   ffffffff81a1f7ee:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f7f3:       movl    %eax, %r12d
    0.00 :   ffffffff81a1f7f6:       movq    %r14, %rdi
    0.00 :   ffffffff81a1f7f9:       movb    %r10b, -0x40(%rbp)
    0.00 :   ffffffff81a1f7fd:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff81a1f802:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f807:       testb   %r10b, %r10b
    0.00 :   ffffffff81a1f80a:       je      0xffffffff81a1ec5a <tcp_v4_rcv+0x6a>
    0.00 :   ffffffff81a1f810:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f813:       callq   0xffffffff81a1c450 <sock_put>
    0.00 :   ffffffff81a1f818:       jmp     0xffffffff81a1ec5a <tcp_v4_rcv+0x6a>
    0.00 :   ffffffff81a1f81d:       movl    %eax, 0x7c(%r13)
    0.00 :   ffffffff81a1f821:       jmp     0xffffffff81a1f75d <tcp_v4_rcv+0xb6d>
    0.00 :   ffffffff81a1f826:       movq    %r12, %rdi
    0.00 :   ffffffff81a1f829:       callq   0xffffffff81a1c450 <sock_put>
    0.00 :   ffffffff81a1f82e:       jmp     0xffffffff81a1ec57 <tcp_v4_rcv+0x67>
    0.00 :   ffffffff81a1f833:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f836:       movq    %r12, %r13
    0.00 :   ffffffff81a1f839:       callq   0xffffffff81a1dbd0 <reqsk_put>
    0.00 :   ffffffff81a1f83e:       movq    %rbx, %rdi
    0.00 :   ffffffff81a1f841:       callq   0xffffffff81a1a190 <tcp_v4_restore_cb>
    0.00 :   ffffffff81a1f846:       movl    $0x1, %r10d
    0.00 :   ffffffff81a1f84c:       jmp     0xffffffff81a1f643 <tcp_v4_rcv+0xa53>
    0.00 :   ffffffff81a1f851:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f854:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f857:       callq   0xffffffff81a1cdb0 <tcp_v4_do_rcv>
    0.00 :   ffffffff81a1f85c:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f861:       movl    %eax, %r12d
    0.00 :   ffffffff81a1f864:       jmp     0xffffffff81a1f807 <tcp_v4_rcv+0xc17>
    0.00 :   ffffffff81a1f866:       leaq    -0x34(%rbp), %rdx
    0.00 :   ffffffff81a1f86a:       movq    %rbx, %rsi
    0.00 :   ffffffff81a1f86d:       movq    %r13, %rdi
    0.00 :   ffffffff81a1f870:       callq   0xffffffff81a1d030 <tcp_add_backlog>
    0.00 :   ffffffff81a1f875:       testb   %al, %al
    0.00 :   ffffffff81a1f877:       movzbl  -0x40(%rbp), %r10d
    0.00 :   ffffffff81a1f87c:       je      0xffffffff81a1f7f6 <tcp_v4_rcv+0xc06>
    0.00 :   ffffffff81a1f882:       jmp     0xffffffff81a1f667 <tcp_v4_rcv+0xa77>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81957b60 <netif_receive_skb_list_internal>:
         : 5                ; netif_receive_skb_list_internal():
    0.00 :   ffffffff81957b60:       pushq   %rbp
    0.00 :   ffffffff81957b61:       movq    %rsp, %rbp
    0.00 :   ffffffff81957b64:       pushq   %r15
    0.00 :   ffffffff81957b66:       pushq   %r14
    0.00 :   ffffffff81957b68:       pushq   %r13
    0.00 :   ffffffff81957b6a:       pushq   %r12
    0.00 :   ffffffff81957b6c:       movq    %rdi, %r12
    0.00 :   ffffffff81957b6f:       pushq   %rbx
    0.00 :   ffffffff81957b70:       subq    $0x38, %rsp
    0.00 :   ffffffff81957b74:       movq    %gs:0x28, %rax
    0.00 :   ffffffff81957b7d:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff81957b81:       xorl    %eax, %eax
    0.00 :   ffffffff81957b83:       movq    (%rdi), %rbx
    0.00 :   ffffffff81957b86:       leaq    -0x50(%rbp), %r15
    0.00 :   ffffffff81957b8a:       movq    %r15, -0x50(%rbp)
    0.00 :   ffffffff81957b8e:       movq    %r15, -0x48(%rbp)
    0.00 :   ffffffff81957b92:       cmpq    %rbx, %rdi
    0.00 :   ffffffff81957b95:       movq    (%rbx), %r14
    0.00 :   ffffffff81957b98:       movq    %rbx, %r13
    0.00 :   ffffffff81957b9b:       jne     0xffffffff81957ba2 <netif_receive_skb_list_internal+0x42>
    0.00 :   ffffffff81957b9d:       jmp     0xffffffff81957bdc <netif_receive_skb_list_internal+0x7c>
    0.00 :   ffffffff81957b9f:       movq    %rax, %r14
    0.00 :   ffffffff81957ba2:       nopl    (%rax,%rax)
    0.00 :   ffffffff81957ba7:       movq    (%rbx), %rdx
    0.00 :   ffffffff81957baa:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff81957bae:       cmpq    %r12, %r14
    0.00 :   ffffffff81957bb1:       movq    %rax, 0x8(%rdx)
    0.00 :   ffffffff81957bb5:       movq    %rdx, (%rax)
    0.00 :   ffffffff81957bb8:       movq    $0x0, (%rbx)
    0.00 :   ffffffff81957bbf:       movq    -0x48(%rbp), %rax
    0.00 :   ffffffff81957bc3:       movq    %r13, -0x48(%rbp)
    0.00 :   ffffffff81957bc7:       movq    %r15, (%rbx)
    0.00 :   ffffffff81957bca:       movq    %rax, 0x8(%rbx)
    0.00 :   ffffffff81957bce:       movq    %r13, (%rax)
    0.00 :   ffffffff81957bd1:       movq    %r14, %rbx
    0.00 :   ffffffff81957bd4:       movq    (%r14), %rax
    0.00 :   ffffffff81957bd7:       movq    %r14, %r13
    0.00 :   ffffffff81957bda:       jne     0xffffffff81957b9f <netif_receive_skb_list_internal+0x3f>
    0.00 :   ffffffff81957bdc:       movq    -0x50(%rbp), %rax
    0.00 :   ffffffff81957be0:       cmpq    %r15, %rax
    0.00 :   ffffffff81957be3:       je      0xffffffff81957c08 <netif_receive_skb_list_internal+0xa8>
    0.00 :   ffffffff81957be5:       movq    (%r12), %rax
    0.00 :   ffffffff81957be9:       movq    -0x50(%rbp), %rcx
    0.00 :   ffffffff81957bed:       movq    -0x48(%rbp), %rdx
    0.00 :   ffffffff81957bf1:       movq    %r12, 0x8(%rcx)
    0.00 :   ffffffff81957bf5:       movq    %rcx, (%r12)
    0.00 :   ffffffff81957bf9:       movq    %rax, (%rdx)
    0.00 :   ffffffff81957bfc:       movq    %rdx, 0x8(%rax)
  100.00 :   ffffffff81957c00:       movq    %r15, -0x50(%rbp)
    0.00 :   ffffffff81957c04:       movq    %r15, -0x48(%rbp)
    0.00 :   ffffffff81957c08:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff81957c0d:       nopl    (%rax,%rax)
    0.00 :   ffffffff81957c12:       movq    (%r12), %rcx
    0.00 :   ffffffff81957c16:       cmpq    %rcx, %r12
    0.00 :   ffffffff81957c19:       movq    (%rcx), %r15
    0.00 :   ffffffff81957c1c:       movq    %rcx, %rax
    0.00 :   ffffffff81957c1f:       je      0xffffffff81957e0a <netif_receive_skb_list_internal+0x2aa>
    0.00 :   ffffffff81957c25:       leaq    -0x40(%rbp), %r14
    0.00 :   ffffffff81957c29:       xorl    %ebx, %ebx
    0.00 :   ffffffff81957c2b:       xorl    %r13d, %r13d
    0.00 :   ffffffff81957c2e:       movq    %gs:0x22700, %r8
    0.00 :   ffffffff81957c37:       jmp     0xffffffff81957c66 <netif_receive_skb_list_internal+0x106>
    0.00 :   ffffffff81957c39:       movl    0x354(%r8), %ebx
    0.00 :   ffffffff81957c40:       orl     $0x800, 0x354(%r8) # imm = 0x800
    0.00 :   ffffffff81957c4b:       andl    $0x800, %ebx    # imm = 0x800
    0.00 :   ffffffff81957c51:       cmpq    %r15, %r12
    0.00 :   ffffffff81957c54:       movq    (%r15), %rdx
    0.00 :   ffffffff81957c57:       movq    %r15, %rax
    0.00 :   ffffffff81957c5a:       movq    %r15, %rcx
    0.00 :   ffffffff81957c5d:       je      0xffffffff81957ced <netif_receive_skb_list_internal+0x18d>
    0.00 :   ffffffff81957c63:       movq    %rdx, %r15
    0.00 :   ffffffff81957c66:       nopl    (%rax,%rax)
    0.00 :   ffffffff81957c6b:       xorl    %edx, %edx
    0.00 :   ffffffff81957c6d:       movzbl  %r13b, %esi
    0.00 :   ffffffff81957c71:       cmpl    %edx, %esi
    0.00 :   ffffffff81957c73:       je      0xffffffff81957c51 <netif_receive_skb_list_internal+0xf1>
    0.00 :   ffffffff81957c75:       movq    (%r12), %rdx
    0.00 :   ffffffff81957c79:       movq    $0x0, 0x8(%r14)
    0.00 :   ffffffff81957c81:       cmpq    %rdx, %rax
    0.00 :   ffffffff81957c84:       je      0xffffffff81957d91 <netif_receive_skb_list_internal+0x231>
    0.00 :   ffffffff81957c8a:       movq    %rdx, -0x40(%rbp)
    0.00 :   ffffffff81957c8e:       movq    %r14, 0x8(%rdx)
    0.00 :   ffffffff81957c92:       movq    0x8(%rcx), %rdx
    0.00 :   ffffffff81957c96:       movq    %rdx, -0x38(%rbp)
    0.00 :   ffffffff81957c9a:       movq    %r14, (%rdx)
    0.00 :   ffffffff81957c9d:       movq    %rax, (%r12)
    0.00 :   ffffffff81957ca1:       movq    %r12, 0x8(%rcx)
    0.00 :   ffffffff81957ca5:       movq    -0x40(%rbp), %rax
    0.00 :   ffffffff81957ca9:       cmpq    %r14, %rax
    0.00 :   ffffffff81957cac:       je      0xffffffff81957cbe <netif_receive_skb_list_internal+0x15e>
    0.00 :   ffffffff81957cae:       movq    %r14, %rdi
    0.00 :   ffffffff81957cb1:       movq    %r8, -0x60(%rbp)
    0.00 :   ffffffff81957cb5:       callq   0xffffffff81957500 <__netif_receive_skb_list_core>
    0.00 :   ffffffff81957cba:       movq    -0x60(%rbp), %r8
    0.00 :   ffffffff81957cbe:       xorb    $0x1, %r13b
    0.00 :   ffffffff81957cc2:       jne     0xffffffff81957c39 <netif_receive_skb_list_internal+0xd9>
    0.00 :   ffffffff81957cc8:       movl    0x354(%r8), %eax
    0.00 :   ffffffff81957ccf:       movq    %r15, %rcx
    0.00 :   ffffffff81957cd2:       andb    $-0x9, %ah
    0.00 :   ffffffff81957cd5:       orl     %ebx, %eax
    0.00 :   ffffffff81957cd7:       cmpq    %r15, %r12
    0.00 :   ffffffff81957cda:       movl    %eax, 0x354(%r8)
    0.00 :   ffffffff81957ce1:       movq    %r15, %rax
    0.00 :   ffffffff81957ce4:       movq    (%r15), %rdx
    0.00 :   ffffffff81957ce7:       jne     0xffffffff81957c63 <netif_receive_skb_list_internal+0x103>
    0.00 :   ffffffff81957ced:       movq    (%r12), %rax
    0.00 :   ffffffff81957cf1:       cmpq    %rax, %r12
    0.00 :   ffffffff81957cf4:       je      0xffffffff81957d02 <netif_receive_skb_list_internal+0x1a2>
    0.00 :   ffffffff81957cf6:       movzbl  %r13b, %esi
    0.00 :   ffffffff81957cfa:       movq    %r12, %rdi
    0.00 :   ffffffff81957cfd:       callq   0xffffffff81957500 <__netif_receive_skb_list_core>
    0.00 :   ffffffff81957d02:       testb   %r13b, %r13b
    0.00 :   ffffffff81957d05:       je      0xffffffff81957d21 <netif_receive_skb_list_internal+0x1c1>
    0.00 :   ffffffff81957d07:       movq    %gs:0x22700, %rdx
    0.00 :   ffffffff81957d10:       movl    0x354(%rdx), %eax
    0.00 :   ffffffff81957d16:       andb    $-0x9, %ah
    0.00 :   ffffffff81957d19:       orl     %ebx, %eax
    0.00 :   ffffffff81957d1b:       movl    %eax, 0x354(%rdx)
    0.00 :   ffffffff81957d21:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff81957d26:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff81957d2a:       subq    %gs:0x28, %rax
    0.00 :   ffffffff81957d33:       jne     0xffffffff81957e26 <netif_receive_skb_list_internal+0x2c6>
    0.00 :   ffffffff81957d39:       addq    $0x38, %rsp
    0.00 :   ffffffff81957d3d:       popq    %rbx
    0.00 :   ffffffff81957d3e:       popq    %r12
    0.00 :   ffffffff81957d40:       popq    %r13
    0.00 :   ffffffff81957d42:       popq    %r14
    0.00 :   ffffffff81957d44:       popq    %r15
    0.00 :   ffffffff81957d46:       popq    %rbp
    0.00 :   ffffffff81957d47:       xorl    %eax, %eax
    0.00 :   ffffffff81957d49:       xorl    %edx, %edx
    0.00 :   ffffffff81957d4b:       xorl    %ecx, %ecx
    0.00 :   ffffffff81957d4d:       xorl    %esi, %esi
    0.00 :   ffffffff81957d4f:       xorl    %edi, %edi
    0.00 :   ffffffff81957d51:       xorl    %r8d, %r8d
    0.00 :   ffffffff81957d54:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81957d59:       movl    0xa12c81(%rip), %eax # 0xffffffff8236a9e0 <netdev_tstamp_prequeue>
    0.00 :   ffffffff81957d5f:       testl   %eax, %eax
    0.00 :   ffffffff81957d61:       je      0xffffffff81957ba7 <netif_receive_skb_list_internal+0x47>
    0.00 :   ffffffff81957d67:       cmpq    $0x0, 0x20(%rbx)
    0.00 :   ffffffff81957d6c:       jne     0xffffffff81957ba7 <netif_receive_skb_list_internal+0x47>
    0.00 :   ffffffff81957d72:       xorl    %edi, %edi
    0.00 :   ffffffff81957d74:       callq   0xffffffff81116170 <ktime_get_with_offset>
    0.00 :   ffffffff81957d79:       movq    %rax, 0x20(%rbx)
    0.00 :   ffffffff81957d7d:       jmp     0xffffffff81957ba7 <netif_receive_skb_list_internal+0x47>
    0.00 :   ffffffff81957d82:       movzbl  0x7e(%rcx), %edx
    0.00 :   ffffffff81957d86:       shrb    $0x6, %dl
    0.00 :   ffffffff81957d89:       andl    $0x1, %edx
    0.00 :   ffffffff81957d8c:       jmp     0xffffffff81957c6d <netif_receive_skb_list_internal+0x10d>
    0.00 :   ffffffff81957d91:       movq    %r14, -0x40(%rbp)
    0.00 :   ffffffff81957d95:       movq    %r14, -0x38(%rbp)
    0.00 :   ffffffff81957d99:       jmp     0xffffffff81957ca5 <netif_receive_skb_list_internal+0x145>
    0.00 :   ffffffff81957d9e:       movq    (%r12), %rbx
    0.00 :   ffffffff81957da2:       cmpq    %rbx, %r12
    0.00 :   ffffffff81957da5:       movq    (%rbx), %r14
    0.00 :   ffffffff81957da8:       je      0xffffffff81957e0a <netif_receive_skb_list_internal+0x2aa>
    0.00 :   ffffffff81957daa:       leaq    -0x40(%rbp), %r13
    0.00 :   ffffffff81957dae:       jmp     0xffffffff81957db3 <netif_receive_skb_list_internal+0x253>
    0.00 :   ffffffff81957db0:       movq    %rax, %r14
    0.00 :   ffffffff81957db3:       movq    $0x0, (%r13)
    0.00 :   ffffffff81957dbb:       movq    0x10(%rbx), %rdi
    0.00 :   ffffffff81957dbf:       leaq    -0x58(%rbp), %rdx
    0.00 :   ffffffff81957dc3:       movq    %rbx, %rsi
    0.00 :   ffffffff81957dc6:       movq    %r13, -0x58(%rbp)
    0.00 :   ffffffff81957dca:       callq   0xffffffff8194d0b0 <get_rps_cpu>
    0.00 :   ffffffff81957dcf:       testl   %eax, %eax
    0.00 :   ffffffff81957dd1:       movl    %eax, %esi
    0.00 :   ffffffff81957dd3:       js      0xffffffff81957dfa <netif_receive_skb_list_internal+0x29a>
    0.00 :   ffffffff81957dd5:       movq    (%rbx), %rdx
    0.00 :   ffffffff81957dd8:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff81957ddc:       movq    %rbx, %rdi
    0.00 :   ffffffff81957ddf:       movq    %rax, 0x8(%rdx)
    0.00 :   ffffffff81957de3:       movq    %rdx, (%rax)
    0.00 :   ffffffff81957de6:       movq    -0x58(%rbp), %rax
    0.00 :   ffffffff81957dea:       movq    $0x0, (%rbx)
    0.00 :   ffffffff81957df1:       leaq    0x4(%rax), %rdx
    0.00 :   ffffffff81957df5:       callq   0xffffffff8194c750 <enqueue_to_backlog>
    0.00 :   ffffffff81957dfa:       cmpq    %r12, %r14
    0.00 :   ffffffff81957dfd:       movq    (%r14), %rax
    0.00 :   ffffffff81957e00:       movq    %r14, %rbx
    0.00 :   ffffffff81957e03:       jne     0xffffffff81957db0 <netif_receive_skb_list_internal+0x250>
    0.00 :   ffffffff81957e05:       jmp     0xffffffff81957c12 <netif_receive_skb_list_internal+0xb2>
    0.00 :   ffffffff81957e0a:       movq    (%r12), %rax
    0.00 :   ffffffff81957e0e:       cmpq    %rax, %r12
    0.00 :   ffffffff81957e11:       je      0xffffffff81957d21 <netif_receive_skb_list_internal+0x1c1>
    0.00 :   ffffffff81957e17:       xorl    %esi, %esi
    0.00 :   ffffffff81957e19:       movq    %r12, %rdi
    0.00 :   ffffffff81957e1c:       callq   0xffffffff81957500 <__netif_receive_skb_list_core>
    0.00 :   ffffffff81957e21:       jmp     0xffffffff81957d21 <netif_receive_skb_list_internal+0x1c1>
    0.00 :   ffffffff81957e26:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c012a0 <error_entry>:
         : 5                ; error_entry():
    0.00 :   ffffffff81c012a0:       pushq   %rsi
  100.00 :   ffffffff81c012a1:       movq    0x8(%rsp), %rsi
    0.00 :   ffffffff81c012a6:       movq    %rdi, 0x8(%rsp)
    0.00 :   ffffffff81c012ab:       pushq   %rdx
    0.00 :   ffffffff81c012ac:       pushq   %rcx
    0.00 :   ffffffff81c012ad:       pushq   %rax
    0.00 :   ffffffff81c012ae:       pushq   %r8
    0.00 :   ffffffff81c012b0:       pushq   %r9
    0.00 :   ffffffff81c012b2:       pushq   %r10
    0.00 :   ffffffff81c012b4:       pushq   %r11
    0.00 :   ffffffff81c012b6:       pushq   %rbx
    0.00 :   ffffffff81c012b7:       pushq   %rbp
    0.00 :   ffffffff81c012b8:       pushq   %r12
    0.00 :   ffffffff81c012ba:       pushq   %r13
    0.00 :   ffffffff81c012bc:       pushq   %r14
    0.00 :   ffffffff81c012be:       pushq   %r15
    0.00 :   ffffffff81c012c0:       pushq   %rsi
    0.00 :   ffffffff81c012c1:       xorl    %esi, %esi
    0.00 :   ffffffff81c012c3:       xorl    %edx, %edx
    0.00 :   ffffffff81c012c5:       xorl    %ecx, %ecx
    0.00 :   ffffffff81c012c7:       xorl    %r8d, %r8d
    0.00 :   ffffffff81c012ca:       xorl    %r9d, %r9d
    0.00 :   ffffffff81c012cd:       xorl    %r10d, %r10d
    0.00 :   ffffffff81c012d0:       xorl    %r11d, %r11d
    0.00 :   ffffffff81c012d3:       xorl    %ebx, %ebx
    0.00 :   ffffffff81c012d5:       xorl    %ebp, %ebp
    0.00 :   ffffffff81c012d7:       xorl    %r12d, %r12d
    0.00 :   ffffffff81c012da:       xorl    %r13d, %r13d
    0.00 :   ffffffff81c012dd:       xorl    %r14d, %r14d
    0.00 :   ffffffff81c012e0:       xorl    %r15d, %r15d
    0.00 :   ffffffff81c012e3:       leaq    0x9(%rsp), %rbp
    0.00 :   ffffffff81c012e8:       testb   $0x3, 0x90(%rsp)
    0.00 :   ffffffff81c012f0:       je      0xffffffff81c01341 <error_entry+0xa1>
    0.00 :   ffffffff81c012f2:       swapgs
    0.00 :   ffffffff81c012f5:       nop
    0.00 :   ffffffff81c012f6:       nop
    0.00 :   ffffffff81c012f7:       nop
    0.00 :   ffffffff81c012f8:       jmp     0xffffffff81c0130b <error_entry+0x6b>
    0.00 :   ffffffff81c012fa:       movq    %cr3, %rax
    0.00 :   ffffffff81c012fd:       nop
    0.00 :   ffffffff81c012fe:       nop
    0.00 :   ffffffff81c012ff:       nop
    0.00 :   ffffffff81c01300:       nop
    0.00 :   ffffffff81c01301:       nop
    0.00 :   ffffffff81c01302:       andq    $-0x1801, %rax  # imm = 0xE7FF
    0.00 :   ffffffff81c01308:       movq    %rax, %cr3
    0.00 :   ffffffff81c0130b:       jmp     0xffffffff81c01323 <error_entry+0x83>
    0.00 :   ffffffff81c0130d:       movl    $0x48, %ecx
    0.00 :   ffffffff81c01312:       movq    %gs:0x1abf0, %rdx
    0.00 :   ffffffff81c0131b:       movl    %edx, %eax
    0.00 :   ffffffff81c0131d:       shrq    $0x20, %rdx
    0.00 :   ffffffff81c01321:       wrmsr
    0.00 :   ffffffff81c01323:       nop
    0.00 :   ffffffff81c01324:       nop
    0.00 :   ffffffff81c01325:       nop
    0.00 :   ffffffff81c01326:       nop
    0.00 :   ffffffff81c01327:       nop
    0.00 :   ffffffff81c01328:       nop
    0.00 :   ffffffff81c01329:       nop
    0.00 :   ffffffff81c0132a:       nop
    0.00 :   ffffffff81c0132b:       nop
    0.00 :   ffffffff81c0132c:       nop
    0.00 :   ffffffff81c0132d:       nop
    0.00 :   ffffffff81c0132e:       nop
    0.00 :   ffffffff81c0132f:       nop
    0.00 :   ffffffff81c01330:       nop
    0.00 :   ffffffff81c01331:       nop
    0.00 :   ffffffff81c01332:       nop
    0.00 :   ffffffff81c01333:       nop
    0.00 :   ffffffff81c01334:       nop
    0.00 :   ffffffff81c01335:       nop
    0.00 :   ffffffff81c01336:       nop
    0.00 :   ffffffff81c01337:       leaq    0x8(%rsp), %rdi
    0.00 :   ffffffff81c0133c:       jmp     0xffffffff81b67680 <sync_regs>
    0.00 :   ffffffff81c01341:       leaq    -0x306(%rip), %rcx # 0xffffffff81c01042 <native_irq_return_iret>
    0.00 :   ffffffff81c01348:       cmpq    %rcx, 0x88(%rsp)
    0.00 :   ffffffff81c01350:       je      0xffffffff81c0138e <error_entry+0xee>
    0.00 :   ffffffff81c01352:       movl    %ecx, %eax
    0.00 :   ffffffff81c01354:       cmpq    %rax, 0x88(%rsp)
    0.00 :   ffffffff81c0135c:       je      0xffffffff81c01386 <error_entry+0xe6>
    0.00 :   ffffffff81c0135e:       cmpq    $-0x7e3feee9, 0x88(%rsp) # imm = 0x81C01117
    0.00 :   ffffffff81c0136a:       jne     0xffffffff81c0136f <error_entry+0xcf>
    0.00 :   ffffffff81c0136c:       swapgs
    0.00 :   ffffffff81c0136f:       nop
    0.00 :   ffffffff81c01370:       nop
    0.00 :   ffffffff81c01371:       nop
    0.00 :   ffffffff81c01372:       nop
    0.00 :   ffffffff81c01373:       nop
    0.00 :   ffffffff81c01374:       nop
    0.00 :   ffffffff81c01375:       nop
    0.00 :   ffffffff81c01376:       nop
    0.00 :   ffffffff81c01377:       nop
    0.00 :   ffffffff81c01378:       nop
    0.00 :   ffffffff81c01379:       nop
    0.00 :   ffffffff81c0137a:       nop
    0.00 :   ffffffff81c0137b:       nop
    0.00 :   ffffffff81c0137c:       leaq    0x8(%rsp), %rax
    0.00 :   ffffffff81c01381:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81c01386:       movq    %rcx, 0x88(%rsp)
    0.00 :   ffffffff81c0138e:       swapgs
    0.00 :   ffffffff81c01391:       nop
    0.00 :   ffffffff81c01392:       nop
    0.00 :   ffffffff81c01393:       nop
    0.00 :   ffffffff81c01394:       jmp     0xffffffff81c013a7 <error_entry+0x107>
    0.00 :   ffffffff81c01396:       movq    %cr3, %rax
    0.00 :   ffffffff81c01399:       nop
    0.00 :   ffffffff81c0139a:       nop
    0.00 :   ffffffff81c0139b:       nop
    0.00 :   ffffffff81c0139c:       nop
    0.00 :   ffffffff81c0139d:       nop
    0.00 :   ffffffff81c0139e:       andq    $-0x1801, %rax  # imm = 0xE7FF
    0.00 :   ffffffff81c013a4:       movq    %rax, %cr3
    0.00 :   ffffffff81c013a7:       jmp     0xffffffff81c013bf <error_entry+0x11f>
    0.00 :   ffffffff81c013a9:       movl    $0x48, %ecx
    0.00 :   ffffffff81c013ae:       movq    %gs:0x1abf0, %rdx
    0.00 :   ffffffff81c013b7:       movl    %edx, %eax
    0.00 :   ffffffff81c013b9:       shrq    $0x20, %rdx
    0.00 :   ffffffff81c013bd:       wrmsr
    0.00 :   ffffffff81c013bf:       nop
    0.00 :   ffffffff81c013c0:       nop
    0.00 :   ffffffff81c013c1:       nop
    0.00 :   ffffffff81c013c2:       nop
    0.00 :   ffffffff81c013c3:       nop
    0.00 :   ffffffff81c013c4:       nop
    0.00 :   ffffffff81c013c5:       nop
    0.00 :   ffffffff81c013c6:       nop
    0.00 :   ffffffff81c013c7:       nop
    0.00 :   ffffffff81c013c8:       nop
    0.00 :   ffffffff81c013c9:       nop
    0.00 :   ffffffff81c013ca:       nop
    0.00 :   ffffffff81c013cb:       nop
    0.00 :   ffffffff81c013cc:       nop
    0.00 :   ffffffff81c013cd:       nop
    0.00 :   ffffffff81c013ce:       nop
    0.00 :   ffffffff81c013cf:       nop
    0.00 :   ffffffff81c013d0:       nop
    0.00 :   ffffffff81c013d1:       nop
    0.00 :   ffffffff81c013d2:       nop
    0.00 :   ffffffff81c013d3:       leaq    0x8(%rsp), %rdi
    0.00 :   ffffffff81c013d8:       callq   0xffffffff81b676c0 <fixup_bad_iret>
    0.00 :   ffffffff81c013dd:       movq    %rax, %rdi
    0.00 :   ffffffff81c013e0:       jmp     0xffffffff81b67680 <sync_regs>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff819e74c0 <ip_rcv_core>:
         : 5                ; ip_rcv_core():
    0.00 :   ffffffff819e74c0:       pushq   %rbp
    0.00 :   ffffffff819e74c1:       movq    %rsp, %rbp
    0.00 :   ffffffff819e74c4:       pushq   %r13
    0.00 :   ffffffff819e74c6:       pushq   %r12
    0.00 :   ffffffff819e74c8:       movq    %rdi, %r12
    0.00 :   ffffffff819e74cb:       pushq   %rbx
    0.00 :   ffffffff819e74cc:       movzbl  0x80(%rdi), %eax
    0.00 :   ffffffff819e74d3:       andl    $0x7, %eax
    0.00 :   ffffffff819e74d6:       cmpb    $0x3, %al
    0.00 :   ffffffff819e74d8:       je      0xffffffff819e7756 <ip_rcv_core+0x296>
    0.00 :   ffffffff819e74de:       movq    0x140(%rsi), %rax
    0.00 :   ffffffff819e74e5:       movq    %rsi, %r13
    0.00 :   ffffffff819e74e8:       incq    %gs:0x8(%rax)
    0.00 :   ffffffff819e74ed:       movl    0x70(%rdi), %edx
    0.00 :   ffffffff819e74f0:       addq    %rdx, %gs:0x10(%rax)
    0.00 :   ffffffff819e74f5:       movl    0xd4(%rdi), %eax
    0.00 :   ffffffff819e74fb:       decl    %eax
    0.00 :   ffffffff819e74fd:       jne     0xffffffff819e752c <ip_rcv_core+0x6c>
    0.00 :   ffffffff819e74ff:       testq   %rdi, %rdi
    0.00 :   ffffffff819e7502:       jne     0xffffffff819e774e <ip_rcv_core+0x28e>
    0.00 :   ffffffff819e7508:       movq    0x140(%r13), %rax
    0.00 :   ffffffff819e750f:       incq    %gs:0x68(%rax)
    0.00 :   ffffffff819e7514:       xorl    %ebx, %ebx
    0.00 :   ffffffff819e7516:       movq    %rbx, %rax
    0.00 :   ffffffff819e7519:       popq    %rbx
    0.00 :   ffffffff819e751a:       popq    %r12
    0.00 :   ffffffff819e751c:       popq    %r13
    0.00 :   ffffffff819e751e:       popq    %rbp
    0.00 :   ffffffff819e751f:       xorl    %edx, %edx
    0.00 :   ffffffff819e7521:       xorl    %ecx, %ecx
    0.00 :   ffffffff819e7523:       xorl    %esi, %esi
    0.00 :   ffffffff819e7525:       xorl    %edi, %edi
    0.00 :   ffffffff819e7527:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff819e752c:       movl    $0x820, %esi    # imm = 0x820
    0.00 :   ffffffff819e7531:       callq   0xffffffff81936d60 <skb_clone>
    0.00 :   ffffffff819e7536:       testq   %rax, %rax
    0.00 :   ffffffff819e7539:       movq    %rax, %rbx
    0.00 :   ffffffff819e753c:       movl    $0x2, %esi
    0.00 :   ffffffff819e7541:       movq    %r12, %rdi
    0.00 :   ffffffff819e7544:       je      0xffffffff819e7792 <ip_rcv_core+0x2d2>
    0.00 :   ffffffff819e754a:       callq   0xffffffff81937d90 <kfree_skb_reason>
    0.00 :   ffffffff819e754f:       movl    0x70(%rbx), %eax
    0.00 :   ffffffff819e7552:       movl    0x74(%rbx), %esi
    0.00 :   ffffffff819e7555:       movl    %eax, %edx
    0.00 :   ffffffff819e7557:       subl    %esi, %edx
    0.00 :   ffffffff819e7559:       cmpl    $0x13, %edx
    0.00 :   ffffffff819e755c:       jbe     0xffffffff819e76d4 <ip_rcv_core+0x214>
    0.00 :   ffffffff819e7562:       movzwl  0xb0(%rbx), %edx
    0.00 :   ffffffff819e7569:       movq    0xc0(%rbx), %rcx
    0.00 :   ffffffff819e7570:       movq    0x140(%r13), %rdi
    0.00 :   ffffffff819e7577:       addq    %rcx, %rdx
    0.00 :   ffffffff819e757a:       movzbl  (%rdx), %eax
    0.00 :   ffffffff819e757d:       movl    %eax, %esi
    0.00 :   ffffffff819e757f:       andl    $0xf, %esi
    0.00 :   ffffffff819e7582:       cmpb    $0x4, %sil
    0.00 :   ffffffff819e7586:       jbe     0xffffffff819e76f6 <ip_rcv_core+0x236>
    0.00 :   ffffffff819e758c:       andl    $-0x10, %eax
    0.00 :   ffffffff819e758f:       cmpb    $0x40, %al
    0.00 :   ffffffff819e7591:       jne     0xffffffff819e76f6 <ip_rcv_core+0x236>
    0.00 :   ffffffff819e7597:       movl    0xb8(%rbx), %eax
    0.00 :   ffffffff819e759d:       movzbl  0x1(%rdx), %esi
    0.00 :   ffffffff819e75a1:       movzwl  0x6(%rcx,%rax), %eax
    0.00 :   ffffffff819e75a6:       andl    $0x3, %esi
    0.00 :   ffffffff819e75a9:       movl    $0x1, %ecx
    0.00 :   ffffffff819e75ae:       testw   %ax, %ax
    0.00 :   ffffffff819e75b1:       cmoveq  %rcx, %rax
    0.00 :   ffffffff819e75b5:       addq    %rax, %gs:0x100(%rdi,%rsi,8)
    0.00 :   ffffffff819e75be:       movzbl  (%rdx), %eax
    0.00 :   ffffffff819e75c1:       movl    0x70(%rbx), %edx
    0.00 :   ffffffff819e75c4:       movl    0x74(%rbx), %esi
    0.00 :   ffffffff819e75c7:       movl    %edx, %ecx
    0.00 :   ffffffff819e75c9:       andl    $0xf, %eax
    0.00 :   ffffffff819e75cc:       subl    %esi, %ecx
    0.00 :   ffffffff819e75ce:       shll    $0x2, %eax
    0.00 :   ffffffff819e75d1:       cmpl    %eax, %ecx
    0.00 :   ffffffff819e75d3:       jb      0xffffffff819e77b2 <ip_rcv_core+0x2f2>
    0.00 :   ffffffff819e75d9:       movzwl  0xb0(%rbx), %edx
    0.00 :   ffffffff819e75e0:       addq    0xc0(%rbx), %rdx
    0.00 :   ffffffff819e75e7:       movzbl  (%rdx), %eax
    0.00 :   ffffffff819e75ea:       movq    %rdx, %rcx
    0.00 :   ffffffff819e75ed:       andl    $0xf, %eax
    0.00 :   ffffffff819e75f0:       movl    (%rcx), %esi
    0.00 :   ffffffff819e75f2:       subl    $0x4, %eax
    0.00 :   ffffffff819e75f5:       jbe     0xffffffff819e761b <ip_rcv_core+0x15b>
    0.00 :   ffffffff819e75f7:       addl    0x4(%rcx), %esi
    0.00 :   ffffffff819e75fa:       adcl    0x8(%rcx), %esi
    0.00 :   ffffffff819e75fd:       adcl    0xc(%rcx), %esi
    0.00 :   ffffffff819e7600:       adcl    0x10(%rcx), %esi
    0.00 :   ffffffff819e7603:       leaq    0x4(%rcx), %rcx
    0.00 :   ffffffff819e7607:       decl    %eax
    0.00 :   ffffffff819e7609:       jne     0xffffffff819e7600 <ip_rcv_core+0x140>
    0.00 :   ffffffff819e760b:       adcl    $0x0, %esi
    0.00 :   ffffffff819e760e:       movl    %esi, %eax
    0.00 :   ffffffff819e7610:       shrl    $0x10, %esi
    0.00 :   ffffffff819e7613:       addw    %ax, %si
    0.00 :   ffffffff819e7616:       adcl    $0x0, %esi
    0.00 :   ffffffff819e7619:       notl    %esi
    0.00 :   ffffffff819e761b:       testw   %si, %si
    0.00 :   ffffffff819e761e:       jne     0xffffffff819e77d4 <ip_rcv_core+0x314>
    0.00 :   ffffffff819e7624:       movzwl  0x2(%rdx), %esi
    0.00 :   ffffffff819e7628:       movl    0x70(%rbx), %ecx
    0.00 :   ffffffff819e762b:       rolw    $0x8, %si
    0.00 :   ffffffff819e762f:       movzwl  %si, %esi
    0.00 :   ffffffff819e7632:       testl   %esi, %esi
    0.00 :   ffffffff819e7634:       je      0xffffffff819e770d <ip_rcv_core+0x24d>
    0.00 :   ffffffff819e763a:       cmpl    %esi, %ecx
    0.00 :   ffffffff819e763c:       jb      0xffffffff819e779c <ip_rcv_core+0x2dc>
    0.00 :   ffffffff819e7642:       movzbl  (%rdx), %eax
    0.00 :   ffffffff819e7645:       andl    $0xf, %eax
    0.00 :   ffffffff819e7648:       shll    $0x2, %eax
    0.00 :   ffffffff819e764b:       cmpl    %eax, %esi
    0.00 :   ffffffff819e764d:       jb      0xffffffff819e76ef <ip_rcv_core+0x22f>
    0.00 :   ffffffff819e7653:       cmpl    %ecx, %esi
    0.00 :   ffffffff819e7655:       jb      0xffffffff819e77f4 <ip_rcv_core+0x334>
    0.00 :   ffffffff819e765b:       movzwl  0xb0(%rbx), %eax
    0.00 :   ffffffff819e7662:       movq    0xc0(%rbx), %rcx
    0.00 :   ffffffff819e7669:       movq    %rax, %rdx
    0.00 :   ffffffff819e766c:       movzbl  (%rcx,%rax), %eax
    0.00 :   ffffffff819e7670:       movq    $0x0, 0x28(%rbx)
    0.00 :   ffffffff819e7678:       movq    $0x0, 0x30(%rbx)
    0.00 :   ffffffff819e7680:       movq    $0x0, 0x38(%rbx)
    0.00 :   ffffffff819e7688:       andl    $0xf, %eax
    0.00 :   ffffffff819e768b:       leal    (%rdx,%rax,4), %eax
    0.00 :   ffffffff819e768e:       movw    %ax, 0xae(%rbx)
    0.00 :   ffffffff819e7695:       movl    0x90(%rbx), %eax
    0.00 :   ffffffff819e769b:       movl    %eax, 0x28(%rbx)
    0.00 :   ffffffff819e769e:       movq    0x60(%rbx), %rax
    0.00 :   ffffffff819e76a2:       cmpq    $-0x7e6d6050, %rax # imm = 0x81929FB0
    0.00 :   ffffffff819e76a8:       je      0xffffffff819e7516 <ip_rcv_core+0x56>
    0.00 :   ffffffff819e76ae:       testq   %rax, %rax
    0.00 :   ffffffff819e76b1:       je      0xffffffff819e7775 <ip_rcv_core+0x2b5>
    0.00 :   ffffffff819e76b7:       movq    %rbx, %rdi
    0.00 :   ffffffff819e76ba:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff819e76bf:       movq    $0x0, 0x60(%rbx)
    0.00 :   ffffffff819e76c7:       movq    $0x0, 0x18(%rbx)
    0.00 :   ffffffff819e76cf:       jmp     0xffffffff819e7516 <ip_rcv_core+0x56>
    0.00 :   ffffffff819e76d4:       cmpl    $0x13, %eax
    0.00 :   ffffffff819e76d7:       jbe     0xffffffff819e76ef <ip_rcv_core+0x22f>
    0.00 :   ffffffff819e76d9:       addl    $0x14, %esi
    0.00 :   ffffffff819e76dc:       movq    %rbx, %rdi
    0.00 :   ffffffff819e76df:       subl    %eax, %esi
    0.00 :   ffffffff819e76e1:       callq   0xffffffff819390e0 <__pskb_pull_tail>
    0.00 :   ffffffff819e76e6:       testq   %rax, %rax
    0.00 :   ffffffff819e76e9:       jne     0xffffffff819e7562 <ip_rcv_core+0xa2>
    0.00 :   ffffffff819e76ef:       movq    0x140(%r13), %rdi
    0.00 :   ffffffff819e76f6:       movl    $0xb, %esi
    0.00 :   ffffffff819e76fb:       incq    %gs:0x38(%rdi)
    0.00 :   ffffffff819e7700:       movq    %rbx, %rdi
    0.00 :   ffffffff819e7703:       callq   0xffffffff81937d90 <kfree_skb_reason>
    0.00 :   ffffffff819e7708:       jmp     0xffffffff819e7514 <ip_rcv_core+0x54>
    0.00 :   ffffffff819e770d:       movl    0xb8(%rbx), %eax
    0.00 :   ffffffff819e7713:       movq    0xc0(%rbx), %rdi
    0.00 :   ffffffff819e771a:       addq    %rdi, %rax
    0.00 :   ffffffff819e771d:       cmpw    $0x0, 0x4(%rax)
    0.00 :   ffffffff819e7722:       je      0xffffffff819e7642 <ip_rcv_core+0x182>
    0.00 :   ffffffff819e7728:       movl    0x18(%rax), %esi
    0.00 :   ffffffff819e772b:       andl    $0x11, %esi
    0.00 :   ffffffff819e772e:       je      0xffffffff819e7642 <ip_rcv_core+0x182>
    0.00 :   ffffffff819e7734:       movzwl  0xb0(%rbx), %eax
    0.00 :   ffffffff819e773b:       movl    %ecx, %esi
    0.00 :   ffffffff819e773d:       addq    %rax, %rdi
    0.00 :   ffffffff819e7740:       subq    0xc8(%rbx), %rdi
    0.00 :   ffffffff819e7747:       subl    %edi, %esi
    0.00 :   ffffffff819e7749:       jmp     0xffffffff819e763a <ip_rcv_core+0x17a>
  100.00 :   ffffffff819e774e:       movq    %rdi, %rbx
    0.00 :   ffffffff819e7751:       jmp     0xffffffff819e754f <ip_rcv_core+0x8f>
    0.00 :   ffffffff819e7756:       movq    0x10(%rdi), %rdi
    0.00 :   ffffffff819e775a:       movq    0x1f0(%rdi), %rax
    0.00 :   ffffffff819e7761:       testq   %rax, %rax
    0.00 :   ffffffff819e7764:       je      0xffffffff819e7782 <ip_rcv_core+0x2c2>
    0.00 :   ffffffff819e7766:       incq    %gs:0x18(%rax)
    0.00 :   ffffffff819e776b:       movq    %r12, %rbx
    0.00 :   ffffffff819e776e:       movl    $0x9, %esi
    0.00 :   ffffffff819e7773:       jmp     0xffffffff819e7700 <ip_rcv_core+0x240>
    0.00 :   ffffffff819e7775:       cmpq    $0x0, 0x18(%rbx)
    0.00 :   ffffffff819e777a:       je      0xffffffff819e7516 <ip_rcv_core+0x56>
    0.00 :   ffffffff819e7780:       ud2
    0.00 :   ffffffff819e7782:       callq   0xffffffff8194b2d0 <netdev_core_stats_alloc>
    0.00 :   ffffffff819e7787:       testq   %rax, %rax
    0.00 :   ffffffff819e778a:       je      0xffffffff819e776b <ip_rcv_core+0x2ab>
    0.00 :   ffffffff819e778c:       nopl    (%rax)
    0.00 :   ffffffff819e7790:       jmp     0xffffffff819e7766 <ip_rcv_core+0x2a6>
    0.00 :   ffffffff819e7792:       callq   0xffffffff81937d90 <kfree_skb_reason>
    0.00 :   ffffffff819e7797:       jmp     0xffffffff819e7508 <ip_rcv_core+0x48>
    0.00 :   ffffffff819e779c:       movq    0x140(%r13), %rax
    0.00 :   ffffffff819e77a3:       movl    $0x4, %esi
    0.00 :   ffffffff819e77a8:       incq    %gs:0x60(%rax)
    0.00 :   ffffffff819e77ad:       jmp     0xffffffff819e7700 <ip_rcv_core+0x240>
    0.00 :   ffffffff819e77b2:       cmpl    %eax, %edx
    0.00 :   ffffffff819e77b4:       jb      0xffffffff819e76ef <ip_rcv_core+0x22f>
    0.00 :   ffffffff819e77ba:       subl    %edx, %esi
    0.00 :   ffffffff819e77bc:       movq    %rbx, %rdi
    0.00 :   ffffffff819e77bf:       addl    %eax, %esi
    0.00 :   ffffffff819e77c1:       callq   0xffffffff819390e0 <__pskb_pull_tail>
    0.00 :   ffffffff819e77c6:       testq   %rax, %rax
    0.00 :   ffffffff819e77c9:       jne     0xffffffff819e75d9 <ip_rcv_core+0x119>
    0.00 :   ffffffff819e77cf:       jmp     0xffffffff819e76ef <ip_rcv_core+0x22f>
    0.00 :   ffffffff819e77d4:       movq    0x140(%r13), %rax
    0.00 :   ffffffff819e77db:       movl    $0xa, %esi
    0.00 :   ffffffff819e77e0:       incq    %gs:0xf8(%rax)
    0.00 :   ffffffff819e77e8:       movq    0x140(%r13), %rdi
    0.00 :   ffffffff819e77ef:       jmp     0xffffffff819e76fb <ip_rcv_core+0x23b>
    0.00 :   ffffffff819e77f4:       movq    %rbx, %rdi
    0.00 :   ffffffff819e77f7:       callq   0xffffffff8193b860 <pskb_trim_rcsum_slow>
    0.00 :   ffffffff819e77fc:       testl   %eax, %eax
    0.00 :   ffffffff819e77fe:       je      0xffffffff819e765b <ip_rcv_core+0x19b>
    0.00 :   ffffffff819e7804:       movq    0x140(%r13), %rax
    0.00 :   ffffffff819e780b:       movl    $0x2, %esi
    0.00 :   ffffffff819e7810:       incq    %gs:0x68(%rax)
    0.00 :   ffffffff819e7815:       jmp     0xffffffff819e7700 <ip_rcv_core+0x240>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     00000000000922a8 <malloc>:
         : 5     ; __libc_malloc():
    0.00 :   922a8:          pushq   %r12
    0.00 :   922aa:          pushq   %rbp
    0.00 :   922ab:          movq    %rdi, %rbp
    0.00 :   922ae:          pushq   %rbx
    0.00 :   922af:          subq    $0x10, %rsp
    0.00 :   922b3:          cmpb    $0x0, 0x1401ee(%rip)    # 0x1d24a8 <__malloc_initialize_hook+0x28>
    0.00 :   922ba:          je      0x92498 <malloc+0x1f0>
    0.00 :   922c0:          testq   %rbp, %rbp
    0.00 :   922c3:          js      0x924a6 <malloc+0x1fe>
    0.00 :   922c9:          leaq    0x17(%rbp), %rax
    0.00 :   922cd:          cmpq    $0x1f, %rax
    0.00 :   922d1:          jbe     0x924c0 <malloc+0x218>
    0.00 :   922d7:          andq    $-0x10, %rax
    0.00 :   922db:          leaq    -0x11(%rax), %rbx
    0.00 :   922df:          shrq    $0x4, %rbx
    0.00 :   922e3:          movq    0x138aae(%rip), %r12    # 0x1cad98
    0.00 :   922ea:          movq    %fs:(%r12), %rdx
    0.00 :   922ef:          testq   %rdx, %rdx
    0.00 :   922f2:          je      0x923a0 <malloc+0xf8>
    0.00 :   922f8:          cmpq    0x1390c9(%rip), %rbx    # 0x1cb3c8 <__nptl_nthreads+0x120>
    0.00 :   922ff:          jb      0x923d8 <malloc+0x130>
    0.00 :   92305:          cmpb    $0x0, 0x1412cc(%rip)    # 0x1d35d8 <__libc_single_threaded>
    0.00 :   9230c:          jne     0x92420 <malloc+0x178>
    0.00 :   92312:          movq    0x138a77(%rip), %rax    # 0x1cad90
    0.00 :   92319:          movq    %fs:(%rax), %rbx
    0.00 :   9231d:          testq   %rbx, %rbx
    0.00 :   92320:          je      0x924c8 <malloc+0x220>
    0.00 :   92326:          xorl    %eax, %eax
    0.00 :   92328:          movl    $0x1, %edx
    0.00 :   9232d:          lock
    0.00 :   9232e:          cmpxchgl        %edx, (%rbx)
    0.00 :   92331:          jne     0x92548 <malloc+0x2a0>
    0.00 :   92337:          movq    %rbp, %rsi
    0.00 :   9233a:          movq    %rbx, %rdi
    0.00 :   9233d:          callq   0x90d00 <__default_morecore+0x12c8>
    0.00 :   92342:          testq   %rax, %rax
    0.00 :   92345:          je      0x924ea <malloc+0x242>
    0.00 :   9234b:          xorl    %edx, %edx
    0.00 :   9234d:          xchgl   %edx, (%rbx)
    0.00 :   9234f:          cmpl    $0x1, %edx
    0.00 :   92352:          jg      0x92588 <malloc+0x2e0>
    0.00 :   92358:          movq    -0x8(%rax), %rdx
    0.00 :   9235c:          testb   $0x2, %dl
    0.00 :   9235f:          jne     0x92397 <malloc+0xef>
    0.00 :   92361:          andl    $0x4, %edx
    0.00 :   92364:          leaq    0x139915(%rip), %rcx    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   9236b:          je      0x9238e <malloc+0xe6>
    0.00 :   9236d:          movq    0x13901c(%rip), %rdx    # 0x1cb390 <__nptl_nthreads+0xe8>
    0.00 :   92374:          testq   %rdx, %rdx
    0.00 :   92377:          je      0x92578 <malloc+0x2d0>
    0.00 :   9237d:          shlq    $0x2, %rdx
    0.00 :   92381:          negq    %rdx
    0.00 :   92384:          leaq    -0x10(%rax), %rcx
    0.00 :   92388:          andq    %rcx, %rdx
    0.00 :   9238b:          movq    (%rdx), %rcx
    0.00 :   9238e:          cmpq    %rcx, %rbx
    0.00 :   92391:          jne     0x92524 <malloc+0x27c>
    0.00 :   92397:          addq    $0x10, %rsp
    0.00 :   9239b:          popq    %rbx
    0.00 :   9239c:          popq    %rbp
    0.00 :   9239d:          popq    %r12
    0.00 :   9239f:          retq
    0.00 :   923a0:          movq    0x1389f9(%rip), %rax    # 0x1cada0
    0.00 :   923a7:          cmpb    $0x0, %fs:(%rax)
    0.00 :   923ab:          jne     0x92305 <malloc+0x5d>
    0.00 :   923b1:          callq   0x91bd0 <__default_morecore+0x2198>
    0.00 :   923b6:          cmpq    0x13900b(%rip), %rbx    # 0x1cb3c8 <__nptl_nthreads+0x120>
    0.00 :   923bd:          jae     0x92305 <malloc+0x5d>
    0.00 :   923c3:          movq    %fs:(%r12), %rdx
    0.00 :   923c8:          testq   %rdx, %rdx
    0.00 :   923cb:          je      0x92305 <malloc+0x5d>
    0.00 :   923d1:          nopl    (%rax)
    0.00 :   923d8:          movzwl  (%rdx,%rbx,2), %ecx
    0.00 :   923dc:          testw   %cx, %cx
    0.00 :   923df:          je      0x92305 <malloc+0x5d>
    0.00 :   923e5:          leaq    0x10(%rbx), %rdi
    0.00 :   923e9:          movq    (%rdx,%rdi,8), %rax
    0.00 :   923ed:          testb   $0xf, %al
    0.00 :   923ef:          jne     0x925a0 <malloc+0x2f8>
    0.00 :   923f5:          movq    %rax, %rsi
    0.00 :   923f8:          decl    %ecx
    0.00 :   923fa:          shrq    $0xc, %rsi
    0.00 :   923fe:          xorq    (%rax), %rsi
    0.00 :   92401:          movq    %rsi, (%rdx,%rdi,8)
    0.00 :   92405:          movw    %cx, (%rdx,%rbx,2)
    0.00 :   92409:          movq    $0x0, 0x8(%rax)
    0.00 :   92411:          addq    $0x10, %rsp
    0.00 :   92415:          popq    %rbx
    0.00 :   92416:          popq    %rbp
    0.00 :   92417:          popq    %r12
    0.00 :   92419:          retq
    0.00 :   9241a:          nopw    (%rax,%rax)
  100.00 :   92420:          leaq    0x139859(%rip), %rbx    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   92427:          movq    %rbp, %rsi
    0.00 :   9242a:          movq    %rbx, %rdi
    0.00 :   9242d:          callq   0x90d00 <__default_morecore+0x12c8>
    0.00 :   92432:          testq   %rax, %rax
    0.00 :   92435:          je      0x924b4 <malloc+0x20c>
    0.00 :   92437:          movq    -0x8(%rax), %rdx
    0.00 :   9243b:          testb   $0x2, %dl
    0.00 :   9243e:          jne     0x92397 <malloc+0xef>
    0.00 :   92444:          andl    $0x4, %edx
    0.00 :   92447:          je      0x92397 <malloc+0xef>
    0.00 :   9244d:          movq    0x138f3c(%rip), %rdx    # 0x1cb390 <__nptl_nthreads+0xe8>
    0.00 :   92454:          testq   %rdx, %rdx
    0.00 :   92457:          je      0x92518 <malloc+0x270>
    0.00 :   9245d:          shlq    $0x2, %rdx
    0.00 :   92461:          negq    %rdx
    0.00 :   92464:          leaq    -0x10(%rax), %rcx
    0.00 :   92468:          andq    %rcx, %rdx
    0.00 :   9246b:          cmpq    %rbx, (%rdx)
    0.00 :   9246e:          je      0x92397 <malloc+0xef>
    0.00 :   92474:          leaq    0x101c55(%rip), %rcx    # 0x1940d0 <_itoa_lower_digits+0x2910>
    0.00 :   9247b:          movl    $0xce2, %edx            # imm = 0xCE2
    0.00 :   92480:          leaq    0xfbced(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   92487:          leaq    0x10185a(%rip), %rdi    # 0x193ce8 <_itoa_lower_digits+0x2528>
    0.00 :   9248e:          callq   0x30e40 <__assert+0x10>
    0.00 :   92493:          nopl    (%rax,%rax)
    0.00 :   92498:          callq   0x8ed40 <timer_settime+0xdd0>
    0.00 :   9249d:          testq   %rbp, %rbp
    0.00 :   924a0:          jns     0x922c9 <malloc+0x21>
    0.00 :   924a6:          movq    0x13894b(%rip), %rax    # 0x1cadf8
    0.00 :   924ad:          movl    $0xc, %fs:(%rax)
    0.00 :   924b4:          xorl    %eax, %eax
    0.00 :   924b6:          addq    $0x10, %rsp
    0.00 :   924ba:          popq    %rbx
    0.00 :   924bb:          popq    %rbp
    0.00 :   924bc:          popq    %r12
    0.00 :   924be:          retq
    0.00 :   924bf:          nop
    0.00 :   924c0:          xorl    %ebx, %ebx
    0.00 :   924c2:          jmp     0x922e3 <malloc+0x3b>
    0.00 :   924c7:          nop
    0.00 :   924c8:          xorl    %esi, %esi
    0.00 :   924ca:          movq    %rbp, %rdi
    0.00 :   924cd:          callq   0x8f1d0 <timer_settime+0x1260>
    0.00 :   924d2:          movq    %rbp, %rsi
    0.00 :   924d5:          movq    %rax, %rdi
    0.00 :   924d8:          movq    %rax, %rbx
    0.00 :   924db:          callq   0x90d00 <__default_morecore+0x12c8>
    0.00 :   924e0:          testq   %rax, %rax
    0.00 :   924e3:          jne     0x92503 <malloc+0x25b>
    0.00 :   924e5:          testq   %rbx, %rbx
    0.00 :   924e8:          je      0x92508 <malloc+0x260>
    0.00 :   924ea:          movq    %rbx, %rdi
    0.00 :   924ed:          movq    %rbp, %rsi
    0.00 :   924f0:          callq   0x8f790 <timer_settime+0x1820>
    0.00 :   924f5:          movq    %rbp, %rsi
    0.00 :   924f8:          movq    %rax, %rdi
    0.00 :   924fb:          movq    %rax, %rbx
    0.00 :   924fe:          callq   0x90d00 <__default_morecore+0x12c8>
    0.00 :   92503:          testq   %rbx, %rbx
    0.00 :   92506:          jne     0x92558 <malloc+0x2b0>
    0.00 :   92508:          testq   %rax, %rax
    0.00 :   9250b:          jne     0x92358 <malloc+0xb0>
    0.00 :   92511:          xorl    %eax, %eax
    0.00 :   92513:          jmp     0x924b6 <malloc+0x20e>
    0.00 :   92515:          nopl    (%rax)
    0.00 :   92518:          movq    $-0x4000000, %rdx       # imm = 0xFC000000
    0.00 :   9251f:          jmp     0x92464 <malloc+0x1bc>
    0.00 :   92524:          leaq    0x101ba5(%rip), %rcx    # 0x1940d0 <_itoa_lower_digits+0x2910>
    0.00 :   9252b:          movl    $0xcf8, %edx            # imm = 0xCF8
    0.00 :   92530:          leaq    0xfbc3d(%rip), %rsi     # 0x18e174 <_libc_intl_domainname+0x12e6>
    0.00 :   92537:          leaq    0x101812(%rip), %rdi    # 0x193d50 <_itoa_lower_digits+0x2590>
    0.00 :   9253e:          callq   0x30e40 <__assert+0x10>
    0.00 :   92543:          nopl    (%rax,%rax)
    0.00 :   92548:          movq    %rbx, %rdi
    0.00 :   9254b:          callq   0x7fd90 <__lll_lock_wait_private>
    0.00 :   92550:          jmp     0x92337 <malloc+0x8f>
    0.00 :   92555:          nopl    (%rax)
    0.00 :   92558:          xorl    %edx, %edx
    0.00 :   9255a:          xchgl   %edx, (%rbx)
    0.00 :   9255c:          cmpl    $0x1, %edx
    0.00 :   9255f:          jle     0x92508 <malloc+0x260>
    0.00 :   92561:          movq    %rbx, %rdi
    0.00 :   92564:          movq    %rax, 0x8(%rsp)
    0.00 :   92569:          callq   0x7fe38 <__lll_lock_wake_private>
    0.00 :   9256e:          movq    0x8(%rsp), %rax
    0.00 :   92573:          jmp     0x92508 <malloc+0x260>
    0.00 :   92575:          nopl    (%rax)
    0.00 :   92578:          movq    $-0x4000000, %rdx       # imm = 0xFC000000
    0.00 :   9257f:          jmp     0x92384 <malloc+0xdc>
    0.00 :   92584:          nopl    (%rax)
    0.00 :   92588:          movq    %rbx, %rdi
    0.00 :   9258b:          movq    %rax, 0x8(%rsp)
    0.00 :   92590:          callq   0x7fe38 <__lll_lock_wake_private>
    0.00 :   92595:          movq    0x8(%rsp), %rax
    0.00 :   9259a:          jmp     0x92358 <malloc+0xb0>
    0.00 :   9259f:          nop
    0.00 :   925a0:          leaq    0x101611(%rip), %rdi    # 0x193bb8 <_itoa_lower_digits+0x23f8>
    0.00 :   925a7:          callq   0x8e2a0 <timer_settime+0x330>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810985a0 <kthread_is_per_cpu>:
         : 5                ; kthread_is_per_cpu():
    0.00 :   ffffffff810985a0:       pushq   %rbp
    0.00 :   ffffffff810985a1:       movq    %rsp, %rbp
    0.00 :   ffffffff810985a4:       movq    0x1a8(%rdi), %rdx
  100.00 :   ffffffff810985ab:       xorl    %eax, %eax
    0.00 :   ffffffff810985ad:       testq   %rdx, %rdx
    0.00 :   ffffffff810985b0:       je      0xffffffff810985c1 <kthread_is_per_cpu+0x21>
    0.00 :   ffffffff810985b2:       testb   $0x20, 0x356(%rdi)
    0.00 :   ffffffff810985b9:       je      0xffffffff810985c1 <kthread_is_per_cpu+0x21>
    0.00 :   ffffffff810985bb:       movq    (%rdx), %rax
    0.00 :   ffffffff810985be:       andl    $0x1, %eax
    0.00 :   ffffffff810985c1:       popq    %rbp
    0.00 :   ffffffff810985c2:       xorl    %edx, %edx
    0.00 :   ffffffff810985c4:       xorl    %edi, %edi
    0.00 :   ffffffff810985c6:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811e7a70 <__rseq_handle_notify_resume>:
         : 5                ; __rseq_handle_notify_resume():
    0.00 :   ffffffff811e7a70:       pushq   %rbp
    0.00 :   ffffffff811e7a71:       movq    %rsp, %rbp
    0.00 :   ffffffff811e7a74:       subq    $0x28, %rsp
    0.00 :   ffffffff811e7a78:       andq    $-0x20, %rsp
    0.00 :   ffffffff811e7a7c:       subq    $0x60, %rsp
    0.00 :   ffffffff811e7a80:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff811e7a84:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff811e7a88:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff811e7a8c:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff811e7a90:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff811e7a94:       movq    %gs:0x28, %rax
    0.00 :   ffffffff811e7a9d:       movq    %rax, 0x58(%rsp)
    0.00 :   ffffffff811e7aa2:       xorl    %eax, %eax
    0.00 :   ffffffff811e7aa4:       movq    %gs:0x22700, %r12
    0.00 :   ffffffff811e7aad:       testb   $0x4, 0x354(%r12)
    0.00 :   ffffffff811e7ab6:       jne     0xffffffff811e7b97 <__rseq_handle_notify_resume+0x127>
    0.00 :   ffffffff811e7abc:       testq   %rsi, %rsi
    0.00 :   ffffffff811e7abf:       movq    %rdi, %r13
    0.00 :   ffffffff811e7ac2:       movq    %rsi, %r14
    0.00 :   ffffffff811e7ac5:       je      0xffffffff811e7b2a <__rseq_handle_notify_resume+0xba>
    0.00 :   ffffffff811e7ac7:       movq    0x3b0(%r12), %rcx
    0.00 :   ffffffff811e7acf:       movq    0x80(%rsi), %rbx
    0.00 :   ffffffff811e7ad6:       movq    $0x0, 0x20(%rsp)
    0.00 :   ffffffff811e7adf:       movq    $0x0, 0x28(%rsp)
    0.00 :   ffffffff811e7ae8:       movq    $0x0, 0x30(%rsp)
    0.00 :   ffffffff811e7af1:       movq    $0x0, 0x38(%rsp)
    0.00 :   ffffffff811e7afa:       leaq    0x8(%rcx), %rax
    0.00 :   ffffffff811e7afe:       callq   0xffffffff81b63650 <__get_user_8>
    0.00 :   ffffffff811e7b03:       testl   %eax, %eax
    0.00 :   ffffffff811e7b05:       movq    %rdx, %rsi
    0.00 :   ffffffff811e7b08:       jne     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7b0e:       testq   %rdx, %rdx
    0.00 :   ffffffff811e7b11:       jne     0xffffffff811e7bd5 <__rseq_handle_notify_resume+0x165>
    0.00 :   ffffffff811e7b17:       addq    $0x8, %rcx
    0.00 :   ffffffff811e7b1b:       xorl    %eax, %eax
    0.00 :   ffffffff811e7b1d:       callq   0xffffffff81b661e0 <__put_user_8>
    0.00 :   ffffffff811e7b22:       testl   %ecx, %ecx
    0.00 :   ffffffff811e7b24:       js      0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7b2a:       movq    0x3b0(%r12), %rax
    0.00 :   ffffffff811e7b32:       movl    %gs:0x7ee3abd3(%rip), %ecx
    0.00 :   ffffffff811e7b39:       movslq  %ecx, %rsi
    0.00 :   ffffffff811e7b3c:       movq    $0x20740, %rdx  # imm = 0x20740
    0.00 :   ffffffff811e7b43:       movq    -0x7dedc720(,%rsi,8), %rsi
    0.00 :   ffffffff811e7b4b:       movl    (%rsi,%rdx), %r8d
    0.00 :   ffffffff811e7b4f:       movl    0x95c(%r12), %esi
    0.00 :   ffffffff811e7b57:       testl   %esi, %esi
    0.00 :   ffffffff811e7b59:       js      0xffffffff811e7e13 <__rseq_handle_notify_resume+0x3a3>
    0.00 :   ffffffff811e7b5f:       movl    0x9b8(%r12), %edx
    0.00 :   ffffffff811e7b67:       xorl    %edi, %edi
    0.00 :   ffffffff811e7b69:       addq    %rax, %rdx
    0.00 :   ffffffff811e7b6c:       setb    %dil
    0.00 :   ffffffff811e7b70:       testq   %rdx, %rdx
    0.00 :   ffffffff811e7b73:       js      0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7b79:       testq   %rdi, %rdi
    0.00 :   ffffffff811e7b7c:       jne     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7b82:       nop
    0.00 :   ffffffff811e7b83:       nop
    0.00 :   ffffffff811e7b84:       nop
  100.00 :   ffffffff811e7b85:       nop
    0.00 :   ffffffff811e7b86:       nop
    0.00 :   ffffffff811e7b87:       nop
    0.00 :   ffffffff811e7b88:       movl    %ecx, (%rax)
    0.00 :   ffffffff811e7b8a:       movl    %ecx, 0x4(%rax)
    0.00 :   ffffffff811e7b8d:       movl    %r8d, 0x14(%rax)
    0.00 :   ffffffff811e7b91:       movl    %esi, 0x18(%rax)
    0.00 :   ffffffff811e7b94:       nop
    0.00 :   ffffffff811e7b95:       nop
    0.00 :   ffffffff811e7b96:       nop
    0.00 :   ffffffff811e7b97:       movq    0x58(%rsp), %rax
    0.00 :   ffffffff811e7b9c:       subq    %gs:0x28, %rax
    0.00 :   ffffffff811e7ba5:       jne     0xffffffff811e7e7a <__rseq_handle_notify_resume+0x40a>
    0.00 :   ffffffff811e7bab:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff811e7baf:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff811e7bb3:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff811e7bb7:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff811e7bbb:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff811e7bbf:       leave
    0.00 :   ffffffff811e7bc0:       xorl    %eax, %eax
    0.00 :   ffffffff811e7bc2:       xorl    %edx, %edx
    0.00 :   ffffffff811e7bc4:       xorl    %ecx, %ecx
    0.00 :   ffffffff811e7bc6:       xorl    %esi, %esi
    0.00 :   ffffffff811e7bc8:       xorl    %edi, %edi
    0.00 :   ffffffff811e7bca:       xorl    %r8d, %r8d
    0.00 :   ffffffff811e7bcd:       xorl    %r9d, %r9d
    0.00 :   ffffffff811e7bd0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff811e7bd5:       movq    (%r12), %rdx
    0.00 :   ffffffff811e7bd9:       movabsq $0x7ffffffff000, %rax # imm = 0x7FFFFFFFF000
    0.00 :   ffffffff811e7be3:       testl   $0x20000000, %edx # imm = 0x20000000
    0.00 :   ffffffff811e7be9:       je      0xffffffff811e7c02 <__rseq_handle_notify_resume+0x192>
    0.00 :   ffffffff811e7beb:       testb   $0x8, 0x253(%r12)
    0.00 :   ffffffff811e7bf4:       movl    $0xffffe000, %eax # imm = 0xFFFFE000
    0.00 :   ffffffff811e7bf9:       movl    $0xc0000000, %edx # imm = 0xC0000000
    0.00 :   ffffffff811e7bfe:       cmovneq %rdx, %rax
    0.00 :   ffffffff811e7c02:       cmpq    %rax, %rsi
    0.00 :   ffffffff811e7c05:       jae     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7c0b:       leaq    0x20(%rsp), %rdi
    0.00 :   ffffffff811e7c10:       movl    $0x20, %edx
    0.00 :   ffffffff811e7c15:       callq   0xffffffff815a5590 <_copy_from_user>
    0.00 :   ffffffff811e7c1a:       testq   %rax, %rax
    0.00 :   ffffffff811e7c1d:       jne     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7c23:       movq    %gs:0x22700, %rcx
    0.00 :   ffffffff811e7c2c:       movq    (%rcx), %rsi
    0.00 :   ffffffff811e7c2f:       movq    0x28(%rsp), %rdx
    0.00 :   ffffffff811e7c34:       movabsq $0x7ffffffff000, %rax # imm = 0x7FFFFFFFF000
    0.00 :   ffffffff811e7c3e:       testl   $0x20000000, %esi # imm = 0x20000000
    0.00 :   ffffffff811e7c44:       je      0xffffffff811e7c5b <__rseq_handle_notify_resume+0x1eb>
    0.00 :   ffffffff811e7c46:       testb   $0x8, 0x253(%rcx)
    0.00 :   ffffffff811e7c4d:       movl    $0xffffe000, %eax # imm = 0xFFFFE000
    0.00 :   ffffffff811e7c52:       movl    $0xc0000000, %ecx # imm = 0xC0000000
    0.00 :   ffffffff811e7c57:       cmovneq %rcx, %rax
    0.00 :   ffffffff811e7c5b:       cmpq    %rax, %rdx
    0.00 :   ffffffff811e7c5e:       jae     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7c64:       movq    0x30(%rsp), %rcx
    0.00 :   ffffffff811e7c69:       movq    %rdx, %rdi
    0.00 :   ffffffff811e7c6c:       xorl    %r8d, %r8d
    0.00 :   ffffffff811e7c6f:       movabsq $0x7ffffffff000, %rax # imm = 0x7FFFFFFFF000
    0.00 :   ffffffff811e7c79:       addq    %rcx, %rdi
    0.00 :   ffffffff811e7c7c:       setb    %r8b
    0.00 :   ffffffff811e7c80:       movq    %gs:0x22700, %rsi
    0.00 :   ffffffff811e7c89:       movq    (%rsi), %r9
    0.00 :   ffffffff811e7c8c:       testl   $0x20000000, %r9d # imm = 0x20000000
    0.00 :   ffffffff811e7c93:       je      0xffffffff811e7caa <__rseq_handle_notify_resume+0x23a>
    0.00 :   ffffffff811e7c95:       testb   $0x8, 0x253(%rsi)
    0.00 :   ffffffff811e7c9c:       movl    $0xffffe000, %eax # imm = 0xFFFFE000
    0.00 :   ffffffff811e7ca1:       movl    $0xc0000000, %esi # imm = 0xC0000000
    0.00 :   ffffffff811e7ca6:       cmovneq %rsi, %rax
    0.00 :   ffffffff811e7caa:       cmpq    %rax, %rdi
    0.00 :   ffffffff811e7cad:       jae     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7cb3:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff811e7cbc:       movq    (%rdi), %r9
    0.00 :   ffffffff811e7cbf:       movq    0x38(%rsp), %rax
    0.00 :   ffffffff811e7cc4:       movabsq $0x7ffffffff000, %rsi # imm = 0x7FFFFFFFF000
    0.00 :   ffffffff811e7cce:       testl   $0x20000000, %r9d # imm = 0x20000000
    0.00 :   ffffffff811e7cd5:       je      0xffffffff811e7cec <__rseq_handle_notify_resume+0x27c>
    0.00 :   ffffffff811e7cd7:       testb   $0x8, 0x253(%rdi)
    0.00 :   ffffffff811e7cde:       movl    $0xffffe000, %esi # imm = 0xFFFFE000
    0.00 :   ffffffff811e7ce3:       movl    $0xc0000000, %edi # imm = 0xC0000000
    0.00 :   ffffffff811e7ce8:       cmovneq %rdi, %rsi
    0.00 :   ffffffff811e7cec:       cmpq    %rsi, %rax
    0.00 :   ffffffff811e7cef:       jae     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7cf5:       movl    0x20(%rsp), %esi
    0.00 :   ffffffff811e7cf9:       testl   %esi, %esi
    0.00 :   ffffffff811e7cfb:       jne     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7d01:       testq   %r8, %r8
    0.00 :   ffffffff811e7d04:       jne     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7d0a:       movq    %rax, %rsi
    0.00 :   ffffffff811e7d0d:       subq    %rdx, %rsi
    0.00 :   ffffffff811e7d10:       cmpq    %rcx, %rsi
    0.00 :   ffffffff811e7d13:       jb      0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7d19:       leaq    -0x4(%rax), %r8
    0.00 :   ffffffff811e7d1d:       movq    %r8, %rax
    0.00 :   ffffffff811e7d20:       callq   0xffffffff81b63620 <__get_user_4>
    0.00 :   ffffffff811e7d25:       testl   %eax, %eax
    0.00 :   ffffffff811e7d27:       movl    %eax, %ecx
    0.00 :   ffffffff811e7d29:       movl    %edx, %r15d
    0.00 :   ffffffff811e7d2c:       jne     0xffffffff811e7b22 <__rseq_handle_notify_resume+0xb2>
    0.00 :   ffffffff811e7d32:       movq    %gs:0x22700, %rdx
    0.00 :   ffffffff811e7d3b:       cmpl    0x90(%rdx), %r15d
    0.00 :   ffffffff811e7d42:       jne     0xffffffff811e7e32 <__rseq_handle_notify_resume+0x3c2>
    0.00 :   ffffffff811e7d48:       subq    0x28(%rsp), %rbx
    0.00 :   ffffffff811e7d4d:       cmpq    0x30(%rsp), %rbx
    0.00 :   ffffffff811e7d52:       jae     0xffffffff811e7e1a <__rseq_handle_notify_resume+0x3aa>
    0.00 :   ffffffff811e7d58:       movl    0x24(%rsp), %esi
    0.00 :   ffffffff811e7d5c:       testl   %esi, %esi
    0.00 :   ffffffff811e7d5e:       je      0xffffffff811e7d74 <__rseq_handle_notify_resume+0x304>
    0.00 :   ffffffff811e7d60:       movq    $-0x7df6a3da, %rdi # imm = 0x82095C26
    0.00 :   ffffffff811e7d67:       callq   0xffffffff811e79e0 <rseq_warn_flags.part.0>
    0.00 :   ffffffff811e7d6c:       testb   %al, %al
    0.00 :   ffffffff811e7d6e:       jne     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7d74:       movq    0x3b0(%r12), %rcx
    0.00 :   ffffffff811e7d7c:       leaq    0x10(%rcx), %rax
    0.00 :   ffffffff811e7d80:       callq   0xffffffff81b63620 <__get_user_4>
    0.00 :   ffffffff811e7d85:       testl   %eax, %eax
    0.00 :   ffffffff811e7d87:       jne     0xffffffff811e7e27 <__rseq_handle_notify_resume+0x3b7>
    0.00 :   ffffffff811e7d8d:       testl   %edx, %edx
    0.00 :   ffffffff811e7d8f:       je      0xffffffff811e7da3 <__rseq_handle_notify_resume+0x333>
    0.00 :   ffffffff811e7d91:       movl    %edx, %esi
    0.00 :   ffffffff811e7d93:       movq    $-0x7df6a3d2, %rdi # imm = 0x82095C2E
    0.00 :   ffffffff811e7d9a:       callq   0xffffffff811e79e0 <rseq_warn_flags.part.0>
    0.00 :   ffffffff811e7d9f:       testb   %al, %al
    0.00 :   ffffffff811e7da1:       jne     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7da3:       incl    %gs:0x7ee3a95e(%rip)
    0.00 :   ffffffff811e7daa:       movq    0x910(%r12), %rax
    0.00 :   ffffffff811e7db2:       movq    $0x0, 0x910(%r12)
    0.00 :   ffffffff811e7dbe:       decl    %gs:0x7ee3a943(%rip)
    0.00 :   ffffffff811e7dc5:       je      0xffffffff811e7e2b <__rseq_handle_notify_resume+0x3bb>
    0.00 :   ffffffff811e7dc7:       testl   %eax, %eax
    0.00 :   ffffffff811e7dc9:       je      0xffffffff811e7b2a <__rseq_handle_notify_resume+0xba>
    0.00 :   ffffffff811e7dcf:       movq    0x3b0(%r12), %rcx
    0.00 :   ffffffff811e7dd7:       addq    $0x8, %rcx
    0.00 :   ffffffff811e7ddb:       xorl    %eax, %eax
    0.00 :   ffffffff811e7ddd:       callq   0xffffffff81b661e0 <__put_user_8>
    0.00 :   ffffffff811e7de2:       testl   %ecx, %ecx
    0.00 :   ffffffff811e7de4:       jne     0xffffffff811e7b22 <__rseq_handle_notify_resume+0xb2>
    0.00 :   ffffffff811e7dea:       movq    0x38(%rsp), %rax
    0.00 :   ffffffff811e7def:       movq    %rax, 0x80(%r14)
    0.00 :   ffffffff811e7df6:       jmp     0xffffffff811e7b2a <__rseq_handle_notify_resume+0xba>
    0.00 :   ffffffff811e7dfb:       nop
    0.00 :   ffffffff811e7dfc:       nop
    0.00 :   ffffffff811e7dfd:       nop
    0.00 :   ffffffff811e7dfe:       xorl    %edi, %edi
    0.00 :   ffffffff811e7e00:       testq   %r13, %r13
    0.00 :   ffffffff811e7e03:       je      0xffffffff811e7e09 <__rseq_handle_notify_resume+0x399>
    0.00 :   ffffffff811e7e05:       movl    0x50(%r13), %edi
    0.00 :   ffffffff811e7e09:       callq   0xffffffff8107f0f0 <force_sigsegv>
    0.00 :   ffffffff811e7e0e:       jmp     0xffffffff811e7b97 <__rseq_handle_notify_resume+0x127>
    0.00 :   ffffffff811e7e13:       ud2
    0.00 :   ffffffff811e7e15:       jmp     0xffffffff811e7b5f <__rseq_handle_notify_resume+0xef>
    0.00 :   ffffffff811e7e1a:       movq    0x3b0(%r12), %rcx
    0.00 :   ffffffff811e7e22:       jmp     0xffffffff811e7b17 <__rseq_handle_notify_resume+0xa7>
    0.00 :   ffffffff811e7e27:       jg      0xffffffff811e7dd7 <__rseq_handle_notify_resume+0x367>
    0.00 :   ffffffff811e7e29:       jmp     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7e2b:       callq   0xffffffff81b789a0 <__SCT__preempt_schedule>
    0.00 :   ffffffff811e7e30:       jmp     0xffffffff811e7dc7 <__rseq_handle_notify_resume+0x357>
    0.00 :   ffffffff811e7e32:       movq    $-0x7e1e3890, %rsi # imm = 0x81E1C770
    0.00 :   ffffffff811e7e39:       movq    $-0x7dcdcc00, %rdi # imm = 0x82323400
    0.00 :   ffffffff811e7e40:       movq    %rdx, 0x10(%rsp)
    0.00 :   ffffffff811e7e45:       movq    %r8, 0x18(%rsp)
    0.00 :   ffffffff811e7e4a:       callq   0xffffffff81b53530 <___ratelimit>
    0.00 :   ffffffff811e7e4f:       testl   %eax, %eax
    0.00 :   ffffffff811e7e51:       movq    0x18(%rsp), %r8
    0.00 :   ffffffff811e7e56:       movq    0x10(%rsp), %rdx
    0.00 :   ffffffff811e7e5b:       je      0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7e5d:       movl    0x2e0(%rdx), %ecx
    0.00 :   ffffffff811e7e63:       movl    0x90(%rdx), %edx
    0.00 :   ffffffff811e7e69:       movl    %r15d, %esi
    0.00 :   ffffffff811e7e6c:       movq    $-0x7df6a438, %rdi # imm = 0x82095BC8
    0.00 :   ffffffff811e7e73:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff811e7e78:       jmp     0xffffffff811e7dfe <__rseq_handle_notify_resume+0x38e>
    0.00 :   ffffffff811e7e7a:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of nf_conntrack.ko for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .text:
         :
         : 4    00000000000088d0 <nf_conntrack_tcp_packet>:
         : 5    ; nf_conntrack_tcp_packet():
    0.00 :   88d0:           pushq   %rbp
    0.00 :   88d1:           movq    %rsp, %rbp
    0.00 :   88d4:           pushq   %r15
    0.00 :   88d6:           pushq   %r14
    0.00 :   88d8:           pushq   %r13
    0.00 :   88da:           movq    %rsi, %r13
    0.00 :   88dd:           movl    %edx, %esi
    0.00 :   88df:           pushq   %r12
    0.00 :   88e1:           pushq   %rbx
    0.00 :   88e2:           movq    %rdi, %rbx
    0.00 :   88e5:           subq    $0xd8, %rsp
    0.00 :   88ec:           movl    %edx, -0x90(%rbp)
    0.00 :   88f2:           movl    %ecx, -0x84(%rbp)
    0.00 :   88f8:           movq    %r8, -0x98(%rbp)
    0.00 :   88ff:           movq    %gs:0x28, %rax
    0.00 :   8908:           movq    %rax, -0x30(%rbp)
    0.00 :   890c:           xorl    %eax, %eax
    0.00 :   890e:           callq   0x8913 <nf_conntrack_tcp_packet+0x43>
    0.00 :   8913:           movq    0x88(%rdi), %rax
    0.00 :   891a:           movl    0x70(%r13), %edx
    0.00 :   891e:           movq    0xc8(%r13), %r12
    0.00 :   8925:           movq    $0x0, -0x80(%rbp)
    0.00 :   892d:           movq    $0x0, -0x78(%rbp)
    0.00 :   8935:           movl    $0x0, -0x70(%rbp)
    0.00 :   893c:           movq    %rax, -0xc0(%rbp)
    0.00 :   8943:           movl    %edx, %eax
    0.00 :   8945:           subl    0x74(%r13), %eax
    0.00 :   8949:           subl    %esi, %eax
    0.00 :   894b:           cmpl    $0x13, %eax
    0.00 :   894e:           jle     0x9a19 <nf_conntrack_tcp_packet+0x1149>
    0.00 :   8954:           movslq  %esi, %rax
    0.00 :   8957:           addq    %rax, %r12
    0.00 :   895a:           je      0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   8960:           movzbl  0xc(%r12), %eax
    0.00 :   8966:           movl    -0x90(%rbp), %edi
    0.00 :   896c:           subl    %edi, %edx
    0.00 :   896e:           shrb    $0x4, %al
    0.00 :   8971:           movzbl  %al, %eax
    0.00 :   8974:           shll    $0x2, %eax
    0.00 :   8977:           cmpl    %eax, %edx
    0.00 :   8979:           jb      0x8c14 <nf_conntrack_tcp_packet+0x344>
    0.00 :   897f:           cmpl    $0x13, %eax
    0.00 :   8982:           jle     0x8c14 <nf_conntrack_tcp_packet+0x344>
    0.00 :   8988:           movq    -0x98(%rbp), %rcx
    0.00 :   898f:           movq    0x20(%rcx), %rax
    0.00 :   8993:           cmpb    $0x0, 0x9bc(%rax)
    0.00 :   899a:           je      0x89a5 <nf_conntrack_tcp_packet+0xd5>
    0.00 :   899c:           cmpb    $0x0, (%rcx)
    0.00 :   899f:           je      0x964a <nf_conntrack_tcp_packet+0xd7a>
    0.00 :   89a5:           movzbl  0xd(%r12), %eax
    0.00 :   89ab:           movq    $0x0, %r8
    0.00 :   89b2:           andl    $0x37, %eax
    0.00 :   89b5:           cmpb    $0x0, (%rax)
    0.00 :   89bc:           je      0x8c1b <nf_conntrack_tcp_packet+0x34b>
    0.00 :   89c2:           movq    0x80(%rbx), %rax
    0.00 :   89c9:           testb   $0x8, %al
    0.00 :   89cb:           je      0x8c78 <nf_conntrack_tcp_packet+0x3a8>
    0.00 :   89d1:           leaq    0x4(%rbx), %rax
    0.00 :   89d5:           movq    %rax, %rdi
    0.00 :   89d8:           movq    %rax, -0xb0(%rbp)
    0.00 :   89df:           callq   0x89e4 <nf_conntrack_tcp_packet+0x114>
    0.00 :   89e4:           movzbl  0xe0(%rbx), %eax
    0.00 :   89eb:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   89f2:           movl    %eax, %ecx
    0.00 :   89f4:           movl    %eax, -0x9c(%rbp)
    0.00 :   89fa:           seta    %al
    0.00 :   89fd:           movzbl  %al, %eax
    0.00 :   8a00:           seta    -0xb1(%rbp)
    0.00 :   8a07:           movl    %eax, -0xa4(%rbp)
    0.00 :   8a0d:           movzbl  0xd(%r12), %eax
    0.00 :   8a13:           testb   $0x4, %al
    0.00 :   8a15:           movb    %al, -0x88(%rbp)
    0.00 :   8a1b:           jne     0x93e3 <nf_conntrack_tcp_packet+0xb13>
    0.00 :   8a21:           testb   $0x2, -0x88(%rbp)
    0.00 :   8a28:           movzbl  -0x88(%rbp), %eax
    0.00 :   8a2f:           jne     0x8c96 <nf_conntrack_tcp_packet+0x3c6>
    0.00 :   8a35:           testb   $0x1, %al
    0.00 :   8a37:           movl    -0x9c(%rbp), %r14d
    0.00 :   8a3e:           movl    -0xa4(%rbp), %r10d
    0.00 :   8a45:           jne     0x99ef <nf_conntrack_tcp_packet+0x111f>
    0.00 :   8a4b:           testb   $0x10, %al
    0.00 :   8a4d:           movq    %r10, %rax
    0.00 :   8a50:           je      0x941b <nf_conntrack_tcp_packet+0xb4b>
    0.00 :   8a56:           shlq    $0x4, %rax
    0.00 :   8a5a:           movl    $0x3, -0xa0(%rbp)
    0.00 :   8a64:           subq    %r10, %rax
    0.00 :   8a67:           movzbl  (%r14,%rax,4), %eax
    0.00 :   8a70:           cmpb    $0x8, %al
    0.00 :   8a72:           jne     0x8cd6 <nf_conntrack_tcp_packet+0x406>
    0.00 :   8a78:           xorl    %r9d, %r9d
    0.00 :   8a7b:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   8a82:           movl    0x4(%r12), %eax
    0.00 :   8a87:           movl    $0x8, -0xdc(%rbp)
    0.00 :   8a91:           movl    %eax, -0xe4(%rbp)
    0.00 :   8a97:           bswapl  %eax
    0.00 :   8a99:           setbe   %r8b
    0.00 :   8a9d:           movl    %eax, -0xa8(%rbp)
    0.00 :   8aa3:           setbe   %r9b
    0.00 :   8aa7:           movzbl  %r8b, %r8d
    0.00 :   8aab:           leaq    (%r8,%r8,4), %rax
    0.00 :   8aaf:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   8ab7:           cmpl    $0x3, -0x84(%rbp)
    0.00 :   8abe:           movl    0x70(%r13), %ecx
    0.00 :   8ac2:           movl    -0x90(%rbp), %edi
    0.00 :   8ac8:           movzbl  -0x88(%rbp), %edx
    0.00 :   8acf:           movl    0x8(%r12), %r11d
    0.00 :   8ad4:           sbbq    %r14, %r14
    0.00 :   8ad7:           notq    %r14
    0.00 :   8ada:           bswapl  %r11d
    0.00 :   8add:           andl    $0x14, %r14d
    0.00 :   8ae1:           leaq    0xb8(%rbx,%r14), %rax
    0.00 :   8ae9:           movq    %rax, -0xc8(%rbp)
    0.00 :   8af0:           movzwl  0xe(%r12), %eax
    0.00 :   8af6:           rolw    $0x8, %ax
    0.00 :   8afa:           movw    %ax, -0xb4(%rbp)
    0.00 :   8b01:           movzwl  %ax, %eax
    0.00 :   8b04:           movl    %eax, -0xe0(%rbp)
    0.00 :   8b0a:           movl    %ecx, %eax
    0.00 :   8b0c:           subl    %edi, %eax
    0.00 :   8b0e:           movzbl  0xc(%r12), %edi
    0.00 :   8b14:           shrb    $0x4, %dil
    0.00 :   8b18:           movzbl  %dil, %edi
    0.00 :   8b1c:           shll    $0x2, %edi
    0.00 :   8b1f:           subl    %edi, %eax
    0.00 :   8b21:           movl    -0xa8(%rbp), %edi
    0.00 :   8b27:           addl    %edi, %eax
    0.00 :   8b29:           movl    %edx, %edi
    0.00 :   8b2b:           shrb    %dl
    0.00 :   8b2d:           andl    $0x1, %edi
    0.00 :   8b30:           andl    $0x1, %edx
    0.00 :   8b33:           addl    %edi, %eax
    0.00 :   8b35:           addl    %edx, %eax
    0.00 :   8b37:           andl    $0x2, %esi
    0.00 :   8b3a:           movl    %eax, -0x88(%rbp)
    0.00 :   8b40:           jne     0x933c <nf_conntrack_tcp_packet+0xa6c>
    0.00 :   8b46:           movl    %r11d, %r15d
    0.00 :   8b49:           leal    -0x1(%r11), %edx
    0.00 :   8b4d:           addq    %rbx, %r14
    0.00 :   8b50:           movl    %r9d, %esi
    0.00 :   8b53:           movq    %rbx, %rdi
    0.00 :   8b56:           movq    %r10, -0xd8(%rbp)
    0.00 :   8b5d:           movq    %r8, -0xd0(%rbp)
    0.00 :   8b64:           movl    %r11d, -0xb8(%rbp)
    0.00 :   8b6b:           callq   0x8b70 <nf_conntrack_tcp_packet+0x2a0>
    0.00 :   8b70:           movl    0xc0(%r14), %r10d
    0.00 :   8b77:           subl    %eax, %r15d
    0.00 :   8b7a:           movl    -0xb8(%rbp), %r11d
    0.00 :   8b81:           movq    -0xd0(%rbp), %r8
    0.00 :   8b88:           testl   %r10d, %r10d
    0.00 :   8b8b:           movq    -0xd8(%rbp), %r10
    0.00 :   8b92:           jne     0x8f41 <nf_conntrack_tcp_packet+0x671>
    0.00 :   8b98:           testb   $0x2, 0xd(%r12)
    0.00 :   8b9e:           jne     0x902d <nf_conntrack_tcp_packet+0x75d>
    0.00 :   8ba4:           movl    -0x88(%rbp), %esi
    0.00 :   8baa:           leaq    (%r10,%r10,4), %rdx
    0.00 :   8bae:           movl    %esi, 0xb8(%r14)
    0.00 :   8bb5:           movzbl  0xc8(%rbx,%rdx,4), %ecx
    0.00 :   8bbd:           movl    -0xe0(%rbp), %edx
    0.00 :   8bc3:           shll    %cl, %edx
    0.00 :   8bc5:           movl    $0x1, %ecx
    0.00 :   8bca:           testl   %edx, %edx
    0.00 :   8bcc:           cmovel  %ecx, %edx
    0.00 :   8bcf:           leaq    (%r8,%r8,4), %rcx
    0.00 :   8bd3:           movl    %edx, 0xc0(%r14)
    0.00 :   8bda:           addl    %esi, %edx
    0.00 :   8bdc:           leaq    (%rbx,%rcx,4), %rcx
    0.00 :   8be0:           movl    %edx, 0xbc(%r14)
    0.00 :   8be7:           movl    0xc0(%rcx), %r9d
    0.00 :   8bee:           testl   %r9d, %r9d
    0.00 :   8bf1:           je      0x9627 <nf_conntrack_tcp_packet+0xd57>
    0.00 :   8bf7:           movl    0xb8(%rcx), %esi
    0.00 :   8bfd:           leal    0x1(%rsi), %edi
    0.00 :   8c00:           cmpl    %edi, %r15d
    0.00 :   8c03:           je      0x9d54 <nf_conntrack_tcp_packet+0x1484>
    0.00 :   8c09:           movzbl  0xd(%r12), %ecx
    0.00 :   8c0f:           jmp     0x8f62 <nf_conntrack_tcp_packet+0x692>
    0.00 :   8c14:           movq    $0x0, %r8
    0.00 :   8c1b:           movq    -0x98(%rbp), %rsi
    0.00 :   8c22:           movq    $0x0, %rcx
    0.00 :   8c29:           movl    $0x6, %edx
    0.00 :   8c2e:           movq    %r13, %rdi
    0.00 :   8c31:           callq   0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   8c36:           movl    $0xffffffff, %eax       # imm = 0xFFFFFFFF
    0.00 :   8c3b:           movq    -0x30(%rbp), %rdx
    0.00 :   8c3f:           subq    %gs:0x28, %rdx
    0.00 :   8c48:           jne     0xa0fb <nf_conntrack_tcp_packet+0x182b>
    0.00 :   8c4e:           addq    $0xd8, %rsp
    0.00 :   8c55:           popq    %rbx
    0.00 :   8c56:           popq    %r12
    0.00 :   8c58:           popq    %r13
    0.00 :   8c5a:           popq    %r14
    0.00 :   8c5c:           popq    %r15
    0.00 :   8c5e:           popq    %rbp
    0.00 :   8c5f:           xorl    %edx, %edx
    0.00 :   8c61:           xorl    %ecx, %ecx
    0.00 :   8c63:           xorl    %esi, %esi
    0.00 :   8c65:           xorl    %edi, %edi
    0.00 :   8c67:           xorl    %r8d, %r8d
    0.00 :   8c6a:           xorl    %r9d, %r9d
    0.00 :   8c6d:           xorl    %r10d, %r10d
    0.00 :   8c70:           xorl    %r11d, %r11d
    0.00 :   8c73:           jmp     0x8c78 <nf_conntrack_tcp_packet+0x3a8>
    0.00 :   8c78:           movl    -0x90(%rbp), %edx
    0.00 :   8c7e:           movq    %r12, %rcx
    0.00 :   8c81:           movq    %r13, %rsi
    0.00 :   8c84:           movq    %rbx, %rdi
    0.00 :   8c87:           callq   0x8640 <tcp_new>
    0.00 :   8c8c:           testb   %al, %al
    0.00 :   8c8e:           jne     0x89d1 <nf_conntrack_tcp_packet+0x101>
    0.00 :   8c94:           jmp     0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   8c96:           movl    -0xa4(%rbp), %r10d
    0.00 :   8c9d:           shrb    $0x4, %al
    0.00 :   8ca0:           movl    -0x9c(%rbp), %r14d
    0.00 :   8ca7:           andl    $0x1, %eax
    0.00 :   8caa:           movl    %eax, -0xa0(%rbp)
    0.00 :   8cb0:           leaq    (%rax,%rax,4), %rax
    0.00 :   8cb4:           movq    %r10, %rcx
    0.00 :   8cb7:           addq    %rax, %rax
    0.00 :   8cba:           shlq    $0x4, %rcx
    0.00 :   8cbe:           subq    %r10, %rcx
    0.00 :   8cc1:           leaq    (%rax,%rcx,4), %rax
    0.00 :   8cc9:           movzbl  (%rax,%r14), %eax
    0.00 :   8cce:           cmpb    $0x8, %al
    0.00 :   8cd0:           je      0x8a78 <nf_conntrack_tcp_packet+0x1a8>
    0.00 :   8cd6:           cmpb    $0x8, %al
    0.00 :   8cd8:           ja      0x8d6a <nf_conntrack_tcp_packet+0x49a>
    0.00 :   8cde:           cmpb    $0x2, %al
    0.00 :   8ce0:           je      0x98b2 <nf_conntrack_tcp_packet+0xfe2>
    0.00 :   8ce6:           cmpb    $0x7, %al
    0.00 :   8ce8:           jne     0x8e85 <nf_conntrack_tcp_packet+0x5b5>
    0.00 :   8cee:           cmpl    $0x6, -0x9c(%rbp)
    0.00 :   8cf5:           jne     0x97e7 <nf_conntrack_tcp_packet+0xf17>
    0.00 :   8cfb:           cmpl    $0x3, -0xa0(%rbp)
    0.00 :   8d02:           jne     0x97e7 <nf_conntrack_tcp_packet+0xf17>
    0.00 :   8d08:           movzbl  -0xb1(%rbp), %eax
    0.00 :   8d0f:           cmpb    %al, 0xe1(%rbx)
    0.00 :   8d15:           je      0x982b <nf_conntrack_tcp_packet+0xf5b>
    0.00 :   8d1b:           cmpb    $0x0, 0xe3(%rbx)
    0.00 :   8d22:           jne     0x982b <nf_conntrack_tcp_packet+0xf5b>
    0.00 :   8d28:           movzbl  0xf3(%rbx), %eax
    0.00 :   8d2f:           testb   $0x40, %al
    0.00 :   8d31:           je      0x982b <nf_conntrack_tcp_packet+0xf5b>
    0.00 :   8d37:           movq    -0xb0(%rbp), %rdi
    0.00 :   8d3e:           andl    $-0x41, %eax
    0.00 :   8d41:           movb    %al, 0xf3(%rbx)
    0.00 :   8d47:           callq   0x8d4c <nf_conntrack_tcp_packet+0x47c>
    0.00 :   8d4c:           movq    -0x98(%rbp), %rdx
    0.00 :   8d53:           movq    $0x0, %rcx
    0.00 :   8d5a:           movq    %rbx, %rsi
    0.00 :   8d5d:           movq    %r13, %rdi
    0.00 :   8d60:           callq   0x8d65 <nf_conntrack_tcp_packet+0x495>
    0.00 :   8d65:           jmp     0x9332 <nf_conntrack_tcp_packet+0xa62>
    0.00 :   8d6a:           cmpb    $0xa, %al
    0.00 :   8d6c:           je      0x9930 <nf_conntrack_tcp_packet+0x1060>
    0.00 :   8d72:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   8d79:           setbe   %cl
    0.00 :   8d7c:           cmpb    $0xb, %al
    0.00 :   8d7e:           jne     0x8ee2 <nf_conntrack_tcp_packet+0x612>
    0.00 :   8d84:           cmpl    $0x1, -0xa0(%rbp)
    0.00 :   8d8b:           je      0x96ea <nf_conntrack_tcp_packet+0xe1a>
    0.00 :   8d91:           movzbl  -0xb1(%rbp), %eax
    0.00 :   8d98:           movl    -0xa0(%rbp), %r15d
    0.00 :   8d9f:           movl    -0x90(%rbp), %r9d
    0.00 :   8da6:           movb    %r15b, 0xe3(%rbx)
    0.00 :   8dad:           movb    %al, 0xe1(%rbx)
    0.00 :   8db3:           movl    0x4(%r12), %eax
    0.00 :   8db8:           bswapl  %eax
    0.00 :   8dba:           movl    %eax, 0xe4(%rbx)
    0.00 :   8dc0:           movzbl  0xd(%r12), %edx
    0.00 :   8dc6:           movl    0x70(%r13), %eax
    0.00 :   8dca:           movl    0x4(%r12), %esi
    0.00 :   8dcf:           movl    %edx, %edi
    0.00 :   8dd1:           subl    %r9d, %eax
    0.00 :   8dd4:           shrb    %dl
    0.00 :   8dd6:           andl    $0x1, %edi
    0.00 :   8dd9:           andl    $0x1, %edx
    0.00 :   8ddc:           bswapl  %esi
    0.00 :   8dde:           addl    %edi, %eax
    0.00 :   8de0:           addl    %edx, %eax
    0.00 :   8de2:           movzbl  0xc(%r12), %edx
    0.00 :   8de8:           shrb    $0x4, %dl
    0.00 :   8deb:           movzbl  %dl, %edx
    0.00 :   8dee:           shll    $0x2, %edx
    0.00 :   8df1:           subl    %edx, %eax
    0.00 :   8df3:           addl    %esi, %eax
    0.00 :   8df5:           movl    %eax, 0xec(%rbx)
    0.00 :   8dfb:           movzwl  0xe(%r12), %eax
    0.00 :   8e01:           rolw    $0x8, %ax
    0.00 :   8e05:           testl   %r15d, %r15d
    0.00 :   8e08:           movw    %ax, 0xf0(%rbx)
    0.00 :   8e0f:           jne     0x8e19 <nf_conntrack_tcp_packet+0x549>
    0.00 :   8e11:           testb   %cl, %cl
    0.00 :   8e13:           jne     0x9ce5 <nf_conntrack_tcp_packet+0x1415>
    0.00 :   8e19:           cmpl    $0x1, -0x9c(%rbp)
    0.00 :   8e20:           sete    %al
    0.00 :   8e23:           testb   %al, -0xb1(%rbp)
    0.00 :   8e29:           je      0x8e41 <nf_conntrack_tcp_packet+0x571>
    0.00 :   8e2b:           cmpl    $0x3, -0xa0(%rbp)
    0.00 :   8e32:           jne     0x8e41 <nf_conntrack_tcp_packet+0x571>
    0.00 :   8e34:           movl    0x8(%r12), %eax
    0.00 :   8e39:           bswapl  %eax
    0.00 :   8e3b:           movl    %eax, 0xe8(%rbx)
    0.00 :   8e41:           movq    -0xb0(%rbp), %rdi
    0.00 :   8e48:           callq   0x8e4d <nf_conntrack_tcp_packet+0x57d>
    0.00 :   8e4d:           movq    (,%r14,8), %rax
    0.00 :   8e55:           movl    -0xa4(%rbp), %r9d
    0.00 :   8e5c:           movq    $0x0, %rcx
    0.00 :   8e63:           movl    -0xa0(%rbp), %r8d
    0.00 :   8e6a:           movq    -0x98(%rbp), %rdx
    0.00 :   8e71:           movq    %rbx, %rsi
    0.00 :   8e74:           movq    %r13, %rdi
    0.00 :   8e77:           movq    %rax, (%rsp)
    0.00 :   8e7b:           callq   0x8e80 <nf_conntrack_tcp_packet+0x5b0>
    0.00 :   8e80:           jmp     0x9332 <nf_conntrack_tcp_packet+0xa62>
    0.00 :   8e85:           cmpb    $0x1, %al
    0.00 :   8e87:           jne     0x9974 <nf_conntrack_tcp_packet+0x10a4>
    0.00 :   8e8d:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   8e94:           setbe   %r9b
    0.00 :   8e98:           setbe   %r8b
    0.00 :   8e9c:           setbe   %cl
    0.00 :   8e9f:           cmpl    $0x6, -0x9c(%rbp)
    0.00 :   8ea6:           movzbl  %r8b, %r8d
    0.00 :   8eaa:           movzbl  %r9b, %r9d
    0.00 :   8eae:           leaq    (%r8,%r8,4), %rax
    0.00 :   8eb2:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   8eba:           ja      0x9695 <nf_conntrack_tcp_packet+0xdc5>
    0.00 :   8ec0:           movl    0x4(%r12), %eax
    0.00 :   8ec5:           movl    $0x1, -0xdc(%rbp)
    0.00 :   8ecf:           movl    %eax, -0xe4(%rbp)
    0.00 :   8ed5:           bswapl  %eax
    0.00 :   8ed7:           movl    %eax, -0xa8(%rbp)
    0.00 :   8edd:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   8ee2:           cmpb    $0x9, %al
    0.00 :   8ee4:           jne     0x9974 <nf_conntrack_tcp_packet+0x10a4>
    0.00 :   8eea:           orb     $-0x80, 0xf3(%rbx)
    0.00 :   8ef1:           xorl    %r9d, %r9d
    0.00 :   8ef4:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   8efb:           movl    0x4(%r12), %eax
    0.00 :   8f00:           movl    $0x9, -0xdc(%rbp)
    0.00 :   8f0a:           movl    %eax, -0xe4(%rbp)
    0.00 :   8f10:           bswapl  %eax
    0.00 :   8f12:           setbe   %r8b
    0.00 :   8f16:           movl    %eax, -0xa8(%rbp)
    0.00 :   8f1c:           movzbl  0xd(%r12), %eax
    0.00 :   8f22:           movzbl  %r8b, %r8d
    0.00 :   8f26:           setbe   %r9b
    0.00 :   8f2a:           movb    %al, -0x88(%rbp)
    0.00 :   8f30:           leaq    (%r8,%r8,4), %rax
    0.00 :   8f34:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   8f3c:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   8f41:           movzbl  0xd(%r12), %ecx
    0.00 :   8f47:           testb   $0x2, %cl
    0.00 :   8f4a:           jne     0x94c1 <nf_conntrack_tcp_packet+0xbf1>
    0.00 :   8f50:           leaq    (%r8,%r8,4), %rdx
    0.00 :   8f54:           movl    0xb8(%rbx,%rdx,4), %esi
    0.00 :   8f5b:           movl    0xbc(%r14), %edx
    0.00 :   8f62:           testb   $0x10, %cl
    0.00 :   8f65:           jne     0x90f4 <nf_conntrack_tcp_packet+0x824>
    0.00 :   8f6b:           movl    %esi, %eax
    0.00 :   8f6d:           movl    %esi, %r15d
    0.00 :   8f70:           testb   $0x4, %cl
    0.00 :   8f73:           je      0x8f83 <nf_conntrack_tcp_packet+0x6b3>
    0.00 :   8f75:           movl    -0xe4(%rbp), %edi
    0.00 :   8f7b:           testl   %edi, %edi
    0.00 :   8f7d:           je      0x9883 <nf_conntrack_tcp_packet+0xfb3>
    0.00 :   8f83:           leal    0x1(%rdx), %edi
    0.00 :   8f86:           cmpl    %edi, -0xa8(%rbp)
    0.00 :   8f8c:           js      0x911f <nf_conntrack_tcp_packet+0x84f>
    0.00 :   8f92:           leaq    (%r8,%r8,4), %rcx
    0.00 :   8f96:           movl    0xc0(%r14), %esi
    0.00 :   8f9d:           movl    0xc0(%rbx,%rcx,4), %ecx
    0.00 :   8fa4:           testl   %ecx, %ecx
    0.00 :   8fa6:           jne     0x9442 <nf_conntrack_tcp_packet+0xb72>
    0.00 :   8fac:           movq    %r10, -0x90(%rbp)
    0.00 :   8fb3:           movl    %edi, (%rsp)
    0.00 :   8fb6:           movq    $0x0, %r9
    0.00 :   8fbd:           movl    $0x1, %r8d
    0.00 :   8fc3:           movq    -0xc8(%rbp), %rcx
    0.00 :   8fca:           movq    -0x98(%rbp), %rdx
    0.00 :   8fd1:           movq    %rbx, %rsi
    0.00 :   8fd4:           movq    %r13, %rdi
    0.00 :   8fd7:           callq   0x83f0 <nf_tcp_log_invalid>
    0.00 :   8fdc:           testl   %eax, %eax
    0.00 :   8fde:           movq    -0x90(%rbp), %r10
    0.00 :   8fe5:           je      0x9326 <nf_conntrack_tcp_packet+0xa56>
    0.00 :   8feb:           decl    %eax
    0.00 :   8fed:           jne     0x9243 <nf_conntrack_tcp_packet+0x973>
    0.00 :   8ff3:           movq    0x80(%rbx), %rax
    0.00 :   8ffa:           testb   $0x4, %al
    0.00 :   8ffc:           je      0x901c <nf_conntrack_tcp_packet+0x74c>
    0.00 :   8ffe:           movq    0x80(%rbx), %rax
    0.00 :   9005:           testb   $0x4, %ah
    0.00 :   9008:           jne     0x901c <nf_conntrack_tcp_packet+0x74c>
    0.00 :   900a:           movl    -0xa0(%rbp), %eax
    0.00 :   9010:           subl    $0x2, %eax
    0.00 :   9013:           andl    $-0x3, %eax
    0.00 :   9016:           je      0x9c37 <nf_conntrack_tcp_packet+0x1367>
    0.00 :   901c:           movq    -0xb0(%rbp), %rdi
    0.00 :   9023:           callq   0x9028 <nf_conntrack_tcp_packet+0x758>
    0.00 :   9028:           jmp     0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   902d:           movl    %eax, -0xd0(%rbp)
    0.00 :   9033:           movl    -0x88(%rbp), %eax
    0.00 :   9039:           movl    $0x1, %edx
    0.00 :   903e:           movq    -0xc8(%rbp), %rcx
    0.00 :   9045:           movl    -0x90(%rbp), %esi
    0.00 :   904b:           movq    %r13, %rdi
    0.00 :   904e:           movq    %r10, -0xf0(%rbp)
    0.00 :   9055:           movq    %r8, -0xd8(%rbp)
    0.00 :   905c:           movl    %eax, 0xbc(%r14)
    0.00 :   9063:           movl    %eax, 0xb8(%r14)
    0.00 :   906a:           movl    -0xe0(%rbp), %eax
    0.00 :   9070:           testl   %eax, %eax
    0.00 :   9072:           cmovnel %eax, %edx
    0.00 :   9075:           movl    %edx, 0xc0(%r14)
    0.00 :   907c:           movq    %r12, %rdx
    0.00 :   907f:           callq   0x84d0 <tcp_options>
    0.00 :   9084:           movq    -0xf0(%rbp), %r10
    0.00 :   908b:           movl    -0xb8(%rbp), %r11d
    0.00 :   9092:           movl    -0xd0(%rbp), %eax
    0.00 :   9098:           movq    -0xd8(%rbp), %r8
    0.00 :   909f:           leaq    (%r10,%r10,4), %rdx
    0.00 :   90a3:           testb   $0x1, 0xc9(%rbx,%rdx,4)
    0.00 :   90ab:           je      0x90bb <nf_conntrack_tcp_packet+0x7eb>
    0.00 :   90ad:           leaq    (%r8,%r8,4), %rdx
    0.00 :   90b1:           testb   $0x1, 0xc9(%rbx,%rdx,4)
    0.00 :   90b9:           jne     0x90d3 <nf_conntrack_tcp_packet+0x803>
    0.00 :   90bb:           leaq    (%r10,%r10,4), %rdx
    0.00 :   90bf:           movb    $0x0, 0xc8(%rbx,%rdx,4)
    0.00 :   90c7:           leaq    (%r8,%r8,4), %rdx
    0.00 :   90cb:           movb    $0x0, 0xc8(%rbx,%rdx,4)
    0.00 :   90d3:           movzbl  0xd(%r12), %ecx
    0.00 :   90d9:           testb   $0x10, %cl
    0.00 :   90dc:           je      0x9243 <nf_conntrack_tcp_packet+0x973>
    0.00 :   90e2:           leaq    (%r8,%r8,4), %rdx
    0.00 :   90e6:           movl    0xb8(%rbx,%rdx,4), %esi
    0.00 :   90ed:           movl    0xbc(%r14), %edx
    0.00 :   90f4:           subl    %eax, %r11d
    0.00 :   90f7:           movl    0xc(%r12), %eax
    0.00 :   90fc:           andl    $0x1400, %eax           # imm = 0x1400
    0.00 :   9101:           cmpl    $0x1400, %eax           # imm = 0x1400
    0.00 :   9106:           movl    %esi, %eax
    0.00 :   9108:           jne     0x9117 <nf_conntrack_tcp_packet+0x847>
    0.00 :   910a:           testl   %r11d, %r11d
    0.00 :   910d:           jne     0x9117 <nf_conntrack_tcp_packet+0x847>
    0.00 :   910f:           movl    %esi, %r15d
    0.00 :   9112:           jmp     0x8f70 <nf_conntrack_tcp_packet+0x6a0>
    0.00 :   9117:           movl    %r11d, %esi
    0.00 :   911a:           jmp     0x8f70 <nf_conntrack_tcp_packet+0x6a0>
    0.00 :   911f:           leal    0x1(%rax), %edi
    0.00 :   9122:           cmpl    %edi, %r15d
    0.00 :   9125:           jns     0x9679 <nf_conntrack_tcp_packet+0xda9>
    0.00 :   912b:           leaq    (%r8,%r8,4), %rdi
    0.00 :   912f:           leaq    (%rbx,%rdi,4), %rdi
    0.00 :   9133:           movl    0xc0(%rdi), %r9d
    0.00 :   913a:           testl   %r9d, %r9d
    0.00 :   913d:           je      0x916f <nf_conntrack_tcp_packet+0x89f>
    0.00 :   913f:           notl    %r9d
    0.00 :   9142:           addl    0xb8(%r14), %r9d
    0.00 :   9149:           movl    -0x88(%rbp), %r11d
    0.00 :   9150:           cmpl    %r11d, %r9d
    0.00 :   9153:           js      0x916f <nf_conntrack_tcp_packet+0x89f>
    0.00 :   9155:           movl    %r9d, (%rsp)
    0.00 :   9159:           movq    %r10, -0x90(%rbp)
    0.00 :   9160:           movq    $0x0, %r9
    0.00 :   9167:           xorl    %r8d, %r8d
    0.00 :   916a:           jmp     0x8fc3 <nf_conntrack_tcp_packet+0x6f3>
    0.00 :   916f:           movl    0xc0(%r14), %r9d
    0.00 :   9176:           movl    $0x101d0, %r11d         # imm = 0x101D0
    0.00 :   917c:           cmpl    %r11d, %r9d
    0.00 :   917f:           cmovael %r9d, %r11d
    0.00 :   9183:           subl    %r11d, %eax
    0.00 :   9186:           decl    %eax
    0.00 :   9188:           cmpl    %r15d, %eax
    0.00 :   918b:           jns     0x9abe <nf_conntrack_tcp_packet+0x11ee>
    0.00 :   9191:           andl    $0x2, %ecx
    0.00 :   9194:           jne     0x91a8 <nf_conntrack_tcp_packet+0x8d8>
    0.00 :   9196:           leaq    (%r10,%r10,4), %rax
    0.00 :   919a:           movzbl  0xc8(%rbx,%rax,4), %ecx
    0.00 :   91a2:           shll    %cl, -0xe0(%rbp)
    0.00 :   91a8:           movl    -0xe0(%rbp), %ecx
    0.00 :   91ae:           movl    %r15d, %eax
    0.00 :   91b1:           subl    %esi, %eax
    0.00 :   91b3:           addl    %ecx, %eax
    0.00 :   91b5:           cmpl    %eax, %r9d
    0.00 :   91b8:           jae     0x91c1 <nf_conntrack_tcp_packet+0x8f1>
    0.00 :   91ba:           movl    %eax, 0xc0(%r14)
    0.00 :   91c1:           movl    -0x88(%rbp), %eax
    0.00 :   91c7:           cmpl    %eax, 0xb8(%r14)
    0.00 :   91ce:           jns     0x91e3 <nf_conntrack_tcp_packet+0x913>
    0.00 :   91d0:           movl    %eax, 0xb8(%r14)
    0.00 :   91d7:           leaq    (%r10,%r10,4), %rax
    0.00 :   91db:           orb     $0x10, 0xc9(%rbx,%rax,4)
    0.00 :   91e3:           testb   $0x10, 0xd(%r12)
    0.00 :   91e9:           jne     0x9ad4 <nf_conntrack_tcp_packet+0x1204>
    0.00 :   91ef:           movl    0xc0(%rdi), %eax
    0.00 :   91f5:           testl   %eax, %eax
    0.00 :   91f7:           jne     0x9b00 <nf_conntrack_tcp_packet+0x1230>
    0.00 :   91fd:           movl    -0xe0(%rbp), %ecx
    0.00 :   9203:           leal    (%rcx,%r15), %eax
    0.00 :   9207:           movl    %eax, %edx
    0.00 :   9209:           notl    %edx
    0.00 :   920b:           addl    0xbc(%rdi), %edx
    0.00 :   9211:           jns     0x9222 <nf_conntrack_tcp_packet+0x952>
    0.00 :   9213:           incl    %r15d
    0.00 :   9216:           testl   %ecx, %ecx
    0.00 :   9218:           cmovel  %r15d, %eax
    0.00 :   921c:           movl    %eax, 0xbc(%rdi)
    0.00 :   9222:           cmpl    0xb8(%rdi), %esi
    0.00 :   9228:           jne     0x9236 <nf_conntrack_tcp_packet+0x966>
    0.00 :   922a:           leaq    (%r8,%r8,4), %rax
    0.00 :   922e:           andb    $-0x11, 0xc9(%rbx,%rax,4)
    0.00 :   9236:           cmpl    $0x3, -0xa0(%rbp)
    0.00 :   923d:           je      0x9b1d <nf_conntrack_tcp_packet+0x124d>
    0.00 :   9243:           movzbl  -0xa0(%rbp), %eax
    0.00 :   924a:           movl    -0x9c(%rbp), %ecx
    0.00 :   9250:           movb    %al, 0xe3(%rbx)
    0.00 :   9256:           movzbl  -0xb1(%rbp), %eax
    0.00 :   925d:           movb    %al, 0xe1(%rbx)
    0.00 :   9263:           movl    -0xdc(%rbp), %eax
    0.00 :   9269:           cmpl    %ecx, %eax
    0.00 :   926b:           movb    %al, 0xe0(%rbx)
    0.00 :   9271:           je      0x9284 <nf_conntrack_tcp_packet+0x9b4>
    0.00 :   9273:           cmpl    $0x4, %eax
    0.00 :   9276:           jne     0x9284 <nf_conntrack_tcp_packet+0x9b4>
    0.00 :   9278:           leaq    (%r10,%r10,4), %rax
    0.00 :   927c:           orb     $0x4, 0xc9(%rbx,%rax,4)
    0.00 :   9284:           movq    -0xc0(%rbp), %rsi
    0.00 :   928b:           movzbl  0xa0e(%rsi), %ecx
    0.00 :   9292:           leaq    0x9d4(%rsi), %rax
    0.00 :   9299:           cmpb    %cl, 0xe2(%rbx)
    0.00 :   929f:           jb      0x95b5 <nf_conntrack_tcp_packet+0xce5>
    0.00 :   92a5:           movl    -0xdc(%rbp), %edx
    0.00 :   92ab:           movq    -0xc0(%rbp), %rsi
    0.00 :   92b2:           movl    0xa04(%rsi), %r14d
    0.00 :   92b9:           cmpl    (%rax,%rdx,4), %r14d
    0.00 :   92bd:           jae     0x95b5 <nf_conntrack_tcp_packet+0xce5>
    0.00 :   92c3:           movq    -0xb0(%rbp), %rdi
    0.00 :   92ca:           callq   0x92cf <nf_conntrack_tcp_packet+0x9ff>
    0.00 :   92cf:           movq    0x80(%rbx), %rax
  100.00 :   92d6:           testb   $0x2, %al
    0.00 :   92d8:           jne     0x99b4 <nf_conntrack_tcp_packet+0x10e4>
    0.00 :   92de:           testb   $0x4, 0xd(%r12)
    0.00 :   92e4:           jne     0x9da0 <nf_conntrack_tcp_packet+0x14d0>
    0.00 :   92ea:           movl    -0xa0(%rbp), %eax
    0.00 :   92f0:           testl   %eax, %eax
    0.00 :   92f2:           jne     0x92fd <nf_conntrack_tcp_packet+0xa2d>
    0.00 :   92f4:           cmpl    $0x1, -0x9c(%rbp)
    0.00 :   92fb:           je      0x9332 <nf_conntrack_tcp_packet+0xa62>
    0.00 :   92fd:           cmpl    $0x3, -0xdc(%rbp)
    0.00 :   9304:           je      0x9ccc <nf_conntrack_tcp_packet+0x13fc>
    0.00 :   930a:           movl    -0x84(%rbp), %esi
    0.00 :   9310:           movl    $0x1, %r8d
    0.00 :   9316:           movl    %r14d, %ecx
    0.00 :   9319:           movq    %r13, %rdx
    0.00 :   931c:           movq    %rbx, %rdi
    0.00 :   931f:           callq   0x9324 <nf_conntrack_tcp_packet+0xa54>
    0.00 :   9324:           jmp     0x9332 <nf_conntrack_tcp_packet+0xa62>
    0.00 :   9326:           movq    -0xb0(%rbp), %rdi
    0.00 :   932d:           callq   0x9332 <nf_conntrack_tcp_packet+0xa62>
    0.00 :   9332:           movl    $0x1, %eax
    0.00 :   9337:           jmp     0x8c3b <nf_conntrack_tcp_packet+0x36b>
    0.00 :   933c:           movq    $0x0, -0x58(%rbp)
    0.00 :   9344:           movq    $0x0, -0x50(%rbp)
    0.00 :   934c:           movq    $0x0, -0x48(%rbp)
    0.00 :   9354:           movq    $0x0, -0x40(%rbp)
    0.00 :   935c:           movq    $0x0, -0x38(%rbp)
    0.00 :   9364:           movzbl  0xc(%r12), %eax
    0.00 :   936a:           shrb    $0x4, %al
    0.00 :   936d:           movzbl  %al, %eax
    0.00 :   9370:           leal    -0x14(,%rax,4), %r15d
    0.00 :   9378:           testl   %r15d, %r15d
    0.00 :   937b:           je      0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   9381:           movl    -0x90(%rbp), %eax
    0.00 :   9387:           subl    0x74(%r13), %ecx
    0.00 :   938b:           leal    0x14(%rax), %esi
    0.00 :   938e:           movq    0xc8(%r13), %rax
    0.00 :   9395:           subl    %esi, %ecx
    0.00 :   9397:           cmpl    %ecx, %r15d
    0.00 :   939a:           jg      0x9e53 <nf_conntrack_tcp_packet+0x1583>
    0.00 :   93a0:           movslq  %esi, %rsi
    0.00 :   93a3:           addq    %rsi, %rax
    0.00 :   93a6:           je      0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   93ac:           cmpl    $0xc, %r15d
    0.00 :   93b0:           je      0x9d8f <nf_conntrack_tcp_packet+0x14bf>
    0.00 :   93b6:           testl   %r15d, %r15d
    0.00 :   93b9:           jle     0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   93bf:           movzbl  (%rax), %ecx
    0.00 :   93c2:           testb   %cl, %cl
    0.00 :   93c4:           je      0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   93ca:           cmpb    $0x1, %cl
    0.00 :   93cd:           jne     0x9a4e <nf_conntrack_tcp_packet+0x117e>
    0.00 :   93d3:           decl    %r15d
    0.00 :   93d6:           incq    %rax
    0.00 :   93d9:           testl   %r15d, %r15d
    0.00 :   93dc:           jg      0x93bf <nf_conntrack_tcp_packet+0xaef>
    0.00 :   93de:           jmp     0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   93e3:           movl    -0xa4(%rbp), %r10d
    0.00 :   93ea:           movl    -0x9c(%rbp), %r14d
    0.00 :   93f1:           movq    %r10, %rax
    0.00 :   93f4:           shlq    $0x4, %rax
    0.00 :   93f8:           subq    %r10, %rax
    0.00 :   93fb:           movzbl  (%r14,%rax,4), %eax
    0.00 :   9404:           cmpb    $0x8, %al
    0.00 :   9406:           je      0x9b68 <nf_conntrack_tcp_packet+0x1298>
    0.00 :   940c:           movl    $0x4, -0xa0(%rbp)
    0.00 :   9416:           jmp     0x8cd6 <nf_conntrack_tcp_packet+0x406>
    0.00 :   941b:           shlq    $0x4, %rax
    0.00 :   941f:           movl    $0x5, -0xa0(%rbp)
    0.00 :   9429:           subq    %r10, %rax
    0.00 :   942c:           movzbl  (%r14,%rax,4), %eax
    0.00 :   9435:           cmpb    $0x8, %al
    0.00 :   9437:           jne     0x8cd6 <nf_conntrack_tcp_packet+0x406>
    0.00 :   943d:           jmp     0x8a78 <nf_conntrack_tcp_packet+0x1a8>
    0.00 :   9442:           movl    -0x88(%rbp), %r9d
    0.00 :   9449:           movl    %r9d, %r8d
    0.00 :   944c:           subl    %edx, %r8d
    0.00 :   944f:           movl    $0x101d0, %edx          # imm = 0x101D0
    0.00 :   9454:           incl    %r8d
    0.00 :   9457:           cmpl    %edx, %esi
    0.00 :   9459:           cmovael %esi, %edx
    0.00 :   945c:           movl    %eax, %esi
    0.00 :   945e:           subl    %edx, %esi
    0.00 :   9460:           movl    %ecx, %edx
    0.00 :   9462:           notl    %edx
    0.00 :   9464:           addl    0xb8(%r14), %edx
    0.00 :   946b:           decl    %esi
    0.00 :   946d:           subl    %r15d, %esi
    0.00 :   9470:           shrl    $0x1f, %esi
    0.00 :   9473:           subl    %r9d, %edx
    0.00 :   9476:           shrl    $0x1f, %edx
    0.00 :   9479:           testb   %dl, %sil
    0.00 :   947c:           je      0x8fac <nf_conntrack_tcp_packet+0x6dc>
    0.00 :   9482:           cmpl    %r8d, %ecx
    0.00 :   9485:           jb      0x8fac <nf_conntrack_tcp_packet+0x6dc>
    0.00 :   948b:           decl    %r15d
    0.00 :   948e:           cmpl    %eax, %r15d
    0.00 :   9491:           jns     0x8fac <nf_conntrack_tcp_packet+0x6dc>
    0.00 :   9497:           leaq    (%r10,%r10,4), %rax
    0.00 :   949b:           movl    %r9d, 0xb8(%r14)
    0.00 :   94a2:           movq    %r10, -0x90(%rbp)
    0.00 :   94a9:           movq    $0x0, %r9
    0.00 :   94b0:           orb     $0x10, 0xc9(%rbx,%rax,4)
    0.00 :   94b8:           movl    %r8d, (%rsp)
    0.00 :   94bc:           jmp     0x9167 <nf_conntrack_tcp_packet+0x897>
    0.00 :   94c1:           movl    -0x88(%rbp), %esi
    0.00 :   94c7:           cmpl    %esi, 0xb8(%r14)
    0.00 :   94ce:           jns     0x8f50 <nf_conntrack_tcp_packet+0x680>
    0.00 :   94d4:           movzbl  0xe0(%rbx), %esi
    0.00 :   94db:           leal    -0x1(%rsi), %edx
    0.00 :   94de:           cmpb    $0x1, %dl
    0.00 :   94e1:           ja      0x8f50 <nf_conntrack_tcp_packet+0x680>
    0.00 :   94e7:           movl    %eax, -0xd0(%rbp)
    0.00 :   94ed:           movl    -0x88(%rbp), %eax
    0.00 :   94f3:           movl    $0x1, %edx
    0.00 :   94f8:           movq    -0xc8(%rbp), %rcx
    0.00 :   94ff:           movl    -0x90(%rbp), %esi
    0.00 :   9505:           movq    %r13, %rdi
    0.00 :   9508:           movq    %r10, -0xf0(%rbp)
    0.00 :   950f:           movq    %r8, -0xd8(%rbp)
    0.00 :   9516:           movl    %eax, 0xbc(%r14)
    0.00 :   951d:           movl    %eax, 0xb8(%r14)
    0.00 :   9524:           movl    -0xe0(%rbp), %eax
    0.00 :   952a:           movl    %r11d, -0xb8(%rbp)
    0.00 :   9531:           testl   %eax, %eax
    0.00 :   9533:           cmovnel %eax, %edx
    0.00 :   9536:           movl    %edx, 0xc0(%r14)
    0.00 :   953d:           movq    %r12, %rdx
    0.00 :   9540:           callq   0x84d0 <tcp_options>
    0.00 :   9545:           movq    -0xf0(%rbp), %r10
    0.00 :   954c:           movl    -0xb8(%rbp), %r11d
    0.00 :   9553:           movl    -0xd0(%rbp), %eax
    0.00 :   9559:           movq    -0xd8(%rbp), %r8
    0.00 :   9560:           leaq    (%r10,%r10,4), %rdx
    0.00 :   9564:           testb   $0x1, 0xc9(%rbx,%rdx,4)
    0.00 :   956c:           je      0x957c <nf_conntrack_tcp_packet+0xcac>
    0.00 :   956e:           leaq    (%r8,%r8,4), %rdx
    0.00 :   9572:           testb   $0x1, 0xc9(%rbx,%rdx,4)
    0.00 :   957a:           jne     0x9594 <nf_conntrack_tcp_packet+0xcc4>
    0.00 :   957c:           leaq    (%r10,%r10,4), %rdx
    0.00 :   9580:           movb    $0x0, 0xc8(%rbx,%rdx,4)
    0.00 :   9588:           leaq    (%r8,%r8,4), %rdx
    0.00 :   958c:           movb    $0x0, 0xc8(%rbx,%rdx,4)
    0.00 :   9594:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   959b:           movzbl  0xd(%r12), %ecx
    0.00 :   95a1:           jbe     0x8f50 <nf_conntrack_tcp_packet+0x680>
    0.00 :   95a7:           testb   $0x10, %cl
    0.00 :   95aa:           jne     0x90e2 <nf_conntrack_tcp_packet+0x812>
    0.00 :   95b0:           jmp     0x9243 <nf_conntrack_tcp_packet+0x973>
    0.00 :   95b5:           cmpl    $0x4, -0xa0(%rbp)
    0.00 :   95bc:           je      0x9e2a <nf_conntrack_tcp_packet+0x155a>
    0.00 :   95c2:           movl    -0xdc(%rbp), %edx
    0.00 :   95c8:           movl    (%rax,%rdx,4), %r14d
    0.00 :   95cc:           movzbl  0xc9(%rbx), %eax
    0.00 :   95d3:           orb     0xdd(%rbx), %al
    0.00 :   95d9:           testb   $0x10, %al
    0.00 :   95db:           je      0x95ef <nf_conntrack_tcp_packet+0xd1f>
    0.00 :   95dd:           movq    -0xc0(%rbp), %rax
    0.00 :   95e4:           movl    0xa08(%rax), %eax
    0.00 :   95ea:           cmpl    %r14d, %eax
    0.00 :   95ed:           jb      0x9613 <nf_conntrack_tcp_packet+0xd43>
    0.00 :   95ef:           cmpw    $0x0, 0xf0(%rbx)
    0.00 :   95f7:           jne     0x92c3 <nf_conntrack_tcp_packet+0x9f3>
    0.00 :   95fd:           movq    -0xc0(%rbp), %rax
    0.00 :   9604:           movl    0xa04(%rax), %eax
    0.00 :   960a:           cmpl    %r14d, %eax
    0.00 :   960d:           jae     0x92c3 <nf_conntrack_tcp_packet+0x9f3>
    0.00 :   9613:           movq    -0xb0(%rbp), %rdi
    0.00 :   961a:           movl    %eax, %r14d
    0.00 :   961d:           callq   0x9622 <nf_conntrack_tcp_packet+0xd52>
    0.00 :   9622:           jmp     0x92cf <nf_conntrack_tcp_packet+0x9ff>
    0.00 :   9627:           movl    %r15d, 0xbc(%rcx)
    0.00 :   962e:           movl    %r15d, 0xb8(%rcx)
    0.00 :   9635:           movl    %r15d, %esi
    0.00 :   9638:           movzbl  0xd(%r12), %ecx
    0.00 :   963e:           movl    0xbc(%r14), %edx
    0.00 :   9645:           jmp     0x8f62 <nf_conntrack_tcp_packet+0x692>
    0.00 :   964a:           movzbl  0x1(%rcx), %r8d
    0.00 :   964f:           movl    -0x90(%rbp), %edx
    0.00 :   9655:           xorl    %esi, %esi
    0.00 :   9657:           movl    $0x6, %ecx
    0.00 :   965c:           movq    %r13, %rdi
    0.00 :   965f:           callq   0x9664 <nf_conntrack_tcp_packet+0xd94>
    0.00 :   9664:           testw   %ax, %ax
    0.00 :   9667:           je      0x89a5 <nf_conntrack_tcp_packet+0xd5>
    0.00 :   966d:           movq    $0x0, %r8
    0.00 :   9674:           jmp     0x8c1b <nf_conntrack_tcp_packet+0x34b>
    0.00 :   9679:           movq    %r10, -0x90(%rbp)
    0.00 :   9680:           movl    %edi, (%rsp)
    0.00 :   9683:           movq    $0x0, %r9
    0.00 :   968a:           movl    $0x1, %r8d
    0.00 :   9690:           jmp     0x8fc3 <nf_conntrack_tcp_packet+0x6f3>
    0.00 :   9695:           leaq    (%r10,%r10,4), %rax
    0.00 :   9699:           orb     0xc9(%rbx,%rax,4), %sil
    0.00 :   96a1:           andl    $0x4, %esi
    0.00 :   96a4:           jne     0x96c6 <nf_conntrack_tcp_packet+0xdf6>
    0.00 :   96a6:           movzbl  -0xb1(%rbp), %eax
    0.00 :   96ad:           cmpb    %al, 0xe1(%rbx)
    0.00 :   96b3:           jne     0x8d84 <nf_conntrack_tcp_packet+0x4b4>
    0.00 :   96b9:           cmpb    $0x4, 0xe3(%rbx)
    0.00 :   96c0:           jne     0x8d84 <nf_conntrack_tcp_packet+0x4b4>
    0.00 :   96c6:           movq    -0xb0(%rbp), %rdi
    0.00 :   96cd:           callq   0x96d2 <nf_conntrack_tcp_packet+0xe02>
    0.00 :   96d2:           xorl    %edx, %edx
    0.00 :   96d4:           xorl    %esi, %esi
    0.00 :   96d6:           movq    %rbx, %rdi
    0.00 :   96d9:           callq   0x96de <nf_conntrack_tcp_packet+0xe0e>
    0.00 :   96de:           negb    %al
    0.00 :   96e0:           sbbl    %eax, %eax
    0.00 :   96e2:           andl    $-0x4, %eax
    0.00 :   96e5:           jmp     0x8c3b <nf_conntrack_tcp_packet+0x36b>
    0.00 :   96ea:           cmpb    $0x0, 0xe3(%rbx)
    0.00 :   96f1:           jne     0x8d91 <nf_conntrack_tcp_packet+0x4c1>
    0.00 :   96f7:           movzbl  0xe1(%rbx), %edx
    0.00 :   96fe:           cmpb    -0xb1(%rbp), %dl
    0.00 :   9704:           je      0x8d91 <nf_conntrack_tcp_packet+0x4c1>
    0.00 :   970a:           movl    0x8(%r12), %eax
    0.00 :   970f:           bswapl  %eax
    0.00 :   9711:           cmpl    0xec(%rbx), %eax
    0.00 :   9717:           jne     0x8d91 <nf_conntrack_tcp_packet+0x4c1>
    0.00 :   971d:           leaq    (%rdx,%rdx,4), %rdx
    0.00 :   9721:           movl    $0x1, %esi
    0.00 :   9726:           movq    %rcx, %r8
    0.00 :   9729:           movzbl  %cl, %r9d
    0.00 :   972d:           movl    $0x1, -0x9c(%rbp)
    0.00 :   9737:           movl    $0x2, -0xdc(%rbp)
    0.00 :   9741:           leaq    (%rbx,%rdx,4), %rdx
    0.00 :   9745:           movl    %eax, 0xb8(%rdx)
    0.00 :   974b:           movl    %eax, 0xbc(%rdx)
    0.00 :   9751:           movzwl  0xf0(%rbx), %eax
    0.00 :   9758:           testw   %ax, %ax
    0.00 :   975b:           cmovel  %esi, %eax
    0.00 :   975e:           andl    $0x1, %r8d
    0.00 :   9762:           movl    %eax, 0xc0(%rdx)
    0.00 :   9768:           movzbl  0xf2(%rbx), %eax
    0.00 :   976f:           movb    %al, 0xc8(%rdx)
    0.00 :   9775:           movzbl  0xf3(%rbx), %eax
    0.00 :   977c:           andl    $-0x41, %eax
    0.00 :   977f:           movb    %al, 0xf3(%rbx)
    0.00 :   9785:           movb    %al, 0xc9(%rdx)
    0.00 :   978b:           leaq    (%r10,%r10,4), %rax
    0.00 :   978f:           leaq    (%rbx,%rax,4), %rax
    0.00 :   9793:           andb    $0x8, 0xc9(%rax)
    0.00 :   979a:           movq    $0x0, 0xb8(%rax)
    0.00 :   97a5:           movq    $0x0, 0xc0(%rax)
    0.00 :   97b0:           movb    $0x0, 0xc8(%rax)
    0.00 :   97b7:           movl    0x4(%r12), %eax
    0.00 :   97bc:           movl    %eax, -0xe4(%rbp)
    0.00 :   97c2:           bswapl  %eax
    0.00 :   97c4:           movl    %eax, -0xa8(%rbp)
    0.00 :   97ca:           movzbl  0xd(%r12), %eax
    0.00 :   97d0:           movb    %al, -0x88(%rbp)
    0.00 :   97d6:           leaq    (%r8,%r8,4), %rax
    0.00 :   97da:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   97e2:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   97e7:           xorl    %r9d, %r9d
    0.00 :   97ea:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   97f1:           movl    0x4(%r12), %eax
    0.00 :   97f6:           movl    $0x7, -0xdc(%rbp)
    0.00 :   9800:           movl    %eax, -0xe4(%rbp)
    0.00 :   9806:           bswapl  %eax
    0.00 :   9808:           setbe   %r8b
    0.00 :   980c:           movl    %eax, -0xa8(%rbp)
    0.00 :   9812:           setbe   %r9b
    0.00 :   9816:           movzbl  %r8b, %r8d
    0.00 :   981a:           leaq    (%r8,%r8,4), %rax
    0.00 :   981e:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   9826:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   982b:           xorl    %r9d, %r9d
    0.00 :   982e:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   9835:           movl    0x4(%r12), %eax
    0.00 :   983a:           movl    %eax, -0xe4(%rbp)
    0.00 :   9840:           bswapl  %eax
    0.00 :   9842:           setbe   %r8b
    0.00 :   9846:           movl    %eax, -0xa8(%rbp)
    0.00 :   984c:           setbe   %r9b
    0.00 :   9850:           movzbl  %r8b, %r8d
    0.00 :   9854:           leaq    (%r8,%r8,4), %rax
    0.00 :   9858:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   9860:           movl    $0x3, -0xa0(%rbp)
    0.00 :   986a:           movl    $0x6, -0x9c(%rbp)
    0.00 :   9874:           movl    $0x7, -0xdc(%rbp)
    0.00 :   987e:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9883:           cmpb    $0x1, 0xe0(%rbx)
    0.00 :   988a:           movl    $0x0, -0xa8(%rbp)
    0.00 :   9894:           jne     0x8f83 <nf_conntrack_tcp_packet+0x6b3>
    0.00 :   989a:           movl    0xb8(%r14), %edi
    0.00 :   98a1:           movl    %edi, -0xa8(%rbp)
    0.00 :   98a7:           movl    %edi, -0x88(%rbp)
    0.00 :   98ad:           jmp     0x8f83 <nf_conntrack_tcp_packet+0x6b3>
    0.00 :   98b2:           xorl    %r9d, %r9d
    0.00 :   98b5:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   98bc:           movl    -0xa0(%rbp), %edi
    0.00 :   98c2:           setbe   %r8b
    0.00 :   98c6:           setbe   %r9b
    0.00 :   98ca:           cmpl    $0x3, %edi
    0.00 :   98cd:           movzbl  %r8b, %r8d
    0.00 :   98d1:           leaq    (%r8,%r8,4), %rax
    0.00 :   98d5:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   98dd:           movl    0x4(%r12), %eax
    0.00 :   98e2:           movl    %eax, -0xe4(%rbp)
    0.00 :   98e8:           bswapl  %eax
    0.00 :   98ea:           movl    %eax, -0xa8(%rbp)
    0.00 :   98f0:           jne     0x9aaf <nf_conntrack_tcp_packet+0x11df>
    0.00 :   98f6:           cmpb    $0x0, -0xb1(%rbp)
    0.00 :   98fd:           je      0x9aaf <nf_conntrack_tcp_packet+0x11df>
    0.00 :   9903:           cmpb    $0x0, 0xf3(%rbx)
    0.00 :   990a:           movl    $0x3, %eax
    0.00 :   990f:           cmovnsl %edi, %eax
    0.00 :   9912:           movl    %eax, -0xa0(%rbp)
    0.00 :   9918:           movsbl  0xf3(%rbx), %eax
    0.00 :   991f:           cltd
    0.00 :   9920:           notl    %edx
    0.00 :   9922:           addl    $0x3, %edx
    0.00 :   9925:           movl    %edx, -0xdc(%rbp)
    0.00 :   992b:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9930:           movq    -0xb0(%rbp), %rdi
    0.00 :   9937:           callq   0x993c <nf_conntrack_tcp_packet+0x106c>
    0.00 :   993c:           movq    (,%r14,8), %rax
    0.00 :   9944:           movl    -0xa4(%rbp), %r9d
    0.00 :   994b:           movq    $0x0, %rcx
    0.00 :   9952:           movl    -0xa0(%rbp), %r8d
    0.00 :   9959:           movq    -0x98(%rbp), %rdx
    0.00 :   9960:           movq    %rbx, %rsi
    0.00 :   9963:           movq    %r13, %rdi
    0.00 :   9966:           movq    %rax, (%rsp)
    0.00 :   996a:           callq   0x996f <nf_conntrack_tcp_packet+0x109f>
    0.00 :   996f:           jmp     0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   9974:           xorl    %r9d, %r9d
    0.00 :   9977:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   997e:           movl    %eax, -0xdc(%rbp)
    0.00 :   9984:           movl    0x4(%r12), %eax
    0.00 :   9989:           setbe   %r8b
    0.00 :   998d:           movl    %eax, -0xe4(%rbp)
    0.00 :   9993:           bswapl  %eax
    0.00 :   9995:           movzbl  %r8b, %r8d
    0.00 :   9999:           movl    %eax, -0xa8(%rbp)
    0.00 :   999f:           setbe   %r9b
    0.00 :   99a3:           leaq    (%r8,%r8,4), %rax
    0.00 :   99a7:           movzbl  0xc9(%rbx,%rax,4), %esi
    0.00 :   99af:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   99b4:           movq    0x80(%rbx), %rax
    0.00 :   99bb:           testb   $0x4, %al
    0.00 :   99bd:           jne     0x930a <nf_conntrack_tcp_packet+0xa3a>
    0.00 :   99c3:           movl    -0x9c(%rbp), %eax
    0.00 :   99c9:           subl    $0x2, %eax
    0.00 :   99cc:           cmpl    $0x1, %eax
    0.00 :   99cf:           ja      0x930a <nf_conntrack_tcp_packet+0xa3a>
    0.00 :   99d5:           cmpl    $0x3, -0xdc(%rbp)
    0.00 :   99dc:           jne     0x930a <nf_conntrack_tcp_packet+0xa3a>
    0.00 :   99e2:           lock
    0.00 :   99e3:           orb     $0x4, 0x80(%rbx)
    0.00 :   99ea:           jmp     0x930a <nf_conntrack_tcp_packet+0xa3a>
    0.00 :   99ef:           movq    %r10, %rax
    0.00 :   99f2:           movl    $0x2, -0xa0(%rbp)
    0.00 :   99fc:           shlq    $0x4, %rax
    0.00 :   9a00:           subq    %r10, %rax
    0.00 :   9a03:           movzbl  (%r14,%rax,4), %eax
    0.00 :   9a0c:           cmpb    $0x8, %al
    0.00 :   9a0e:           jne     0x8cd6 <nf_conntrack_tcp_packet+0x406>
    0.00 :   9a14:           jmp     0x8a78 <nf_conntrack_tcp_packet+0x1a8>
    0.00 :   9a19:           testq   %r13, %r13
    0.00 :   9a1c:           je      0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   9a22:           movl    -0x90(%rbp), %esi
    0.00 :   9a28:           leaq    -0x80(%rbp), %rdx
    0.00 :   9a2c:           movl    $0x14, %ecx
    0.00 :   9a31:           movq    %r13, %rdi
    0.00 :   9a34:           callq   0x9a39 <nf_conntrack_tcp_packet+0x1169>
    0.00 :   9a39:           testl   %eax, %eax
    0.00 :   9a3b:           js      0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   9a41:           movl    0x70(%r13), %edx
    0.00 :   9a45:           leaq    -0x80(%rbp), %r12
    0.00 :   9a49:           jmp     0x8960 <nf_conntrack_tcp_packet+0x90>
    0.00 :   9a4e:           cmpl    $0x1, %r15d
    0.00 :   9a52:           je      0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   9a58:           movzbl  0x1(%rax), %edx
    0.00 :   9a5c:           leaq    0x2(%rax), %rsi
    0.00 :   9a60:           cmpl    $0x1, %edx
    0.00 :   9a63:           jle     0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   9a69:           cmpl    %edx, %r15d
    0.00 :   9a6c:           jl      0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   9a72:           cmpb    $0x5, %cl
    0.00 :   9a75:           leal    -0x2(%rdx), %eax
    0.00 :   9a78:           jne     0x9aa2 <nf_conntrack_tcp_packet+0x11d2>
    0.00 :   9a7a:           cmpl    $0x9, %edx
    0.00 :   9a7d:           jle     0x9aa2 <nf_conntrack_tcp_packet+0x11d2>
    0.00 :   9a7f:           testb   $0x7, %al
    0.00 :   9a81:           jne     0x9aa2 <nf_conntrack_tcp_packet+0x11d2>
    0.00 :   9a83:           movl    %r11d, %r15d
    0.00 :   9a86:           xorl    %ecx, %ecx
    0.00 :   9a88:           movl    0x4(%rsi,%rcx), %edx
    0.00 :   9a8c:           bswapl  %edx
    0.00 :   9a8e:           cmpl    %edx, %r15d
    0.00 :   9a91:           cmovsl  %edx, %r15d
    0.00 :   9a95:           addq    $0x8, %rcx
    0.00 :   9a99:           cmpl    %ecx, %eax
    0.00 :   9a9b:           jg      0x9a88 <nf_conntrack_tcp_packet+0x11b8>
    0.00 :   9a9d:           jmp     0x8b49 <nf_conntrack_tcp_packet+0x279>
    0.00 :   9aa2:           cltq
    0.00 :   9aa4:           subl    %edx, %r15d
    0.00 :   9aa7:           addq    %rsi, %rax
    0.00 :   9aaa:           jmp     0x93b6 <nf_conntrack_tcp_packet+0xae6>
    0.00 :   9aaf:           movl    $0x2, -0xdc(%rbp)
    0.00 :   9ab9:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9abe:           movq    %r10, -0x90(%rbp)
    0.00 :   9ac5:           movl    %eax, (%rsp)
    0.00 :   9ac8:           movq    $0x0, %r9
    0.00 :   9acf:           jmp     0x9167 <nf_conntrack_tcp_packet+0x897>
    0.00 :   9ad4:           leaq    (%r10,%r10,4), %rax
    0.00 :   9ad8:           leaq    (%rbx,%rax,4), %rcx
    0.00 :   9adc:           movzbl  0xc9(%rcx), %eax
    0.00 :   9ae3:           testb   $0x20, %al
    0.00 :   9ae5:           jne     0x9db6 <nf_conntrack_tcp_packet+0x14e6>
    0.00 :   9aeb:           orl     $0x20, %eax
    0.00 :   9aee:           movl    %esi, 0xc4(%r14)
    0.00 :   9af5:           movb    %al, 0xc9(%rcx)
    0.00 :   9afb:           jmp     0x91ef <nf_conntrack_tcp_packet+0x91f>
    0.00 :   9b00:           movl    -0x88(%rbp), %ecx
    0.00 :   9b06:           cmpl    %ecx, %edx
    0.00 :   9b08:           jns     0x91fd <nf_conntrack_tcp_packet+0x92d>
    0.00 :   9b0e:           subl    %edx, %eax
    0.00 :   9b10:           addl    %ecx, %eax
    0.00 :   9b12:           movl    %eax, 0xc0(%rdi)
    0.00 :   9b18:           jmp     0x91fd <nf_conntrack_tcp_packet+0x92d>
    0.00 :   9b1d:           movzbl  0xe1(%rbx), %eax
    0.00 :   9b24:           cmpl    %eax, -0xa4(%rbp)
    0.00 :   9b2a:           je      0x9f54 <nf_conntrack_tcp_packet+0x1684>
    0.00 :   9b30:           movl    -0xa8(%rbp), %eax
    0.00 :   9b36:           movl    %esi, 0xe8(%rbx)
    0.00 :   9b3c:           movb    $0x0, 0xe2(%rbx)
    0.00 :   9b43:           movl    %eax, 0xe4(%rbx)
    0.00 :   9b49:           movl    -0x88(%rbp), %eax
    0.00 :   9b4f:           movl    %eax, 0xec(%rbx)
    0.00 :   9b55:           movzwl  -0xb4(%rbp), %eax
    0.00 :   9b5c:           movw    %ax, 0xf0(%rbx)
    0.00 :   9b63:           jmp     0x9243 <nf_conntrack_tcp_packet+0x973>
    0.00 :   9b68:           movzbl  %cl, %eax
    0.00 :   9b6b:           subl    $0x4, %eax
    0.00 :   9b6e:           cmpl    $0x4, %eax
    0.00 :   9b71:           jbe     0x9dcf <nf_conntrack_tcp_packet+0x14ff>
    0.00 :   9b77:           xorl    %r9d, %r9d
    0.00 :   9b7a:           cmpl    $0x2, -0x84(%rbp)
    0.00 :   9b81:           setbe   %r8b
    0.00 :   9b85:           setbe   %r9b
    0.00 :   9b89:           movzbl  %r8b, %r8d
    0.00 :   9b8d:           leaq    (%r8,%r8,4), %rax
    0.00 :   9b91:           leaq    (%rbx,%rax,4), %rax
    0.00 :   9b95:           movzbl  0xc9(%rax), %esi
    0.00 :   9b9c:           testb   $0x20, %sil
    0.00 :   9ba0:           jne     0x9eb4 <nf_conntrack_tcp_packet+0x15e4>
    0.00 :   9ba6:           movq    0x80(%rbx), %rax
    0.00 :   9bad:           testb   $0x2, %al
    0.00 :   9baf:           je      0x9bbe <nf_conntrack_tcp_packet+0x12ee>
    0.00 :   9bb1:           cmpb    $0x0, 0xe3(%rbx)
    0.00 :   9bb8:           je      0x9fc4 <nf_conntrack_tcp_packet+0x16f4>
    0.00 :   9bbe:           movl    $0x8, -0xdc(%rbp)
    0.00 :   9bc8:           movq    0x80(%rbx), %rax
    0.00 :   9bcf:           testb   $0x4, %al
    0.00 :   9bd1:           jne     0x9be0 <nf_conntrack_tcp_packet+0x1310>
    0.00 :   9bd3:           cmpb    $0x3, 0xe3(%rbx)
    0.00 :   9bda:           je      0xa007 <nf_conntrack_tcp_packet+0x1737>
    0.00 :   9be0:           movl    0x4(%r12), %eax
    0.00 :   9be5:           cmpl    $0x1, -0x9c(%rbp)
    0.00 :   9bec:           movl    $0x4, -0xa0(%rbp)
    0.00 :   9bf6:           movl    %eax, -0xe4(%rbp)
    0.00 :   9bfc:           bswapl  %eax
    0.00 :   9bfe:           movl    %eax, -0xa8(%rbp)
    0.00 :   9c04:           jne     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9c0a:           movl    0xe0(%rbx), %eax
    0.00 :   9c10:           andl    $0xff00ff00, %eax       # imm = 0xFF00FF00
    0.00 :   9c15:           cmpl    $0x3000100, %eax        # imm = 0x3000100
    0.00 :   9c1a:           jne     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9c20:           movl    -0xa8(%rbp), %eax
    0.00 :   9c26:           cmpl    %eax, 0xe8(%rbx)
    0.00 :   9c2c:           jne     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9c32:           jmp     0x9243 <nf_conntrack_tcp_packet+0x973>
    0.00 :   9c37:           movzbl  0xe1(%rbx), %eax
    0.00 :   9c3e:           cmpl    %eax, -0xa4(%rbp)
    0.00 :   9c44:           je      0x9d70 <nf_conntrack_tcp_packet+0x14a0>
    0.00 :   9c4a:           movzbl  0xe3(%rbx), %edx
    0.00 :   9c51:           leal    -0x2(%rdx), %eax
    0.00 :   9c54:           testb   $-0x3, %al
    0.00 :   9c56:           jne     0x9d70 <nf_conntrack_tcp_packet+0x14a0>
    0.00 :   9c5c:           movl    0x8(%rbx), %eax
    0.00 :   9c5f:           movq    (%rip), %rcx            # 0x9c66 <nf_conntrack_tcp_packet+0x1396>
    0.00 :   9c66:           subl    %ecx, %eax
    0.00 :   9c68:           cmpl    $0x1d4bf, %eax          # imm = 0x1D4BF
    0.00 :   9c6d:           jle     0x901c <nf_conntrack_tcp_packet+0x74c>
    0.00 :   9c73:           movq    0x88(%rbx), %rcx
    0.00 :   9c7a:           movl    0xa08(%rcx), %r12d
    0.00 :   9c81:           cmpl    %eax, %r12d
    0.00 :   9c84:           jae     0x901c <nf_conntrack_tcp_packet+0x74c>
    0.00 :   9c8a:           movl    %edx, (%rsp)
    0.00 :   9c8d:           movl    -0xa4(%rbp), %r9d
    0.00 :   9c94:           movq    $0x0, %rcx
    0.00 :   9c9b:           movl    -0xa0(%rbp), %r8d
    0.00 :   9ca2:           movq    -0x98(%rbp), %rdx
    0.00 :   9ca9:           movq    %rbx, %rsi
    0.00 :   9cac:           movl    %r12d, 0x8(%rsp)
    0.00 :   9cb1:           movq    %r13, %rdi
    0.00 :   9cb4:           callq   0x9cb9 <nf_conntrack_tcp_packet+0x13e9>
    0.00 :   9cb9:           movq    (%rip), %rax            # 0x9cc0 <nf_conntrack_tcp_packet+0x13f0>
    0.00 :   9cc0:           addl    %eax, %r12d
    0.00 :   9cc3:           movl    %r12d, 0x8(%rbx)
    0.00 :   9cc7:           jmp     0x901c <nf_conntrack_tcp_packet+0x74c>
    0.00 :   9ccc:           movq    -0xc0(%rbp), %rax
    0.00 :   9cd3:           movl    0xa08(%rax), %eax
    0.00 :   9cd9:           cmpq    %rax, %r14
    0.00 :   9cdc:           cmovaq  %rax, %r14
    0.00 :   9ce0:           jmp     0x930a <nf_conntrack_tcp_packet+0xa3a>
    0.00 :   9ce5:           leaq    -0x6c(%rbp), %rcx
    0.00 :   9ce9:           movw    $0x0, 0xf2(%rbx)
    0.00 :   9cf2:           movq    %r12, %rdx
    0.00 :   9cf5:           movl    %r9d, %esi
    0.00 :   9cf8:           movq    %r13, %rdi
    0.00 :   9cfb:           movq    $0x0, -0x6c(%rbp)
    0.00 :   9d03:           movq    $0x0, -0x64(%rbp)
    0.00 :   9d0b:           movl    $0x0, -0x5c(%rbp)
    0.00 :   9d12:           callq   0x84d0 <tcp_options>
    0.00 :   9d17:           movzbl  -0x5b(%rbp), %eax
    0.00 :   9d1b:           testb   $0x1, %al
    0.00 :   9d1d:           je      0x9d30 <nf_conntrack_tcp_packet+0x1460>
    0.00 :   9d1f:           movzbl  -0x5c(%rbp), %edx
    0.00 :   9d23:           orb     $0x1, 0xf3(%rbx)
    0.00 :   9d2a:           movb    %dl, 0xf2(%rbx)
    0.00 :   9d30:           testb   $0x2, %al
    0.00 :   9d32:           je      0x9d3b <nf_conntrack_tcp_packet+0x146b>
    0.00 :   9d34:           orb     $0x2, 0xf3(%rbx)
    0.00 :   9d3b:           cmpl    $0x6, -0x9c(%rbp)
    0.00 :   9d42:           jne     0x8e41 <nf_conntrack_tcp_packet+0x571>
    0.00 :   9d48:           orb     $0x40, 0xf3(%rbx)
    0.00 :   9d4f:           jmp     0x8e41 <nf_conntrack_tcp_packet+0x571>
    0.00 :   9d54:           movl    %r15d, 0xb8(%rcx)
    0.00 :   9d5b:           movl    %r15d, %esi
    0.00 :   9d5e:           movzbl  0xd(%r12), %ecx
    0.00 :   9d64:           movl    0xbc(%r14), %edx
    0.00 :   9d6b:           jmp     0x8f62 <nf_conntrack_tcp_packet+0x692>
    0.00 :   9d70:           movzbl  -0xa0(%rbp), %eax
    0.00 :   9d77:           movb    %al, 0xe3(%rbx)
    0.00 :   9d7d:           movzbl  -0xb1(%rbp), %eax
    0.00 :   9d84:           movb    %al, 0xe1(%rbx)
    0.00 :   9d8a:           jmp     0x901c <nf_conntrack_tcp_packet+0x74c>
    0.00 :   9d8f:           cmpl    $0xa080101, (%rax)      # imm = 0xA080101
    0.00 :   9d95:           jne     0x93bf <nf_conntrack_tcp_packet+0xaef>
    0.00 :   9d9b:           jmp     0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   9da0:           movl    -0x84(%rbp), %esi
    0.00 :   9da6:           movq    %r13, %rdx
    0.00 :   9da9:           movq    %rbx, %rdi
    0.00 :   9dac:           callq   0x9db1 <nf_conntrack_tcp_packet+0x14e1>
    0.00 :   9db1:           jmp     0x9332 <nf_conntrack_tcp_packet+0xa62>
    0.00 :   9db6:           cmpl    %esi, 0xc4(%r14)
    0.00 :   9dbd:           jns     0x91ef <nf_conntrack_tcp_packet+0x91f>
    0.00 :   9dc3:           movl    %esi, 0xc4(%r14)
    0.00 :   9dca:           jmp     0x91ef <nf_conntrack_tcp_packet+0x91f>
    0.00 :   9dcf:           movzbl  -0xb1(%rbp), %eax
    0.00 :   9dd6:           movb    $0x4, 0xe3(%rbx)
    0.00 :   9ddd:           movb    $0x8, 0xe0(%rbx)
    0.00 :   9de4:           movb    %al, 0xe1(%rbx)
    0.00 :   9dea:           movq    -0xc0(%rbp), %rax
    0.00 :   9df1:           movzbl  0xa0e(%rax), %esi
    0.00 :   9df8:           cmpb    %sil, 0xe2(%rbx)
    0.00 :   9dff:           jb      0x9e20 <nf_conntrack_tcp_packet+0x1550>
    0.00 :   9e01:           addq    $0x9d4, %rax            # imm = 0x9D4
    0.00 :   9e07:           movl    $0x4, -0xa0(%rbp)
    0.00 :   9e11:           movl    $0x8, -0xdc(%rbp)
    0.00 :   9e1b:           jmp     0x92a5 <nf_conntrack_tcp_packet+0x9d5>
    0.00 :   9e20:           movl    $0x8, -0xdc(%rbp)
    0.00 :   9e2a:           movq    -0xc0(%rbp), %rax
    0.00 :   9e31:           movq    -0xb0(%rbp), %rdi
    0.00 :   9e38:           movl    0x9f4(%rax), %r14d
    0.00 :   9e3f:           callq   0x9e44 <nf_conntrack_tcp_packet+0x1574>
    0.00 :   9e44:           movl    $0x4, -0xa0(%rbp)
    0.00 :   9e4e:           jmp     0x92cf <nf_conntrack_tcp_packet+0x9ff>
    0.00 :   9e53:           testq   %r13, %r13
    0.00 :   9e56:           je      0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   9e5c:           leaq    -0x58(%rbp), %rdx
    0.00 :   9e60:           movl    %r15d, %ecx
    0.00 :   9e63:           movq    %r13, %rdi
    0.00 :   9e66:           movq    %r10, -0xf0(%rbp)
    0.00 :   9e6d:           movq    %r8, -0xd8(%rbp)
    0.00 :   9e74:           movl    %r9d, -0xd0(%rbp)
    0.00 :   9e7b:           movl    %r11d, -0xb8(%rbp)
    0.00 :   9e82:           callq   0x9e87 <nf_conntrack_tcp_packet+0x15b7>
    0.00 :   9e87:           testl   %eax, %eax
    0.00 :   9e89:           movl    -0xb8(%rbp), %r11d
    0.00 :   9e90:           movl    -0xd0(%rbp), %r9d
    0.00 :   9e97:           movq    -0xd8(%rbp), %r8
    0.00 :   9e9e:           movq    -0xf0(%rbp), %r10
    0.00 :   9ea5:           js      0x8b46 <nf_conntrack_tcp_packet+0x276>
    0.00 :   9eab:           leaq    -0x58(%rbp), %rax
    0.00 :   9eaf:           jmp     0x93ac <nf_conntrack_tcp_packet+0xadc>
    0.00 :   9eb4:           movzbl  0xe3(%rbx), %edi
    0.00 :   9ebb:           testb   %dil, %dil
    0.00 :   9ebe:           je      0x9fa3 <nf_conntrack_tcp_packet+0x16d3>
    0.00 :   9ec4:           movl    0x4(%r12), %edx
    0.00 :   9ec9:           movl    %edx, %r15d
    0.00 :   9ecc:           testl   %edx, %edx
    0.00 :   9ece:           movl    %edx, -0xe4(%rbp)
    0.00 :   9ed4:           bswapl  %r15d
    0.00 :   9ed7:           movl    %r15d, -0xa8(%rbp)
    0.00 :   9ede:           je      0xa029 <nf_conntrack_tcp_packet+0x1759>
    0.00 :   9ee4:           movl    0xc4(%rax), %eax
    0.00 :   9eea:           cmpl    %eax, -0xa8(%rbp)
    0.00 :   9ef0:           jns     0x9f06 <nf_conntrack_tcp_packet+0x1636>
    0.00 :   9ef2:           movq    -0xc0(%rbp), %rdx
    0.00 :   9ef9:           cmpb    $0x0, 0xa0f(%rdx)
    0.00 :   9f00:           je      0xa0a7 <nf_conntrack_tcp_packet+0x17d7>
    0.00 :   9f06:           cmpb    $0x3, %cl
    0.00 :   9f09:           movl    $0x4, -0xa0(%rbp)
    0.00 :   9f13:           movl    $0x8, -0xdc(%rbp)
    0.00 :   9f1d:           jne     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9f23:           movq    0x80(%rbx), %rcx
    0.00 :   9f2a:           andl    $0x4, %ecx
    0.00 :   9f2d:           je      0x9f3b <nf_conntrack_tcp_packet+0x166b>
    0.00 :   9f2f:           cmpl    %eax, -0xa8(%rbp)
    0.00 :   9f35:           jne     0xa051 <nf_conntrack_tcp_packet+0x1781>
    0.00 :   9f3b:           movl    $0x4, -0xa0(%rbp)
    0.00 :   9f45:           movl    $0x8, -0xdc(%rbp)
    0.00 :   9f4f:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   9f54:           movl    -0xa8(%rbp), %eax
    0.00 :   9f5a:           cmpl    0xe4(%rbx), %eax
    0.00 :   9f60:           jne     0x9b30 <nf_conntrack_tcp_packet+0x1260>
    0.00 :   9f66:           cmpl    0xe8(%rbx), %esi
    0.00 :   9f6c:           jne     0x9b30 <nf_conntrack_tcp_packet+0x1260>
    0.00 :   9f72:           movl    -0x88(%rbp), %eax
    0.00 :   9f78:           cmpl    0xec(%rbx), %eax
    0.00 :   9f7e:           jne     0x9b30 <nf_conntrack_tcp_packet+0x1260>
    0.00 :   9f84:           movzwl  -0xb4(%rbp), %eax
    0.00 :   9f8b:           cmpw    0xf0(%rbx), %ax
    0.00 :   9f92:           jne     0x9b30 <nf_conntrack_tcp_packet+0x1260>
    0.00 :   9f98:           incb    0xe2(%rbx)
    0.00 :   9f9e:           jmp     0x9243 <nf_conntrack_tcp_packet+0x973>
    0.00 :   9fa3:           movq    0x80(%rbx), %rax
    0.00 :   9faa:           testb   $0x2, %al
    0.00 :   9fac:           jne     0x9fc4 <nf_conntrack_tcp_packet+0x16f4>
    0.00 :   9fae:           movq    0x80(%rbx), %rax
    0.00 :   9fb5:           movl    $0x8, -0xdc(%rbp)
    0.00 :   9fbf:           jmp     0x9be0 <nf_conntrack_tcp_packet+0x1310>
    0.00 :   9fc4:           movl    0x8(%r12), %eax
    0.00 :   9fc9:           bswapl  %eax
    0.00 :   9fcb:           cmpl    %eax, 0xec(%rbx)
    0.00 :   9fd1:           jne     0x9fb5 <nf_conntrack_tcp_packet+0x16e5>
    0.00 :   9fd3:           movzbl  -0xb1(%rbp), %eax
    0.00 :   9fda:           movb    $0x4, 0xe3(%rbx)
    0.00 :   9fe1:           movb    $0x8, 0xe0(%rbx)
    0.00 :   9fe8:           movl    $0x4, -0xa0(%rbp)
    0.00 :   9ff2:           movl    $0x8, -0xdc(%rbp)
    0.00 :   9ffc:           movb    %al, 0xe1(%rbx)
    0.00 :   a002:           jmp     0x9284 <nf_conntrack_tcp_packet+0x9b4>
    0.00 :   a007:           movl    0x8(%r12), %eax
    0.00 :   a00c:           bswapl  %eax
    0.00 :   a00e:           cmpl    0xec(%rbx), %eax
    0.00 :   a014:           jne     0x9be0 <nf_conntrack_tcp_packet+0x1310>
    0.00 :   a01a:           movl    $0x4, -0xa0(%rbp)
    0.00 :   a024:           jmp     0x9243 <nf_conntrack_tcp_packet+0x973>
    0.00 :   a029:           cmpb    $0x3, %cl
    0.00 :   a02c:           je      0xa06f <nf_conntrack_tcp_packet+0x179f>
    0.00 :   a02e:           movl    $0x0, -0xa8(%rbp)
    0.00 :   a038:           movl    $0x4, -0xa0(%rbp)
    0.00 :   a042:           movl    $0x8, -0xdc(%rbp)
    0.00 :   a04c:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
    0.00 :   a051:           cmpb    $0x3, %dil
    0.00 :   a055:           je      0xa0d1 <nf_conntrack_tcp_packet+0x1801>
    0.00 :   a057:           movq    0x80(%rbx), %rax
    0.00 :   a05e:           movl    -0x9c(%rbp), %eax
    0.00 :   a064:           movl    %eax, -0xdc(%rbp)
    0.00 :   a06a:           jmp     0x9bc8 <nf_conntrack_tcp_packet+0x12f8>
    0.00 :   a06f:           movq    0x80(%rbx), %rax
    0.00 :   a076:           testb   $0x4, %al
    0.00 :   a078:           je      0xa100 <nf_conntrack_tcp_packet+0x1830>
    0.00 :   a07e:           imulq   $0x14, %r8, %rax
    0.00 :   a082:           movl    0xc4(%rbx,%rax), %eax
    0.00 :   a089:           movl    %eax, %ecx
    0.00 :   a08b:           negl    %ecx
    0.00 :   a08d:           jns     0x9f23 <nf_conntrack_tcp_packet+0x1653>
    0.00 :   a093:           movq    -0xc0(%rbp), %rcx
    0.00 :   a09a:           cmpb    $0x0, 0xa0f(%rcx)
    0.00 :   a0a1:           jne     0x9f23 <nf_conntrack_tcp_packet+0x1653>
    0.00 :   a0a7:           movq    -0xb0(%rbp), %rdi
    0.00 :   a0ae:           callq   0xa0b3 <nf_conntrack_tcp_packet+0x17e3>
    0.00 :   a0b3:           movq    -0x98(%rbp), %rdx
    0.00 :   a0ba:           movq    $0x0, %rcx
    0.00 :   a0c1:           movq    %rbx, %rsi
    0.00 :   a0c4:           movq    %r13, %rdi
    0.00 :   a0c7:           callq   0xa0cc <nf_conntrack_tcp_packet+0x17fc>
    0.00 :   a0cc:           jmp     0x8c36 <nf_conntrack_tcp_packet+0x366>
    0.00 :   a0d1:           movzbl  -0xb1(%rbp), %eax
    0.00 :   a0d8:           cmpb    %al, 0xe1(%rbx)
    0.00 :   a0de:           jne     0xa057 <nf_conntrack_tcp_packet+0x1787>
    0.00 :   a0e4:           movl    -0xa8(%rbp), %eax
    0.00 :   a0ea:           cmpl    %eax, 0xec(%rbx)
    0.00 :   a0f0:           jne     0xa057 <nf_conntrack_tcp_packet+0x1787>
    0.00 :   a0f6:           jmp     0x9f3b <nf_conntrack_tcp_packet+0x166b>
    0.00 :   a0fb:           callq   0xa100 <nf_conntrack_tcp_packet+0x1830>
    0.00 :   a100:           xorl    %r11d, %r11d
    0.00 :   a103:           movl    $0x4, -0xa0(%rbp)
    0.00 :   a10d:           movl    $0x3, -0x9c(%rbp)
    0.00 :   a117:           movl    %r11d, -0xa8(%rbp)
    0.00 :   a11e:           movl    $0x8, -0xdc(%rbp)
    0.00 :   a128:           jmp     0x8ab7 <nf_conntrack_tcp_packet+0x1e7>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c00e30 <asm_sysvec_call_function>:
         : 5                ; asm_sysvec_call_function():
  100.00 :   ffffffff81c00e30:       nop
    0.00 :   ffffffff81c00e31:       nop
    0.00 :   ffffffff81c00e32:       nop
    0.00 :   ffffffff81c00e33:       cld
    0.00 :   ffffffff81c00e34:       pushq   $-0x1
    0.00 :   ffffffff81c00e36:       callq   0xffffffff81c012a0 <error_entry>
    0.00 :   ffffffff81c00e3b:       movq    %rax, %rsp
    0.00 :   ffffffff81c00e3e:       leaq    0x1(%rsp), %rbp
    0.00 :   ffffffff81c00e43:       movq    %rsp, %rdi
    0.00 :   ffffffff81c00e46:       callq   0xffffffff81b6a470 <sysvec_call_function>
    0.00 :   ffffffff81c00e4b:       jmp     0xffffffff81c013f0 <error_return>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81931ca0 <skb_free_head>:
         : 5                ; skb_free_head():
  100.00 :   ffffffff81931ca0:       pushq   %rbp
    0.00 :   ffffffff81931ca1:       movq    %rsp, %rbp
    0.00 :   ffffffff81931ca4:       pushq   %rbx
    0.00 :   ffffffff81931ca5:       movzbl  0x7e(%rdi), %eax
    0.00 :   ffffffff81931ca9:       movq    0xc0(%rdi), %rbx
    0.00 :   ffffffff81931cb0:       testb   $0x20, %al
    0.00 :   ffffffff81931cb2:       je      0xffffffff81931d0e <skb_free_head+0x6e>
    0.00 :   ffffffff81931cb4:       testb   %al, %al
    0.00 :   ffffffff81931cb6:       jns     0xffffffff81931cf4 <skb_free_head+0x54>
    0.00 :   ffffffff81931cb8:       movl    $0x80000000, %eax # imm = 0x80000000
    0.00 :   ffffffff81931cbd:       addq    %rbx, %rax
    0.00 :   ffffffff81931cc0:       jb      0xffffffff81931d55 <skb_free_head+0xb5>
    0.00 :   ffffffff81931cc6:       movq    $-0x80000000, %rdx # imm = 0x80000000
    0.00 :   ffffffff81931ccd:       subq    0x7f0524(%rip), %rdx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff81931cd4:       leaq    (%rax,%rdx), %rdi
    0.00 :   ffffffff81931cd8:       movzbl  %sil, %esi
    0.00 :   ffffffff81931cdc:       shrq    $0xc, %rdi
    0.00 :   ffffffff81931ce0:       shlq    $0x6, %rdi
    0.00 :   ffffffff81931ce4:       addq    0x7f04fd(%rip), %rdi # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff81931ceb:       callq   0xffffffff819992f0 <page_pool_return_skb_page>
    0.00 :   ffffffff81931cf0:       testb   %al, %al
    0.00 :   ffffffff81931cf2:       jne     0xffffffff81931d22 <skb_free_head+0x82>
    0.00 :   ffffffff81931cf4:       movq    %rbx, %rdi
    0.00 :   ffffffff81931cf7:       callq   0xffffffff8124f330 <page_frag_free>
    0.00 :   ffffffff81931cfc:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81931d00:       leave
    0.00 :   ffffffff81931d01:       xorl    %eax, %eax
    0.00 :   ffffffff81931d03:       xorl    %edx, %edx
    0.00 :   ffffffff81931d05:       xorl    %esi, %esi
    0.00 :   ffffffff81931d07:       xorl    %edi, %edi
    0.00 :   ffffffff81931d09:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81931d0e:       cmpl    $0x100, 0xb8(%rdi) # imm = 0x100
    0.00 :   ffffffff81931d18:       je      0xffffffff81931d34 <skb_free_head+0x94>
    0.00 :   ffffffff81931d1a:       movq    %rbx, %rdi
    0.00 :   ffffffff81931d1d:       callq   0xffffffff81218190 <kfree>
    0.00 :   ffffffff81931d22:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81931d26:       leave
    0.00 :   ffffffff81931d27:       xorl    %eax, %eax
    0.00 :   ffffffff81931d29:       xorl    %edx, %edx
    0.00 :   ffffffff81931d2b:       xorl    %esi, %esi
    0.00 :   ffffffff81931d2d:       xorl    %edi, %edi
    0.00 :   ffffffff81931d2f:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81931d34:       movq    0x7f2c3d(%rip), %rdi # 0xffffffff82124978 <skb_small_head_cache>
    0.00 :   ffffffff81931d3b:       movq    %rbx, %rsi
    0.00 :   ffffffff81931d3e:       callq   0xffffffff8127d130 <kmem_cache_free>
    0.00 :   ffffffff81931d43:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff81931d47:       leave
    0.00 :   ffffffff81931d48:       xorl    %eax, %eax
    0.00 :   ffffffff81931d4a:       xorl    %edx, %edx
    0.00 :   ffffffff81931d4c:       xorl    %esi, %esi
    0.00 :   ffffffff81931d4e:       xorl    %edi, %edi
    0.00 :   ffffffff81931d50:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81931d55:       movq    0x8eb2b4(%rip), %rdx # 0xffffffff8221d010 <phys_base>
    0.00 :   ffffffff81931d5c:       jmp     0xffffffff81931cd4 <skb_free_head+0x34>
 Percent |	Source code & Disassembly of kvm.ko for cycles (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000013cd0 <pvclock_gtod_notify>:
         : 5     ; pvclock_gtod_notify():
    0.00 :   13cd0:          pushq   %rbp
    0.00 :   13cd1:          movq    %rdx, %rax
    0.00 :   13cd4:          movq    %rsp, %rbp
    0.00 :   13cd7:          incl    (%rip)                  # 0x13cdd <pvclock_gtod_notify+0xd>
    0.00 :   13cdd:          movq    (%rdx), %rdx
    0.00 :   13ce0:          movl    0x50(%rdx), %edx
    0.00 :   13ce3:          movl    %edx, (%rip)            # 0x13ce9 <pvclock_gtod_notify+0x19>
    0.00 :   13ce9:          movq    0x10(%rax), %rdx
    0.00 :   13ced:          movq    %rdx, (%rip)            # 0x13cf4 <pvclock_gtod_notify+0x24>
    0.00 :   13cf4:          movq    0x8(%rax), %rdx
    0.00 :   13cf8:          movq    %rdx, (%rip)            # 0x13cff <pvclock_gtod_notify+0x2f>
    0.00 :   13cff:          movl    0x18(%rax), %edx
    0.00 :   13d02:          movl    %edx, (%rip)            # 0x13d08 <pvclock_gtod_notify+0x38>
    0.00 :   13d08:          movl    0x1c(%rax), %edx
    0.00 :   13d0b:          movl    %edx, (%rip)            # 0x13d11 <pvclock_gtod_notify+0x41>
    0.00 :   13d11:          movq    0x20(%rax), %rdx
    0.00 :   13d15:          movq    %rdx, (%rip)            # 0x13d1c <pvclock_gtod_notify+0x4c>
    0.00 :   13d1c:          movq    0x28(%rax), %rdx
  100.00 :   13d20:          movq    %rdx, (%rip)            # 0x13d27 <pvclock_gtod_notify+0x57>
    0.00 :   13d27:          movq    0x38(%rax), %rdx
    0.00 :   13d2b:          movl    0x50(%rdx), %edx
    0.00 :   13d2e:          movl    %edx, (%rip)            # 0x13d34 <pvclock_gtod_notify+0x64>
    0.00 :   13d34:          movq    0x48(%rax), %rdx
    0.00 :   13d38:          movq    %rdx, (%rip)            # 0x13d3f <pvclock_gtod_notify+0x6f>
    0.00 :   13d3f:          movq    0x40(%rax), %rdx
    0.00 :   13d43:          movq    %rdx, (%rip)            # 0x13d4a <pvclock_gtod_notify+0x7a>
    0.00 :   13d4a:          movq    0x50(%rax), %rdx
    0.00 :   13d4e:          movq    %rdx, (%rip)            # 0x13d55 <pvclock_gtod_notify+0x85>
    0.00 :   13d55:          movq    0x58(%rax), %rdx
    0.00 :   13d59:          movq    %rdx, (%rip)            # 0x13d60 <pvclock_gtod_notify+0x90>
    0.00 :   13d60:          movq    0x60(%rax), %rdx
    0.00 :   13d64:          movq    %rdx, (%rip)            # 0x13d6b <pvclock_gtod_notify+0x9b>
    0.00 :   13d6b:          movq    0x70(%rax), %rdx
    0.00 :   13d6f:          movq    0x98(%rax), %rax
    0.00 :   13d76:          movq    %rdx, (%rip)            # 0x13d7d <pvclock_gtod_notify+0xad>
    0.00 :   13d7d:          movq    %rax, (%rip)            # 0x13d84 <pvclock_gtod_notify+0xb4>
    0.00 :   13d84:          movl    (%rip), %eax            # 0x13d8a <pvclock_gtod_notify+0xba>
    0.00 :   13d8a:          incl    (%rip)                  # 0x13d90 <pvclock_gtod_notify+0xc0>
    0.00 :   13d90:          andl    $-0x3, %eax
    0.00 :   13d93:          decl    %eax
    0.00 :   13d95:          je      0x13da1 <pvclock_gtod_notify+0xd1>
    0.00 :   13d97:          movl    (%rip), %eax            # 0x13d9d <pvclock_gtod_notify+0xcd>
    0.00 :   13d9d:          testl   %eax, %eax
    0.00 :   13d9f:          jne     0x13dad <pvclock_gtod_notify+0xdd>
    0.00 :   13da1:          xorl    %eax, %eax
    0.00 :   13da3:          popq    %rbp
    0.00 :   13da4:          xorl    %edx, %edx
    0.00 :   13da6:          xorl    %edi, %edi
    0.00 :   13da8:          jmp     0x13dad <pvclock_gtod_notify+0xdd>
    0.00 :   13dad:          movq    $0x0, %rdi
    0.00 :   13db4:          callq   0x13db9 <pvclock_gtod_notify+0xe9>
    0.00 :   13db9:          xorl    %eax, %eax
    0.00 :   13dbb:          popq    %rbp
    0.00 :   13dbc:          xorl    %edx, %edx
    0.00 :   13dbe:          xorl    %edi, %edi
    0.00 :   13dc0:          jmp     0x13dc5 <pvclock_gtod_notify+0xf5>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b77bc0 <_raw_spin_lock_irq>:
         : 5                ; _raw_spin_lock_irq():
    0.00 :   ffffffff81b77bc0:       pushq   %rbp
    0.00 :   ffffffff81b77bc1:       movq    %rsp, %rbp
  100.00 :   ffffffff81b77bc4:       cli
    0.00 :   ffffffff81b77bc5:       incl    %gs:0x7e4aab3c(%rip)
    0.00 :   ffffffff81b77bcc:       xorl    %eax, %eax
    0.00 :   ffffffff81b77bce:       movl    $0x1, %edx
    0.00 :   ffffffff81b77bd3:       lock
    0.00 :   ffffffff81b77bd4:       cmpxchgl        %edx, (%rdi)
    0.00 :   ffffffff81b77bd7:       jne     0xffffffff81b77be7 <_raw_spin_lock_irq+0x27>
    0.00 :   ffffffff81b77bd9:       popq    %rbp
    0.00 :   ffffffff81b77bda:       xorl    %eax, %eax
    0.00 :   ffffffff81b77bdc:       xorl    %edx, %edx
    0.00 :   ffffffff81b77bde:       xorl    %esi, %esi
    0.00 :   ffffffff81b77be0:       xorl    %edi, %edi
    0.00 :   ffffffff81b77be2:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b77be7:       movl    %eax, %esi
    0.00 :   ffffffff81b77be9:       callq   0xffffffff81b77c10 <queued_spin_lock_slowpath>
    0.00 :   ffffffff81b77bee:       popq    %rbp
    0.00 :   ffffffff81b77bef:       xorl    %eax, %eax
    0.00 :   ffffffff81b77bf1:       xorl    %edx, %edx
    0.00 :   ffffffff81b77bf3:       xorl    %esi, %esi
    0.00 :   ffffffff81b77bf5:       xorl    %edi, %edi
    0.00 :   ffffffff81b77bf7:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81233590 <remove_vma>:
         : 5                ; remove_vma():
    0.00 :   ffffffff81233590:       pushq   %rbp
    0.00 :   ffffffff81233591:       movq    %rsp, %rbp
    0.00 :   ffffffff81233594:       pushq   %r12
    0.00 :   ffffffff81233596:       movl    %esi, %r12d
    0.00 :   ffffffff81233599:       pushq   %rbx
    0.00 :   ffffffff8123359a:       movq    %rdi, %rbx
    0.00 :   ffffffff8123359d:       callq   0xffffffff81b789b8 <__SCT__might_resched>
    0.00 :   ffffffff812335a2:       movq    0x58(%rbx), %rax
    0.00 :   ffffffff812335a6:       testq   %rax, %rax
    0.00 :   ffffffff812335a9:       je      0xffffffff812335bc <remove_vma+0x2c>
    0.00 :   ffffffff812335ab:       movq    0x8(%rax), %rax
    0.00 :   ffffffff812335af:       testq   %rax, %rax
    0.00 :   ffffffff812335b2:       je      0xffffffff812335bc <remove_vma+0x2c>
    0.00 :   ffffffff812335b4:       movq    %rbx, %rdi
    0.00 :   ffffffff812335b7:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff812335bc:       movq    0x48(%rbx), %rdi
    0.00 :   ffffffff812335c0:       testq   %rdi, %rdi
    0.00 :   ffffffff812335c3:       je      0xffffffff812335ca <remove_vma+0x3a>
    0.00 :   ffffffff812335c5:       callq   0xffffffff812aed50 <fput>
    0.00 :   ffffffff812335ca:       movq    0x70(%rbx), %rdi
    0.00 :   ffffffff812335ce:       testq   %rdi, %rdi
    0.00 :   ffffffff812335d1:       je      0xffffffff812335d8 <remove_vma+0x48>
    0.00 :   ffffffff812335d3:       callq   0xffffffff812705a0 <__mpol_put>
    0.00 :   ffffffff812335d8:       testb   %r12b, %r12b
    0.00 :   ffffffff812335db:       movq    %rbx, %rdi
    0.00 :   ffffffff812335de:       je      0xffffffff812335f4 <remove_vma+0x64>
  100.00 :   ffffffff812335e0:       callq   0xffffffff810662c0 <__vm_area_free>
    0.00 :   ffffffff812335e5:       popq    %rbx
    0.00 :   ffffffff812335e6:       popq    %r12
    0.00 :   ffffffff812335e8:       popq    %rbp
    0.00 :   ffffffff812335e9:       xorl    %eax, %eax
    0.00 :   ffffffff812335eb:       xorl    %esi, %esi
    0.00 :   ffffffff812335ed:       xorl    %edi, %edi
    0.00 :   ffffffff812335ef:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff812335f4:       callq   0xffffffff81066300 <vm_area_free>
    0.00 :   ffffffff812335f9:       popq    %rbx
    0.00 :   ffffffff812335fa:       popq    %r12
    0.00 :   ffffffff812335fc:       popq    %rbp
    0.00 :   ffffffff812335fd:       xorl    %eax, %eax
    0.00 :   ffffffff812335ff:       xorl    %esi, %esi
    0.00 :   ffffffff81233601:       xorl    %edi, %edi
    0.00 :   ffffffff81233603:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000092820 <free>:
         : 5     ; cfree():
    0.00 :   92820:          testq   %rdi, %rdi
    0.00 :   92823:          je      0x928e8 <free+0xc8>
  100.00 :   92829:          pushq   %rbp
    0.00 :   9282a:          pushq   %rbx
    0.00 :   9282b:          subq    $0x18, %rsp
    0.00 :   9282f:          movq    0x1385c2(%rip), %rbx    # 0x1cadf8
    0.00 :   92836:          movq    -0x8(%rdi), %rax
    0.00 :   9283a:          leaq    -0x10(%rdi), %rsi
    0.00 :   9283e:          movl    %fs:(%rbx), %ebp
    0.00 :   92841:          testb   $0x2, %al
    0.00 :   92843:          jne     0x92890 <free+0x70>
    0.00 :   92845:          movq    0x13854c(%rip), %rdx    # 0x1cad98
    0.00 :   9284c:          cmpq    $0x0, %fs:(%rdx)
    0.00 :   92851:          je      0x928f0 <free+0xd0>
    0.00 :   92857:          leaq    0x139422(%rip), %rdi    # 0x1cbc80 <_IO_2_1_stdin_+0x1e0>
    0.00 :   9285e:          testb   $0x4, %al
    0.00 :   92860:          je      0x9287b <free+0x5b>
    0.00 :   92862:          movq    0x138b27(%rip), %rax    # 0x1cb390 <__nptl_nthreads+0xe8>
    0.00 :   92869:          testq   %rax, %rax
    0.00 :   9286c:          je      0x928d8 <free+0xb8>
    0.00 :   9286e:          shlq    $0x2, %rax
    0.00 :   92872:          negq    %rax
    0.00 :   92875:          andq    %rsi, %rax
    0.00 :   92878:          movq    (%rax), %rdi
    0.00 :   9287b:          xorl    %edx, %edx
    0.00 :   9287d:          callq   0x8fb10 <__default_morecore+0xd8>
    0.00 :   92882:          movl    %ebp, %fs:(%rbx)
    0.00 :   92885:          addq    $0x18, %rsp
    0.00 :   92889:          popq    %rbx
    0.00 :   9288a:          popq    %rbp
    0.00 :   9288b:          retq
    0.00 :   9288c:          nopl    (%rax)
    0.00 :   92890:          movl    0x138b12(%rip), %edx    # 0x1cb3a8 <__nptl_nthreads+0x100>
    0.00 :   92896:          testl   %edx, %edx
    0.00 :   92898:          jne     0x928c0 <free+0xa0>
    0.00 :   9289a:          cmpq    %rax, 0x138acf(%rip)    # 0x1cb370 <__nptl_nthreads+0xc8>
    0.00 :   928a1:          jae     0x928c0 <free+0xa0>
    0.00 :   928a3:          cmpq    $0x2000000, %rax        # imm = 0x2000000
    0.00 :   928a9:          ja      0x928c0 <free+0xa0>
    0.00 :   928ab:          andq    $-0x8, %rax
    0.00 :   928af:          movq    %rax, 0x138aba(%rip)    # 0x1cb370 <__nptl_nthreads+0xc8>
    0.00 :   928b6:          addq    %rax, %rax
    0.00 :   928b9:          movq    %rax, 0x138aa0(%rip)    # 0x1cb360 <__nptl_nthreads+0xb8>
    0.00 :   928c0:          movq    %rsi, %rdi
    0.00 :   928c3:          callq   0x8e3f0 <timer_settime+0x480>
    0.00 :   928c8:          movl    %ebp, %fs:(%rbx)
    0.00 :   928cb:          addq    $0x18, %rsp
    0.00 :   928cf:          popq    %rbx
    0.00 :   928d0:          popq    %rbp
    0.00 :   928d1:          retq
    0.00 :   928d2:          nopw    (%rax,%rax)
    0.00 :   928d8:          movq    $-0x4000000, %rax       # imm = 0xFC000000
    0.00 :   928df:          jmp     0x92875 <free+0x55>
    0.00 :   928e1:          nopl    (%rax)
    0.00 :   928e8:          retq
    0.00 :   928e9:          nopl    (%rax)
    0.00 :   928f0:          movq    0x1384a9(%rip), %rdx    # 0x1cada0
    0.00 :   928f7:          movq    %rdi, (%rsp)
    0.00 :   928fb:          cmpb    $0x0, %fs:(%rdx)
    0.00 :   928ff:          jne     0x92857 <free+0x37>
    0.00 :   92905:          movq    %rsi, 0x8(%rsp)
    0.00 :   9290a:          callq   0x91bd0 <__default_morecore+0x2198>
    0.00 :   9290f:          movq    (%rsp), %rdi
    0.00 :   92913:          movq    0x8(%rsp), %rsi
    0.00 :   92918:          movq    -0x8(%rdi), %rax
    0.00 :   9291c:          jmp     0x92857 <free+0x37>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81a0e520 <tcp_data_ready>:
         : 5                ; tcp_data_ready():
    0.00 :   ffffffff81a0e520:       pushq   %rbp
    0.00 :   ffffffff81a0e521:       movq    %rsp, %rbp
  100.00 :   ffffffff81a0e524:       subq    $0x8, %rsp
    0.00 :   ffffffff81a0e528:       movl    0x580(%rdi), %eax
    0.00 :   ffffffff81a0e52e:       movl    0x584(%rdi), %edx
    0.00 :   ffffffff81a0e534:       movl    0xbc(%rdi), %ecx
    0.00 :   ffffffff81a0e53a:       subl    %edx, %eax
    0.00 :   ffffffff81a0e53c:       testl   %eax, %eax
    0.00 :   ffffffff81a0e53e:       jle     0xffffffff81a0e5aa <tcp_data_ready+0x8a>
    0.00 :   ffffffff81a0e540:       cmpl    %eax, %ecx
    0.00 :   ffffffff81a0e542:       jg      0xffffffff81a0e560 <tcp_data_ready+0x40>
    0.00 :   ffffffff81a0e544:       movq    0x2a0(%rdi), %rax
    0.00 :   ffffffff81a0e54b:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81a0e550:       leave
    0.00 :   ffffffff81a0e551:       xorl    %eax, %eax
    0.00 :   ffffffff81a0e553:       xorl    %edx, %edx
    0.00 :   ffffffff81a0e555:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a0e557:       xorl    %esi, %esi
    0.00 :   ffffffff81a0e559:       xorl    %edi, %edi
    0.00 :   ffffffff81a0e55b:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a0e560:       nop
    0.00 :   ffffffff81a0e562:       movq    0x95ec27(%rip), %rax # 0xffffffff8236d190 <tcp_memory_pressure>
    0.00 :   ffffffff81a0e569:       testq   %rax, %rax
    0.00 :   ffffffff81a0e56c:       jne     0xffffffff81a0e544 <tcp_data_ready+0x24>
    0.00 :   ffffffff81a0e56e:       movl    0x118(%rdi), %eax
    0.00 :   ffffffff81a0e574:       movl    0xf0(%rdi), %edx
    0.00 :   ffffffff81a0e57a:       movl    %eax, %ecx
    0.00 :   ffffffff81a0e57c:       sarl    $0x3, %ecx
    0.00 :   ffffffff81a0e57f:       subl    %ecx, %eax
    0.00 :   ffffffff81a0e581:       cmpl    %edx, %eax
    0.00 :   ffffffff81a0e583:       jl      0xffffffff81a0e544 <tcp_data_ready+0x24>
    0.00 :   ffffffff81a0e585:       movl    0x700(%rdi), %eax
    0.00 :   ffffffff81a0e58b:       addl    0x588(%rdi), %eax
    0.00 :   ffffffff81a0e591:       movl    $0x0, %edx
    0.00 :   ffffffff81a0e596:       subl    0x580(%rdi), %eax
    0.00 :   ffffffff81a0e59c:       cmovsl  %edx, %eax
    0.00 :   ffffffff81a0e59f:       movzwl  0x4e6(%rdi), %edx
    0.00 :   ffffffff81a0e5a6:       cmpl    %eax, %edx
    0.00 :   ffffffff81a0e5a8:       jae     0xffffffff81a0e544 <tcp_data_ready+0x24>
    0.00 :   ffffffff81a0e5aa:       movq    0x60(%rdi), %rax
    0.00 :   ffffffff81a0e5ae:       testb   $0x2, %al
    0.00 :   ffffffff81a0e5b0:       je      0xffffffff81a0e550 <tcp_data_ready+0x30>
    0.00 :   ffffffff81a0e5b2:       movq    0x2a0(%rdi), %rax
    0.00 :   ffffffff81a0e5b9:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81a0e5be:       jmp     0xffffffff81a0e550 <tcp_data_ready+0x30>
    0.00 :   ffffffff81a0e5c0:       movq    0x290(%rdi), %rax
    0.00 :   ffffffff81a0e5c7:       testq   %rax, %rax
    0.00 :   ffffffff81a0e5ca:       je      0xffffffff81a0e562 <tcp_data_ready+0x42>
    0.00 :   ffffffff81a0e5cc:       nop
    0.00 :   ffffffff81a0e5ce:       xorl    %esi, %esi
    0.00 :   ffffffff81a0e5d0:       jmp     0xffffffff81a0e5de <tcp_data_ready+0xbe>
    0.00 :   ffffffff81a0e5d2:       movq    0xc0(%rax), %rax
    0.00 :   ffffffff81a0e5d9:       testq   %rax, %rax
    0.00 :   ffffffff81a0e5dc:       je      0xffffffff81a0e562 <tcp_data_ready+0x42>
    0.00 :   ffffffff81a0e5de:       movq    %rsi, -0x8(%rbp)
    0.00 :   ffffffff81a0e5e2:       movq    0x7f93d7(%rip), %rcx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81a0e5e9:       movq    0x658(%rax), %rdx
    0.00 :   ffffffff81a0e5f0:       cmpq    %rdx, %rcx
    0.00 :   ffffffff81a0e5f3:       jns     0xffffffff81a0e5d2 <tcp_data_ready+0xb2>
    0.00 :   ffffffff81a0e5f5:       jmp     0xffffffff81a0e544 <tcp_data_ready+0x24>
    0.00 :   ffffffff81a0e5fa:       movl    0x664(%rax), %edx
    0.00 :   ffffffff81a0e600:       testl   %edx, %edx
    0.00 :   ffffffff81a0e602:       je      0xffffffff81a0e5ce <tcp_data_ready+0xae>
    0.00 :   ffffffff81a0e604:       jmp     0xffffffff81a0e544 <tcp_data_ready+0x24>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff817d2050 <igb_poll>:
         : 5                ; igb_poll():
    0.00 :   ffffffff817d2050:       pushq   %rbp
    0.00 :   ffffffff817d2051:       movq    %rdi, %r11
    0.00 :   ffffffff817d2054:       movq    %rsp, %rbp
    0.00 :   ffffffff817d2057:       pushq   %r15
    0.00 :   ffffffff817d2059:       pushq   %r14
    0.00 :   ffffffff817d205b:       pushq   %r13
    0.00 :   ffffffff817d205d:       pushq   %r12
    0.00 :   ffffffff817d205f:       pushq   %rbx
    0.00 :   ffffffff817d2060:       subq    $0xd8, %rsp
    0.00 :   ffffffff817d2067:       movl    %esi, -0x84(%rbp)
    0.00 :   ffffffff817d206d:       movq    %gs:0x28, %rax
    0.00 :   ffffffff817d2076:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff817d207a:       xorl    %eax, %eax
    0.00 :   ffffffff817d207c:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff817d2081:       movq    -0x18(%rdi), %r14
    0.00 :   ffffffff817d2085:       testq   %r14, %r14
    0.00 :   ffffffff817d2088:       je      0xffffffff817d22fb <igb_poll+0x2ab>
    0.00 :   ffffffff817d208e:       movq    -0x50(%rdi), %rsi
    0.00 :   ffffffff817d2092:       movzwl  -0x8(%rdi), %r12d
    0.00 :   ffffffff817d2097:       movzwl  0x64(%r14), %eax
    0.00 :   ffffffff817d209c:       movq    0x210(%rsi), %rdx
    0.00 :   ffffffff817d20a3:       movq    %rsi, -0xb0(%rbp)
    0.00 :   ffffffff817d20aa:       shrq    $0x2, %rdx
    0.00 :   ffffffff817d20ae:       movl    %edx, %ecx
    0.00 :   ffffffff817d20b0:       andl    $0x1, %ecx
    0.00 :   ffffffff817d20b3:       movb    %cl, -0xa1(%rbp)
    0.00 :   ffffffff817d20b9:       jne     0xffffffff817d2919 <igb_poll+0x8c9>
    0.00 :   ffffffff817d20bf:       movzwl  %ax, %r9d
    0.00 :   ffffffff817d20c3:       movzwl  %r12w, %ecx
    0.00 :   ffffffff817d20c7:       movl    $0x0, -0x90(%rbp)
    0.00 :   ffffffff817d20d1:       leaq    (,%r9,8), %rdx
    0.00 :   ffffffff817d20d9:       movl    %ecx, -0x98(%rbp)
    0.00 :   ffffffff817d20df:       movq    0x20(%r14), %rcx
    0.00 :   ffffffff817d20e3:       movl    $0x0, -0x80(%rbp)
    0.00 :   ffffffff817d20ea:       movq    %rdi, -0xa0(%rbp)
    0.00 :   ffffffff817d20f1:       subq    %r9, %rdx
    0.00 :   ffffffff817d20f4:       shlq    $0x4, %r9
    0.00 :   ffffffff817d20f8:       addq    0x28(%r14), %r9
    0.00 :   ffffffff817d20fc:       leaq    (%rcx,%rdx,8), %r15
    0.00 :   ffffffff817d2100:       movzwl  0x4c(%r14), %edx
    0.00 :   ffffffff817d2105:       movq    %r15, %r13
    0.00 :   ffffffff817d2108:       movq    %r14, %r15
    0.00 :   ffffffff817d210b:       movq    %r9, %r14
    0.00 :   ffffffff817d210e:       subl    %edx, %eax
    0.00 :   ffffffff817d2110:       movl    %eax, %r12d
    0.00 :   ffffffff817d2113:       movq    (%r13), %rbx
    0.00 :   ffffffff817d2117:       testq   %rbx, %rbx
    0.00 :   ffffffff817d211a:       je      0xffffffff817d21c4 <igb_poll+0x174>
    0.00 :   ffffffff817d2120:       testb   $0x1, 0xc(%rbx)
    0.00 :   ffffffff817d2124:       je      0xffffffff817d21c4 <igb_poll+0x174>
    0.00 :   ffffffff817d212a:       movl    0x10(%r13), %eax
    0.00 :   ffffffff817d212e:       movzwl  0x24(%r13), %edx
    0.00 :   ffffffff817d2133:       movl    0x20(%r13), %edi
    0.00 :   ffffffff817d2137:       addl    %edx, -0x90(%rbp)
    0.00 :   ffffffff817d213d:       addl    %edi, -0x80(%rbp)
    0.00 :   ffffffff817d2140:       movq    $0x0, (%r13)
    0.00 :   ffffffff817d2148:       testl   %eax, %eax
    0.00 :   ffffffff817d214a:       movq    0x18(%r13), %rdi
    0.00 :   ffffffff817d214e:       jne     0xffffffff817d22f1 <igb_poll+0x2a1>
    0.00 :   ffffffff817d2154:       movl    -0x84(%rbp), %esi
    0.00 :   ffffffff817d215a:       callq   0xffffffff8193cb40 <napi_consume_skb>
    0.00 :   ffffffff817d215f:       movl    0x30(%r13), %edx
    0.00 :   ffffffff817d2163:       movq    0x28(%r13), %rsi
    0.00 :   ffffffff817d2167:       movq    0x18(%r15), %rdi
    0.00 :   ffffffff817d216b:       xorl    %r8d, %r8d
    0.00 :   ffffffff817d216e:       movl    $0x1, %ecx
    0.00 :   ffffffff817d2173:       addq    $0x38, %r13
    0.00 :   ffffffff817d2177:       callq   0xffffffff81101ca0 <dma_unmap_page_attrs>
    0.00 :   ffffffff817d217c:       movl    $0x0, -0x8(%r13)
    0.00 :   ffffffff817d2184:       cmpq    %r14, %rbx
    0.00 :   ffffffff817d2187:       je      0xffffffff817d21a7 <igb_poll+0x157>
    0.00 :   ffffffff817d2189:       addq    $0x10, %r14
    0.00 :   ffffffff817d218d:       incl    %r12d
    0.00 :   ffffffff817d2190:       je      0xffffffff817d22dc <igb_poll+0x28c>
    0.00 :   ffffffff817d2196:       movl    0x30(%r13), %edx
    0.00 :   ffffffff817d219a:       testl   %edx, %edx
    0.00 :   ffffffff817d219c:       jne     0xffffffff817d2163 <igb_poll+0x113>
    0.00 :   ffffffff817d219e:       addq    $0x38, %r13
    0.00 :   ffffffff817d21a2:       cmpq    %r14, %rbx
    0.00 :   ffffffff817d21a5:       jne     0xffffffff817d2189 <igb_poll+0x139>
    0.00 :   ffffffff817d21a7:       addq    $0x10, %r14
    0.00 :   ffffffff817d21ab:       incl    %r12d
    0.00 :   ffffffff817d21ae:       je      0xffffffff817d2f68 <igb_poll+0xf18>
    0.00 :   ffffffff817d21b4:       prefetcht0      (%r14)
    0.00 :   ffffffff817d21b8:       decl    -0x98(%rbp)
    0.00 :   ffffffff817d21be:       jne     0xffffffff817d2113 <igb_poll+0xc3>
    0.00 :   ffffffff817d21c4:       movq    %r15, %r14
    0.00 :   ffffffff817d21c7:       movl    -0x80(%rbp), %esi
    0.00 :   ffffffff817d21ca:       movq    -0xa0(%rbp), %r11
    0.00 :   ffffffff817d21d1:       movzbl  0x4e(%r14), %edx
    0.00 :   ffffffff817d21d6:       movq    0x8(%r14), %rcx
    0.00 :   ffffffff817d21da:       movq    %r13, %r15
    0.00 :   ffffffff817d21dd:       leaq    (%rdx,%rdx,4), %rbx
    0.00 :   ffffffff817d21e1:       shlq    $0x6, %rbx
    0.00 :   ffffffff817d21e5:       addq    0x380(%rcx), %rbx
    0.00 :   ffffffff817d21ec:       testl   %esi, %esi
    0.00 :   ffffffff817d21ee:       je      0xffffffff817d2229 <igb_poll+0x1d9>
    0.00 :   ffffffff817d21f0:       leaq    0xc0(%rbx), %rdi
    0.00 :   ffffffff817d21f7:       callq   0xffffffff815ea3d0 <dql_completed>
    0.00 :   ffffffff817d21fc:       lock
    0.00 :   ffffffff817d21fd:       addl    $0x0, -0x4(%rsp)
    0.00 :   ffffffff817d2202:       movl    0xc4(%rbx), %ecx
    0.00 :   ffffffff817d2208:       movl    0xc0(%rbx), %edx
    0.00 :   ffffffff817d220e:       movq    -0xa0(%rbp), %r11
    0.00 :   ffffffff817d2215:       cmpl    %edx, %ecx
    0.00 :   ffffffff817d2217:       js      0xffffffff817d2229 <igb_poll+0x1d9>
    0.00 :   ffffffff817d2219:       lock
    0.00 :   ffffffff817d221a:       btrq    $0x1, 0x90(%rbx)
    0.00 :   ffffffff817d2223:       jb      0xffffffff817d2d57 <igb_poll+0xd07>
    0.00 :   ffffffff817d2229:       movzwl  0x4c(%r14), %edx
    0.00 :   ffffffff817d222e:       leal    (%rdx,%r12), %eax
    0.00 :   ffffffff817d2232:       movw    %ax, 0x64(%r14)
    0.00 :   ffffffff817d2237:       movl    -0x80(%rbp), %eax
    0.00 :   ffffffff817d223a:       addq    %rax, 0x78(%r14)
    0.00 :   ffffffff817d223e:       movq    %rax, %rbx
    0.00 :   ffffffff817d2241:       movl    -0x90(%rbp), %eax
    0.00 :   ffffffff817d2247:       addq    %rax, 0x70(%r14)
    0.00 :   ffffffff817d224b:       addl    %ebx, -0x10(%r11)
    0.00 :   ffffffff817d224f:       addl    %eax, -0xc(%r11)
    0.00 :   ffffffff817d2253:       movq    0x30(%r14), %rax
    0.00 :   ffffffff817d2257:       shrq    $0x5, %rax
    0.00 :   ffffffff817d225b:       andl    $0x1, %eax
    0.00 :   ffffffff817d225e:       movb    %al, -0xa1(%rbp)
    0.00 :   ffffffff817d2264:       je      0xffffffff817d22a3 <igb_poll+0x253>
    0.00 :   ffffffff817d2266:       lock
    0.00 :   ffffffff817d2267:       andb    $-0x21, 0x30(%r14)
    0.00 :   ffffffff817d226c:       cmpq    $0x0, (%r15)
    0.00 :   ffffffff817d2270:       je      0xffffffff817d22a3 <igb_poll+0x253>
    0.00 :   ffffffff817d2272:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d2279:       movq    $0x0, -0x78(%rbp)
    0.00 :   ffffffff817d2281:       movq    0xa35738(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff817d2288:       movzbl  0x449(%rax), %eax
    0.00 :   ffffffff817d228f:       imulq   $0x3e8, %rax, %rax # imm = 0x3E8
    0.00 :   ffffffff817d2296:       subq    %rdx, %rax
    0.00 :   ffffffff817d2299:       addq    0x8(%r15), %rax
    0.00 :   ffffffff817d229d:       js      0xffffffff817d3178 <igb_poll+0x1128>
    0.00 :   ffffffff817d22a3:       movl    -0x90(%rbp), %ebx
    0.00 :   ffffffff817d22a9:       testl   %ebx, %ebx
    0.00 :   ffffffff817d22ab:       jne     0xffffffff817d32a2 <igb_poll+0x1252>
    0.00 :   ffffffff817d22b1:       movl    -0x98(%rbp), %r10d
    0.00 :   ffffffff817d22b8:       movq    -0x30(%r11), %rbx
    0.00 :   ffffffff817d22bc:       testl   %r10d, %r10d
    0.00 :   ffffffff817d22bf:       setne   -0xa1(%rbp)
    0.00 :   ffffffff817d22c6:       testq   %rbx, %rbx
    0.00 :   ffffffff817d22c9:       je      0xffffffff817d2d44 <igb_poll+0xcf4>
    0.00 :   ffffffff817d22cf:       movq    -0x50(%r11), %rax
    0.00 :   ffffffff817d22d3:       movq    %rax, -0xb0(%rbp)
    0.00 :   ffffffff817d22da:       jmp     0xffffffff817d231a <igb_poll+0x2ca>
    0.00 :   ffffffff817d22dc:       movzwl  0x4c(%r15), %r12d
    0.00 :   ffffffff817d22e1:       movq    0x20(%r15), %r13
    0.00 :   ffffffff817d22e5:       movq    0x28(%r15), %r14
    0.00 :   ffffffff817d22e9:       negl    %r12d
    0.00 :   ffffffff817d22ec:       jmp     0xffffffff817d2196 <igb_poll+0x146>
    0.00 :   ffffffff817d22f1:       callq   0xffffffff8198fd70 <xdp_return_frame>
    0.00 :   ffffffff817d22f6:       jmp     0xffffffff817d215f <igb_poll+0x10f>
    0.00 :   ffffffff817d22fb:       movq    -0x30(%rdi), %rbx
    0.00 :   ffffffff817d22ff:       testq   %rbx, %rbx
    0.00 :   ffffffff817d2302:       je      0xffffffff817d2926 <igb_poll+0x8d6>
    0.00 :   ffffffff817d2308:       movq    -0x50(%rdi), %rax
    0.00 :   ffffffff817d230c:       movb    $0x1, -0xa1(%rbp)
    0.00 :   ffffffff817d2313:       movq    %rax, -0xb0(%rbp)
    0.00 :   ffffffff817d231a:       movzwl  0x64(%rbx), %eax
    0.00 :   ffffffff817d231e:       movzwl  0x66(%rbx), %esi
    0.00 :   ffffffff817d2322:       movq    0x70(%rbx), %r13
    0.00 :   ffffffff817d2326:       cmpw    %ax, %si
    0.00 :   ffffffff817d2329:       jb      0xffffffff817d2f80 <igb_poll+0xf30>
    0.00 :   ffffffff817d232f:       movzwl  0x4c(%rbx), %edx
    0.00 :   ffffffff817d2333:       leal    -0x1(%rax,%rdx), %eax
    0.00 :   ffffffff817d2337:       subl    %esi, %eax
    0.00 :   ffffffff817d2339:       leaq    -0x68(%rbp), %rdi
    0.00 :   ffffffff817d233d:       movw    %ax, -0x80(%rbp)
    0.00 :   ffffffff817d2341:       movl    $0x7, %ecx
    0.00 :   ffffffff817d2346:       xorl    %eax, %eax
    0.00 :   ffffffff817d2348:       movl    -0x84(%rbp), %r9d
    0.00 :   ffffffff817d234f:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff817d2352:       movl    $0x1000, %eax   # imm = 0x1000
    0.00 :   ffffffff817d2357:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d235b:       movl    $0x0, -0x34(%rbp)
    0.00 :   ffffffff817d2362:       andl    $0x1, %ecx
    0.00 :   ffffffff817d2365:       shlq    %cl, %rax
    0.00 :   ffffffff817d2368:       shrq    %rax
    0.00 :   ffffffff817d236b:       testl   %r9d, %r9d
    0.00 :   ffffffff817d236e:       movl    %eax, -0x38(%rbp)
    0.00 :   ffffffff817d2371:       leaq    0xc0(%rbx), %rax
    0.00 :   ffffffff817d2378:       movq    %rax, -0x48(%rbp)
    0.00 :   ffffffff817d237c:       je      0xffffffff817d3115 <igb_poll+0x10c5>
    0.00 :   ffffffff817d2382:       movl    $0x0, -0x88(%rbp)
    0.00 :   ffffffff817d238c:       movl    $0x0, -0xa0(%rbp)
    0.00 :   ffffffff817d2396:       movl    $0x0, -0xa8(%rbp)
    0.00 :   ffffffff817d23a0:       movq    %r11, -0xb8(%rbp)
    0.00 :   ffffffff817d23a7:       cmpw    $0xf, -0x80(%rbp)
    0.00 :   ffffffff817d23ac:       movq    $0x0, -0x70(%rbp)
    0.00 :   ffffffff817d23b4:       ja      0xffffffff817d281a <igb_poll+0x7ca>
    0.00 :   ffffffff817d23ba:       movzwl  0x64(%rbx), %r12d
    0.00 :   ffffffff817d23bf:       shlq    $0x4, %r12
    0.00 :   ffffffff817d23c3:       addq    0x28(%rbx), %r12
    0.00 :   ffffffff817d23c7:       movzwl  0xc(%r12), %r8d
    0.00 :   ffffffff817d23cd:       testl   %r8d, %r8d
    0.00 :   ffffffff817d23d0:       movq    %r8, %rdx
    0.00 :   ffffffff817d23d3:       je      0xffffffff817d26a7 <igb_poll+0x657>
    0.00 :   ffffffff817d23d9:       movzwl  0x64(%rbx), %eax
    0.00 :   ffffffff817d23dd:       leaq    (%rax,%rax,2), %rcx
    0.00 :   ffffffff817d23e1:       movq    0x20(%rbx), %rax
    0.00 :   ffffffff817d23e5:       leaq    (%rax,%rcx,8), %r15
    0.00 :   ffffffff817d23e9:       movq    0x8(%r15), %rax
    0.00 :   ffffffff817d23ed:       movq    0x8(%rax), %rcx
    0.00 :   ffffffff817d23f1:       testb   $0x1, %cl
    0.00 :   ffffffff817d23f4:       jne     0xffffffff817d2c34 <igb_poll+0xbe4>
    0.00 :   ffffffff817d23fa:       nopl    (%rax,%rax)
    0.00 :   ffffffff817d23ff:       movq    %rax, %rcx
    0.00 :   ffffffff817d2402:       movl    0x34(%rcx), %edi
    0.00 :   ffffffff817d2405:       movl    %r8d, -0x90(%rbp)
    0.00 :   ffffffff817d240c:       movl    %edi, -0x98(%rbp)
    0.00 :   ffffffff817d2412:       prefetcht0      (%rax)
    0.00 :   ffffffff817d2415:       movl    0x10(%r15), %esi
    0.00 :   ffffffff817d2419:       movq    0x18(%rbx), %rdi
    0.00 :   ffffffff817d241d:       movl    $0x2, %ecx
    0.00 :   ffffffff817d2422:       addq    (%r15), %rsi
    0.00 :   ffffffff817d2425:       callq   0xffffffff81101ec0 <dma_sync_single_for_cpu>
    0.00 :   ffffffff817d242a:       movq    0x8(%r15), %r14
    0.00 :   ffffffff817d242e:       subq    0x94fdb3(%rip), %r14 # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff817d2435:       movl    0x10(%r15), %eax
    0.00 :   ffffffff817d2439:       decw    0x14(%r15)
    0.00 :   ffffffff817d243e:       movl    -0x90(%rbp), %r8d
    0.00 :   ffffffff817d2445:       sarq    $0x6, %r14
    0.00 :   ffffffff817d2449:       shlq    $0xc, %r14
    0.00 :   ffffffff817d244d:       addq    0x94fda4(%rip), %r14 # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff817d2454:       addq    %rax, %r14
    0.00 :   ffffffff817d2457:       xorl    %eax, %eax
    0.00 :   ffffffff817d2459:       testb   $-0x80, 0x9(%r12)
    0.00 :   ffffffff817d245f:       jne     0xffffffff817d2831 <igb_poll+0x7e1>
    0.00 :   ffffffff817d2465:       testq   %r13, %r13
    0.00 :   ffffffff817d2468:       je      0xffffffff817d2853 <igb_poll+0x803>
    0.00 :   ffffffff817d246e:       cmpq    $-0x1000, %r13  # imm = 0xF000
    0.00 :   ffffffff817d2475:       ja      0xffffffff817d30de <igb_poll+0x108e>
    0.00 :   ffffffff817d247b:       movl    0xb8(%r13), %eax
    0.00 :   ffffffff817d2482:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d2486:       movl    $0x1000, %r14d  # imm = 0x1000
    0.00 :   ffffffff817d248c:       movq    0xc0(%r13), %rsi
    0.00 :   ffffffff817d2493:       movq    0x8(%r15), %rdx
    0.00 :   ffffffff817d2497:       movq    %r13, %rdi
    0.00 :   ffffffff817d249a:       andl    $0x1, %ecx
    0.00 :   ffffffff817d249d:       movzbl  0x2(%rsi,%rax), %esi
    0.00 :   ffffffff817d24a2:       shlq    %cl, %r14
    0.00 :   ffffffff817d24a5:       movl    0x10(%r15), %ecx
    0.00 :   ffffffff817d24a9:       shrq    %r14
    0.00 :   ffffffff817d24ac:       movl    %r14d, %r9d
    0.00 :   ffffffff817d24af:       callq   0xffffffff81933d00 <skb_add_rx_frag>
    0.00 :   ffffffff817d24b4:       xorl    %r14d, 0x10(%r15)
    0.00 :   ffffffff817d24b8:       movzwl  0x14(%r15), %eax
    0.00 :   ffffffff817d24bd:       movq    0x8(%r15), %rcx
    0.00 :   ffffffff817d24c1:       movzwl  %ax, %eax
    0.00 :   ffffffff817d24c4:       movl    %gs:0x7e84e275(%rip), %esi
    0.00 :   ffffffff817d24cb:       movq    (%rcx), %rdx
    0.00 :   ffffffff817d24ce:       shrq    $0x3a, %rdx
    0.00 :   ffffffff817d24d2:       cmpl    %edx, %esi
    0.00 :   ffffffff817d24d4:       jne     0xffffffff817d27a7 <igb_poll+0x757>
    0.00 :   ffffffff817d24da:       testb   $0x2, 0x8(%rcx)
    0.00 :   ffffffff817d24de:       jne     0xffffffff817d27a7 <igb_poll+0x757>
    0.00 :   ffffffff817d24e4:       movl    -0x98(%rbp), %edx
    0.00 :   ffffffff817d24ea:       subl    %eax, %edx
    0.00 :   ffffffff817d24ec:       cmpl    $0x1, %edx
    0.00 :   ffffffff817d24ef:       ja      0xffffffff817d27a7 <igb_poll+0x757>
    0.00 :   ffffffff817d24f5:       decl    %eax
    0.00 :   ffffffff817d24f7:       je      0xffffffff817d3041 <igb_poll+0xff1>
    0.00 :   ffffffff817d24fd:       movzwl  0x68(%rbx), %edx
    0.00 :   ffffffff817d2501:       movq    %rdx, %rax
    0.00 :   ffffffff817d2504:       leaq    (%rdx,%rdx,2), %rcx
    0.00 :   ffffffff817d2508:       movq    0x20(%rbx), %rdx
    0.00 :   ffffffff817d250c:       incl    %eax
    0.00 :   ffffffff817d250e:       cmpw    0x4c(%rbx), %ax
    0.00 :   ffffffff817d2512:       leaq    (%rdx,%rcx,8), %rdx
    0.00 :   ffffffff817d2516:       jb      0xffffffff817d251a <igb_poll+0x4ca>
    0.00 :   ffffffff817d2518:       xorl    %eax, %eax
    0.00 :   ffffffff817d251a:       movw    %ax, 0x68(%rbx)
    0.00 :   ffffffff817d251e:       movq    (%r15), %rax
    0.00 :   ffffffff817d2521:       movq    %rax, (%rdx)
    0.00 :   ffffffff817d2524:       movq    0x8(%r15), %rax
    0.00 :   ffffffff817d2528:       movq    %rax, 0x8(%rdx)
    0.00 :   ffffffff817d252c:       movl    0x10(%r15), %eax
    0.00 :   ffffffff817d2530:       movl    %eax, 0x10(%rdx)
    0.00 :   ffffffff817d2533:       movzwl  0x14(%r15), %eax
    0.00 :   ffffffff817d2538:       movw    %ax, 0x14(%rdx)
    0.00 :   ffffffff817d253c:       movq    $0x0, 0x8(%r15)
    0.00 :   ffffffff817d2544:       movzwl  0x64(%rbx), %eax
    0.00 :   ffffffff817d2548:       movzwl  0x4c(%rbx), %ecx
    0.00 :   ffffffff817d254c:       incw    -0x80(%rbp)
    0.00 :   ffffffff817d2550:       movl    %eax, %edx
    0.00 :   ffffffff817d2552:       incl    %eax
    0.00 :   ffffffff817d2554:       cmpl    %ecx, %eax
    0.00 :   ffffffff817d2556:       jae     0xffffffff817d27e0 <igb_poll+0x790>
    0.00 :   ffffffff817d255c:       cltq
    0.00 :   ffffffff817d255e:       incl    %edx
    0.00 :   ffffffff817d2560:       shlq    $0x4, %rax
  100.00 :   ffffffff817d2564:       addq    0x28(%rbx), %rax
    0.00 :   ffffffff817d2568:       movw    %dx, 0x64(%rbx)
    0.00 :   ffffffff817d256c:       prefetcht0      (%rax)
    0.00 :   ffffffff817d256f:       movl    0x8(%r12), %eax
    0.00 :   ffffffff817d2574:       testb   $0x2, %al
    0.00 :   ffffffff817d2576:       je      0xffffffff817d2695 <igb_poll+0x645>
    0.00 :   ffffffff817d257c:       cmpq    $-0x1000, %r13  # imm = 0xF000
    0.00 :   ffffffff817d2583:       ja      0xffffffff817d308d <igb_poll+0x103d>
    0.00 :   ffffffff817d2589:       testl   $0x97000000, %eax # imm = 0x97000000
    0.00 :   ffffffff817d258e:       jne     0xffffffff817d306f <igb_poll+0x101f>
    0.00 :   ffffffff817d2594:       movl    0x70(%r13), %eax
    0.00 :   ffffffff817d2598:       cmpl    $0x3b, %eax
    0.00 :   ffffffff817d259b:       jbe     0xffffffff817d3095 <igb_poll+0x1045>
    0.00 :   ffffffff817d25a1:       movq    0x8(%rbx), %r14
    0.00 :   ffffffff817d25a5:       addl    %eax, -0x88(%rbp)
    0.00 :   ffffffff817d25ab:       testb   $-0x80, 0xf4(%r14)
    0.00 :   ffffffff817d25b3:       je      0xffffffff817d25c9 <igb_poll+0x579>
    0.00 :   ffffffff817d25b5:       movl    0x4(%r12), %edx
    0.00 :   ffffffff817d25ba:       andb    $-0x4, 0x82(%r13)
    0.00 :   ffffffff817d25c2:       movl    %edx, 0x94(%r13)
    0.00 :   ffffffff817d25c9:       movl    0x8(%r12), %edx
    0.00 :   ffffffff817d25ce:       testb   $0x4, %dl
    0.00 :   ffffffff817d25d1:       jne     0xffffffff817d260b <igb_poll+0x5bb>
    0.00 :   ffffffff817d25d3:       movq    0x8(%rbx), %rcx
    0.00 :   ffffffff817d25d7:       testb   $0x1, 0xf5(%rcx)
    0.00 :   ffffffff817d25de:       je      0xffffffff817d260b <igb_poll+0x5bb>
    0.00 :   ffffffff817d25e0:       testl   $0x60000000, %edx # imm = 0x60000000
    0.00 :   ffffffff817d25e6:       jne     0xffffffff817d2d82 <igb_poll+0xd32>
    0.00 :   ffffffff817d25ec:       testb   $0x30, %dl
    0.00 :   ffffffff817d25ef:       je      0xffffffff817d260b <igb_poll+0x5bb>
    0.00 :   ffffffff817d25f1:       movzbl  0x80(%r13), %eax
    0.00 :   ffffffff817d25f9:       andl    $-0x61, %eax
    0.00 :   ffffffff817d25fc:       orl     $0x20, %eax
    0.00 :   ffffffff817d25ff:       movb    %al, 0x80(%r13)
    0.00 :   ffffffff817d2606:       movl    0x8(%r12), %edx
    0.00 :   ffffffff817d260b:       testl   $0x10000, %edx  # imm = 0x10000
    0.00 :   ffffffff817d2611:       je      0xffffffff817d261c <igb_poll+0x5cc>
    0.00 :   ffffffff817d2613:       andb    $-0x80, %dh
    0.00 :   ffffffff817d2616:       je      0xffffffff817d2d72 <igb_poll+0xd22>
    0.00 :   ffffffff817d261c:       testb   $0x1, 0xf1(%r14)
    0.00 :   ffffffff817d2624:       je      0xffffffff817d265e <igb_poll+0x60e>
    0.00 :   ffffffff817d2626:       movl    0x8(%r12), %eax
    0.00 :   ffffffff817d262b:       testb   $0x8, %al
    0.00 :   ffffffff817d262d:       je      0xffffffff817d265e <igb_poll+0x60e>
    0.00 :   ffffffff817d262f:       testl   $0x40000, %eax  # imm = 0x40000
    0.00 :   ffffffff817d2634:       movzwl  0xe(%r12), %edx
    0.00 :   ffffffff817d263a:       je      0xffffffff817d264c <igb_poll+0x5fc>
    0.00 :   ffffffff817d263c:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d2640:       movl    %edx, %eax
    0.00 :   ffffffff817d2642:       rolw    $0x8, %ax
    0.00 :   ffffffff817d2646:       andl    $0x8, %ecx
    0.00 :   ffffffff817d2649:       cmovnel %eax, %edx
    0.00 :   ffffffff817d264c:       movw    $0x81, 0x98(%r13)
    0.00 :   ffffffff817d2656:       movw    %dx, 0x9a(%r13)
    0.00 :   ffffffff817d265e:       movzbl  0x4e(%rbx), %eax
    0.00 :   ffffffff817d2662:       movq    %r13, %rdi
    0.00 :   ffffffff817d2665:       incl    %eax
    0.00 :   ffffffff817d2667:       movw    %ax, 0x7c(%r13)
    0.00 :   ffffffff817d266c:       movq    0x8(%rbx), %rsi
    0.00 :   ffffffff817d2670:       callq   0xffffffff819a45a0 <eth_type_trans>
    0.00 :   ffffffff817d2675:       movq    -0xb8(%rbp), %rdi
    0.00 :   ffffffff817d267c:       movw    %ax, 0xac(%r13)
    0.00 :   ffffffff817d2684:       movq    %r13, %rsi
    0.00 :   ffffffff817d2687:       xorl    %r13d, %r13d
    0.00 :   ffffffff817d268a:       callq   0xffffffff81992b60 <napi_gro_receive>
    0.00 :   ffffffff817d268f:       incl    -0xa0(%rbp)
    0.00 :   ffffffff817d2695:       movl    -0x84(%rbp), %edi
    0.00 :   ffffffff817d269b:       cmpl    %edi, -0xa0(%rbp)
    0.00 :   ffffffff817d26a1:       jb      0xffffffff817d23a7 <igb_poll+0x357>
    0.00 :   ffffffff817d26a7:       movq    -0xb8(%rbp), %r11
    0.00 :   ffffffff817d26ae:       testb   $0x4, -0xa8(%rbp)
    0.00 :   ffffffff817d26b5:       movq    %r13, 0x70(%rbx)
    0.00 :   ffffffff817d26b9:       je      0xffffffff817d26ce <igb_poll+0x67e>
    0.00 :   ffffffff817d26bb:       movq    %r11, -0x90(%rbp)
    0.00 :   ffffffff817d26c2:       callq   0xffffffff8197dd20 <xdp_do_flush>
    0.00 :   ffffffff817d26c7:       movq    -0x90(%rbp), %r11
    0.00 :   ffffffff817d26ce:       testb   $0x2, -0xa8(%rbp)
    0.00 :   ffffffff817d26d5:       je      0xffffffff817d2711 <igb_poll+0x6c1>
    0.00 :   ffffffff817d26d7:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d26de:       movl    %gs:0x7e850027(%rip), %edx
    0.00 :   ffffffff817d26e5:       movl    0x284(%rax), %ecx
    0.00 :   ffffffff817d26eb:       cmpl    %ecx, %edx
    0.00 :   ffffffff817d26ed:       jae     0xffffffff817d2d4c <igb_poll+0xcfc>
    0.00 :   ffffffff817d26f3:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d26fa:       movl    %edx, %edx
    0.00 :   ffffffff817d26fc:       movq    0x288(%rax,%rdx,8), %rax
    0.00 :   ffffffff817d2704:       sfence
    0.00 :   ffffffff817d2707:       movq    0x38(%rax), %rdx
    0.00 :   ffffffff817d270b:       movzwl  0x66(%rax), %eax
    0.00 :   ffffffff817d270f:       movl    %eax, (%rdx)
    0.00 :   ffffffff817d2711:       movl    -0xa0(%rbp), %edx
    0.00 :   ffffffff817d2717:       movl    -0x88(%rbp), %eax
    0.00 :   ffffffff817d271d:       movq    %rdx, %r12
    0.00 :   ffffffff817d2720:       addq    %rax, 0x80(%rbx)
    0.00 :   ffffffff817d2727:       addq    %rdx, 0x78(%rbx)
    0.00 :   ffffffff817d272b:       movl    -0xa0(%rbp), %eax
    0.00 :   ffffffff817d2731:       addl    %eax, -0x24(%r11)
    0.00 :   ffffffff817d2735:       movl    -0x88(%rbp), %eax
    0.00 :   ffffffff817d273b:       addl    %eax, -0x28(%r11)
    0.00 :   ffffffff817d273f:       cmpw    $0x0, -0x80(%rbp)
    0.00 :   ffffffff817d2744:       jne     0xffffffff817d2f89 <igb_poll+0xf39>
    0.00 :   ffffffff817d274a:       cmpl    %r12d, -0x84(%rbp)
    0.00 :   ffffffff817d2751:       jle     0xffffffff817d2760 <igb_poll+0x710>
    0.00 :   ffffffff817d2753:       cmpb    $0x0, -0xa1(%rbp)
    0.00 :   ffffffff817d275a:       jne     0xffffffff817d2929 <igb_poll+0x8d9>
    0.00 :   ffffffff817d2760:       movl    -0x84(%rbp), %r12d
    0.00 :   ffffffff817d2767:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff817d276b:       subq    %gs:0x28, %rax
    0.00 :   ffffffff817d2774:       jne     0xffffffff817d34c8 <igb_poll+0x1478>
    0.00 :   ffffffff817d277a:       addq    $0xd8, %rsp
    0.00 :   ffffffff817d2781:       movl    %r12d, %eax
    0.00 :   ffffffff817d2784:       popq    %rbx
    0.00 :   ffffffff817d2785:       popq    %r12
    0.00 :   ffffffff817d2787:       popq    %r13
    0.00 :   ffffffff817d2789:       popq    %r14
    0.00 :   ffffffff817d278b:       popq    %r15
    0.00 :   ffffffff817d278d:       popq    %rbp
    0.00 :   ffffffff817d278e:       xorl    %edx, %edx
    0.00 :   ffffffff817d2790:       xorl    %ecx, %ecx
    0.00 :   ffffffff817d2792:       xorl    %esi, %esi
    0.00 :   ffffffff817d2794:       xorl    %edi, %edi
    0.00 :   ffffffff817d2796:       xorl    %r8d, %r8d
    0.00 :   ffffffff817d2799:       xorl    %r9d, %r9d
    0.00 :   ffffffff817d279c:       xorl    %r10d, %r10d
    0.00 :   ffffffff817d279f:       xorl    %r11d, %r11d
    0.00 :   ffffffff817d27a2:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff817d27a7:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d27ab:       movq    (%r15), %rsi
    0.00 :   ffffffff817d27ae:       movl    $0x1000, %edx   # imm = 0x1000
    0.00 :   ffffffff817d27b3:       movq    0x18(%rbx), %rdi
    0.00 :   ffffffff817d27b7:       movl    $0x22, %r8d
    0.00 :   ffffffff817d27bd:       andl    $0x1, %ecx
    0.00 :   ffffffff817d27c0:       shlq    %cl, %rdx
    0.00 :   ffffffff817d27c3:       movl    $0x2, %ecx
    0.00 :   ffffffff817d27c8:       callq   0xffffffff81101ca0 <dma_unmap_page_attrs>
    0.00 :   ffffffff817d27cd:       movzwl  0x14(%r15), %esi
    0.00 :   ffffffff817d27d2:       movq    0x8(%r15), %rdi
    0.00 :   ffffffff817d27d6:       callq   0xffffffff8124efd0 <__page_frag_cache_drain>
    0.00 :   ffffffff817d27db:       jmp     0xffffffff817d253c <igb_poll+0x4ec>
    0.00 :   ffffffff817d27e0:       xorl    %eax, %eax
    0.00 :   ffffffff817d27e2:       xorl    %edx, %edx
    0.00 :   ffffffff817d27e4:       jmp     0xffffffff817d2564 <igb_poll+0x514>
    0.00 :   ffffffff817d27e9:       testl   $0xfff, %eax    # imm = 0xFFF
    0.00 :   ffffffff817d27ee:       movq    %rax, %rcx
    0.00 :   ffffffff817d27f1:       jne     0xffffffff817d2402 <igb_poll+0x3b2>
    0.00 :   ffffffff817d27f7:       movq    (%rax), %rsi
    0.00 :   ffffffff817d27fa:       testl   $0x10000, %esi  # imm = 0x10000
    0.00 :   ffffffff817d2800:       je      0xffffffff817d2402 <igb_poll+0x3b2>
    0.00 :   ffffffff817d2806:       movq    0x48(%rax), %rsi
    0.00 :   ffffffff817d280a:       leaq    -0x1(%rsi), %rcx
    0.00 :   ffffffff817d280e:       andl    $0x1, %esi
    0.00 :   ffffffff817d2811:       cmoveq  %rax, %rcx
    0.00 :   ffffffff817d2815:       jmp     0xffffffff817d2402 <igb_poll+0x3b2>
    0.00 :   ffffffff817d281a:       movzwl  -0x80(%rbp), %esi
    0.00 :   ffffffff817d281e:       movq    %rbx, %rdi
    0.00 :   ffffffff817d2821:       callq   0xffffffff817d1e50 <igb_alloc_rx_buffers>
    0.00 :   ffffffff817d2826:       movw    $0x0, -0x80(%rbp)
    0.00 :   ffffffff817d282c:       jmp     0xffffffff817d23ba <igb_poll+0x36a>
    0.00 :   ffffffff817d2831:       movq    (%rbx), %rdi
    0.00 :   ffffffff817d2834:       leaq    -0x70(%rbp), %rdx
    0.00 :   ffffffff817d2838:       movq    %r14, %rsi
    0.00 :   ffffffff817d283b:       callq   0xffffffff817e80b0 <igb_ptp_rx_pktstamp>
    0.00 :   ffffffff817d2840:       movl    -0x90(%rbp), %r8d
    0.00 :   ffffffff817d2847:       subl    %eax, %r8d
    0.00 :   ffffffff817d284a:       testq   %r13, %r13
    0.00 :   ffffffff817d284d:       jne     0xffffffff817d246e <igb_poll+0x41e>
    0.00 :   ffffffff817d2853:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d2857:       leaq    -0xc0(%r14), %rdx
    0.00 :   ffffffff817d285e:       andl    $0x2, %ecx
    0.00 :   ffffffff817d2861:       cmovneq %rdx, %r14
    0.00 :   ffffffff817d2865:       movq    0x30(%rbx), %rdx
    0.00 :   ffffffff817d2869:       andl    $-0x2, -0x34(%rbp)
    0.00 :   ffffffff817d286d:       movq    %r14, -0x50(%rbp)
    0.00 :   ffffffff817d2871:       shrq    %rdx
    0.00 :   ffffffff817d2874:       shll    $0x1f, %edx
    0.00 :   ffffffff817d2877:       sarl    $0x1f, %edx
    0.00 :   ffffffff817d287a:       andl    $0xc0, %edx
    0.00 :   ffffffff817d2880:       addl    %edx, %eax
    0.00 :   ffffffff817d2882:       movslq  %r8d, %rdx
    0.00 :   ffffffff817d2885:       cltq
    0.00 :   ffffffff817d2887:       addq    %r14, %rax
    0.00 :   ffffffff817d288a:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff817d288e:       movq    0x10(%rbx), %rcx
    0.00 :   ffffffff817d2892:       addq    %rax, %rdx
    0.00 :   ffffffff817d2895:       movq    %rax, -0x68(%rbp)
    0.00 :   ffffffff817d2899:       movq    %rdx, -0x60(%rbp)
    0.00 :   ffffffff817d289d:       testq   %rcx, %rcx
    0.00 :   ffffffff817d28a0:       je      0xffffffff817d2a7a <igb_poll+0xa2a>
    0.00 :   ffffffff817d28a6:       prefetcht0      (%r14)
    0.00 :   ffffffff817d28aa:       nopl    (%rax,%rax)
    0.00 :   ffffffff817d28af:       movq    0x30(%rcx), %rax
    0.00 :   ffffffff817d28b3:       leaq    0x48(%rcx), %rsi
    0.00 :   ffffffff817d28b7:       movl    %r8d, -0xc0(%rbp)
    0.00 :   ffffffff817d28be:       movq    %rcx, -0x90(%rbp)
    0.00 :   ffffffff817d28c5:       leaq    -0x68(%rbp), %rdi
    0.00 :   ffffffff817d28c9:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff817d28ce:       movl    -0xc0(%rbp), %r8d
    0.00 :   ffffffff817d28d5:       movq    -0x90(%rbp), %rcx
    0.00 :   ffffffff817d28dc:       movl    %eax, %r14d
    0.00 :   ffffffff817d28df:       nopl    (%rax,%rax)
    0.00 :   ffffffff817d28e4:       cmpl    $0x2, %r14d
    0.00 :   ffffffff817d28e8:       je      0xffffffff817d2a76 <igb_poll+0xa26>
    0.00 :   ffffffff817d28ee:       ja      0xffffffff817d2d9c <igb_poll+0xd4c>
    0.00 :   ffffffff817d28f4:       movq    $-0x1, %r13
    0.00 :   ffffffff817d28fb:       movzwl  0x14(%r15), %eax
    0.00 :   ffffffff817d2900:       incl    %eax
    0.00 :   ffffffff817d2902:       movw    %ax, 0x14(%r15)
    0.00 :   ffffffff817d2907:       incl    -0xa0(%rbp)
    0.00 :   ffffffff817d290d:       addl    %r8d, -0x88(%rbp)
    0.00 :   ffffffff817d2914:       jmp     0xffffffff817d24bd <igb_poll+0x46d>
    0.00 :   ffffffff817d2919:       movq    -0x30(%rdi), %rbx
    0.00 :   ffffffff817d291d:       testq   %rbx, %rbx
    0.00 :   ffffffff817d2920:       jne     0xffffffff817d231a <igb_poll+0x2ca>
    0.00 :   ffffffff817d2926:       xorl    %r12d, %r12d
    0.00 :   ffffffff817d2929:       movl    %r12d, %esi
    0.00 :   ffffffff817d292c:       movq    %r11, %rdi
    0.00 :   ffffffff817d292f:       movq    %r11, -0x80(%rbp)
    0.00 :   ffffffff817d2933:       callq   0xffffffff81958250 <napi_complete_done>
    0.00 :   ffffffff817d2938:       testb   %al, %al
    0.00 :   ffffffff817d293a:       je      0xffffffff817d2767 <igb_poll+0x717>
    0.00 :   ffffffff817d2940:       movq    -0x80(%rbp), %r11
    0.00 :   ffffffff817d2944:       movq    -0x30(%r11), %r13
    0.00 :   ffffffff817d2948:       movq    -0x50(%r11), %rbx
    0.00 :   ffffffff817d294c:       testq   %r13, %r13
    0.00 :   ffffffff817d294f:       je      0xffffffff817d30f3 <igb_poll+0x10a3>
    0.00 :   ffffffff817d2955:       testb   $0x3, 0x270(%rbx)
    0.00 :   ffffffff817d295c:       je      0xffffffff817d2a3b <igb_poll+0x9eb>
    0.00 :   ffffffff817d2962:       cmpl    $0x1, 0x21c(%rbx)
    0.00 :   ffffffff817d2969:       movzwl  -0x40(%r11), %r14d
    0.00 :   ffffffff817d296e:       movzwl  0x3f8(%rbx), %eax
    0.00 :   ffffffff817d2975:       jne     0xffffffff817d2985 <igb_poll+0x935>
    0.00 :   ffffffff817d2977:       cmpq    $0x0, 0xfd8(%rbx)
    0.00 :   ffffffff817d297f:       je      0xffffffff817d3353 <igb_poll+0x1303>
    0.00 :   ffffffff817d2985:       cmpw    $0x3e8, %ax     # imm = 0x3E8
    0.00 :   ffffffff817d2989:       movzwl  %r14w, %ecx
    0.00 :   ffffffff817d298d:       jne     0xffffffff817d2a08 <igb_poll+0x9b8>
    0.00 :   ffffffff817d298f:       movl    -0x24(%r11), %esi
    0.00 :   ffffffff817d2993:       movl    -0xc(%r11), %edi
    0.00 :   ffffffff817d2997:       testl   %esi, %esi
    0.00 :   ffffffff817d2999:       jne     0xffffffff817d3161 <igb_poll+0x1111>
    0.00 :   ffffffff817d299f:       testl   %edi, %edi
    0.00 :   ffffffff817d29a1:       je      0xffffffff817d2a1b <igb_poll+0x9cb>
    0.00 :   ffffffff817d29a3:       movl    -0x10(%r11), %eax
    0.00 :   ffffffff817d29a7:       xorl    %edx, %edx
    0.00 :   ffffffff817d29a9:       divl    %edi
    0.00 :   ffffffff817d29ab:       cmpl    %esi, %eax
    0.00 :   ffffffff817d29ad:       cmovbl  %esi, %eax
    0.00 :   ffffffff817d29b0:       testl   %eax, %eax
    0.00 :   ffffffff817d29b2:       je      0xffffffff817d2a1b <igb_poll+0x9cb>
    0.00 :   ffffffff817d29b4:       movl    $0xbb8, %edx    # imm = 0xBB8
    0.00 :   ffffffff817d29b9:       addl    $0x18, %eax
    0.00 :   ffffffff817d29bc:       cmpl    %edx, %eax
    0.00 :   ffffffff817d29be:       cmovgl  %edx, %eax
    0.00 :   ffffffff817d29c1:       leal    -0x12d(%rax), %edx
    0.00 :   ffffffff817d29c7:       cmpl    $0x382, %edx    # imm = 0x382
    0.00 :   ffffffff817d29cd:       ja      0xffffffff817d3334 <igb_poll+0x12e4>
    0.00 :   ffffffff817d29d3:       movslq  %eax, %rdx
    0.00 :   ffffffff817d29d6:       sarl    $0x1f, %eax
    0.00 :   ffffffff817d29d9:       imulq   $0x55555556, %rdx, %rdx # imm = 0x55555556
    0.00 :   ffffffff817d29e0:       shrq    $0x20, %rdx
    0.00 :   ffffffff817d29e4:       subl    %eax, %edx
    0.00 :   ffffffff817d29e6:       cmpl    $0xc3, %edx
    0.00 :   ffffffff817d29ec:       jg      0xffffffff817d2a0d <igb_poll+0x9bd>
    0.00 :   ffffffff817d29ee:       testq   %r13, %r13
    0.00 :   ffffffff817d29f1:       je      0xffffffff817d3446 <igb_poll+0x13f6>
    0.00 :   ffffffff817d29f7:       cmpl    $0x3, 0x270(%rbx)
    0.00 :   ffffffff817d29fe:       movl    $0xc4, %eax
    0.00 :   ffffffff817d2a03:       cmovel  %eax, %edx
    0.00 :   ffffffff817d2a06:       jmp     0xffffffff817d2a0d <igb_poll+0x9bd>
    0.00 :   ffffffff817d2a08:       movl    $0x3d4, %edx    # imm = 0x3D4
    0.00 :   ffffffff817d2a0d:       cmpl    %edx, %ecx
    0.00 :   ffffffff817d2a0f:       je      0xffffffff817d2a1b <igb_poll+0x9cb>
    0.00 :   ffffffff817d2a11:       movw    %dx, -0x40(%r11)
    0.00 :   ffffffff817d2a16:       movb    $0x1, -0x3e(%r11)
    0.00 :   ffffffff817d2a1b:       movl    $0x0, -0x28(%r11)
    0.00 :   ffffffff817d2a23:       movl    $0x0, -0x24(%r11)
    0.00 :   ffffffff817d2a2b:       movl    $0x0, -0x10(%r11)
    0.00 :   ffffffff817d2a33:       movl    $0x0, -0xc(%r11)
    0.00 :   ffffffff817d2a3b:       movq    0x210(%rbx), %rax
    0.00 :   ffffffff817d2a42:       testb   $0x4, %al
    0.00 :   ffffffff817d2a44:       jne     0xffffffff817d2767 <igb_poll+0x717>
    0.00 :   ffffffff817d2a4a:       testb   $0x20, 0x219(%rbx)
    0.00 :   ffffffff817d2a51:       je      0xffffffff817d3105 <igb_poll+0x10b5>
    0.00 :   ffffffff817d2a57:       movq    0x560(%rbx), %rax
    0.00 :   ffffffff817d2a5e:       testq   %rax, %rax
    0.00 :   ffffffff817d2a61:       je      0xffffffff817d2767 <igb_poll+0x717>
    0.00 :   ffffffff817d2a67:       movl    -0x44(%r11), %edx
    0.00 :   ffffffff817d2a6b:       movl    %edx, 0x1524(%rax)
    0.00 :   ffffffff817d2a71:       jmp     0xffffffff817d2767 <igb_poll+0x717>
    0.00 :   ffffffff817d2a76:       movq    -0x68(%rbp), %rax
    0.00 :   ffffffff817d2a7a:       movq    0x30(%rbx), %rdx
    0.00 :   ffffffff817d2a7e:       movq    -0x70(%rbp), %r8
    0.00 :   ffffffff817d2a82:       andl    $0x2, %edx
    0.00 :   ffffffff817d2a85:       je      0xffffffff817d2b5e <igb_poll+0xb0e>
    0.00 :   ffffffff817d2a8b:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d2a8f:       movl    $0x1000, %edx   # imm = 0x1000
    0.00 :   ffffffff817d2a94:       movq    -0x50(%rbp), %rdi
    0.00 :   ffffffff817d2a98:       movq    %r8, -0xc0(%rbp)
    0.00 :   ffffffff817d2a9f:       andl    $0x1, %ecx
    0.00 :   ffffffff817d2aa2:       shlq    %cl, %rdx
    0.00 :   ffffffff817d2aa5:       movq    -0x58(%rbp), %rcx
    0.00 :   ffffffff817d2aa9:       shrq    %rdx
    0.00 :   ffffffff817d2aac:       movl    %edx, %esi
    0.00 :   ffffffff817d2aae:       movq    %rdx, -0x90(%rbp)
    0.00 :   ffffffff817d2ab5:       subq    %rcx, %rax
    0.00 :   ffffffff817d2ab8:       prefetcht0      (%rcx)
    0.00 :   ffffffff817d2abb:       prefetcht0      0x40(%rcx)
    0.00 :   ffffffff817d2abf:       movq    %rax, %r14
    0.00 :   ffffffff817d2ac2:       callq   0xffffffff819345f0 <napi_build_skb>
    0.00 :   ffffffff817d2ac7:       testq   %rax, %rax
    0.00 :   ffffffff817d2aca:       movq    %rax, %rcx
    0.00 :   ffffffff817d2acd:       je      0xffffffff817d3057 <igb_poll+0x1007>
    0.00 :   ffffffff817d2ad3:       movq    -0x68(%rbp), %rdi
    0.00 :   ffffffff817d2ad7:       movl    0x74(%rcx), %r8d
    0.00 :   ffffffff817d2adb:       movl    0xb4(%rcx), %r9d
    0.00 :   ffffffff817d2ae2:       movq    -0x90(%rbp), %rdx
    0.00 :   ffffffff817d2ae9:       movq    %rdi, %rax
    0.00 :   ffffffff817d2aec:       subq    -0x50(%rbp), %rax
    0.00 :   ffffffff817d2af0:       movslq  %eax, %rsi
    0.00 :   ffffffff817d2af3:       addq    %rsi, 0xc8(%rcx)
    0.00 :   ffffffff817d2afa:       movq    -0x60(%rbp), %rsi
    0.00 :   ffffffff817d2afe:       subq    %rdi, %rsi
    0.00 :   ffffffff817d2b01:       movq    0xc0(%rcx), %rdi
    0.00 :   ffffffff817d2b08:       addl    %esi, %eax
    0.00 :   ffffffff817d2b0a:       testl   %r8d, %r8d
    0.00 :   ffffffff817d2b0d:       movq    -0xc0(%rbp), %r8
    0.00 :   ffffffff817d2b14:       jne     0xffffffff817d3055 <igb_poll+0x1005>
    0.00 :   ffffffff817d2b1a:       addl    %r9d, %eax
    0.00 :   ffffffff817d2b1d:       addl    %esi, 0x70(%rcx)
    0.00 :   ffffffff817d2b20:       testl   %r14d, %r14d
    0.00 :   ffffffff817d2b23:       movl    %eax, 0xb4(%rcx)
    0.00 :   ffffffff817d2b29:       je      0xffffffff817d2b36 <igb_poll+0xae6>
    0.00 :   ffffffff817d2b2b:       movl    0xb8(%rcx), %eax
    0.00 :   ffffffff817d2b31:       movb    %r14b, 0x1(%rdi,%rax)
    0.00 :   ffffffff817d2b36:       testq   %r8, %r8
    0.00 :   ffffffff817d2b39:       je      0xffffffff817d2b4d <igb_poll+0xafd>
    0.00 :   ffffffff817d2b3b:       movl    0xb8(%rcx), %eax
    0.00 :   ffffffff817d2b41:       movq    0xc0(%rcx), %rsi
    0.00 :   ffffffff817d2b48:       movq    %r8, 0x10(%rsi,%rax)
    0.00 :   ffffffff817d2b4d:       xorl    %edx, 0x10(%r15)
    0.00 :   ffffffff817d2b51:       movzwl  0x14(%r15), %eax
    0.00 :   ffffffff817d2b56:       movq    %rcx, %r13
    0.00 :   ffffffff817d2b59:       jmp     0xffffffff817d24bd <igb_poll+0x46d>
    0.00 :   ffffffff817d2b5e:       movq    -0x60(%rbp), %r14
    0.00 :   ffffffff817d2b62:       prefetcht0      (%rax)
    0.00 :   ffffffff817d2b65:       prefetcht0      0x40(%rax)
    0.00 :   ffffffff817d2b69:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d2b6d:       movl    $0x820, %edx    # imm = 0x820
    0.00 :   ffffffff817d2b72:       movl    $0x100, %esi    # imm = 0x100
    0.00 :   ffffffff817d2b77:       movq    %r8, -0x90(%rbp)
    0.00 :   ffffffff817d2b7e:       subq    %rax, %r14
    0.00 :   ffffffff817d2b81:       movq    (%rbx), %rax
    0.00 :   ffffffff817d2b84:       movq    %rcx, -0xc0(%rbp)
    0.00 :   ffffffff817d2b8b:       leaq    0x50(%rax), %rdi
    0.00 :   ffffffff817d2b8f:       callq   0xffffffff81933350 <__napi_alloc_skb>
    0.00 :   ffffffff817d2b94:       testq   %rax, %rax
    0.00 :   ffffffff817d2b97:       movq    %rax, %r11
    0.00 :   ffffffff817d2b9a:       je      0xffffffff817d3057 <igb_poll+0x1007>
    0.00 :   ffffffff817d2ba0:       movq    -0x90(%rbp), %r8
    0.00 :   ffffffff817d2ba7:       testq   %r8, %r8
    0.00 :   ffffffff817d2baa:       je      0xffffffff817d2bbe <igb_poll+0xb6e>
    0.00 :   ffffffff817d2bac:       movl    0xb8(%rax), %eax
    0.00 :   ffffffff817d2bb2:       movq    0xc0(%r11), %rdx
    0.00 :   ffffffff817d2bb9:       movq    %r8, 0x10(%rdx,%rax)
    0.00 :   ffffffff817d2bbe:       cmpl    $0x100, %r14d   # imm = 0x100
    0.00 :   ffffffff817d2bc5:       movl    %r14d, %r13d
    0.00 :   ffffffff817d2bc8:       ja      0xffffffff817d2fa8 <igb_poll+0xf58>
    0.00 :   ffffffff817d2bce:       movl    0xb4(%r11), %edi
    0.00 :   ffffffff817d2bd5:       movl    0x74(%r11), %ecx
    0.00 :   ffffffff817d2bd9:       leal    0x7(%r13), %edx
    0.00 :   ffffffff817d2bdd:       movq    -0x68(%rbp), %rsi
    0.00 :   ffffffff817d2be1:       andl    $-0x8, %edx
    0.00 :   ffffffff817d2be4:       movq    %rdi, %rax
    0.00 :   ffffffff817d2be7:       addq    0xc0(%r11), %rdi
    0.00 :   ffffffff817d2bee:       testl   %ecx, %ecx
    0.00 :   ffffffff817d2bf0:       jne     0xffffffff817d3055 <igb_poll+0x1005>
    0.00 :   ffffffff817d2bf6:       addl    %r13d, 0x70(%r11)
    0.00 :   ffffffff817d2bfa:       addl    %r13d, %eax
    0.00 :   ffffffff817d2bfd:       movq    %r11, -0x90(%rbp)
    0.00 :   ffffffff817d2c04:       movl    %eax, 0xb4(%r11)
    0.00 :   ffffffff817d2c0b:       callq   0xffffffff81b6bc60 <memcpy>
    0.00 :   ffffffff817d2c10:       subl    %r13d, %r14d
    0.00 :   ffffffff817d2c13:       movq    -0x90(%rbp), %r11
    0.00 :   ffffffff817d2c1a:       jne     0xffffffff817d2fd0 <igb_poll+0xf80>
    0.00 :   ffffffff817d2c20:       movzwl  0x14(%r15), %eax
    0.00 :   ffffffff817d2c25:       movq    %r11, %r13
    0.00 :   ffffffff817d2c28:       incl    %eax
    0.00 :   ffffffff817d2c2a:       movw    %ax, 0x14(%r15)
    0.00 :   ffffffff817d2c2f:       jmp     0xffffffff817d24bd <igb_poll+0x46d>
    0.00 :   ffffffff817d2c34:       decq    %rcx
    0.00 :   ffffffff817d2c37:       jmp     0xffffffff817d2402 <igb_poll+0x3b2>
    0.00 :   ffffffff817d2c3c:       cmpl    $0x3, %r14d
    0.00 :   ffffffff817d2c40:       je      0xffffffff817d339b <igb_poll+0x134b>
    0.00 :   ffffffff817d2c46:       cmpl    $0x2, %r14d
    0.00 :   ffffffff817d2c4a:       je      0xffffffff817d2a76 <igb_poll+0xa26>
    0.00 :   ffffffff817d2c50:       jbe     0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d2c56:       cmpl    $0x4, %r14d
    0.00 :   ffffffff817d2c5a:       jne     0xffffffff817d3135 <igb_poll+0x10e5>
    0.00 :   ffffffff817d2c60:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d2c67:       leaq    -0x68(%rbp), %rsi
    0.00 :   ffffffff817d2c6b:       movq    %rcx, %rdx
    0.00 :   ffffffff817d2c6e:       movl    %r8d, -0x90(%rbp)
    0.00 :   ffffffff817d2c75:       movq    $-0x4, %r13
    0.00 :   ffffffff817d2c7c:       movq    0x200(%rax), %rdi
    0.00 :   ffffffff817d2c83:       callq   0xffffffff8197df30 <xdp_do_redirect>
    0.00 :   ffffffff817d2c88:       testl   %eax, %eax
    0.00 :   ffffffff817d2c8a:       movl    -0x90(%rbp), %r8d
    0.00 :   ffffffff817d2c91:       jne     0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d2c97:       movq    0x30(%rbx), %rcx
    0.00 :   ffffffff817d2c9b:       movl    $0x1000, %eax   # imm = 0x1000
    0.00 :   ffffffff817d2ca0:       orl     %r14d, -0xa8(%rbp)
    0.00 :   ffffffff817d2ca7:       andl    $0x1, %ecx
    0.00 :   ffffffff817d2caa:       shlq    %cl, %rax
    0.00 :   ffffffff817d2cad:       shrq    %rax
    0.00 :   ffffffff817d2cb0:       xorl    %eax, 0x10(%r15)
    0.00 :   ffffffff817d2cb4:       movzwl  0x14(%r15), %eax
    0.00 :   ffffffff817d2cb9:       jmp     0xffffffff817d2907 <igb_poll+0x8b7>
    0.00 :   ffffffff817d2cbe:       movq    %rcx, -0x90(%rbp)
    0.00 :   ffffffff817d2cc5:       movl    %r8d, -0xd0(%rbp)
    0.00 :   ffffffff817d2ccc:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff817d2cd1:       movq    -0x90(%rbp), %rcx
    0.00 :   ffffffff817d2cd8:       movq    %rax, -0xc8(%rbp)
    0.00 :   ffffffff817d2cdf:       leaq    -0x68(%rbp), %rdi
    0.00 :   ffffffff817d2ce3:       leaq    0x48(%rcx), %rsi
    0.00 :   ffffffff817d2ce7:       movq    0x30(%rcx), %rax
    0.00 :   ffffffff817d2ceb:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff817d2cf0:       movq    -0x90(%rbp), %rcx
    0.00 :   ffffffff817d2cf7:       movl    %eax, %r14d
    0.00 :   ffffffff817d2cfa:       movq    0x20(%rcx), %rsi
    0.00 :   ffffffff817d2cfe:       movq    %rcx, -0xc0(%rbp)
    0.00 :   ffffffff817d2d05:       addq    %gs:0x7e842d23(%rip), %rsi
    0.00 :   ffffffff817d2d0d:       incq    (%rsi)
    0.00 :   ffffffff817d2d10:       movq    %rsi, -0x90(%rbp)
    0.00 :   ffffffff817d2d17:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff817d2d1c:       movq    -0xc8(%rbp), %rdx
    0.00 :   ffffffff817d2d23:       movq    -0x90(%rbp), %rsi
    0.00 :   ffffffff817d2d2a:       subq    %rdx, %rax
    0.00 :   ffffffff817d2d2d:       addq    %rax, 0x8(%rsi)
    0.00 :   ffffffff817d2d31:       movq    -0xc0(%rbp), %rcx
    0.00 :   ffffffff817d2d38:       movl    -0xd0(%rbp), %r8d
    0.00 :   ffffffff817d2d3f:       jmp     0xffffffff817d28df <igb_poll+0x88f>
    0.00 :   ffffffff817d2d44:       xorl    %r12d, %r12d
    0.00 :   ffffffff817d2d47:       jmp     0xffffffff817d2753 <igb_poll+0x703>
    0.00 :   ffffffff817d2d4c:       movl    %edx, %eax
    0.00 :   ffffffff817d2d4e:       xorl    %edx, %edx
    0.00 :   ffffffff817d2d50:       divl    %ecx
    0.00 :   ffffffff817d2d52:       jmp     0xffffffff817d26f3 <igb_poll+0x6a3>
    0.00 :   ffffffff817d2d57:       movq    %rbx, %rdi
    0.00 :   ffffffff817d2d5a:       movq    %r11, -0xa0(%rbp)
    0.00 :   ffffffff817d2d61:       callq   0xffffffff8194abb0 <netif_schedule_queue>
    0.00 :   ffffffff817d2d66:       movq    -0xa0(%rbp), %r11
    0.00 :   ffffffff817d2d6d:       jmp     0xffffffff817d2229 <igb_poll+0x1d9>
    0.00 :   ffffffff817d2d72:       movq    (%rbx), %rdi
    0.00 :   ffffffff817d2d75:       movq    %r13, %rsi
    0.00 :   ffffffff817d2d78:       callq   0xffffffff817e8180 <igb_ptp_rx_rgtstamp>
    0.00 :   ffffffff817d2d7d:       jmp     0xffffffff817d261c <igb_poll+0x5cc>
    0.00 :   ffffffff817d2d82:       cmpl    $0x3c, %eax
    0.00 :   ffffffff817d2d85:       je      0xffffffff817d3342 <igb_poll+0x12f2>
    0.00 :   ffffffff817d2d8b:       incq    0x90(%rbx)
    0.00 :   ffffffff817d2d92:       movl    0x8(%r12), %edx
    0.00 :   ffffffff817d2d97:       jmp     0xffffffff817d260b <igb_poll+0x5bb>
    0.00 :   ffffffff817d2d9c:       cmpl    $0x3, %r14d
    0.00 :   ffffffff817d2da0:       jne     0xffffffff817d2c56 <igb_poll+0xc06>
    0.00 :   ffffffff817d2da6:       movq    -0x48(%rbp), %rax
    0.00 :   ffffffff817d2daa:       cmpl    $0x3, 0x10(%rax)
    0.00 :   ffffffff817d2dae:       je      0xffffffff817d3283 <igb_poll+0x1233>
    0.00 :   ffffffff817d2db4:       movq    -0x68(%rbp), %rdi
    0.00 :   ffffffff817d2db8:       movq    -0x50(%rbp), %rcx
    0.00 :   ffffffff817d2dbc:       xorl    %esi, %esi
    0.00 :   ffffffff817d2dbe:       movq    %rdi, %rax
    0.00 :   ffffffff817d2dc1:       subq    -0x58(%rbp), %rax
    0.00 :   ffffffff817d2dc5:       movq    %rdi, %rdx
    0.00 :   ffffffff817d2dc8:       subq    %rcx, %rdx
    0.00 :   ffffffff817d2dcb:       testl   %eax, %eax
    0.00 :   ffffffff817d2dcd:       cmovsl  %esi, %eax
    0.00 :   ffffffff817d2dd0:       movl    %edx, %esi
    0.00 :   ffffffff817d2dd2:       subl    %eax, %esi
    0.00 :   ffffffff817d2dd4:       cmpl    $0x27, %esi
    0.00 :   ffffffff817d2dd7:       jbe     0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d2ddd:       movl    -0x38(%rbp), %esi
    0.00 :   ffffffff817d2de0:       leaq    -0x140(%rcx,%rsi), %rsi
    0.00 :   ffffffff817d2de8:       cmpq    -0x60(%rbp), %rsi
    0.00 :   ffffffff817d2dec:       jb      0xffffffff817d345a <igb_poll+0x140a>
    0.00 :   ffffffff817d2df2:       movq    %rdi, (%rcx)
    0.00 :   ffffffff817d2df5:       movq    -0x60(%rbp), %rsi
    0.00 :   ffffffff817d2df9:       subl    $0x28, %edx
    0.00 :   ffffffff817d2dfc:       movw    %dx, 0xa(%rcx)
    0.00 :   ffffffff817d2e00:       movl    %eax, 0xc(%rcx)
    0.00 :   ffffffff817d2e03:       subq    %rdi, %rsi
    0.00 :   ffffffff817d2e06:       movw    %si, 0x8(%rcx)
    0.00 :   ffffffff817d2e0a:       movl    -0x38(%rbp), %eax
    0.00 :   ffffffff817d2e0d:       movl    %eax, 0x20(%rcx)
    0.00 :   ffffffff817d2e10:       movl    -0x34(%rbp), %eax
    0.00 :   ffffffff817d2e13:       movl    %eax, 0x24(%rcx)
    0.00 :   ffffffff817d2e16:       movq    -0x48(%rbp), %rax
    0.00 :   ffffffff817d2e1a:       movq    0x10(%rax), %rax
    0.00 :   ffffffff817d2e1e:       movq    %rax, 0x10(%rcx)
    0.00 :   ffffffff817d2e22:       movl    %gs:0x7e84f8e3(%rip), %esi
    0.00 :   ffffffff817d2e29:       testq   %rcx, %rcx
    0.00 :   ffffffff817d2e2c:       je      0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d2e32:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d2e39:       cmpq    $0x0, 0x208(%rax)
    0.00 :   ffffffff817d2e41:       je      0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d2e47:       movl    0x284(%rax), %edi
    0.00 :   ffffffff817d2e4d:       movl    %esi, %edx
    0.00 :   ffffffff817d2e4f:       cmpl    %edi, %esi
    0.00 :   ffffffff817d2e51:       jb      0xffffffff817d2e59 <igb_poll+0xe09>
    0.00 :   ffffffff817d2e53:       movl    %esi, %eax
    0.00 :   ffffffff817d2e55:       xorl    %edx, %edx
    0.00 :   ffffffff817d2e57:       divl    %edi
    0.00 :   ffffffff817d2e59:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d2e60:       movl    %edx, %edx
    0.00 :   ffffffff817d2e62:       movl    %esi, -0xd4(%rbp)
    0.00 :   ffffffff817d2e68:       movq    %rcx, -0xd0(%rbp)
    0.00 :   ffffffff817d2e6f:       movq    0x288(%rax,%rdx,8), %rax
    0.00 :   ffffffff817d2e77:       testq   %rax, %rax
    0.00 :   ffffffff817d2e7a:       je      0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d2e80:       movzbl  0x4e(%rax), %edi
    0.00 :   ffffffff817d2e84:       movq    0x8(%rax), %rdx
    0.00 :   ffffffff817d2e88:       movq    %rax, -0xc0(%rbp)
    0.00 :   ffffffff817d2e8f:       movl    %r8d, -0xc8(%rbp)
    0.00 :   ffffffff817d2e96:       leaq    (%rdi,%rdi,4), %r9
    0.00 :   ffffffff817d2e9a:       shlq    $0x6, %r9
    0.00 :   ffffffff817d2e9e:       addq    0x380(%rdx), %r9
    0.00 :   ffffffff817d2ea5:       leaq    0x80(%r9), %rax
    0.00 :   ffffffff817d2eac:       movq    %r9, %r14
    0.00 :   ffffffff817d2eaf:       movq    %rax, %rdi
    0.00 :   ffffffff817d2eb2:       movq    %rax, -0x90(%rbp)
    0.00 :   ffffffff817d2eb9:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff817d2ebe:       movl    -0xd4(%rbp), %esi
    0.00 :   ffffffff817d2ec4:       movq    -0xc0(%rbp), %rax
    0.00 :   ffffffff817d2ecb:       movl    -0xc8(%rbp), %r8d
    0.00 :   ffffffff817d2ed2:       movq    -0xd0(%rbp), %rcx
    0.00 :   ffffffff817d2ed9:       movl    %esi, 0x84(%r14)
    0.00 :   ffffffff817d2ee0:       movq    0xa34ad9(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff817d2ee7:       movq    0x88(%r14), %rsi
    0.00 :   ffffffff817d2eee:       cmpq    %rsi, %rdx
    0.00 :   ffffffff817d2ef1:       je      0xffffffff817d2efa <igb_poll+0xeaa>
    0.00 :   ffffffff817d2ef3:       movq    %rdx, 0x88(%r14)
    0.00 :   ffffffff817d2efa:       movq    -0xb0(%rbp), %rdi
    0.00 :   ffffffff817d2f01:       movq    %rcx, %rdx
    0.00 :   ffffffff817d2f04:       movq    %rax, %rsi
    0.00 :   ffffffff817d2f07:       movl    %r8d, -0xc8(%rbp)
    0.00 :   ffffffff817d2f0e:       callq   0xffffffff817cf270 <igb_xmit_xdp_ring>
    0.00 :   ffffffff817d2f13:       movq    -0x90(%rbp), %rdi
    0.00 :   ffffffff817d2f1a:       movl    $0xffffffff, 0x84(%r14) # imm = 0xFFFFFFFF
    0.00 :   ffffffff817d2f25:       movl    %eax, -0xc0(%rbp)
    0.00 :   ffffffff817d2f2b:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff817d2f30:       movl    -0xc0(%rbp), %eax
    0.00 :   ffffffff817d2f36:       movl    -0xc8(%rbp), %r8d
    0.00 :   ffffffff817d2f3d:       cmpl    $0x1, %eax
    0.00 :   ffffffff817d2f40:       je      0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d2f46:       negl    %eax
    0.00 :   ffffffff817d2f48:       movslq  %eax, %rdx
    0.00 :   ffffffff817d2f4b:       cmpq    $-0x1000, %rdx  # imm = 0xF000
    0.00 :   ffffffff817d2f52:       ja      0xffffffff817d30db <igb_poll+0x108b>
    0.00 :   ffffffff817d2f58:       testl   %eax, %eax
    0.00 :   ffffffff817d2f5a:       je      0xffffffff817d2a76 <igb_poll+0xa26>
    0.00 :   ffffffff817d2f60:       movq    %rdx, %r13
    0.00 :   ffffffff817d2f63:       jmp     0xffffffff817d247b <igb_poll+0x42b>
    0.00 :   ffffffff817d2f68:       movzwl  0x4c(%r15), %r9d
    0.00 :   ffffffff817d2f6d:       movq    0x20(%r15), %r13
    0.00 :   ffffffff817d2f71:       movq    0x28(%r15), %r14
    0.00 :   ffffffff817d2f75:       negl    %r9d
    0.00 :   ffffffff817d2f78:       movl    %r9d, %r12d
    0.00 :   ffffffff817d2f7b:       jmp     0xffffffff817d21b4 <igb_poll+0x164>
    0.00 :   ffffffff817d2f80:       decl    %eax
    0.00 :   ffffffff817d2f82:       subl    %esi, %eax
    0.00 :   ffffffff817d2f84:       jmp     0xffffffff817d2339 <igb_poll+0x2e9>
    0.00 :   ffffffff817d2f89:       movzwl  -0x80(%rbp), %esi
    0.00 :   ffffffff817d2f8d:       movq    %rbx, %rdi
    0.00 :   ffffffff817d2f90:       movq    %r11, -0x90(%rbp)
    0.00 :   ffffffff817d2f97:       callq   0xffffffff817d1e50 <igb_alloc_rx_buffers>
    0.00 :   ffffffff817d2f9c:       movq    -0x90(%rbp), %r11
    0.00 :   ffffffff817d2fa3:       jmp     0xffffffff817d274a <igb_poll+0x6fa>
    0.00 :   ffffffff817d2fa8:       movq    0x10(%r11), %rdi
    0.00 :   ffffffff817d2fac:       movq    -0x68(%rbp), %rsi
    0.00 :   ffffffff817d2fb0:       movl    $0x100, %edx    # imm = 0x100
    0.00 :   ffffffff817d2fb5:       movq    %r11, -0x90(%rbp)
    0.00 :   ffffffff817d2fbc:       callq   0xffffffff819a44c0 <eth_get_headlen>
    0.00 :   ffffffff817d2fc1:       movq    -0x90(%rbp), %r11
    0.00 :   ffffffff817d2fc8:       movl    %eax, %r13d
    0.00 :   ffffffff817d2fcb:       jmp     0xffffffff817d2bce <igb_poll+0xb7e>
    0.00 :   ffffffff817d2fd0:       movq    0x8(%r15), %rsi
    0.00 :   ffffffff817d2fd4:       movzbl  -0xc0(%rbp), %ecx
    0.00 :   ffffffff817d2fdb:       movl    $0x1000, %eax   # imm = 0x1000
    0.00 :   ffffffff817d2fe0:       addl    -0x68(%rbp), %r13d
    0.00 :   ffffffff817d2fe4:       movl    %r14d, %r8d
    0.00 :   ffffffff817d2fe7:       movq    %r11, %rdi
    0.00 :   ffffffff817d2fea:       movq    %rsi, %rdx
    0.00 :   ffffffff817d2fed:       subq    0x94f1f4(%rip), %rdx # 0xffffffff821221e8 <vmemmap_base>
    0.00 :   ffffffff817d2ff4:       andl    $0x1, %ecx
    0.00 :   ffffffff817d2ff7:       shlq    %cl, %rax
    0.00 :   ffffffff817d2ffa:       movl    %r13d, %ecx
    0.00 :   ffffffff817d2ffd:       shrq    %rax
    0.00 :   ffffffff817d3000:       sarq    $0x6, %rdx
    0.00 :   ffffffff817d3004:       movl    %eax, %r9d
    0.00 :   ffffffff817d3007:       movq    %rax, -0xc0(%rbp)
    0.00 :   ffffffff817d300e:       shlq    $0xc, %rdx
    0.00 :   ffffffff817d3012:       addq    0x94f1df(%rip), %rdx # 0xffffffff821221f8 <page_offset_base>
    0.00 :   ffffffff817d3019:       subl    %edx, %ecx
    0.00 :   ffffffff817d301b:       movq    %rsi, %rdx
    0.00 :   ffffffff817d301e:       xorl    %esi, %esi
    0.00 :   ffffffff817d3020:       callq   0xffffffff81933d00 <skb_add_rx_frag>
    0.00 :   ffffffff817d3025:       movq    -0xc0(%rbp), %rax
    0.00 :   ffffffff817d302c:       movq    -0x90(%rbp), %r13
    0.00 :   ffffffff817d3033:       xorl    %eax, 0x10(%r15)
    0.00 :   ffffffff817d3037:       movzwl  0x14(%r15), %eax
    0.00 :   ffffffff817d303c:       jmp     0xffffffff817d24bd <igb_poll+0x46d>
    0.00 :   ffffffff817d3041:       lock
    0.00 :   ffffffff817d3042:       addl    $0xfffe, 0x34(%rcx) # imm = 0xFFFE
    0.00 :   ffffffff817d3049:       movw    $0xffff, 0x14(%r15) # imm = 0xFFFF
    0.00 :   ffffffff817d3050:       jmp     0xffffffff817d24fd <igb_poll+0x4ad>
    0.00 :   ffffffff817d3055:       ud2
    0.00 :   ffffffff817d3057:       incq    0x98(%rbx)
    0.00 :   ffffffff817d305e:       movq    -0xb8(%rbp), %r11
    0.00 :   ffffffff817d3065:       incw    0x14(%r15)
    0.00 :   ffffffff817d306a:       jmp     0xffffffff817d26ae <igb_poll+0x65e>
    0.00 :   ffffffff817d306f:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff817d3073:       testb   $0x10, 0xf5(%rax)
    0.00 :   ffffffff817d307a:       jne     0xffffffff817d2594 <igb_poll+0x544>
    0.00 :   ffffffff817d3080:       movl    $0x2, %esi
    0.00 :   ffffffff817d3085:       movq    %r13, %rdi
    0.00 :   ffffffff817d3088:       callq   0xffffffff8194b6d0 <dev_kfree_skb_any_reason>
    0.00 :   ffffffff817d308d:       xorl    %r13d, %r13d
    0.00 :   ffffffff817d3090:       jmp     0xffffffff817d2695 <igb_poll+0x645>
    0.00 :   ffffffff817d3095:       movl    $0x3c, %r14d
    0.00 :   ffffffff817d309b:       movl    $0x1, %edx
    0.00 :   ffffffff817d30a0:       movq    %r13, %rdi
    0.00 :   ffffffff817d30a3:       subl    %eax, %r14d
    0.00 :   ffffffff817d30a6:       movl    %r14d, %esi
    0.00 :   ffffffff817d30a9:       callq   0xffffffff8193a2f0 <__skb_pad>
    0.00 :   ffffffff817d30ae:       testl   %eax, %eax
    0.00 :   ffffffff817d30b0:       jne     0xffffffff817d308d <igb_poll+0x103d>
    0.00 :   ffffffff817d30b2:       movl    0x74(%r13), %edx
    0.00 :   ffffffff817d30b6:       movl    0xb4(%r13), %eax
    0.00 :   ffffffff817d30bd:       testl   %edx, %edx
    0.00 :   ffffffff817d30bf:       jne     0xffffffff817d3055 <igb_poll+0x1005>
    0.00 :   ffffffff817d30c1:       addl    %r14d, %eax
    0.00 :   ffffffff817d30c4:       movl    %eax, 0xb4(%r13)
    0.00 :   ffffffff817d30cb:       movl    0x70(%r13), %eax
    0.00 :   ffffffff817d30cf:       addl    %r14d, %eax
    0.00 :   ffffffff817d30d2:       movl    %eax, 0x70(%r13)
    0.00 :   ffffffff817d30d6:       jmp     0xffffffff817d25a1 <igb_poll+0x551>
    0.00 :   ffffffff817d30db:       movq    %rdx, %r13
    0.00 :   ffffffff817d30de:       movl    %r13d, %r14d
    0.00 :   ffffffff817d30e1:       negl    %r14d
    0.00 :   ffffffff817d30e4:       testb   $0x6, %r14b
    0.00 :   ffffffff817d30e8:       jne     0xffffffff817d2c97 <igb_poll+0xc47>
    0.00 :   ffffffff817d30ee:       jmp     0xffffffff817d28fb <igb_poll+0x8ab>
    0.00 :   ffffffff817d30f3:       testb   $0x3, 0x274(%rbx)
    0.00 :   ffffffff817d30fa:       je      0xffffffff817d2a3b <igb_poll+0x9eb>
    0.00 :   ffffffff817d3100:       jmp     0xffffffff817d2962 <igb_poll+0x912>
    0.00 :   ffffffff817d3105:       movq    %rbx, %rdi
    0.00 :   ffffffff817d3108:       callq   0xffffffff817c9a40 <igb_irq_enable>
    0.00 :   ffffffff817d310d:       nopl    (%rax)
    0.00 :   ffffffff817d3110:       jmp     0xffffffff817d2767 <igb_poll+0x717>
    0.00 :   ffffffff817d3115:       xorl    %r12d, %r12d
    0.00 :   ffffffff817d3118:       xorl    %eax, %eax
    0.00 :   ffffffff817d311a:       xorl    %edx, %edx
    0.00 :   ffffffff817d311c:       movl    $0x0, -0x88(%rbp)
    0.00 :   ffffffff817d3126:       movl    $0x0, -0xa0(%rbp)
    0.00 :   ffffffff817d3130:       jmp     0xffffffff817d2720 <igb_poll+0x6d0>
    0.00 :   ffffffff817d3135:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d313c:       movl    %r14d, %edx
    0.00 :   ffffffff817d313f:       movq    %rcx, %rsi
    0.00 :   ffffffff817d3142:       movl    %r8d, -0x90(%rbp)
    0.00 :   ffffffff817d3149:       movq    0x200(%rax), %rdi
    0.00 :   ffffffff817d3150:       callq   0xffffffff81980ce0 <bpf_warn_invalid_xdp_action>
    0.00 :   ffffffff817d3155:       movl    -0x90(%rbp), %r8d
    0.00 :   ffffffff817d315c:       jmp     0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d3161:       movl    -0x28(%r11), %eax
    0.00 :   ffffffff817d3165:       xorl    %edx, %edx
    0.00 :   ffffffff817d3167:       divl    %esi
    0.00 :   ffffffff817d3169:       testl   %edi, %edi
    0.00 :   ffffffff817d316b:       movl    %eax, %esi
    0.00 :   ffffffff817d316d:       je      0xffffffff817d29b0 <igb_poll+0x960>
    0.00 :   ffffffff817d3173:       jmp     0xffffffff817d29a3 <igb_poll+0x953>
    0.00 :   ffffffff817d3178:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d317f:       movl    $0x8, %esi
    0.00 :   ffffffff817d3184:       movq    %r11, -0xa0(%rbp)
    0.00 :   ffffffff817d318b:       leaq    0x558(%rax), %rdi
    0.00 :   ffffffff817d3192:       movq    %rdi, -0x80(%rbp)
    0.00 :   ffffffff817d3196:       callq   0xffffffff817c8560 <igb_rd32>
    0.00 :   ffffffff817d319b:       testb   $0x10, %al
    0.00 :   ffffffff817d319d:       movq    -0x80(%rbp), %rdi
    0.00 :   ffffffff817d31a1:       movq    -0xa0(%rbp), %r11
    0.00 :   ffffffff817d31a8:       jne     0xffffffff817d22a3 <igb_poll+0x253>
    0.00 :   ffffffff817d31ae:       movq    (%r15), %r12
    0.00 :   ffffffff817d31b1:       movq    0x8(%r15), %r13
    0.00 :   ffffffff817d31b5:       movzwl  0x66(%r14), %r9d
    0.00 :   ffffffff817d31ba:       movzwl  0x64(%r14), %r15d
    0.00 :   ffffffff817d31bf:       movq    0xa347fa(%rip), %rbx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff817d31c6:       movq    0x38(%r14), %rax
    0.00 :   ffffffff817d31ca:       movl    0xc(%r12), %r10d
    0.00 :   ffffffff817d31cf:       movl    (%rax), %r8d
    0.00 :   ffffffff817d31d2:       movzbl  0x4f(%r14), %eax
    0.00 :   ffffffff817d31d7:       cmpb    $0x3, %al
    0.00 :   ffffffff817d31d9:       movzbl  %al, %esi
    0.00 :   ffffffff817d31dc:       ja      0xffffffff817d33e9 <igb_poll+0x1399>
    0.00 :   ffffffff817d31e2:       shll    $0x8, %esi
    0.00 :   ffffffff817d31e5:       addl    $0x3810, %esi   # imm = 0x3810
    0.00 :   ffffffff817d31eb:       movl    %r8d, -0xa0(%rbp)
    0.00 :   ffffffff817d31f2:       movq    %r11, -0x98(%rbp)
    0.00 :   ffffffff817d31f9:       movl    %r9d, -0x90(%rbp)
    0.00 :   ffffffff817d3200:       movl    %r10d, -0x80(%rbp)
    0.00 :   ffffffff817d3204:       callq   0xffffffff817c8560 <igb_rd32>
    0.00 :   ffffffff817d3209:       movzbl  0x4e(%r14), %edx
    0.00 :   ffffffff817d320e:       movl    -0x80(%rbp), %r10d
    0.00 :   ffffffff817d3212:       movl    %eax, %ecx
    0.00 :   ffffffff817d3214:       movq    0x18(%r14), %rdi
    0.00 :   ffffffff817d3218:       movl    -0x90(%rbp), %r9d
    0.00 :   ffffffff817d321f:       movq    $-0x7df14590, %rsi # imm = 0x820EBA70
    0.00 :   ffffffff817d3226:       movl    -0xa0(%rbp), %r8d
    0.00 :   ffffffff817d322d:       movq    %rbx, 0x18(%rsp)
    0.00 :   ffffffff817d3232:       movl    %r10d, 0x20(%rsp)
    0.00 :   ffffffff817d3237:       movq    %r12, 0x10(%rsp)
    0.00 :   ffffffff817d323c:       movq    %r13, 0x8(%rsp)
    0.00 :   ffffffff817d3241:       movl    %r15d, (%rsp)
    0.00 :   ffffffff817d3245:       callq   0xffffffff81757340 <_dev_err>
    0.00 :   ffffffff817d324a:       movzbl  0x4e(%r14), %eax
    0.00 :   ffffffff817d324f:       movq    0x8(%r14), %rdx
    0.00 :   ffffffff817d3253:       leaq    (%rax,%rax,4), %rax
    0.00 :   ffffffff817d3257:       shlq    $0x6, %rax
    0.00 :   ffffffff817d325b:       addq    0x380(%rdx), %rax
    0.00 :   ffffffff817d3262:       lock
    0.00 :   ffffffff817d3263:       orb     $0x1, 0x90(%rax)
    0.00 :   ffffffff817d326a:       movq    -0x98(%rbp), %r11
    0.00 :   ffffffff817d3271:       movq    -0x30(%r11), %rbx
    0.00 :   ffffffff817d3275:       testq   %rbx, %rbx
    0.00 :   ffffffff817d3278:       jne     0xffffffff817d22cf <igb_poll+0x27f>
    0.00 :   ffffffff817d327e:       jmp     0xffffffff817d2926 <igb_poll+0x8d6>
    0.00 :   ffffffff817d3283:       leaq    -0x68(%rbp), %rdi
    0.00 :   ffffffff817d3287:       movl    %r8d, -0x90(%rbp)
    0.00 :   ffffffff817d328e:       callq   0xffffffff8198ee60 <xdp_convert_zc_to_xdp_frame>
    0.00 :   ffffffff817d3293:       movl    -0x90(%rbp), %r8d
    0.00 :   ffffffff817d329a:       movq    %rax, %rcx
    0.00 :   ffffffff817d329d:       jmp     0xffffffff817d2e22 <igb_poll+0xdd2>
    0.00 :   ffffffff817d32a2:       movq    0x8(%r14), %rax
    0.00 :   ffffffff817d32a6:       movq    0x38(%rax), %rax
    0.00 :   ffffffff817d32aa:       testb   $0x4, %al
    0.00 :   ffffffff817d32ac:       jne     0xffffffff817d22b1 <igb_poll+0x261>
    0.00 :   ffffffff817d32b2:       movzwl  0x64(%r14), %eax
    0.00 :   ffffffff817d32b7:       movzwl  0x66(%r14), %edx
    0.00 :   ffffffff817d32bc:       cmpw    %ax, %dx
    0.00 :   ffffffff817d32bf:       jb      0xffffffff817d3485 <igb_poll+0x1435>
    0.00 :   ffffffff817d32c5:       movzwl  0x4c(%r14), %ecx
    0.00 :   ffffffff817d32ca:       leal    -0x1(%rax,%rcx), %eax
    0.00 :   ffffffff817d32ce:       subl    %edx, %eax
    0.00 :   ffffffff817d32d0:       cmpl    $0x29, %eax
    0.00 :   ffffffff817d32d3:       jle     0xffffffff817d22b1 <igb_poll+0x261>
    0.00 :   ffffffff817d32d9:       lock
    0.00 :   ffffffff817d32da:       addl    $0x0, -0x4(%rsp)
    0.00 :   ffffffff817d32df:       movzbl  0x4e(%r14), %edi
    0.00 :   ffffffff817d32e4:       movq    0x8(%r14), %rax
    0.00 :   ffffffff817d32e8:       imulq   $0x140, %rdi, %rdi # imm = 0x140
    0.00 :   ffffffff817d32ef:       addq    0x380(%rax), %rdi
    0.00 :   ffffffff817d32f6:       movq    0x90(%rdi), %rax
    0.00 :   ffffffff817d32fd:       testb   $0x1, %al
    0.00 :   ffffffff817d32ff:       je      0xffffffff817d22b1 <igb_poll+0x261>
    0.00 :   ffffffff817d3305:       movq    -0xb0(%rbp), %rax
    0.00 :   ffffffff817d330c:       movq    0x210(%rax), %rax
    0.00 :   ffffffff817d3313:       testb   $0x4, %al
    0.00 :   ffffffff817d3315:       jne     0xffffffff817d22b1 <igb_poll+0x261>
    0.00 :   ffffffff817d331b:       movq    %r11, -0x80(%rbp)
    0.00 :   ffffffff817d331f:       callq   0xffffffff8194b3d0 <netif_tx_wake_queue>
    0.00 :   ffffffff817d3324:       incq    0x80(%r14)
    0.00 :   ffffffff817d332b:       movq    -0x80(%rbp), %r11
    0.00 :   ffffffff817d332f:       jmp     0xffffffff817d22b1 <igb_poll+0x261>
    0.00 :   ffffffff817d3334:       movl    %eax, %edx
    0.00 :   ffffffff817d3336:       shrl    $0x1f, %edx
    0.00 :   ffffffff817d3339:       addl    %eax, %edx
    0.00 :   ffffffff817d333b:       sarl    %edx
    0.00 :   ffffffff817d333d:       jmp     0xffffffff817d29e6 <igb_poll+0x996>
    0.00 :   ffffffff817d3342:       movq    0x30(%rbx), %rax
    0.00 :   ffffffff817d3346:       testb   $0x4, %al
    0.00 :   ffffffff817d3348:       jne     0xffffffff817d260b <igb_poll+0x5bb>
    0.00 :   ffffffff817d334e:       jmp     0xffffffff817d2d8b <igb_poll+0xd3b>
    0.00 :   ffffffff817d3353:       cmpw    $0x3e8, %ax     # imm = 0x3E8
    0.00 :   ffffffff817d3357:       movzwl  %r14w, %r15d
    0.00 :   ffffffff817d335b:       je      0xffffffff817d33f7 <igb_poll+0x13a7>
    0.00 :   ffffffff817d3361:       movl    $0x3d4, %esi    # imm = 0x3D4
    0.00 :   ffffffff817d3366:       cmpl    %esi, %r15d
    0.00 :   ffffffff817d3369:       je      0xffffffff817d2a3b <igb_poll+0x9eb>
    0.00 :   ffffffff817d336f:       jae     0xffffffff817d338c <igb_poll+0x133c>
    0.00 :   ffffffff817d3371:       movl    %r15d, %eax
    0.00 :   ffffffff817d3374:       movl    %r14d, %ecx
    0.00 :   ffffffff817d3377:       xorl    %edx, %edx
    0.00 :   ffffffff817d3379:       imull   %esi, %eax
    0.00 :   ffffffff817d337c:       shrw    $0x2, %cx
    0.00 :   ffffffff817d3380:       movzwl  %cx, %ecx
    0.00 :   ffffffff817d3383:       addl    %esi, %ecx
    0.00 :   ffffffff817d3385:       divl    %ecx
    0.00 :   ffffffff817d3387:       cmpl    %eax, %esi
    0.00 :   ffffffff817d3389:       cmovbl  %eax, %esi
    0.00 :   ffffffff817d338c:       movw    %si, -0x40(%r11)
    0.00 :   ffffffff817d3391:       movb    $0x1, -0x3e(%r11)
    0.00 :   ffffffff817d3396:       jmp     0xffffffff817d2a3b <igb_poll+0x9eb>
    0.00 :   ffffffff817d339b:       movq    -0x48(%rbp), %rax
    0.00 :   ffffffff817d339f:       movq    %rcx, -0xc0(%rbp)
    0.00 :   ffffffff817d33a6:       movq    (%rax), %rdx
    0.00 :   ffffffff817d33a9:       testb   $0x8, 0xc1(%rdx)
    0.00 :   ffffffff817d33b0:       je      0xffffffff817d2daa <igb_poll+0xd5a>
    0.00 :   ffffffff817d33b6:       testb   $0x4, 0xc8(%rdx)
    0.00 :   ffffffff817d33bd:       je      0xffffffff817d2daa <igb_poll+0xd5a>
    0.00 :   ffffffff817d33c3:       leaq    -0x68(%rbp), %rdi
    0.00 :   ffffffff817d33c7:       movl    %r8d, -0x90(%rbp)
    0.00 :   ffffffff817d33ce:       callq   0xffffffff8197dd50 <xdp_master_redirect>
    0.00 :   ffffffff817d33d3:       movq    -0xc0(%rbp), %rcx
    0.00 :   ffffffff817d33da:       movl    -0x90(%rbp), %r8d
    0.00 :   ffffffff817d33e1:       movl    %eax, %r14d
    0.00 :   ffffffff817d33e4:       jmp     0xffffffff817d28e4 <igb_poll+0x894>
    0.00 :   ffffffff817d33e9:       shll    $0x6, %esi
    0.00 :   ffffffff817d33ec:       addl    $0xe010, %esi   # imm = 0xE010
    0.00 :   ffffffff817d33f2:       jmp     0xffffffff817d31eb <igb_poll+0x119b>
    0.00 :   ffffffff817d33f7:       leaq    -0x18(%r11), %rdi
    0.00 :   ffffffff817d33fb:       movq    %r11, -0x80(%rbp)
    0.00 :   ffffffff817d33ff:       callq   0xffffffff817c6ff0 <igb_update_itr.constprop.0>
    0.00 :   ffffffff817d3404:       movq    -0x80(%rbp), %r11
    0.00 :   ffffffff817d3408:       leaq    -0x30(%r11), %rdi
    0.00 :   ffffffff817d340c:       callq   0xffffffff817c6ff0 <igb_update_itr.constprop.0>
    0.00 :   ffffffff817d3411:       movq    -0x80(%rbp), %r11
    0.00 :   ffffffff817d3415:       movzbl  -0x1d(%r11), %eax
    0.00 :   ffffffff817d341a:       movzbl  -0x5(%r11), %edx
    0.00 :   ffffffff817d341f:       cmpb    %dl, %al
    0.00 :   ffffffff817d3421:       cmovbl  %edx, %eax
    0.00 :   ffffffff817d3424:       testb   %al, %al
    0.00 :   ffffffff817d3426:       jne     0xffffffff817d348e <igb_poll+0x143e>
    0.00 :   ffffffff817d3428:       testq   %r13, %r13
    0.00 :   ffffffff817d342b:       je      0xffffffff817d34a5 <igb_poll+0x1455>
    0.00 :   ffffffff817d342d:       cmpl    $0x3, 0x270(%rbx)
    0.00 :   ffffffff817d3434:       movl    $0x38, %esi
    0.00 :   ffffffff817d3439:       movl    $0xc4, %eax
    0.00 :   ffffffff817d343e:       cmovel  %eax, %esi
    0.00 :   ffffffff817d3441:       jmp     0xffffffff817d3366 <igb_poll+0x1316>
    0.00 :   ffffffff817d3446:       cmpl    $0x3, 0x274(%rbx)
    0.00 :   ffffffff817d344d:       movl    $0xc4, %eax
    0.00 :   ffffffff817d3452:       cmovel  %eax, %edx
    0.00 :   ffffffff817d3455:       jmp     0xffffffff817d2a0d <igb_poll+0x9bd>
    0.00 :   ffffffff817d345a:       movl    $0x116, %edx    # imm = 0x116
    0.00 :   ffffffff817d345f:       movq    $-0x7e155760, %rsi # imm = 0x81EAA8A0
    0.00 :   ffffffff817d3466:       movq    $-0x7df6b590, %rdi # imm = 0x82094A70
    0.00 :   ffffffff817d346d:       movl    %r8d, -0x90(%rbp)
    0.00 :   ffffffff817d3474:       callq   0xffffffff8198eaa0 <xdp_warn>
    0.00 :   ffffffff817d3479:       movl    -0x90(%rbp), %r8d
    0.00 :   ffffffff817d3480:       jmp     0xffffffff817d28f4 <igb_poll+0x8a4>
    0.00 :   ffffffff817d3485:       decl    %eax
    0.00 :   ffffffff817d3487:       subl    %edx, %eax
    0.00 :   ffffffff817d3489:       jmp     0xffffffff817d32d0 <igb_poll+0x1280>
    0.00 :   ffffffff817d348e:       cmpb    $0x1, %al
    0.00 :   ffffffff817d3490:       je      0xffffffff817d34be <igb_poll+0x146e>
    0.00 :   ffffffff817d3492:       cmpb    $0x2, %al
    0.00 :   ffffffff817d3494:       je      0xffffffff817d3361 <igb_poll+0x1311>
    0.00 :   ffffffff817d349a:       nopw    (%rax,%rax)
    0.00 :   ffffffff817d34a0:       jmp     0xffffffff817d2a3b <igb_poll+0x9eb>
    0.00 :   ffffffff817d34a5:       cmpl    $0x3, 0x274(%rbx)
    0.00 :   ffffffff817d34ac:       movl    $0x38, %esi
    0.00 :   ffffffff817d34b1:       movl    $0xc4, %eax
    0.00 :   ffffffff817d34b6:       cmovel  %eax, %esi
    0.00 :   ffffffff817d34b9:       jmp     0xffffffff817d3366 <igb_poll+0x1316>
    0.00 :   ffffffff817d34be:       movl    $0xc4, %esi
    0.00 :   ffffffff817d34c3:       jmp     0xffffffff817d3366 <igb_poll+0x1316>
    0.00 :   ffffffff817d34c8:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000078050 <vscanf>:
    0.00 :   78120:          pushq   %rbx
    0.00 :   78121:          movq    %rsi, %rax
    0.00 :   78124:          movq    %rdx, %rsi
    0.00 :   78127:          subq    $0xc0, %rsp
    0.00 :   7812e:          movq    %rcx, %rdx
    0.00 :   78131:          movl    %r8d, %ecx
    0.00 :   78134:          movq    %fs:0x28, %r8
    0.00 :   7813d:          movq    %r8, 0xb8(%rsp)
    0.00 :   78145:          xorl    %r8d, %r8d
    0.00 :   78148:          movq    %rdi, 0x8(%rsp)
    0.00 :   7814d:          leaq    (%rdi,%rax), %r8
    0.00 :   78151:          movq    $0x0, 0x28(%rsp)
    0.00 :   7815a:          movq    %r8, 0x20(%rsp)
    0.00 :   7815f:          movl    $0x2, 0x30(%rsp)
    0.00 :   78167:          vmovq   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
    0.00 :   7816d:          vpunpcklqdq     %xmm1, %xmm1, %xmm0 # xmm0 = xmm1[0,0]
    0.00 :   78171:          vmovdqa %xmm0, 0x10(%rsp)
    0.00 :   78177:          testq   %rax, %rax
    0.00 :   7817a:          je      0x7817f <vscanf+0x12f>
    0.00 :   7817c:          movb    $0x0, (%rdi)
    0.00 :   7817f:          leaq    0x10(%rsp), %rbx
    0.00 :   78184:          movq    %rbx, %rdi
  100.00 :   78187:          callq   0x56640 <vfprintf+0x20c0>
    0.00 :   7818c:          movq    0x18(%rsp), %rax
    0.00 :   78191:          cmpq    0x20(%rsp), %rax
    0.00 :   78196:          jae     0x781c0 <vscanf+0x170>
    0.00 :   78198:          movb    $0x0, (%rax)
    0.00 :   7819b:          movq    %rbx, %rdi
    0.00 :   7819e:          callq   0x4e900 <parse_printf_format+0x3b0>
    0.00 :   781a3:          movq    0xb8(%rsp), %rdx
    0.00 :   781ab:          subq    %fs:0x28, %rdx
    0.00 :   781b4:          jne     0x781cd <vscanf+0x17d>
    0.00 :   781b6:          addq    $0xc0, %rsp
    0.00 :   781bd:          popq    %rbx
    0.00 :   781be:          retq
    0.00 :   781bf:          nop
    0.00 :   781c0:          cmpq    %rax, 0x10(%rsp)
    0.00 :   781c5:          jae     0x7819b <vscanf+0x14b>
    0.00 :   781c7:          movb    $0x0, -0x1(%rax)
    0.00 :   781cb:          jmp     0x7819b <vscanf+0x14b>
    0.00 :   781cd:          callq   0x111090 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8105b9a0 <native_flush_tlb_one_user>:
         : 5                ; native_flush_tlb_one_user():
    0.00 :   ffffffff8105b9a0:       pushq   %rbp
    0.00 :   ffffffff8105b9a1:       movq    %rsp, %rbp
    0.00 :   ffffffff8105b9a4:       andq    $-0x10, %rsp
    0.00 :   ffffffff8105b9a8:       subq    $0x20, %rsp
    0.00 :   ffffffff8105b9ac:       movq    %gs:0x28, %rax
    0.00 :   ffffffff8105b9b5:       movq    %rax, 0x18(%rsp)
    0.00 :   ffffffff8105b9ba:       xorl    %eax, %eax
    0.00 :   ffffffff8105b9bc:       movw    %gs:0x7efc6e0c(%rip), %ax
  100.00 :   ffffffff8105b9c4:       invlpg  (%rdi)
    0.00 :   ffffffff8105b9c7:       jmp     0xffffffff8241ed3d <init_per_cpu__gdt_page+0x8cd3d>
    0.00 :   ffffffff8105b9cc:       movq    %gs:0x7efba004(%rip), %rdx
    0.00 :   ffffffff8105b9d4:       btq     $0x27, %rdx
    0.00 :   ffffffff8105b9d9:       jae     0xffffffff8105ba10 <native_flush_tlb_one_user+0x70>
    0.00 :   ffffffff8105b9db:       incl    %eax
    0.00 :   ffffffff8105b9dd:       movq    %rdi, 0x8(%rsp)
    0.00 :   ffffffff8105b9e2:       orb     $0x8, %ah
    0.00 :   ffffffff8105b9e5:       movzwl  %ax, %eax
    0.00 :   ffffffff8105b9e8:       movq    %rax, (%rsp)
    0.00 :   ffffffff8105b9ec:       xorl    %eax, %eax
    0.00 :   ffffffff8105b9ee:       invpcid (%rsp), %rax
    0.00 :   ffffffff8105b9f4:       movq    0x18(%rsp), %rax
    0.00 :   ffffffff8105b9f9:       subq    %gs:0x28, %rax
    0.00 :   ffffffff8105ba02:       jne     0xffffffff8105ba1a <native_flush_tlb_one_user+0x7a>
    0.00 :   ffffffff8105ba04:       leave
    0.00 :   ffffffff8105ba05:       xorl    %eax, %eax
    0.00 :   ffffffff8105ba07:       xorl    %edx, %edx
    0.00 :   ffffffff8105ba09:       xorl    %edi, %edi
    0.00 :   ffffffff8105ba0b:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8105ba10:       movzwl  %ax, %edi
    0.00 :   ffffffff8105ba13:       callq   0xffffffff8105b960 <invalidate_user_asid>
    0.00 :   ffffffff8105ba18:       jmp     0xffffffff8105b9f4 <native_flush_tlb_one_user+0x54>
    0.00 :   ffffffff8105ba1a:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81a0c430 <tcp_ack>:
         : 5                ; tcp_ack():
    0.00 :   ffffffff81a0c430:       pushq   %rbp
    0.00 :   ffffffff81a0c431:       movq    %rsp, %rbp
    0.00 :   ffffffff81a0c434:       pushq   %r15
    0.00 :   ffffffff81a0c436:       pushq   %r14
    0.00 :   ffffffff81a0c438:       pushq   %r13
    0.00 :   ffffffff81a0c43a:       movq    %rsi, %r13
    0.00 :   ffffffff81a0c43d:       pushq   %r12
    0.00 :   ffffffff81a0c43f:       pushq   %rbx
    0.00 :   ffffffff81a0c440:       movq    %rdi, %rbx
    0.00 :   ffffffff81a0c443:       subq    $0xe0, %rsp
    0.00 :   ffffffff81a0c44a:       movl    %edx, -0xb4(%rbp)
    0.00 :   ffffffff81a0c450:       movq    %gs:0x28, %rax
    0.00 :   ffffffff81a0c459:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff81a0c45d:       xorl    %eax, %eax
    0.00 :   ffffffff81a0c45f:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff81a0c464:       leaq    -0x78(%rbp), %rdi
    0.00 :   ffffffff81a0c468:       movl    $0x9, %ecx
    0.00 :   ffffffff81a0c46d:       movl    0x38(%rsi), %r14d
    0.00 :   ffffffff81a0c471:       movl    0x28(%rsi), %r15d
    0.00 :   ffffffff81a0c475:       movl    0x67c(%rbx), %r12d
    0.00 :   ffffffff81a0c47c:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff81a0c47f:       movzbl  0x62c(%rbx), %eax
    0.00 :   ffffffff81a0c486:       movl    0x5ac(%rbx), %edi
    0.00 :   ffffffff81a0c48c:       movq    $0x0, -0xa0(%rbp)
    0.00 :   ffffffff81a0c497:       movq    $0x0, -0x98(%rbp)
    0.00 :   ffffffff81a0c4a2:       movq    $0x0, -0x90(%rbp)
    0.00 :   ffffffff81a0c4ad:       movq    $0x0, -0x88(%rbp)
    0.00 :   ffffffff81a0c4b8:       movl    %edi, -0xb8(%rbp)
    0.00 :   ffffffff81a0c4be:       movl    $0x0, -0xb0(%rbp)
    0.00 :   ffffffff81a0c4c8:       shrb    $0x5, %al
    0.00 :   ffffffff81a0c4cb:       andl    $0x1, %eax
    0.00 :   ffffffff81a0c4ce:       movb    %al, -0xc5(%rbp)
    0.00 :   ffffffff81a0c4d4:       movl    0x6d8(%rbx), %eax
    0.00 :   ffffffff81a0c4da:       movl    %eax, -0xc4(%rbp)
    0.00 :   ffffffff81a0c4e0:       movl    0x6e0(%rbx), %eax
    0.00 :   ffffffff81a0c4e6:       movl    %eax, -0xcc(%rbp)
    0.00 :   ffffffff81a0c4ec:       leaq    -0x78(%rbp), %rax
    0.00 :   ffffffff81a0c4f0:       movq    %rax, -0x80(%rbp)
    0.00 :   ffffffff81a0c4f4:       movq    0x160(%rbx), %rax
    0.00 :   ffffffff81a0c4fb:       prefetcht0      (%rax)
    0.00 :   ffffffff81a0c4fe:       movl    %r14d, %eax
    0.00 :   ffffffff81a0c501:       subl    %edi, %eax
    0.00 :   ffffffff81a0c503:       js      0xffffffff81a0c820 <tcp_ack+0x3f0>
    0.00 :   ffffffff81a0c509:       movl    0x58c(%rbx), %eax
    0.00 :   ffffffff81a0c50f:       cmpl    %r14d, %eax
    0.00 :   ffffffff81a0c512:       movl    %eax, -0xd0(%rbp)
    0.00 :   ffffffff81a0c518:       js      0xffffffff81a0d903 <tcp_ack+0x14d3>
    0.00 :   ffffffff81a0c51e:       cmpl    %r14d, -0xb8(%rbp)
    0.00 :   ffffffff81a0c525:       movl    -0xb4(%rbp), %edx
    0.00 :   ffffffff81a0c52b:       js      0xffffffff81a0c6a6 <tcp_ack+0x276>
    0.00 :   ffffffff81a0c531:       movzbl  0x6ac(%rbx), %ecx
    0.00 :   ffffffff81a0c538:       movl    0x714(%rbx), %esi
    0.00 :   ffffffff81a0c53e:       testb   $0x70, %cl
    0.00 :   ffffffff81a0c541:       je      0xffffffff81a0c6bb <tcp_ack+0x28b>
    0.00 :   ffffffff81a0c547:       testl   %esi, %esi
    0.00 :   ffffffff81a0c549:       je      0xffffffff81a0c6bb <tcp_ack+0x28b>
    0.00 :   ffffffff81a0c54f:       movq    0x800(%rbx), %rax
    0.00 :   ffffffff81a0c556:       testq   %rax, %rax
    0.00 :   ffffffff81a0c559:       je      0xffffffff81a0c564 <tcp_ack+0x134>
    0.00 :   ffffffff81a0c55b:       movl    0x28(%rax), %eax
    0.00 :   ffffffff81a0c55e:       movl    %eax, -0xd0(%rbp)
    0.00 :   ffffffff81a0c564:       movl    0x680(%rbx), %eax
    0.00 :   ffffffff81a0c56a:       addl    %r12d, %eax
    0.00 :   ffffffff81a0c56d:       subl    %esi, %eax
    0.00 :   ffffffff81a0c56f:       subl    0x710(%rbx), %eax
    0.00 :   ffffffff81a0c575:       testb   $0x40, %dh
    0.00 :   ffffffff81a0c578:       movl    %eax, -0x40(%rbp)
    0.00 :   ffffffff81a0c57b:       jne     0xffffffff81a0cecd <tcp_ack+0xa9d>
    0.00 :   ffffffff81a0c581:       movl    %edx, %eax
    0.00 :   ffffffff81a0c583:       andl    $0x500, %eax    # imm = 0x500
    0.00 :   ffffffff81a0c588:       cmpl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff81a0c58d:       je      0xffffffff81a0ce65 <tcp_ack+0xa35>
    0.00 :   ffffffff81a0c593:       cmpl    0x2c(%r13), %r15d
    0.00 :   ffffffff81a0c597:       je      0xffffffff81a0cf54 <tcp_ack+0xb24>
    0.00 :   ffffffff81a0c59d:       orl     $0x1, %edx
    0.00 :   ffffffff81a0c5a0:       movl    %edx, -0xbc(%rbp)
    0.00 :   ffffffff81a0c5a6:       movl    %edx, -0xb4(%rbp)
    0.00 :   ffffffff81a0c5ac:       movzwl  0xae(%r13), %edx
    0.00 :   ffffffff81a0c5b4:       addq    0xc0(%r13), %rdx
    0.00 :   ffffffff81a0c5bb:       movzwl  0xe(%rdx), %eax
    0.00 :   ffffffff81a0c5bf:       rolw    $0x8, %ax
    0.00 :   ffffffff81a0c5c3:       testb   $0x2, 0xd(%rdx)
    0.00 :   ffffffff81a0c5c7:       movzwl  %ax, %eax
    0.00 :   ffffffff81a0c5ca:       jne     0xffffffff81a0c5d8 <tcp_ack+0x1a8>
    0.00 :   ffffffff81a0c5cc:       movzbl  0x6ad(%rbx), %ecx
    0.00 :   ffffffff81a0c5d3:       andl    $0xf, %ecx
    0.00 :   ffffffff81a0c5d6:       shll    %cl, %eax
    0.00 :   ffffffff81a0c5d8:       movl    0x5ac(%rbx), %edx
    0.00 :   ffffffff81a0c5de:       cmpl    %r14d, %edx
    0.00 :   ffffffff81a0c5e1:       js      0xffffffff81a0c6cc <tcp_ack+0x29c>
    0.00 :   ffffffff81a0c5e7:       movl    0x5e8(%rbx), %ecx
    0.00 :   ffffffff81a0c5ed:       cmpl    %r15d, %ecx
    0.00 :   ffffffff81a0c5f0:       js      0xffffffff81a0c6cc <tcp_ack+0x29c>
    0.00 :   ffffffff81a0c5f6:       cmpl    %ecx, %r15d
    0.00 :   ffffffff81a0c5f9:       jne     0xffffffff81a0c6e6 <tcp_ack+0x2b6>
    0.00 :   ffffffff81a0c5ff:       cmpl    %eax, 0x5ec(%rbx)
    0.00 :   ffffffff81a0c605:       jae     0xffffffff81a0c6e6 <tcp_ack+0x2b6>
    0.00 :   ffffffff81a0c60b:       movq    0x7a8(%rbx), %rdx
    0.00 :   ffffffff81a0c612:       movl    %eax, 0x5ec(%rbx)
    0.00 :   ffffffff81a0c618:       movl    $0x0, 0x56c(%rbx)
    0.00 :   ffffffff81a0c622:       testq   %rdx, %rdx
    0.00 :   ffffffff81a0c625:       je      0xffffffff81a0d4f6 <tcp_ack+0x10c6>
    0.00 :   ffffffff81a0c62b:       movl    0x58c(%rbx), %edi
    0.00 :   ffffffff81a0c631:       cmpl    %edi, 0x704(%rbx)
    0.00 :   ffffffff81a0c637:       je      0xffffffff81a0c68b <tcp_ack+0x25b>
    0.00 :   ffffffff81a0c639:       movq    0x30(%rbx), %rdx
    0.00 :   ffffffff81a0c63d:       movzbl  0x456(%rdx), %edx
    0.00 :   ffffffff81a0c644:       testb   %dl, %dl
    0.00 :   ffffffff81a0c646:       je      0xffffffff81a0c68b <tcp_ack+0x25b>
    0.00 :   ffffffff81a0c648:       movl    0x67c(%rbx), %r11d
    0.00 :   ffffffff81a0c64f:       testl   %r11d, %r11d
    0.00 :   ffffffff81a0c652:       jne     0xffffffff81a0c68b <tcp_ack+0x25b>
    0.00 :   ffffffff81a0c654:       movq    0x498(%rbx), %rdx
    0.00 :   ffffffff81a0c65b:       cmpq    $0x0, 0x38(%rdx)
    0.00 :   ffffffff81a0c660:       jne     0xffffffff81a0c68b <tcp_ack+0x25b>
    0.00 :   ffffffff81a0c662:       movq    0x7fb357(%rip), %rsi # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81a0c669:       subl    0x5b8(%rbx), %esi
    0.00 :   ffffffff81a0c66f:       cmpl    %esi, 0x488(%rbx)
    0.00 :   ffffffff81a0c675:       jae     0xffffffff81a0c68b <tcp_ack+0x25b>
    0.00 :   ffffffff81a0c677:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0c67a:       movl    %eax, -0xc0(%rbp)
    0.00 :   ffffffff81a0c680:       callq   0xffffffff81a12930 <tcp_cwnd_restart>
    0.00 :   ffffffff81a0c685:       movl    -0xc0(%rbp), %eax
    0.00 :   ffffffff81a0c68b:       orl     $0x2, -0xbc(%rbp)
    0.00 :   ffffffff81a0c692:       cmpl    %eax, 0x5f0(%rbx)
    0.00 :   ffffffff81a0c698:       jb      0xffffffff81a0d4dd <tcp_ack+0x10ad>
    0.00 :   ffffffff81a0c69e:       movl    0x5ac(%rbx), %edx
    0.00 :   ffffffff81a0c6a4:       jmp     0xffffffff81a0c6e6 <tcp_ack+0x2b6>
    0.00 :   ffffffff81a0c6a6:       orb     $0x4, %dh
    0.00 :   ffffffff81a0c6a9:       movb    $0x0, 0x4c9(%rbx)
    0.00 :   ffffffff81a0c6b0:       movl    %edx, -0xb4(%rbp)
    0.00 :   ffffffff81a0c6b6:       jmp     0xffffffff81a0c531 <tcp_ack+0x101>
    0.00 :   ffffffff81a0c6bb:       movl    -0xb8(%rbp), %eax
    0.00 :   ffffffff81a0c6c1:       movl    %eax, -0xd0(%rbp)
    0.00 :   ffffffff81a0c6c7:       jmp     0xffffffff81a0c564 <tcp_ack+0x134>
    0.00 :   ffffffff81a0c6cc:       cmpl    %eax, 0x5ec(%rbx)
    0.00 :   ffffffff81a0c6d2:       movl    %r15d, 0x5e8(%rbx)
    0.00 :   ffffffff81a0c6d9:       jne     0xffffffff81a0c60b <tcp_ack+0x1db>
    0.00 :   ffffffff81a0c6df:       orl     $0x2, -0xbc(%rbp)
    0.00 :   ffffffff81a0c6e6:       movl    %r14d, %eax
    0.00 :   ffffffff81a0c6e9:       movl    %r14d, 0x5ac(%rbx)
    0.00 :   ffffffff81a0c6f0:       subl    %edx, %eax
    0.00 :   ffffffff81a0c6f2:       addq    %rax, 0x5a0(%rbx)
    0.00 :   ffffffff81a0c6f9:       movl    -0xbc(%rbp), %eax
    0.00 :   ffffffff81a0c6ff:       cmpb    $0x0, 0x35(%r13)
    0.00 :   ffffffff81a0c704:       movl    %eax, -0xb4(%rbp)
    0.00 :   ffffffff81a0c70a:       jne     0xffffffff81a0cf8b <tcp_ack+0xb5b>
    0.00 :   ffffffff81a0c710:       movzwl  0xae(%r13), %eax
    0.00 :   ffffffff81a0c718:       movq    0xc0(%r13), %rdx
    0.00 :   ffffffff81a0c71f:       movl    $0x1, %esi
    0.00 :   ffffffff81a0c724:       movzbl  0xd(%rdx,%rax), %eax
    0.00 :   ffffffff81a0c729:       andl    $0x42, %eax
    0.00 :   ffffffff81a0c72c:       cmpb    $0x40, %al
    0.00 :   ffffffff81a0c72e:       je      0xffffffff81a0cf2a <tcp_ack+0xafa>
    0.00 :   ffffffff81a0c734:       movl    -0x8c(%rbp), %eax
    0.00 :   ffffffff81a0c73a:       testl   %eax, %eax
    0.00 :   ffffffff81a0c73c:       je      0xffffffff81a0c753 <tcp_ack+0x323>
    0.00 :   ffffffff81a0c73e:       addl    %eax, 0x6d8(%rbx)
    0.00 :   ffffffff81a0c744:       testb   $0x40, -0xbc(%rbp)
    0.00 :   ffffffff81a0c74b:       je      0xffffffff81a0c753 <tcp_ack+0x323>
    0.00 :   ffffffff81a0c74d:       addl    %eax, 0x6dc(%rbx)
    0.00 :   ffffffff81a0c753:       movl    %esi, %eax
    0.00 :   ffffffff81a0c755:       orl     $0x2, %eax
    0.00 :   ffffffff81a0c758:       testb   $0x2, -0xbc(%rbp)
    0.00 :   ffffffff81a0c75f:       cmovnel %eax, %esi
    0.00 :   ffffffff81a0c762:       movq    0x498(%rbx), %rax
    0.00 :   ffffffff81a0c769:       movq    0x20(%rax), %rax
    0.00 :   ffffffff81a0c76d:       testq   %rax, %rax
    0.00 :   ffffffff81a0c770:       je      0xffffffff81a0c77a <tcp_ack+0x34a>
    0.00 :   ffffffff81a0c772:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0c775:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81a0c77a:       movzwl  0xae(%r13), %eax
    0.00 :   ffffffff81a0c782:       movq    0xc0(%r13), %rdx
    0.00 :   ffffffff81a0c789:       cmpb    $0x0, 0xd(%rdx,%rax)
    0.00 :   ffffffff81a0c78e:       js      0xffffffff81a0cca1 <tcp_ack+0x871>
    0.00 :   ffffffff81a0c794:       movl    $0x0, 0x224(%rbx)
    0.00 :   ffffffff81a0c79e:       movq    0x7fb21b(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81a0c7a5:       testl   %r12d, %r12d
    0.00 :   ffffffff81a0c7a8:       movb    $0x0, 0x4cd(%rbx)
    0.00 :   ffffffff81a0c7af:       movl    %eax, 0x5b4(%rbx)
    0.00 :   ffffffff81a0c7b5:       jne     0xffffffff81a0c8d2 <tcp_ack+0x4a2>
    0.00 :   ffffffff81a0c7bb:       testl   $0x800, -0xbc(%rbp) # imm = 0x800
    0.00 :   ffffffff81a0c7c5:       jne     0xffffffff81a0d2d6 <tcp_ack+0xea6>
    0.00 :   ffffffff81a0c7cb:       movq    0x168(%rbx), %rax
    0.00 :   ffffffff81a0c7d2:       leaq    0x168(%rbx), %rdx
    0.00 :   ffffffff81a0c7d9:       cmpq    %rdx, %rax
    0.00 :   ffffffff81a0c7dc:       je      0xffffffff81a0c80b <tcp_ack+0x3db>
    0.00 :   ffffffff81a0c7de:       testq   %rax, %rax
    0.00 :   ffffffff81a0c7e1:       je      0xffffffff81a0c80b <tcp_ack+0x3db>
    0.00 :   ffffffff81a0c7e3:       movl    0x5ec(%rbx), %edx
    0.00 :   ffffffff81a0c7e9:       addl    0x5ac(%rbx), %edx
    0.00 :   ffffffff81a0c7ef:       cmpl    0x2c(%rax), %edx
    0.00 :   ffffffff81a0c7f2:       js      0xffffffff81a0d3ac <tcp_ack+0xf7c>
    0.00 :   ffffffff81a0c7f8:       movl    $0x0, 0x4f8(%rbx)
    0.00 :   ffffffff81a0c802:       movw    $0x0, 0x4ca(%rbx)
    0.00 :   ffffffff81a0c80b:       movl    0x630(%rbx), %eax
    0.00 :   ffffffff81a0c811:       testl   %eax, %eax
    0.00 :   ffffffff81a0c813:       jne     0xffffffff81a0d30d <tcp_ack+0xedd>
    0.00 :   ffffffff81a0c819:       movl    $0x1, %eax
    0.00 :   ffffffff81a0c81e:       jmp     0xffffffff81a0c834 <tcp_ack+0x404>
    0.00 :   ffffffff81a0c820:       addl    0x5f0(%rbx), %eax
    0.00 :   ffffffff81a0c826:       js      0xffffffff81a0d8f0 <tcp_ack+0x14c0>
    0.00 :   ffffffff81a0c82c:       cmpb    $0x0, 0x35(%rsi)
    0.00 :   ffffffff81a0c830:       jne     0xffffffff81a0c871 <tcp_ack+0x441>
    0.00 :   ffffffff81a0c832:       xorl    %eax, %eax
    0.00 :   ffffffff81a0c834:       movq    -0x30(%rbp), %rdx
    0.00 :   ffffffff81a0c838:       subq    %gs:0x28, %rdx
    0.00 :   ffffffff81a0c841:       jne     0xffffffff81a0d935 <tcp_ack+0x1505>
    0.00 :   ffffffff81a0c847:       addq    $0xe0, %rsp
    0.00 :   ffffffff81a0c84e:       popq    %rbx
    0.00 :   ffffffff81a0c84f:       popq    %r12
    0.00 :   ffffffff81a0c851:       popq    %r13
    0.00 :   ffffffff81a0c853:       popq    %r14
    0.00 :   ffffffff81a0c855:       popq    %r15
    0.00 :   ffffffff81a0c857:       popq    %rbp
    0.00 :   ffffffff81a0c858:       xorl    %edx, %edx
    0.00 :   ffffffff81a0c85a:       xorl    %ecx, %ecx
    0.00 :   ffffffff81a0c85c:       xorl    %esi, %esi
    0.00 :   ffffffff81a0c85e:       xorl    %edi, %edi
    0.00 :   ffffffff81a0c860:       xorl    %r8d, %r8d
    0.00 :   ffffffff81a0c863:       xorl    %r9d, %r9d
    0.00 :   ffffffff81a0c866:       xorl    %r10d, %r10d
    0.00 :   ffffffff81a0c869:       xorl    %r11d, %r11d
    0.00 :   ffffffff81a0c86c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81a0c871:       movl    -0xb8(%rbp), %r15d
    0.00 :   ffffffff81a0c878:       leaq    -0xa0(%rbp), %rcx
    0.00 :   ffffffff81a0c87f:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0c882:       movl    %r15d, %edx
    0.00 :   ffffffff81a0c885:       callq   0xffffffff81a0a930 <tcp_sacktag_write_queue>
    0.00 :   ffffffff81a0c88a:       leaq    -0xb0(%rbp), %r8
    0.00 :   ffffffff81a0c891:       leaq    -0xb4(%rbp), %rcx
    0.00 :   ffffffff81a0c898:       xorl    %edx, %edx
    0.00 :   ffffffff81a0c89a:       movl    %r15d, %esi
    0.00 :   ffffffff81a0c89d:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0c8a0:       orl     %eax, -0xb4(%rbp)
    0.00 :   ffffffff81a0c8a6:       callq   0xffffffff81a0b920 <tcp_fastretrans_alert>
    0.00 :   ffffffff81a0c8ab:       movl    -0xc4(%rbp), %esi
    0.00 :   ffffffff81a0c8b1:       movl    -0xb4(%rbp), %edx
    0.00 :   ffffffff81a0c8b7:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0c8ba:       callq   0xffffffff81a054b0 <tcp_newly_delivered>
    0.00 :   ffffffff81a0c8bf:       movl    -0xb0(%rbp), %esi
    0.00 :   ffffffff81a0c8c5:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0c8c8:       callq   0xffffffff81a06470 <tcp_xmit_recovery>
    0.00 :   ffffffff81a0c8cd:       jmp     0xffffffff81a0c832 <tcp_ack+0x402>
    0.00 :   ffffffff81a0c8d2:       movl    -0xbc(%rbp), %eax
    0.00 :   ffffffff81a0c8d8:       movq    $0x0, -0xf8(%rbp)
    0.00 :   ffffffff81a0c8e3:       andl    $0x40, %eax
    0.00 :   ffffffff81a0c8e6:       movl    %eax, -0x100(%rbp)
    0.00 :   ffffffff81a0c8ec:       movl    0x714(%rbx), %eax
    0.00 :   ffffffff81a0c8f2:       movl    %eax, -0x108(%rbp)
    0.00 :   ffffffff81a0c8f8:       movl    0x58c(%rbx), %eax
    0.00 :   ffffffff81a0c8fe:       movl    %eax, -0xe0(%rbp)
    0.00 :   ffffffff81a0c904:       leaq    0x160(%rbx), %rax
    0.00 :   ffffffff81a0c90b:       movq    %rax, %rdi
    0.00 :   ffffffff81a0c90e:       movq    %rax, -0xd8(%rbp)
    0.00 :   ffffffff81a0c915:       callq   0xffffffff81b53d30 <rb_first>
    0.00 :   ffffffff81a0c91a:       testq   %rax, %rax
    0.00 :   ffffffff81a0c91d:       movl    $0x0, -0xdc(%rbp)
    0.00 :   ffffffff81a0c927:       movq    $0x0, -0xf0(%rbp)
    0.00 :   ffffffff81a0c932:       movl    $0x0, -0xc0(%rbp)
    0.00 :   ffffffff81a0c93c:       je      0xffffffff81a0d8d3 <tcp_ack+0x14a3>
    0.00 :   ffffffff81a0c942:       movl    %r14d, -0x104(%rbp)
    0.00 :   ffffffff81a0c949:       movq    %r13, -0xe8(%rbp)
    0.00 :   ffffffff81a0c950:       movq    %rax, %r14
    0.00 :   ffffffff81a0c953:       movq    %rbx, %r13
    0.00 :   ffffffff81a0c956:       movzwl  0x30(%r14), %ebx
    0.00 :   ffffffff81a0c95b:       movl    0x5ac(%r13), %edx
    0.00 :   ffffffff81a0c962:       movl    $0x1, %r15d
    0.00 :   ffffffff81a0c968:       cmpl    0x2c(%r14), %edx
    0.00 :   ffffffff81a0c96c:       movzbl  0x35(%r14), %r12d
    0.00 :   ffffffff81a0c971:       movl    0x28(%r14), %r11d
    0.00 :   ffffffff81a0c975:       movl    %ebx, %eax
    0.00 :   ffffffff81a0c977:       js      0xffffffff81a0cbdb <tcp_ack+0x7ab>
    0.00 :   ffffffff81a0c97d:       movl    %r12d, %eax
    0.00 :   ffffffff81a0c980:       andl    $0x1, %eax
    0.00 :   ffffffff81a0c983:       testb   $-0x6e, %r12b
    0.00 :   ffffffff81a0c987:       jne     0xffffffff81a0cc3f <tcp_ack+0x80f>
    0.00 :   ffffffff81a0c98d:       testb   %al, %al
    0.00 :   ffffffff81a0c98f:       jne     0xffffffff81a0cc5b <tcp_ack+0x82b>
    0.00 :   ffffffff81a0c995:       movq    0x20(%r14), %rcx
    0.00 :   ffffffff81a0c999:       movabsq $0x20c49ba5e353f7cf, %rax # imm = 0x20C49BA5E353F7CF
    0.00 :   ffffffff81a0c9a3:       movq    %rcx, %rdx
    0.00 :   ffffffff81a0c9a6:       shrq    $0x3, %rdx
    0.00 :   ffffffff81a0c9aa:       mulq    %rdx
    0.00 :   ffffffff81a0c9ad:       shrq    $0x4, %rdx
    0.00 :   ffffffff81a0c9b1:       cmpq    $0x3e7, %rcx    # imm = 0x3E7
    0.00 :   ffffffff81a0c9b8:       movq    %rdx, -0xf8(%rbp)
    0.00 :   ffffffff81a0c9bf:       jbe     0xffffffff81a0d59f <tcp_ack+0x116f>
    0.00 :   ffffffff81a0c9c5:       movq    -0xf0(%rbp), %rax
    0.00 :   ffffffff81a0c9cc:       movl    -0xc0(%rbp), %ecx
    0.00 :   ffffffff81a0c9d2:       movl    0x2c(%r14), %esi
    0.00 :   ffffffff81a0c9d6:       testq   %rax, %rax
    0.00 :   ffffffff81a0c9d9:       cmoveq  -0xf8(%rbp), %rax
    0.00 :   ffffffff81a0c9e1:       movq    %rax, -0xf0(%rbp)
    0.00 :   ffffffff81a0c9e8:       movl    -0xe0(%rbp), %eax
    0.00 :   ffffffff81a0c9ee:       cmpl    %eax, %r11d
    0.00 :   ffffffff81a0c9f1:       cmovnsl %eax, %r11d
    0.00 :   ffffffff81a0c9f5:       movl    %ecx, %eax
    0.00 :   ffffffff81a0c9f7:       orb     $0x2, %ah
    0.00 :   ffffffff81a0c9fa:       cmpl    %esi, 0x810(%r13)
    0.00 :   ffffffff81a0ca01:       cmovsl  %ecx, %eax
    0.00 :   ffffffff81a0ca04:       movl    %eax, -0xc0(%rbp)
    0.00 :   ffffffff81a0ca0a:       movzbl  0x6ac(%r13), %eax
    0.00 :   ffffffff81a0ca12:       testb   $0x70, %al
    0.00 :   ffffffff81a0ca14:       je      0xffffffff81a0ca84 <tcp_ack+0x654>
    0.00 :   ffffffff81a0ca16:       movl    -0x100(%rbp), %r10d
    0.00 :   ffffffff81a0ca1d:       addl    %ebx, 0x6d8(%r13)
    0.00 :   ffffffff81a0ca24:       testl   %r10d, %r10d
    0.00 :   ffffffff81a0ca27:       je      0xffffffff81a0ca30 <tcp_ack+0x600>
    0.00 :   ffffffff81a0ca29:       addl    %ebx, 0x6dc(%r13)
    0.00 :   ffffffff81a0ca30:       testb   $-0x6e, 0x35(%r14)
    0.00 :   ffffffff81a0ca35:       movq    0x20(%r14), %rcx
    0.00 :   ffffffff81a0ca39:       je      0xffffffff81a0ca4e <tcp_ack+0x61e>
    0.00 :   ffffffff81a0ca3b:       testb   $0x1, %al
    0.00 :   ffffffff81a0ca3d:       je      0xffffffff81a0ca4e <tcp_ack+0x61e>
    0.00 :   ffffffff81a0ca3f:       movl    0x6a8(%r13), %esi
    0.00 :   ffffffff81a0ca46:       testl   %esi, %esi
    0.00 :   ffffffff81a0ca48:       jne     0xffffffff81a0d43b <tcp_ack+0x100b>
    0.00 :   ffffffff81a0ca4e:       shrq    $0x3, %rcx
    0.00 :   ffffffff81a0ca52:       movabsq $0x20c49ba5e353f7cf, %rax # imm = 0x20C49BA5E353F7CF
    0.00 :   ffffffff81a0ca5c:       movzbl  %r12b, %esi
    0.00 :   ffffffff81a0ca60:       mulq    %rcx
    0.00 :   ffffffff81a0ca63:       movq    %r13, %rdi
    0.00 :   ffffffff81a0ca66:       movl    %r11d, -0xe0(%rbp)
    0.00 :   ffffffff81a0ca6d:       movq    %rdx, %rcx
    0.00 :   ffffffff81a0ca70:       movl    0x2c(%r14), %edx
    0.00 :   ffffffff81a0ca74:       shrq    $0x4, %rcx
    0.00 :   ffffffff81a0ca78:       callq   0xffffffff81a25450 <tcp_rack_advance>
    0.00 :   ffffffff81a0ca7d:       movl    -0xe0(%rbp), %r11d
    0.00 :   ffffffff81a0ca84:       movl    %r11d, -0xe0(%rbp)
    0.00 :   ffffffff81a0ca8b:       andl    $0x4, %r12d
    0.00 :   ffffffff81a0ca8f:       je      0xffffffff81a0ca98 <tcp_ack+0x668>
    0.00 :   ffffffff81a0ca91:       subl    %ebx, 0x710(%r13)
    0.00 :   ffffffff81a0ca98:       subl    %ebx, 0x67c(%r13)
    0.00 :   ffffffff81a0ca9f:       movq    %r14, %rsi
    0.00 :   ffffffff81a0caa2:       movq    %r13, %rdi
    0.00 :   ffffffff81a0caa5:       addl    %ebx, -0xdc(%rbp)
    0.00 :   ffffffff81a0caab:       movq    -0x80(%rbp), %rbx
    0.00 :   ffffffff81a0caaf:       movq    %rbx, %rdx
    0.00 :   ffffffff81a0cab2:       callq   0xffffffff81a24f10 <tcp_rate_skb_delivered>
    0.00 :   ffffffff81a0cab7:       testb   $0x2, 0x34(%r14)
    0.00 :   ffffffff81a0cabc:       jne     0xffffffff81a0d375 <tcp_ack+0xf45>
    0.00 :   ffffffff81a0cac2:       orl     $0x4, -0xc0(%rbp)
    0.00 :   ffffffff81a0cac9:       testb   %r15b, %r15b
    0.00 :   ffffffff81a0cacc:       je      0xffffffff81a0d611 <tcp_ack+0x11e1>
    0.00 :   ffffffff81a0cad2:       movl    -0xb8(%rbp), %ecx
    0.00 :   ffffffff81a0cad8:       movq    %r14, %rsi
    0.00 :   ffffffff81a0cadb:       movq    %r13, %rdi
    0.00 :   ffffffff81a0cade:       movq    -0xe8(%rbp), %rdx
    0.00 :   ffffffff81a0cae5:       callq   0xffffffff81a06330 <tcp_ack_tstamp>
    0.00 :   ffffffff81a0caea:       movq    %r14, %rdi
    0.00 :   ffffffff81a0caed:       callq   0xffffffff81b54340 <rb_next>
    0.00 :   ffffffff81a0caf2:       cmpq    0x7a0(%r13), %r14
    0.00 :   ffffffff81a0caf9:       movq    %rax, %r15
    0.00 :   ffffffff81a0cafc:       je      0xffffffff81a0d39c <tcp_ack+0xf6c>
    0.00 :   ffffffff81a0cb02:       cmpq    0x798(%r13), %r14
    0.00 :   ffffffff81a0cb09:       je      0xffffffff81a0d38c <tcp_ack+0xf5c>
    0.00 :   ffffffff81a0cb0f:       cmpq    0x800(%r13), %r14
    0.00 :   ffffffff81a0cb16:       je      0xffffffff81a0cf1e <tcp_ack+0xaee>
    0.00 :   ffffffff81a0cb1c:       movq    0x58(%r14), %rdx
    0.00 :   ffffffff81a0cb20:       movq    0x60(%r14), %rax
    0.00 :   ffffffff81a0cb24:       movq    %r14, %rdi
    0.00 :   ffffffff81a0cb27:       movq    -0xd8(%rbp), %rsi
    0.00 :   ffffffff81a0cb2e:       movq    %rax, 0x8(%rdx)
    0.00 :   ffffffff81a0cb32:       movq    %rdx, (%rax)
    0.00 :   ffffffff81a0cb35:       movq    $0x0, 0x60(%r14)
    0.00 :   ffffffff81a0cb3d:       movq    $0x0, 0x58(%r14)
    0.00 :   ffffffff81a0cb45:       callq   0xffffffff81b53900 <rb_erase>
    0.00 :   ffffffff81a0cb4a:       movl    0x150(%r13), %eax
    0.00 :   ffffffff81a0cb51:       subl    0xd0(%r14), %eax
    0.00 :   ffffffff81a0cb58:       movl    %eax, 0x150(%r13)
    0.00 :   ffffffff81a0cb5f:       movl    0xb8(%r14), %ecx
    0.00 :   ffffffff81a0cb66:       movq    0xc0(%r14), %rsi
    0.00 :   ffffffff81a0cb6d:       testb   $0x4, (%rsi,%rcx)
    0.00 :   ffffffff81a0cb71:       movq    %rcx, %rdx
    0.00 :   ffffffff81a0cb74:       jne     0xffffffff81a0cc67 <tcp_ack+0x837>
    0.00 :   ffffffff81a0cb7a:       movq    0x28(%r13), %rdx
    0.00 :   ffffffff81a0cb7e:       movl    0xd0(%r14), %esi
    0.00 :   ffffffff81a0cb85:       cmpq    $0x0, 0xd8(%rdx)
    0.00 :   ffffffff81a0cb8d:       je      0xffffffff81a0cbc2 <tcp_ack+0x792>
    0.00 :   ffffffff81a0cb8f:       addl    0x108(%r13), %esi
    0.00 :   ffffffff81a0cb96:       movl    %esi, 0x108(%r13)
    0.00 :   ffffffff81a0cb9d:       cmpq    $0x0, 0xd8(%rdx)
    0.00 :   ffffffff81a0cba5:       je      0xffffffff81a0cbc2 <tcp_ack+0x792>
    0.00 :   ffffffff81a0cba7:       movl    0x10c(%r13), %edx
    0.00 :   ffffffff81a0cbae:       testl   %edx, %edx
    0.00 :   ffffffff81a0cbb0:       jne     0xffffffff81a0d570 <tcp_ack+0x1140>
    0.00 :   ffffffff81a0cbb6:       cmpl    $0xfff, %esi    # imm = 0xFFF
    0.00 :   ffffffff81a0cbbc:       jg      0xffffffff81a0d26b <tcp_ack+0xe3b>
    0.00 :   ffffffff81a0cbc2:       movq    %r14, %rdi
    0.00 :   ffffffff81a0cbc5:       callq   0xffffffff81937d40 <__kfree_skb>
    0.00 :   ffffffff81a0cbca:       testq   %r15, %r15
    0.00 :   ffffffff81a0cbcd:       je      0xffffffff81a0d637 <tcp_ack+0x1207>
    0.00 :   ffffffff81a0cbd3:       movq    %r15, %r14
    0.00 :   ffffffff81a0cbd6:       jmp     0xffffffff81a0c956 <tcp_ack+0x526>
    0.00 :   ffffffff81a0cbdb:       decw    %ax
    0.00 :   ffffffff81a0cbde:       nop
    0.00 :   ffffffff81a0cbe0:       je      0xffffffff81a0d887 <tcp_ack+0x1457>
    0.00 :   ffffffff81a0cbe6:       cmpl    %edx, %r11d
    0.00 :   ffffffff81a0cbe9:       jns     0xffffffff81a0d8ad <tcp_ack+0x147d>
    0.00 :   ffffffff81a0cbef:       subl    %r11d, %edx
    0.00 :   ffffffff81a0cbf2:       movq    %r14, %rsi
    0.00 :   ffffffff81a0cbf5:       movq    %r13, %rdi
    0.00 :   ffffffff81a0cbf8:       movl    %r11d, -0xfc(%rbp)
    0.00 :   ffffffff81a0cbff:       callq   0xffffffff81a12e00 <tcp_trim_head>
    0.00 :   ffffffff81a0cc04:       testl   %eax, %eax
    0.00 :   ffffffff81a0cc06:       movl    -0xfc(%rbp), %r11d
    0.00 :   ffffffff81a0cc0d:       jne     0xffffffff81a0ccc2 <tcp_ack+0x892>
    0.00 :   ffffffff81a0cc13:       movzwl  0x30(%r14), %eax
    0.00 :   ffffffff81a0cc18:       subl    %eax, %ebx
    0.00 :   ffffffff81a0cc1a:       je      0xffffffff81a0ccc2 <tcp_ack+0x892>
    0.00 :   ffffffff81a0cc20:       testw   %ax, %ax
    0.00 :   ffffffff81a0cc23:       je      0xffffffff81a0d883 <tcp_ack+0x1453>
    0.00 :   ffffffff81a0cc29:       movl    0x2c(%r14), %eax
    0.00 :   ffffffff81a0cc2d:       cmpl    %eax, 0x28(%r14)
    0.00 :   ffffffff81a0cc31:       jns     0xffffffff81a0d885 <tcp_ack+0x1455>
    0.00 :   ffffffff81a0cc37:       xorl    %r15d, %r15d
    0.00 :   ffffffff81a0cc3a:       jmp     0xffffffff81a0c97d <tcp_ack+0x54d>
    0.00 :   ffffffff81a0cc3f:       testb   $0x2, %r12b
    0.00 :   ffffffff81a0cc43:       je      0xffffffff81a0cc4c <tcp_ack+0x81c>
    0.00 :   ffffffff81a0cc45:       subl    %ebx, 0x680(%r13)
    0.00 :   ffffffff81a0cc4c:       orl     $0x8, -0xc0(%rbp)
    0.00 :   ffffffff81a0cc53:       testb   %al, %al
    0.00 :   ffffffff81a0cc55:       je      0xffffffff81a0d459 <tcp_ack+0x1029>
    0.00 :   ffffffff81a0cc5b:       subl    %ebx, 0x714(%r13)
    0.00 :   ffffffff81a0cc62:       jmp     0xffffffff81a0ca8b <tcp_ack+0x65b>
    0.00 :   ffffffff81a0cc67:       movq    0x28(%r13), %rcx
    0.00 :   ffffffff81a0cc6b:       cmpq    $0x0, 0xd8(%rcx)
    0.00 :   ffffffff81a0cc73:       je      0xffffffff81a0cbc2 <tcp_ack+0x792>
    0.00 :   ffffffff81a0cc79:       movl    0x108(%r13), %edi
    0.00 :   ffffffff81a0cc80:       leal    0x240(%rdx,%rdi), %esi
    0.00 :   ffffffff81a0cc87:       movl    %esi, 0x108(%r13)
    0.00 :   ffffffff81a0cc8e:       cmpq    $0x0, 0xd8(%rcx)
    0.00 :   ffffffff81a0cc96:       jne     0xffffffff81a0cba7 <tcp_ack+0x777>
    0.00 :   ffffffff81a0cc9c:       jmp     0xffffffff81a0cbc2 <tcp_ack+0x792>
    0.00 :   ffffffff81a0cca1:       andb    $-0x5, 0x68e(%rbx)
    0.00 :   ffffffff81a0cca8:       movl    0x2c(%r13), %eax
    0.00 :   ffffffff81a0ccac:       cmpl    %eax, 0x28(%r13)
    0.00 :   ffffffff81a0ccb0:       je      0xffffffff81a0c794 <tcp_ack+0x364>
    0.00 :   ffffffff81a0ccb6:       orb     $0x10, 0x4d0(%rbx)
    0.00 :   ffffffff81a0ccbd:       jmp     0xffffffff81a0c794 <tcp_ack+0x364>
    0.00 :   ffffffff81a0ccc2:       movq    -0x80(%rbp), %rax
    0.00 :   ffffffff81a0ccc6:       movq    %r13, %rbx
    0.00 :   ffffffff81a0ccc9:       movq    %r14, %r12
    0.00 :   ffffffff81a0cccc:       movq    -0xe8(%rbp), %r13
    0.00 :   ffffffff81a0ccd3:       movl    -0x104(%rbp), %r14d
    0.00 :   ffffffff81a0ccda:       movq    %rax, -0xd8(%rbp)
    0.00 :   ffffffff81a0cce1:       movl    0x5ac(%rbx), %eax
    0.00 :   ffffffff81a0cce7:       movl    -0xb8(%rbp), %esi
    0.00 :   ffffffff81a0cced:       movl    0x698(%rbx), %edx
    0.00 :   ffffffff81a0ccf3:       movl    %eax, %ecx
    0.00 :   ffffffff81a0ccf5:       subl    %esi, %edx
    0.00 :   ffffffff81a0ccf7:       subl    %esi, %ecx
    0.00 :   ffffffff81a0ccf9:       cmpl    %edx, %ecx
    0.00 :   ffffffff81a0ccfb:       jb      0xffffffff81a0cd03 <tcp_ack+0x8d3>
    0.00 :   ffffffff81a0ccfd:       movl    %eax, 0x698(%rbx)
    0.00 :   ffffffff81a0cd03:       movl    -0xb8(%rbp), %ecx
    0.00 :   ffffffff81a0cd09:       movq    %r13, %rdx
    0.00 :   ffffffff81a0cd0c:       movq    %r12, %rsi
    0.00 :   ffffffff81a0cd0f:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0cd12:       callq   0xffffffff81a06330 <tcp_ack_tstamp>
    0.00 :   ffffffff81a0cd17:       movl    -0xc0(%rbp), %ecx
    0.00 :   ffffffff81a0cd1d:       movl    %ecx, %eax
    0.00 :   ffffffff81a0cd1f:       orb     $0x20, %ah
    0.00 :   ffffffff81a0cd22:       testb   $0x1, 0x35(%r12)
    0.00 :   ffffffff81a0cd28:       cmovel  %ecx, %eax
    0.00 :   ffffffff81a0cd2b:       movl    %eax, -0xc0(%rbp)
    0.00 :   ffffffff81a0cd31:       movq    -0xf0(%rbp), %rax
    0.00 :   ffffffff81a0cd38:       testq   %rax, %rax
    0.00 :   ffffffff81a0cd3b:       je      0xffffffff81a0cf78 <tcp_ack+0xb48>
    0.00 :   ffffffff81a0cd41:       testb   $0x8, -0xc0(%rbp)
    0.00 :   ffffffff81a0cd48:       jne     0xffffffff81a0cf78 <tcp_ack+0xb48>
    0.00 :   ffffffff81a0cd4e:       movq    0x648(%rbx), %r8
    0.00 :   ffffffff81a0cd55:       movl    -0x108(%rbp), %r9d
    0.00 :   ffffffff81a0cd5c:       movq    %r8, %rdx
    0.00 :   ffffffff81a0cd5f:       subq    %rax, %rdx
    0.00 :   ffffffff81a0cd62:       movl    $0x0, %eax
    0.00 :   ffffffff81a0cd67:       cmovsq  %rax, %rdx
    0.00 :   ffffffff81a0cd6b:       movq    -0xf8(%rbp), %rax
    0.00 :   ffffffff81a0cd72:       movl    %edx, %edx
    0.00 :   ffffffff81a0cd74:       subq    %rax, %r8
    0.00 :   ffffffff81a0cd77:       movl    $0x0, %eax
    0.00 :   ffffffff81a0cd7c:       cmovsq  %rax, %r8
    0.00 :   ffffffff81a0cd80:       testl   %r9d, %r9d
    0.00 :   ffffffff81a0cd83:       sete    %al
    0.00 :   ffffffff81a0cd86:       movl    %r8d, %r8d
    0.00 :   ffffffff81a0cd89:       testb   %r15b, %al
    0.00 :   ffffffff81a0cd8c:       je      0xffffffff81a0cd9b <tcp_ack+0x96b>
    0.00 :   ffffffff81a0cd8e:       cmpl    $0x1, -0xdc(%rbp)
    0.00 :   ffffffff81a0cd95:       je      0xffffffff81a0d465 <tcp_ack+0x1035>
    0.00 :   ffffffff81a0cd9b:       movl    -0xc0(%rbp), %esi
    0.00 :   ffffffff81a0cda1:       movq    -0xa0(%rbp), %rcx
    0.00 :   ffffffff81a0cda8:       movl    %esi, %r15d
    0.00 :   ffffffff81a0cdab:       andl    $0x14, %r15d
    0.00 :   ffffffff81a0cdaf:       testq   %rcx, %rcx
    0.00 :   ffffffff81a0cdb2:       je      0xffffffff81a0d23a <tcp_ack+0xe0a>
    0.00 :   ffffffff81a0cdb8:       movq    0x648(%rbx), %r8
    0.00 :   ffffffff81a0cdbf:       movq    -0xd8(%rbp), %r9
    0.00 :   ffffffff81a0cdc6:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0cdc9:       movq    %r8, %rax
    0.00 :   ffffffff81a0cdcc:       subq    %rcx, %rax
    0.00 :   ffffffff81a0cdcf:       movl    $0x0, %ecx
    0.00 :   ffffffff81a0cdd4:       cmovsq  %rcx, %rax
    0.00 :   ffffffff81a0cdd8:       subq    -0x98(%rbp), %r8
    0.00 :   ffffffff81a0cddf:       movl    %eax, %ecx
    0.00 :   ffffffff81a0cde1:       movl    $0x0, %eax
    0.00 :   ffffffff81a0cde6:       movq    %rcx, -0xe8(%rbp)
    0.00 :   ffffffff81a0cded:       cmovsq  %rax, %r8
    0.00 :   ffffffff81a0cdf1:       movl    %r8d, %r8d
    0.00 :   ffffffff81a0cdf4:       callq   0xffffffff81a08d40 <tcp_ack_update_rtt>
    0.00 :   ffffffff81a0cdf9:       testl   %r15d, %r15d
    0.00 :   ffffffff81a0cdfc:       jne     0xffffffff81a0cfba <tcp_ack+0xb8a>
    0.00 :   ffffffff81a0ce02:       testq   %r12, %r12
    0.00 :   ffffffff81a0ce05:       je      0xffffffff81a0d25f <tcp_ack+0xe2f>
    0.00 :   ffffffff81a0ce0b:       testb   %al, %al
    0.00 :   ffffffff81a0ce0d:       nopl    (%rax)
    0.00 :   ffffffff81a0ce10:       je      0xffffffff81a0d25f <tcp_ack+0xe2f>
    0.00 :   ffffffff81a0ce16:       movq    0x20(%r12), %rdx
    0.00 :   ffffffff81a0ce1b:       movabsq $0x20c49ba5e353f7cf, %rax # imm = 0x20C49BA5E353F7CF
    0.00 :   ffffffff81a0ce25:       shrq    $0x3, %rdx
    0.00 :   ffffffff81a0ce29:       mulq    %rdx
    0.00 :   ffffffff81a0ce2c:       movq    0x648(%rbx), %rax
    0.00 :   ffffffff81a0ce33:       shrq    $0x4, %rdx
    0.00 :   ffffffff81a0ce37:       subq    %rdx, %rax
    0.00 :   ffffffff81a0ce3a:       movl    $0x0, %edx
    0.00 :   ffffffff81a0ce3f:       cmovsq  %rdx, %rax
    0.00 :   ffffffff81a0ce43:       movl    %eax, %eax
    0.00 :   ffffffff81a0ce45:       cmpq    %rax, -0xe8(%rbp)
    0.00 :   ffffffff81a0ce4c:       jle     0xffffffff81a0d25f <tcp_ack+0xe2f>
    0.00 :   ffffffff81a0ce52:       movl    -0xc0(%rbp), %r15d
    0.00 :   ffffffff81a0ce59:       orl     $0x1000, %r15d  # imm = 0x1000
    0.00 :   ffffffff81a0ce60:       jmp     0xffffffff81a0d021 <tcp_ack+0xbf1>
    0.00 :   ffffffff81a0ce65:       movl    %r14d, %eax
    0.00 :   ffffffff81a0ce68:       subl    0x5ac(%rbx), %eax
    0.00 :   ffffffff81a0ce6e:       movl    %r15d, 0x5e8(%rbx)
    0.00 :   ffffffff81a0ce75:       addq    %rax, 0x5a0(%rbx)
    0.00 :   ffffffff81a0ce7c:       movq    0x498(%rbx), %rax
    0.00 :   ffffffff81a0ce83:       orl     $0x2, %edx
    0.00 :   ffffffff81a0ce86:       movl    %r14d, 0x5ac(%rbx)
    0.00 :   ffffffff81a0ce8d:       movl    %edx, -0xb4(%rbp)
    0.00 :   ffffffff81a0ce93:       movq    0x20(%rax), %rax
    0.00 :   ffffffff81a0ce97:       testq   %rax, %rax
    0.00 :   ffffffff81a0ce9a:       je      0xffffffff81a0cea9 <tcp_ack+0xa79>
    0.00 :   ffffffff81a0ce9c:       movl    $0x2, %esi
    0.00 :   ffffffff81a0cea1:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0cea4:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81a0cea9:       movq    0x30(%rbx), %rax
    0.00 :   ffffffff81a0cead:       movq    0x158(%rax), %rax
    0.00 :   ffffffff81a0ceb4:       incq    %gs:0xb8(%rax)
    0.00 :   ffffffff81a0cebc:       movl    -0xb4(%rbp), %eax
    0.00 :   ffffffff81a0cec2:       movl    %eax, -0xbc(%rbp)
    0.00 :   ffffffff81a0cec8:       jmp     0xffffffff81a0c77a <tcp_ack+0x34a>
    0.00 :   ffffffff81a0cecd:       andl    $0x1, %ecx
    0.00 :   ffffffff81a0ced0:       movl    0x28(%r13), %eax
    0.00 :   ffffffff81a0ced4:       je      0xffffffff81a0c581 <tcp_ack+0x151>
    0.00 :   ffffffff81a0ceda:       cmpl    %eax, 0x588(%rbx)
    0.00 :   ffffffff81a0cee0:       js      0xffffffff81a0c581 <tcp_ack+0x151>
    0.00 :   ffffffff81a0cee6:       movl    0x6a4(%rbx), %ecx
    0.00 :   ffffffff81a0ceec:       movl    0x6a0(%rbx), %eax
    0.00 :   ffffffff81a0cef2:       subl    %ecx, %eax
    0.00 :   ffffffff81a0cef4:       testl   %eax, %eax
    0.00 :   ffffffff81a0cef6:       jg      0xffffffff81a0d5d5 <tcp_ack+0x11a5>
    0.00 :   ffffffff81a0cefc:       movl    %ecx, 0x6a0(%rbx)
    0.00 :   ffffffff81a0cf02:       movl    %edx, -0xbc(%rbp)
    0.00 :   ffffffff81a0cf08:       callq   0xffffffff81114b50 <ktime_get_seconds>
    0.00 :   ffffffff81a0cf0d:       movl    -0xbc(%rbp), %edx
    0.00 :   ffffffff81a0cf13:       movl    %eax, 0x69c(%rbx)
    0.00 :   ffffffff81a0cf19:       jmp     0xffffffff81a0c581 <tcp_ack+0x151>
    0.00 :   ffffffff81a0cf1e:       movq    %r15, 0x800(%r13)
    0.00 :   ffffffff81a0cf25:       jmp     0xffffffff81a0cb1c <tcp_ack+0x6ec>
    0.00 :   ffffffff81a0cf2a:       testb   $0x1, 0x68e(%rbx)
    0.00 :   ffffffff81a0cf31:       je      0xffffffff81a0c734 <tcp_ack+0x304>
    0.00 :   ffffffff81a0cf37:       orl     $0x40, -0xbc(%rbp)
    0.00 :   ffffffff81a0cf3e:       movl    $0x5, %esi
    0.00 :   ffffffff81a0cf43:       movl    -0xbc(%rbp), %eax
    0.00 :   ffffffff81a0cf49:       movl    %eax, -0xb4(%rbp)
    0.00 :   ffffffff81a0cf4f:       jmp     0xffffffff81a0c734 <tcp_ack+0x304>
    0.00 :   ffffffff81a0cf54:       movq    0x30(%rbx), %rax
    0.00 :   ffffffff81a0cf58:       movq    0x158(%rax), %rax
    0.00 :   ffffffff81a0cf5f:       incq    %gs:0xb0(%rax)
    0.00 :   ffffffff81a0cf67:       movl    -0xb4(%rbp), %eax
    0.00 :   ffffffff81a0cf6d:       movl    %eax, -0xbc(%rbp)
    0.00 :   ffffffff81a0cf73:       jmp     0xffffffff81a0c5ac <tcp_ack+0x17c>
    0.00 :   ffffffff81a0cf78:       movq    $-0x1, %r8
    0.00 :   ffffffff81a0cf7f:       movq    $-0x1, %rdx
    0.00 :   ffffffff81a0cf86:       jmp     0xffffffff81a0cd9b <tcp_ack+0x96b>
    0.00 :   ffffffff81a0cf8b:       movl    -0xb8(%rbp), %edx
    0.00 :   ffffffff81a0cf91:       leaq    -0xa0(%rbp), %rcx
    0.00 :   ffffffff81a0cf98:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0cf9b:       movq    %r13, %rsi
    0.00 :   ffffffff81a0cf9e:       callq   0xffffffff81a0a930 <tcp_sacktag_write_queue>
    0.00 :   ffffffff81a0cfa3:       orl     %eax, -0xbc(%rbp)
    0.00 :   ffffffff81a0cfa9:       movl    -0xbc(%rbp), %edi
    0.00 :   ffffffff81a0cfaf:       movl    %edi, -0xb4(%rbp)
    0.00 :   ffffffff81a0cfb5:       jmp     0xffffffff81a0c710 <tcp_ack+0x2e0>
    0.00 :   ffffffff81a0cfba:       movl    -0xc0(%rbp), %r15d
    0.00 :   ffffffff81a0cfc1:       orl     $0x1000, %r15d  # imm = 0x1000
    0.00 :   ffffffff81a0cfc8:       testl   $0x7fffffff, 0x4f0(%rbx) # imm = 0x7FFFFFFF
    0.00 :   ffffffff81a0cfd2:       jne     0xffffffff81a0d68c <tcp_ack+0x125c>
    0.00 :   ffffffff81a0cfd8:       testb   $0x70, 0x6ac(%rbx)
    0.00 :   ffffffff81a0cfdf:       je      0xffffffff81a0d793 <tcp_ack+0x1363>
    0.00 :   ffffffff81a0cfe5:       movl    -0xd0(%rbp), %edi
    0.00 :   ffffffff81a0cfeb:       cmpl    %edi, -0xe0(%rbp)
    0.00 :   ffffffff81a0cff1:       js      0xffffffff81a0d58a <tcp_ack+0x115a>
    0.00 :   ffffffff81a0cff7:       movl    -0x108(%rbp), %edx
    0.00 :   ffffffff81a0cffd:       subl    0x714(%rbx), %edx
    0.00 :   ffffffff81a0d003:       movl    0x808(%rbx), %eax
    0.00 :   ffffffff81a0d009:       cmpl    %eax, %edx
    0.00 :   ffffffff81a0d00b:       cmovgl  %eax, %edx
    0.00 :   ffffffff81a0d00e:       subl    %edx, %eax
    0.00 :   ffffffff81a0d010:       movl    %eax, 0x808(%rbx)
    0.00 :   ffffffff81a0d016:       movq    -0x80(%rbp), %rax
    0.00 :   ffffffff81a0d01a:       movq    %rax, -0xd8(%rbp)
    0.00 :   ffffffff81a0d021:       movq    0x498(%rbx), %rax
    0.00 :   ffffffff81a0d028:       movq    0x28(%rax), %rdx
    0.00 :   ffffffff81a0d02c:       testq   %rdx, %rdx
    0.00 :   ffffffff81a0d02f:       je      0xffffffff81a0d07d <tcp_ack+0xc4d>
    0.00 :   ffffffff81a0d031:       movq    -0xd8(%rbp), %rsi
    0.00 :   ffffffff81a0d038:       movl    -0xdc(%rbp), %eax
    0.00 :   ffffffff81a0d03e:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d041:       movl    $0x0, -0xa4(%rbp)
    0.00 :   ffffffff81a0d04b:       movl    %eax, -0xac(%rbp)
    0.00 :   ffffffff81a0d051:       movq    0x28(%rsi), %rax
    0.00 :   ffffffff81a0d055:       movl    %eax, -0xa8(%rbp)
    0.00 :   ffffffff81a0d05b:       movl    0x6d8(%rbx), %eax
    0.00 :   ffffffff81a0d061:       subl    0x8(%rsi), %eax
    0.00 :   ffffffff81a0d064:       leaq    -0xac(%rbp), %rsi
    0.00 :   ffffffff81a0d06b:       imull   0x5f4(%rbx), %eax
    0.00 :   ffffffff81a0d072:       movl    %eax, -0xa4(%rbp)
    0.00 :   ffffffff81a0d078:       callq   0xffffffff81b781c0 <__x86_indirect_thunk_rdx>
    0.00 :   ffffffff81a0d07d:       movl    0x714(%rbx), %edx
    0.00 :   ffffffff81a0d083:       testl   %edx, %edx
    0.00 :   ffffffff81a0d085:       js      0xffffffff81a0d5c5 <tcp_ack+0x1195>
    0.00 :   ffffffff81a0d08b:       movl    0x710(%rbx), %ecx
    0.00 :   ffffffff81a0d091:       testl   %ecx, %ecx
    0.00 :   ffffffff81a0d093:       js      0xffffffff81a0d5b5 <tcp_ack+0x1185>
    0.00 :   ffffffff81a0d099:       movl    0x680(%rbx), %eax
    0.00 :   ffffffff81a0d09f:       testl   %eax, %eax
    0.00 :   ffffffff81a0d0a1:       js      0xffffffff81a0d5a6 <tcp_ack+0x1176>
    0.00 :   ffffffff81a0d0a7:       movl    0x67c(%rbx), %esi
    0.00 :   ffffffff81a0d0ad:       testl   %esi, %esi
    0.00 :   ffffffff81a0d0af:       jne     0xffffffff81a0d0e4 <tcp_ack+0xcb4>
    0.00 :   ffffffff81a0d0b1:       testb   $0x70, 0x6ac(%rbx)
    0.00 :   ffffffff81a0d0b8:       je      0xffffffff81a0d0e4 <tcp_ack+0xcb4>
    0.00 :   ffffffff81a0d0ba:       testl   %ecx, %ecx
    0.00 :   ffffffff81a0d0bc:       je      0xffffffff81a0d0c8 <tcp_ack+0xc98>
    0.00 :   ffffffff81a0d0be:       movl    $0x0, 0x710(%rbx)
    0.00 :   ffffffff81a0d0c8:       testl   %edx, %edx
    0.00 :   ffffffff81a0d0ca:       je      0xffffffff81a0d0d6 <tcp_ack+0xca6>
    0.00 :   ffffffff81a0d0cc:       movl    $0x0, 0x714(%rbx)
    0.00 :   ffffffff81a0d0d6:       testl   %eax, %eax
    0.00 :   ffffffff81a0d0d8:       je      0xffffffff81a0d0e4 <tcp_ack+0xcb4>
    0.00 :   ffffffff81a0d0da:       movl    $0x0, 0x680(%rbx)
    0.00 :   ffffffff81a0d0e4:       movl    -0xbc(%rbp), %eax
    0.00 :   ffffffff81a0d0ea:       leaq    -0x78(%rbp), %rsi
    0.00 :   ffffffff81a0d0ee:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d0f1:       orl     %r15d, %eax
    0.00 :   ffffffff81a0d0f4:       movl    %eax, %r15d
    0.00 :   ffffffff81a0d0f7:       movl    %eax, -0xb4(%rbp)
    0.00 :   ffffffff81a0d0fd:       callq   0xffffffff81a25600 <tcp_rack_update_reo_wnd>
    0.00 :   ffffffff81a0d102:       movl    0x630(%rbx), %ecx
    0.00 :   ffffffff81a0d108:       testl   %ecx, %ecx
    0.00 :   ffffffff81a0d10a:       jne     0xffffffff81a0d323 <tcp_ack+0xef3>
    0.00 :   ffffffff81a0d110:       testb   $0x17, %r15b
    0.00 :   ffffffff81a0d114:       je      0xffffffff81a0d1e1 <tcp_ack+0xdb1>
    0.00 :   ffffffff81a0d11a:       testl   $0x860, %r15d   # imm = 0x860
    0.00 :   ffffffff81a0d121:       jne     0xffffffff81a0d1e1 <tcp_ack+0xdb1>
    0.00 :   ffffffff81a0d127:       testb   $0x1f, 0x4c8(%rbx)
    0.00 :   ffffffff81a0d12e:       jne     0xffffffff81a0d1e1 <tcp_ack+0xdb1>
    0.00 :   ffffffff81a0d134:       testl   $0x1000, %r15d  # imm = 0x1000
    0.00 :   ffffffff81a0d13b:       jne     0xffffffff81a0d336 <tcp_ack+0xf06>
    0.00 :   ffffffff81a0d141:       movl    %r15d, %r13d
    0.00 :   ffffffff81a0d144:       andl    $0x34, %r13d
    0.00 :   ffffffff81a0d148:       jne     0xffffffff81a0d150 <tcp_ack+0xd20>
    0.00 :   ffffffff81a0d14a:       testb   $0x17, %r15b
    0.00 :   ffffffff81a0d14e:       jne     0xffffffff81a0d164 <tcp_ack+0xd34>
    0.00 :   ffffffff81a0d150:       movl    0x188(%rbx), %eax
    0.00 :   ffffffff81a0d156:       testl   %eax, %eax
    0.00 :   ffffffff81a0d158:       jne     0xffffffff81a0d164 <tcp_ack+0xd34>
    0.00 :   ffffffff81a0d15a:       movl    $0x1, 0x188(%rbx)
    0.00 :   ffffffff81a0d164:       movl    -0xc4(%rbp), %esi
    0.00 :   ffffffff81a0d16a:       movl    %r15d, %edx
    0.00 :   ffffffff81a0d16d:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d170:       callq   0xffffffff81a054b0 <tcp_newly_delivered>
    0.00 :   ffffffff81a0d175:       movl    0x6e0(%rbx), %edx
    0.00 :   ffffffff81a0d17b:       movl    %eax, %r12d
    0.00 :   ffffffff81a0d17e:       movl    -0xcc(%rbp), %eax
    0.00 :   ffffffff81a0d184:       movzbl  -0xc5(%rbp), %ecx
    0.00 :   ffffffff81a0d18b:       movq    -0xd8(%rbp), %r8
    0.00 :   ffffffff81a0d192:       movl    %r12d, %esi
    0.00 :   ffffffff81a0d195:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d198:       subl    %eax, %edx
    0.00 :   ffffffff81a0d19a:       movl    %r15d, %eax
    0.00 :   ffffffff81a0d19d:       shrl    $0x10, %eax
    0.00 :   ffffffff81a0d1a0:       andl    $0x1, %eax
    0.00 :   ffffffff81a0d1a3:       movb    %al, -0x36(%rbp)
    0.00 :   ffffffff81a0d1a6:       callq   0xffffffff81a24fe0 <tcp_rate_gen>
    0.00 :   ffffffff81a0d1ab:       movq    0x498(%rbx), %rdx
    0.00 :   ffffffff81a0d1b2:       movq    0x38(%rdx), %rax
    0.00 :   ffffffff81a0d1b6:       testq   %rax, %rax
    0.00 :   ffffffff81a0d1b9:       je      0xffffffff81a0d278 <tcp_ack+0xe48>
    0.00 :   ffffffff81a0d1bf:       movq    -0xd8(%rbp), %rsi
    0.00 :   ffffffff81a0d1c6:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d1c9:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81a0d1ce:       movl    -0xb0(%rbp), %esi
    0.00 :   ffffffff81a0d1d4:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d1d7:       callq   0xffffffff81a06470 <tcp_xmit_recovery>
    0.00 :   ffffffff81a0d1dc:       jmp     0xffffffff81a0c819 <tcp_ack+0x3e9>
    0.00 :   ffffffff81a0d1e1:       xorl    %edx, %edx
    0.00 :   ffffffff81a0d1e3:       testl   $0xc17, %r15d   # imm = 0xC17
    0.00 :   ffffffff81a0d1ea:       jne     0xffffffff81a0d212 <tcp_ack+0xde2>
    0.00 :   ffffffff81a0d1ec:       movl    %r15d, %edx
    0.00 :   ffffffff81a0d1ef:       andl    $0x1, %edx
    0.00 :   ffffffff81a0d1f2:       jne     0xffffffff81a0d212 <tcp_ack+0xde2>
    0.00 :   ffffffff81a0d1f4:       movl    0xb8(%r13), %eax
    0.00 :   ffffffff81a0d1fb:       movq    0xc0(%r13), %rdx
    0.00 :   ffffffff81a0d202:       movzwl  0x6(%rdx,%rax), %edx
    0.00 :   ffffffff81a0d207:       movl    $0x1, %eax
    0.00 :   ffffffff81a0d20c:       testw   %dx, %dx
    0.00 :   ffffffff81a0d20f:       cmovel  %eax, %edx
    0.00 :   ffffffff81a0d212:       movl    -0xb8(%rbp), %esi
    0.00 :   ffffffff81a0d218:       leaq    -0xb0(%rbp), %r8
    0.00 :   ffffffff81a0d21f:       leaq    -0xb4(%rbp), %rcx
    0.00 :   ffffffff81a0d226:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d229:       callq   0xffffffff81a0b920 <tcp_fastretrans_alert>
    0.00 :   ffffffff81a0d22e:       movl    -0xb4(%rbp), %r15d
    0.00 :   ffffffff81a0d235:       jmp     0xffffffff81a0d134 <tcp_ack+0xd04>
    0.00 :   ffffffff81a0d23a:       movq    -0xd8(%rbp), %r9
    0.00 :   ffffffff81a0d241:       movl    -0xc0(%rbp), %esi
    0.00 :   ffffffff81a0d247:       movq    $-0x1, %rcx
    0.00 :   ffffffff81a0d24e:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d251:       callq   0xffffffff81a08d40 <tcp_ack_update_rtt>
    0.00 :   ffffffff81a0d256:       testl   %r15d, %r15d
    0.00 :   ffffffff81a0d259:       jne     0xffffffff81a0cfba <tcp_ack+0xb8a>
    0.00 :   ffffffff81a0d25f:       movl    -0xc0(%rbp), %r15d
    0.00 :   ffffffff81a0d266:       jmp     0xffffffff81a0d021 <tcp_ack+0xbf1>
    0.00 :   ffffffff81a0d26b:       movq    %r13, %rdi
    0.00 :   ffffffff81a0d26e:       callq   0xffffffff8192d430 <__sk_mem_reclaim>
    0.00 :   ffffffff81a0d273:       jmp     0xffffffff81a0cbc2 <tcp_ack+0x792>
    0.00 :   ffffffff81a0d278:       movzbl  0x4c8(%rbx), %ecx
  100.00 :   ffffffff81a0d27f:       movl    $0x1, %eax
    0.00 :   ffffffff81a0d284:       shll    %cl, %eax
    0.00 :   ffffffff81a0d286:       testb   $0xc, %al
    0.00 :   ffffffff81a0d288:       jne     0xffffffff81a0d553 <tcp_ack+0x1123>
    0.00 :   ffffffff81a0d28e:       movq    0x30(%rbx), %rax
    0.00 :   ffffffff81a0d292:       movl    0x440(%rax), %eax
    0.00 :   ffffffff81a0d298:       cmpl    0x690(%rbx), %eax
    0.00 :   ffffffff81a0d29e:       jb      0xffffffff81a0d4be <tcp_ack+0x108e>
    0.00 :   ffffffff81a0d2a4:       andl    $0x4, %r15d
    0.00 :   ffffffff81a0d2a8:       je      0xffffffff81a0d2c9 <tcp_ack+0xe99>
    0.00 :   ffffffff81a0d2aa:       movq    0x8(%rdx), %rax
    0.00 :   ffffffff81a0d2ae:       movl    %r14d, %esi
    0.00 :   ffffffff81a0d2b1:       movl    %r12d, %edx
    0.00 :   ffffffff81a0d2b4:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d2b7:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81a0d2bc:       movq    0x7fa6fd(%rip), %rax # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81a0d2c3:       movl    %eax, 0x6c8(%rbx)
    0.00 :   ffffffff81a0d2c9:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d2cc:       callq   0xffffffff81a05320 <tcp_update_pacing_rate>
    0.00 :   ffffffff81a0d2d1:       jmp     0xffffffff81a0d1ce <tcp_ack+0xd9e>
    0.00 :   ffffffff81a0d2d6:       movl    -0xb8(%rbp), %esi
    0.00 :   ffffffff81a0d2dc:       leaq    -0xb0(%rbp), %r8
    0.00 :   ffffffff81a0d2e3:       leaq    -0xb4(%rbp), %rcx
    0.00 :   ffffffff81a0d2ea:       xorl    %edx, %edx
    0.00 :   ffffffff81a0d2ec:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d2ef:       callq   0xffffffff81a0b920 <tcp_fastretrans_alert>
    0.00 :   ffffffff81a0d2f4:       movl    -0xb4(%rbp), %edx
    0.00 :   ffffffff81a0d2fa:       movl    -0xc4(%rbp), %esi
    0.00 :   ffffffff81a0d300:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d303:       callq   0xffffffff81a054b0 <tcp_newly_delivered>
    0.00 :   ffffffff81a0d308:       jmp     0xffffffff81a0c7cb <tcp_ack+0x39b>
    0.00 :   ffffffff81a0d30d:       movl    -0xb4(%rbp), %edx
    0.00 :   ffffffff81a0d313:       movl    %r14d, %esi
    0.00 :   ffffffff81a0d316:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d319:       callq   0xffffffff81a07b00 <tcp_process_tlp_ack>
    0.00 :   ffffffff81a0d31e:       jmp     0xffffffff81a0c819 <tcp_ack+0x3e9>
    0.00 :   ffffffff81a0d323:       movl    %r15d, %edx
    0.00 :   ffffffff81a0d326:       movl    %r14d, %esi
    0.00 :   ffffffff81a0d329:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d32c:       callq   0xffffffff81a07b00 <tcp_process_tlp_ack>
    0.00 :   ffffffff81a0d331:       jmp     0xffffffff81a0d110 <tcp_ack+0xce0>
    0.00 :   ffffffff81a0d336:       movl    $0x1, %esi
    0.00 :   ffffffff81a0d33b:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d33e:       callq   0xffffffff81a13270 <tcp_schedule_loss_probe>
    0.00 :   ffffffff81a0d343:       testb   %al, %al
    0.00 :   ffffffff81a0d345:       jne     0xffffffff81a0d141 <tcp_ack+0xd11>
    0.00 :   ffffffff81a0d34b:       movq    0x880(%rbx), %rax
    0.00 :   ffffffff81a0d352:       testq   %rax, %rax
    0.00 :   ffffffff81a0d355:       jne     0xffffffff81a0d141 <tcp_ack+0xd11>
    0.00 :   ffffffff81a0d35b:       movl    0x67c(%rbx), %edx
    0.00 :   ffffffff81a0d361:       testl   %edx, %edx
    0.00 :   ffffffff81a0d363:       jne     0xffffffff81a0d8e3 <tcp_ack+0x14b3>
    0.00 :   ffffffff81a0d369:       movb    $0x0, 0x4ca(%rbx)
    0.00 :   ffffffff81a0d370:       jmp     0xffffffff81a0d141 <tcp_ack+0xd11>
    0.00 :   ffffffff81a0d375:       orl     $0x10, -0xc0(%rbp)
    0.00 :   ffffffff81a0d37c:       movl    $0x0, 0x814(%r13)
    0.00 :   ffffffff81a0d387:       jmp     0xffffffff81a0cac9 <tcp_ack+0x699>
    0.00 :   ffffffff81a0d38c:       movq    $0x0, 0x798(%r13)
    0.00 :   ffffffff81a0d397:       jmp     0xffffffff81a0cb0f <tcp_ack+0x6df>
    0.00 :   ffffffff81a0d39c:       movq    $0x0, 0x7a0(%r13)
    0.00 :   ffffffff81a0d3a7:       jmp     0xffffffff81a0cb02 <tcp_ack+0x6d2>
    0.00 :   ffffffff81a0d3ac:       movl    0x488(%rbx), %esi
    0.00 :   ffffffff81a0d3b2:       movzbl  0x4cb(%rbx), %ecx
    0.00 :   ffffffff81a0d3b9:       movl    $0xc8, %eax
    0.00 :   ffffffff81a0d3be:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d3c1:       cmpq    %rax, %rsi
    0.00 :   ffffffff81a0d3c4:       cmovbq  %rax, %rsi
    0.00 :   ffffffff81a0d3c8:       movl    $0xa, %eax
    0.00 :   ffffffff81a0d3cd:       cmpb    %al, %cl
    0.00 :   ffffffff81a0d3cf:       cmoval  %eax, %ecx
    0.00 :   ffffffff81a0d3d2:       movl    $0x1d4c0, %eax  # imm = 0x1D4C0
    0.00 :   ffffffff81a0d3d7:       shlq    %cl, %rsi
    0.00 :   ffffffff81a0d3da:       cmpq    %rax, %rsi
    0.00 :   ffffffff81a0d3dd:       cmovaq  %rax, %rsi
    0.00 :   ffffffff81a0d3e1:       callq   0xffffffff81a18f10 <tcp_clamp_probe0_to_user_timeout>
    0.00 :   ffffffff81a0d3e6:       movq    0x638(%rbx), %rdi
    0.00 :   ffffffff81a0d3ed:       subq    0x640(%rbx), %rdi
    0.00 :   ffffffff81a0d3f4:       movl    %eax, %r12d
    0.00 :   ffffffff81a0d3f7:       testq   %rdi, %rdi
    0.00 :   ffffffff81a0d3fa:       jg      0xffffffff81a0d4cc <tcp_ack+0x109c>
    0.00 :   ffffffff81a0d400:       movl    $0x1d4c0, %eax  # imm = 0x1D4C0
    0.00 :   ffffffff81a0d405:       movq    0x7fa5b4(%rip), %rcx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81a0d40c:       leaq    0x438(%rbx), %rsi
    0.00 :   ffffffff81a0d413:       cmpq    %rax, %r12
    0.00 :   ffffffff81a0d416:       movb    $0x3, 0x4ca(%rbx)
    0.00 :   ffffffff81a0d41d:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d420:       cmovbeq %r12, %rax
    0.00 :   ffffffff81a0d424:       movq    %rax, %rdx
    0.00 :   ffffffff81a0d427:       addq    %rcx, %rdx
    0.00 :   ffffffff81a0d42a:       movq    %rdx, 0x430(%rbx)
    0.00 :   ffffffff81a0d431:       callq   0xffffffff8192a4d0 <sk_reset_timer>
    0.00 :   ffffffff81a0d436:       jmp     0xffffffff81a0c80b <tcp_ack+0x3db>
    0.00 :   ffffffff81a0d43b:       movabsq $0x431bde82d7b634db, %rax # imm = 0x431BDE82D7B634DB
    0.00 :   ffffffff81a0d445:       mulq    %rcx
    0.00 :   ffffffff81a0d448:       shrq    $0x12, %rdx
    0.00 :   ffffffff81a0d44c:       cmpl    %edx, %esi
    0.00 :   ffffffff81a0d44e:       jns     0xffffffff81a0ca4e <tcp_ack+0x61e>
    0.00 :   ffffffff81a0d454:       jmp     0xffffffff81a0ca84 <tcp_ack+0x654>
    0.00 :   ffffffff81a0d459:       movl    -0xe0(%rbp), %r11d
    0.00 :   ffffffff81a0d460:       jmp     0xffffffff81a0ca0a <tcp_ack+0x5da>
    0.00 :   ffffffff81a0d465:       movl    0x5ac(%rbx), %eax
    0.00 :   ffffffff81a0d46b:       movl    -0xb8(%rbp), %esi
    0.00 :   ffffffff81a0d471:       subl    %esi, %eax
    0.00 :   ffffffff81a0d473:       cmpl    0x5f4(%rbx), %eax
    0.00 :   ffffffff81a0d479:       jae     0xffffffff81a0cd9b <tcp_ack+0x96b>
    0.00 :   ffffffff81a0d47f:       movq    -0xd8(%rbp), %rax
    0.00 :   ffffffff81a0d486:       movl    0x8(%rax), %eax
    0.00 :   ffffffff81a0d489:       movl    %eax, -0xe8(%rbp)
    0.00 :   ffffffff81a0d48f:       incl    %eax
    0.00 :   ffffffff81a0d491:       cmpl    0x6d8(%rbx), %eax
    0.00 :   ffffffff81a0d497:       jne     0xffffffff81a0cd9b <tcp_ack+0x96b>
    0.00 :   ffffffff81a0d49d:       movl    -0xc0(%rbp), %esi
    0.00 :   ffffffff81a0d4a3:       movl    %esi, %eax
    0.00 :   ffffffff81a0d4a5:       orl     $0x10000, %eax  # imm = 0x10000
    0.00 :   ffffffff81a0d4aa:       testl   $0x870, %esi    # imm = 0x870
    0.00 :   ffffffff81a0d4b0:       cmovnel %esi, %eax
    0.00 :   ffffffff81a0d4b3:       movl    %eax, -0xc0(%rbp)
    0.00 :   ffffffff81a0d4b9:       jmp     0xffffffff81a0cd9b <tcp_ack+0x96b>
    0.00 :   ffffffff81a0d4be:       testl   %r13d, %r13d
    0.00 :   ffffffff81a0d4c1:       jne     0xffffffff81a0d2aa <tcp_ack+0xe7a>
    0.00 :   ffffffff81a0d4c7:       jmp     0xffffffff81a0d2c9 <tcp_ack+0xe99>
    0.00 :   ffffffff81a0d4cc:       nopl    (%rax)
    0.00 :   ffffffff81a0d4d0:       callq   0xffffffff8110f2d0 <nsecs_to_jiffies>
    0.00 :   ffffffff81a0d4d5:       addq    %rax, %r12
    0.00 :   ffffffff81a0d4d8:       jmp     0xffffffff81a0d400 <tcp_ack+0xfd0>
    0.00 :   ffffffff81a0d4dd:       movl    0x494(%rbx), %esi
    0.00 :   ffffffff81a0d4e3:       movl    %eax, 0x5f0(%rbx)
    0.00 :   ffffffff81a0d4e9:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d4ec:       callq   0xffffffff81a12760 <tcp_sync_mss>
    0.00 :   ffffffff81a0d4f1:       jmp     0xffffffff81a0c69e <tcp_ack+0x26e>
    0.00 :   ffffffff81a0d4f6:       movl    0x700(%rbx), %r15d
    0.00 :   ffffffff81a0d4fd:       testl   %r15d, %r15d
    0.00 :   ffffffff81a0d500:       je      0xffffffff81a0c62b <tcp_ack+0x1fb>
    0.00 :   ffffffff81a0d506:       movl    0xf0(%rbx), %edx
    0.00 :   ffffffff81a0d50c:       cmpl    0x118(%rbx), %edx
    0.00 :   ffffffff81a0d512:       jge     0xffffffff81a0c62b <tcp_ack+0x1fb>
    0.00 :   ffffffff81a0d518:       cmpw    $0x0, 0x68c(%rbx)
    0.00 :   ffffffff81a0d520:       jne     0xffffffff81a0c62b <tcp_ack+0x1fb>
    0.00 :   ffffffff81a0d526:       movzbl  0x6ad(%rbx), %ecx
    0.00 :   ffffffff81a0d52d:       movl    %eax, %edx
    0.00 :   ffffffff81a0d52f:       andl    $0xf, %ecx
    0.00 :   ffffffff81a0d532:       shrl    %cl, %edx
    0.00 :   ffffffff81a0d534:       movzwl  0x568(%rbx), %ecx
    0.00 :   ffffffff81a0d53b:       shll    $0x1a, %ecx
    0.00 :   ffffffff81a0d53e:       orl     %ecx, %edx
    0.00 :   ffffffff81a0d540:       orl     $0x100000, %edx # imm = 0x100000
    0.00 :   ffffffff81a0d546:       bswapl  %edx
    0.00 :   ffffffff81a0d548:       movl    %edx, 0x56c(%rbx)
    0.00 :   ffffffff81a0d54e:       jmp     0xffffffff81a0c62b <tcp_ack+0x1fb>
    0.00 :   ffffffff81a0d553:       movq    -0xd8(%rbp), %rax
    0.00 :   ffffffff81a0d55a:       movl    %r15d, %ecx
    0.00 :   ffffffff81a0d55d:       movl    %r12d, %esi
    0.00 :   ffffffff81a0d560:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d563:       movl    0x30(%rax), %edx
    0.00 :   ffffffff81a0d566:       callq   0xffffffff81a0b6f0 <tcp_cwnd_reduction>
    0.00 :   ffffffff81a0d56b:       jmp     0xffffffff81a0d2c9 <tcp_ack+0xe99>
    0.00 :   ffffffff81a0d570:       movl    0xf0(%r13), %ecx
    0.00 :   ffffffff81a0d577:       subl    %ecx, %edx
    0.00 :   ffffffff81a0d579:       subl    %eax, %edx
    0.00 :   ffffffff81a0d57b:       movl    $0x0, %eax
    0.00 :   ffffffff81a0d580:       cmovsl  %eax, %edx
    0.00 :   ffffffff81a0d583:       subl    %edx, %esi
    0.00 :   ffffffff81a0d585:       jmp     0xffffffff81a0cbb6 <tcp_ack+0x786>
    0.00 :   ffffffff81a0d58a:       movl    -0xe0(%rbp), %esi
    0.00 :   ffffffff81a0d590:       xorl    %edx, %edx
    0.00 :   ffffffff81a0d592:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d595:       callq   0xffffffff81a068d0 <tcp_check_sack_reordering>
    0.00 :   ffffffff81a0d59a:       jmp     0xffffffff81a0cff7 <tcp_ack+0xbc7>
    0.00 :   ffffffff81a0d59f:       ud2
    0.00 :   ffffffff81a0d5a1:       jmp     0xffffffff81a0c9c5 <tcp_ack+0x595>
    0.00 :   ffffffff81a0d5a6:       ud2
    0.00 :   ffffffff81a0d5a8:       nopl    (%rax,%rax)
    0.00 :   ffffffff81a0d5b0:       jmp     0xffffffff81a0d0a7 <tcp_ack+0xc77>
    0.00 :   ffffffff81a0d5b5:       ud2
    0.00 :   ffffffff81a0d5b7:       nopw    (%rax,%rax)
    0.00 :   ffffffff81a0d5c0:       jmp     0xffffffff81a0d099 <tcp_ack+0xc69>
    0.00 :   ffffffff81a0d5c5:       ud2
    0.00 :   ffffffff81a0d5c7:       nopw    (%rax,%rax)
    0.00 :   ffffffff81a0d5d0:       jmp     0xffffffff81a0d08b <tcp_ack+0xc5b>
    0.00 :   ffffffff81a0d5d5:       movl    %edx, -0xbc(%rbp)
    0.00 :   ffffffff81a0d5db:       nopl    (%rax,%rax)
    0.00 :   ffffffff81a0d5e0:       callq   0xffffffff81114b50 <ktime_get_seconds>
    0.00 :   ffffffff81a0d5e5:       subl    0x69c(%rbx), %eax
    0.00 :   ffffffff81a0d5eb:       movl    -0xbc(%rbp), %edx
    0.00 :   ffffffff81a0d5f1:       subl    $0x1fa400, %eax # imm = 0x1FA400
    0.00 :   ffffffff81a0d5f6:       jns     0xffffffff81a0d606 <tcp_ack+0x11d6>
    0.00 :   ffffffff81a0d5f8:       movl    0x6a0(%rbx), %eax
    0.00 :   ffffffff81a0d5fe:       testl   %eax, %eax
    0.00 :   ffffffff81a0d600:       jne     0xffffffff81a0c581 <tcp_ack+0x151>
    0.00 :   ffffffff81a0d606:       movl    0x6a4(%rbx), %ecx
    0.00 :   ffffffff81a0d60c:       jmp     0xffffffff81a0cefc <tcp_ack+0xacc>
    0.00 :   ffffffff81a0d611:       movq    %rbx, -0xd8(%rbp)
    0.00 :   ffffffff81a0d618:       movq    %r13, %rbx
    0.00 :   ffffffff81a0d61b:       movq    %r14, %r12
    0.00 :   ffffffff81a0d61e:       movq    -0xe8(%rbp), %r13
    0.00 :   ffffffff81a0d625:       movl    -0x104(%rbp), %r14d
    0.00 :   ffffffff81a0d62c:       movl    0x5ac(%rbx), %eax
    0.00 :   ffffffff81a0d632:       jmp     0xffffffff81a0cce7 <tcp_ack+0x8b7>
    0.00 :   ffffffff81a0d637:       movq    %rbx, -0xd8(%rbp)
    0.00 :   ffffffff81a0d63e:       movl    -0x104(%rbp), %r14d
    0.00 :   ffffffff81a0d645:       movq    %r13, %rbx
    0.00 :   ffffffff81a0d648:       movq    -0xe8(%rbp), %r13
    0.00 :   ffffffff81a0d64f:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d652:       movl    $0x1, %esi
    0.00 :   ffffffff81a0d657:       callq   0xffffffff81a13190 <tcp_chrono_stop>
    0.00 :   ffffffff81a0d65c:       movl    0x5ac(%rbx), %edx
    0.00 :   ffffffff81a0d662:       movl    -0xb8(%rbp), %edi
    0.00 :   ffffffff81a0d668:       movl    0x698(%rbx), %eax
    0.00 :   ffffffff81a0d66e:       movl    %edx, %ecx
    0.00 :   ffffffff81a0d670:       subl    %edi, %ecx
    0.00 :   ffffffff81a0d672:       subl    %edi, %eax
    0.00 :   ffffffff81a0d674:       cmpl    %eax, %ecx
    0.00 :   ffffffff81a0d676:       jb      0xffffffff81a0d67e <tcp_ack+0x124e>
    0.00 :   ffffffff81a0d678:       movl    %edx, 0x698(%rbx)
    0.00 :   ffffffff81a0d67e:       movl    $0x1, %r15d
    0.00 :   ffffffff81a0d684:       xorl    %r12d, %r12d
    0.00 :   ffffffff81a0d687:       jmp     0xffffffff81a0cd31 <tcp_ack+0x901>
    0.00 :   ffffffff81a0d68c:       movl    0x86c(%rbx), %eax
    0.00 :   ffffffff81a0d692:       cmpl    %eax, 0x5ac(%rbx)
    0.00 :   ffffffff81a0d698:       js      0xffffffff81a0cfd8 <tcp_ack+0xba8>
    0.00 :   ffffffff81a0d69e:       movzbl  0x4c8(%rbx), %ecx
    0.00 :   ffffffff81a0d6a5:       movl    $0x1, %edx
    0.00 :   ffffffff81a0d6aa:       movl    0x6b4(%rbx), %eax
    0.00 :   ffffffff81a0d6b0:       movl    0x6b8(%rbx), %r12d
    0.00 :   ffffffff81a0d6b7:       shll    %cl, %edx
    0.00 :   ffffffff81a0d6b9:       andl    $0xc, %edx
    0.00 :   ffffffff81a0d6bc:       jne     0xffffffff81a0d6d0 <tcp_ack+0x12a0>
    0.00 :   ffffffff81a0d6be:       movl    %r12d, %edx
    0.00 :   ffffffff81a0d6c1:       movl    %r12d, %ecx
    0.00 :   ffffffff81a0d6c4:       shrl    %edx
    0.00 :   ffffffff81a0d6c6:       shrl    $0x2, %ecx
    0.00 :   ffffffff81a0d6c9:       addl    %ecx, %edx
    0.00 :   ffffffff81a0d6cb:       cmpl    %edx, %eax
    0.00 :   ffffffff81a0d6cd:       cmovbl  %edx, %eax
    0.00 :   ffffffff81a0d6d0:       movl    0x5f4(%rbx), %esi
    0.00 :   ffffffff81a0d6d6:       movl    %eax, 0x80c(%rbx)
    0.00 :   ffffffff81a0d6dc:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d6df:       callq   0xffffffff81a11170 <tcp_mss_to_mtu>
    0.00 :   ffffffff81a0d6e4:       movl    0x4f0(%rbx), %esi
    0.00 :   ffffffff81a0d6ea:       movslq  %eax, %rdx
    0.00 :   ffffffff81a0d6ed:       movl    %r12d, %eax
    0.00 :   ffffffff81a0d6f0:       imulq   %rdx, %rax
    0.00 :   ffffffff81a0d6f4:       xorl    %edx, %edx
    0.00 :   ffffffff81a0d6f6:       andl    $0x7fffffff, %esi # imm = 0x7FFFFFFF
    0.00 :   ffffffff81a0d6fc:       movl    %esi, %ecx
    0.00 :   ffffffff81a0d6fe:       divq    %rcx
    0.00 :   ffffffff81a0d701:       movl    $0x1, %edx
    0.00 :   ffffffff81a0d706:       testl   %eax, %eax
    0.00 :   ffffffff81a0d708:       cmovel  %edx, %eax
    0.00 :   ffffffff81a0d70b:       testl   %eax, %eax
    0.00 :   ffffffff81a0d70d:       jle     0xffffffff81a0d945 <tcp_ack+0x1515>
    0.00 :   ffffffff81a0d713:       movzbl  0x4c8(%rbx), %ecx
    0.00 :   ffffffff81a0d71a:       movq    0x7fa29f(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff81a0d721:       movl    $0x1, %edi
    0.00 :   ffffffff81a0d726:       movl    %eax, 0x6b8(%rbx)
    0.00 :   ffffffff81a0d72c:       movl    $0x0, 0x6bc(%rbx)
    0.00 :   ffffffff81a0d736:       movl    %edx, 0x6c8(%rbx)
    0.00 :   ffffffff81a0d73c:       movl    0x6b4(%rbx), %edx
    0.00 :   ffffffff81a0d742:       shll    %cl, %edi
    0.00 :   ffffffff81a0d744:       andl    $0xc, %edi
    0.00 :   ffffffff81a0d747:       jne     0xffffffff81a0d757 <tcp_ack+0x1327>
    0.00 :   ffffffff81a0d749:       movl    %eax, %ecx
    0.00 :   ffffffff81a0d74b:       shrl    $0x2, %eax
    0.00 :   ffffffff81a0d74e:       shrl    %ecx
    0.00 :   ffffffff81a0d750:       addl    %ecx, %eax
    0.00 :   ffffffff81a0d752:       cmpl    %eax, %edx
    0.00 :   ffffffff81a0d754:       cmovbl  %eax, %edx
    0.00 :   ffffffff81a0d757:       andl    $0x80000000, 0x4f0(%rbx) # imm = 0x80000000
    0.00 :   ffffffff81a0d761:       movl    %esi, 0x4ec(%rbx)
    0.00 :   ffffffff81a0d767:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d76a:       movl    0x494(%rbx), %esi
    0.00 :   ffffffff81a0d770:       movl    %edx, 0x6b4(%rbx)
    0.00 :   ffffffff81a0d776:       callq   0xffffffff81a12760 <tcp_sync_mss>
    0.00 :   ffffffff81a0d77b:       movq    0x30(%rbx), %rax
    0.00 :   ffffffff81a0d77f:       movq    0x158(%rax), %rax
    0.00 :   ffffffff81a0d786:       incq    %gs:0x380(%rax)
    0.00 :   ffffffff81a0d78e:       jmp     0xffffffff81a0cfd8 <tcp_ack+0xba8>
    0.00 :   ffffffff81a0d793:       movl    -0xdc(%rbp), %esi
    0.00 :   ffffffff81a0d799:       movl    0x714(%rbx), %eax
    0.00 :   ffffffff81a0d79f:       testl   %esi, %esi
    0.00 :   ffffffff81a0d7a1:       jle     0xffffffff81a0d7e4 <tcp_ack+0x13b4>
    0.00 :   ffffffff81a0d7a3:       movl    -0x100(%rbp), %edi
    0.00 :   ffffffff81a0d7a9:       movl    %esi, %edx
    0.00 :   ffffffff81a0d7ab:       movl    $0x1, %ecx
    0.00 :   ffffffff81a0d7b0:       subl    %eax, %edx
    0.00 :   ffffffff81a0d7b2:       testl   %edx, %edx
    0.00 :   ffffffff81a0d7b4:       cmovlel %ecx, %edx
    0.00 :   ffffffff81a0d7b7:       addl    %edx, 0x6d8(%rbx)
    0.00 :   ffffffff81a0d7bd:       testl   %edi, %edi
    0.00 :   ffffffff81a0d7bf:       je      0xffffffff81a0d7c7 <tcp_ack+0x1397>
    0.00 :   ffffffff81a0d7c1:       addl    %edx, 0x6dc(%rbx)
    0.00 :   ffffffff81a0d7c7:       movl    -0xdc(%rbp), %esi
    0.00 :   ffffffff81a0d7cd:       leal    -0x1(%rsi), %edx
    0.00 :   ffffffff81a0d7d0:       cmpl    %eax, %edx
    0.00 :   ffffffff81a0d7d2:       jb      0xffffffff81a0d90d <tcp_ack+0x14dd>
    0.00 :   ffffffff81a0d7d8:       movl    $0x0, 0x714(%rbx)
    0.00 :   ffffffff81a0d7e2:       xorl    %eax, %eax
    0.00 :   ffffffff81a0d7e4:       movl    0x710(%rbx), %esi
    0.00 :   ffffffff81a0d7ea:       movl    0x67c(%rbx), %edx
    0.00 :   ffffffff81a0d7f0:       movl    $0x1, %ecx
    0.00 :   ffffffff81a0d7f5:       testl   %esi, %esi
    0.00 :   ffffffff81a0d7f7:       cmovnel %esi, %ecx
    0.00 :   ffffffff81a0d7fa:       cmpl    %edx, %ecx
    0.00 :   ffffffff81a0d7fc:       cmoval  %edx, %ecx
    0.00 :   ffffffff81a0d7ff:       leal    (%rax,%rcx), %edi
    0.00 :   ffffffff81a0d802:       cmpl    %edi, %edx
    0.00 :   ffffffff81a0d804:       jae     0xffffffff81a0d854 <tcp_ack+0x1424>
    0.00 :   ffffffff81a0d806:       movl    %edx, %eax
    0.00 :   ffffffff81a0d808:       movl    -0xdc(%rbp), %edi
    0.00 :   ffffffff81a0d80e:       subl    %ecx, %eax
    0.00 :   ffffffff81a0d810:       movl    %eax, 0x714(%rbx)
    0.00 :   ffffffff81a0d816:       movq    0x30(%rbx), %rax
    0.00 :   ffffffff81a0d81a:       addl    %edi, %edx
    0.00 :   ffffffff81a0d81c:       movl    0x45c(%rax), %ecx
    0.00 :   ffffffff81a0d822:       cmpl    %ecx, %edx
    0.00 :   ffffffff81a0d824:       cmoval  %ecx, %edx
    0.00 :   ffffffff81a0d827:       incl    0x694(%rbx)
    0.00 :   ffffffff81a0d82d:       movl    %edx, 0x690(%rbx)
    0.00 :   ffffffff81a0d833:       movq    0x158(%rax), %rax
    0.00 :   ffffffff81a0d83a:       incq    %gs:0xe0(%rax)
    0.00 :   ffffffff81a0d842:       movl    0x714(%rbx), %eax
    0.00 :   ffffffff81a0d848:       movl    0x710(%rbx), %esi
    0.00 :   ffffffff81a0d84e:       movl    0x67c(%rbx), %edx
    0.00 :   ffffffff81a0d854:       addl    %esi, %eax
    0.00 :   ffffffff81a0d856:       cmpl    %eax, %edx
    0.00 :   ffffffff81a0d858:       jb      0xffffffff81a0d92c <tcp_ack+0x14fc>
    0.00 :   ffffffff81a0d85e:       movq    -0x80(%rbp), %rax
    0.00 :   ffffffff81a0d862:       movl    -0xc0(%rbp), %esi
    0.00 :   ffffffff81a0d868:       movq    %rax, -0xd8(%rbp)
    0.00 :   ffffffff81a0d86f:       movl    %esi, %eax
    0.00 :   ffffffff81a0d871:       andb    $-0x3, %ah
    0.00 :   ffffffff81a0d874:       orb     $0x10, %ah
    0.00 :   ffffffff81a0d877:       andl    $0x8, %esi
    0.00 :   ffffffff81a0d87a:       cmovnel %eax, %r15d
    0.00 :   ffffffff81a0d87e:       jmp     0xffffffff81a0d021 <tcp_ack+0xbf1>
    0.00 :   ffffffff81a0d883:       ud2
    0.00 :   ffffffff81a0d885:       ud2
    0.00 :   ffffffff81a0d887:       movq    -0x80(%rbp), %rsi
    0.00 :   ffffffff81a0d88b:       movq    %r14, %r12
    0.00 :   ffffffff81a0d88e:       movq    %r13, %rbx
    0.00 :   ffffffff81a0d891:       movl    -0x104(%rbp), %r14d
    0.00 :   ffffffff81a0d898:       movq    -0xe8(%rbp), %r13
    0.00 :   ffffffff81a0d89f:       movl    %edx, %eax
    0.00 :   ffffffff81a0d8a1:       movq    %rsi, -0xd8(%rbp)
    0.00 :   ffffffff81a0d8a8:       jmp     0xffffffff81a0cce7 <tcp_ack+0x8b7>
    0.00 :   ffffffff81a0d8ad:       movq    -0x80(%rbp), %rdi
    0.00 :   ffffffff81a0d8b1:       movq    %r14, %r12
    0.00 :   ffffffff81a0d8b4:       movq    %r13, %rbx
    0.00 :   ffffffff81a0d8b7:       movl    -0x104(%rbp), %r14d
    0.00 :   ffffffff81a0d8be:       movq    -0xe8(%rbp), %r13
    0.00 :   ffffffff81a0d8c5:       movl    %edx, %eax
    0.00 :   ffffffff81a0d8c7:       movq    %rdi, -0xd8(%rbp)
    0.00 :   ffffffff81a0d8ce:       jmp     0xffffffff81a0cce7 <tcp_ack+0x8b7>
    0.00 :   ffffffff81a0d8d3:       movq    -0x80(%rbp), %rax
    0.00 :   ffffffff81a0d8d7:       movq    %rax, -0xd8(%rbp)
    0.00 :   ffffffff81a0d8de:       jmp     0xffffffff81a0d64f <tcp_ack+0x121f>
    0.00 :   ffffffff81a0d8e3:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d8e6:       callq   0xffffffff81a06d00 <tcp_rearm_rto.part.0>
    0.00 :   ffffffff81a0d8eb:       jmp     0xffffffff81a0d141 <tcp_ack+0xd11>
    0.00 :   ffffffff81a0d8f0:       testb   $-0x80, -0xb3(%rbp)
    0.00 :   ffffffff81a0d8f7:       je      0xffffffff81a0d922 <tcp_ack+0x14f2>
    0.00 :   ffffffff81a0d8f9:       movl    $0xffffffde, %eax # imm = 0xFFFFFFDE
    0.00 :   ffffffff81a0d8fe:       jmp     0xffffffff81a0c834 <tcp_ack+0x404>
    0.00 :   ffffffff81a0d903:       movl    $0xffffffdd, %eax # imm = 0xFFFFFFDD
    0.00 :   ffffffff81a0d908:       jmp     0xffffffff81a0c834 <tcp_ack+0x404>
    0.00 :   ffffffff81a0d90d:       movl    -0xdc(%rbp), %esi
    0.00 :   ffffffff81a0d913:       incl    %eax
    0.00 :   ffffffff81a0d915:       subl    %esi, %eax
    0.00 :   ffffffff81a0d917:       movl    %eax, 0x714(%rbx)
    0.00 :   ffffffff81a0d91d:       jmp     0xffffffff81a0d7e4 <tcp_ack+0x13b4>
    0.00 :   ffffffff81a0d922:       movq    %rbx, %rdi
    0.00 :   ffffffff81a0d925:       callq   0xffffffff81a05ed0 <tcp_send_challenge_ack>
    0.00 :   ffffffff81a0d92a:       jmp     0xffffffff81a0d8f9 <tcp_ack+0x14c9>
    0.00 :   ffffffff81a0d92c:       ud2
    0.00 :   ffffffff81a0d92e:       nop
    0.00 :   ffffffff81a0d930:       jmp     0xffffffff81a0d85e <tcp_ack+0x142e>
    0.00 :   ffffffff81a0d935:       nopw    %cs:(%rax,%rax)
    0.00 :   ffffffff81a0d940:       callq   0xffffffff81b6af40 <__stack_chk_fail>
    0.00 :   ffffffff81a0d945:       ud2
    0.00 :   ffffffff81a0d947:       jmp     0xffffffff81a0d713 <tcp_ack+0x12e3>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     00000000000394b0 <atoi>:
         : 5     ; atoi():
    0.00 :   394b0:          subq    $0x8, %rsp
    0.00 :   394b4:          movl    $0xa, %edx
    0.00 :   394b9:          xorl    %esi, %esi
    0.00 :   394bb:          callq   0x44b40 <strtoq>
  100.00 :   394c0:          addq    $0x8, %rsp
    0.00 :   394c4:          retq
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b77b70 <_raw_spin_lock_bh>:
         : 5                ; _raw_spin_lock_bh():
    0.00 :   ffffffff81b77b70:       pushq   %rbp
    0.00 :   ffffffff81b77b71:       movq    %rsp, %rbp
    0.00 :   ffffffff81b77b74:       addl    $0x201, %gs:0x7e4aab89(%rip) # imm = 0x201
  100.00 :   ffffffff81b77b7f:       xorl    %eax, %eax
    0.00 :   ffffffff81b77b81:       movl    $0x1, %edx
    0.00 :   ffffffff81b77b86:       lock
    0.00 :   ffffffff81b77b87:       cmpxchgl        %edx, (%rdi)
    0.00 :   ffffffff81b77b8a:       jne     0xffffffff81b77b9a <_raw_spin_lock_bh+0x2a>
    0.00 :   ffffffff81b77b8c:       popq    %rbp
    0.00 :   ffffffff81b77b8d:       xorl    %eax, %eax
    0.00 :   ffffffff81b77b8f:       xorl    %edx, %edx
    0.00 :   ffffffff81b77b91:       xorl    %esi, %esi
    0.00 :   ffffffff81b77b93:       xorl    %edi, %edi
    0.00 :   ffffffff81b77b95:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b77b9a:       movl    %eax, %esi
    0.00 :   ffffffff81b77b9c:       callq   0xffffffff81b77c10 <queued_spin_lock_slowpath>
    0.00 :   ffffffff81b77ba1:       popq    %rbp
    0.00 :   ffffffff81b77ba2:       xorl    %eax, %eax
    0.00 :   ffffffff81b77ba4:       xorl    %edx, %edx
    0.00 :   ffffffff81b77ba6:       xorl    %esi, %esi
    0.00 :   ffffffff81b77ba8:       xorl    %edi, %edi
    0.00 :   ffffffff81b77baa:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b55850 <siphash_4u64>:
         : 5                ; siphash_4u64():
    0.00 :   ffffffff81b55850:       pushq   %rbp
    0.00 :   ffffffff81b55851:       movq    %rdi, %r9
    0.00 :   ffffffff81b55854:       movq    %rcx, %rax
    0.00 :   ffffffff81b55857:       movq    %rsi, %rdi
    0.00 :   ffffffff81b5585a:       movq    %rdx, %rsi
    0.00 :   ffffffff81b5585d:       movq    %r8, %rdx
    0.00 :   ffffffff81b55860:       movq    %rsp, %rbp
    0.00 :   ffffffff81b55863:       movq    (%rdx), %r10
    0.00 :   ffffffff81b55866:       movq    0x8(%r8), %r8
    0.00 :   ffffffff81b5586a:       movabsq $0x736f6d6570736575, %r11 # imm = 0x736F6D6570736575
    0.00 :   ffffffff81b55874:       movabsq $0x6c7967656e657261, %rdx # imm = 0x6C7967656E657261
    0.00 :   ffffffff81b5587e:       movabsq $0x646f72616e646f6d, %rcx # imm = 0x646F72616E646F6D
    0.00 :   ffffffff81b55888:       popq    %rbp
    0.00 :   ffffffff81b55889:       xorq    %r8, %rcx
    0.00 :   ffffffff81b5588c:       xorq    %r10, %rdx
    0.00 :   ffffffff81b5588f:       xorq    %r9, %r8
    0.00 :   ffffffff81b55892:       xorq    %r11, %r10
    0.00 :   ffffffff81b55895:       movabsq $0x7465646279746573, %r11 # imm = 0x7465646279746573
    0.00 :   ffffffff81b5589f:       xorq    %r11, %r8
    0.00 :   ffffffff81b558a2:       addq    %rcx, %r10
    0.00 :   ffffffff81b558a5:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b558a9:       addq    %r8, %rdx
    0.00 :   ffffffff81b558ac:       rolq    $0x10, %r8
    0.00 :   ffffffff81b558b0:       xorq    %r10, %rcx
    0.00 :   ffffffff81b558b3:       xorq    %rdx, %r8
    0.00 :   ffffffff81b558b6:       rolq    $0x20, %r10
    0.00 :   ffffffff81b558ba:       addq    %rcx, %rdx
    0.00 :   ffffffff81b558bd:       addq    %r8, %r10
    0.00 :   ffffffff81b558c0:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b558c4:       rolq    $0x15, %r8
    0.00 :   ffffffff81b558c8:       xorq    %r10, %r8
    0.00 :   ffffffff81b558cb:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b558ce:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b558d2:       addq    %rcx, %r10
    0.00 :   ffffffff81b558d5:       addq    %r8, %rdx
    0.00 :   ffffffff81b558d8:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b558dc:       rolq    $0x10, %r8
    0.00 :   ffffffff81b558e0:       xorq    %r10, %rcx
    0.00 :   ffffffff81b558e3:       rolq    $0x20, %r10
    0.00 :   ffffffff81b558e7:       xorq    %rdx, %r8
    0.00 :   ffffffff81b558ea:       addq    %rcx, %rdx
    0.00 :   ffffffff81b558ed:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b558f1:       addq    %r8, %r10
    0.00 :   ffffffff81b558f4:       rolq    $0x15, %r8
    0.00 :   ffffffff81b558f8:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b558fb:       xorq    %r10, %r8
    0.00 :   ffffffff81b558fe:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55902:       xorq    %r10, %r9
    0.00 :   ffffffff81b55905:       xorq    %rdi, %r8
    0.00 :   ffffffff81b55908:       addq    %rcx, %r9
    0.00 :   ffffffff81b5590b:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b5590f:       addq    %r8, %rdx
    0.00 :   ffffffff81b55912:       rolq    $0x10, %r8
    0.00 :   ffffffff81b55916:       xorq    %r9, %rcx
    0.00 :   ffffffff81b55919:       xorq    %rdx, %r8
    0.00 :   ffffffff81b5591c:       rolq    $0x20, %r9
    0.00 :   ffffffff81b55920:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55923:       addq    %r8, %r9
    0.00 :   ffffffff81b55926:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b5592a:       rolq    $0x15, %r8
    0.00 :   ffffffff81b5592e:       xorq    %r9, %r8
    0.00 :   ffffffff81b55931:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55934:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55938:       addq    %rcx, %r9
    0.00 :   ffffffff81b5593b:       addq    %r8, %rdx
    0.00 :   ffffffff81b5593e:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55942:       rolq    $0x10, %r8
    0.00 :   ffffffff81b55946:       xorq    %r9, %rcx
    0.00 :   ffffffff81b55949:       rolq    $0x20, %r9
    0.00 :   ffffffff81b5594d:       xorq    %rdx, %r8
    0.00 :   ffffffff81b55950:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55953:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55957:       addq    %r8, %r9
    0.00 :   ffffffff81b5595a:       rolq    $0x15, %r8
    0.00 :   ffffffff81b5595e:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55961:       xorq    %r9, %rdi
    0.00 :   ffffffff81b55964:       xorq    %r9, %r8
    0.00 :   ffffffff81b55967:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b5596b:       xorq    %rsi, %r8
    0.00 :   ffffffff81b5596e:       addq    %rcx, %rdi
    0.00 :   ffffffff81b55971:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55975:       xorq    %rdi, %rcx
    0.00 :   ffffffff81b55978:       rolq    $0x20, %rdi
    0.00 :   ffffffff81b5597c:       addq    %r8, %rdx
    0.00 :   ffffffff81b5597f:       movq    %rdi, %r9
    0.00 :   ffffffff81b55982:       movq    %r8, %rdi
    0.00 :   ffffffff81b55985:       rolq    $0x10, %rdi
    0.00 :   ffffffff81b55989:       xorq    %rdx, %rdi
    0.00 :   ffffffff81b5598c:       addq    %rcx, %rdx
    0.00 :   ffffffff81b5598f:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55993:       leaq    (%rdi,%r9), %r8
    0.00 :   ffffffff81b55997:       rolq    $0x15, %rdi
    0.00 :   ffffffff81b5599b:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b5599e:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b559a2:       xorq    %r8, %rdi
    0.00 :   ffffffff81b559a5:       addq    %rcx, %r8
    0.00 :   ffffffff81b559a8:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b559ac:       addq    %rdi, %rdx
    0.00 :   ffffffff81b559af:       rolq    $0x10, %rdi
    0.00 :   ffffffff81b559b3:       xorq    %r8, %rcx
    0.00 :   ffffffff81b559b6:       xorq    %rdx, %rdi
    0.00 :   ffffffff81b559b9:       rolq    $0x20, %r8
    0.00 :   ffffffff81b559bd:       addq    %rcx, %rdx
    0.00 :   ffffffff81b559c0:       addq    %rdi, %r8
    0.00 :   ffffffff81b559c3:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b559c7:       rolq    $0x15, %rdi
    0.00 :   ffffffff81b559cb:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b559ce:       xorq    %r8, %rdi
    0.00 :   ffffffff81b559d1:       xorq    %r8, %rsi
    0.00 :   ffffffff81b559d4:       xorq    %rax, %rdi
    0.00 :   ffffffff81b559d7:       addq    %rcx, %rsi
    0.00 :   ffffffff81b559da:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b559de:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b559e2:       xorq    %rsi, %rcx
    0.00 :   ffffffff81b559e5:       addq    %rdi, %rdx
    0.00 :   ffffffff81b559e8:       rolq    $0x10, %rdi
    0.00 :   ffffffff81b559ec:       xorq    %rdx, %rdi
    0.00 :   ffffffff81b559ef:       rolq    $0x20, %rsi
    0.00 :   ffffffff81b559f3:       addq    %rcx, %rdx
    0.00 :   ffffffff81b559f6:       addq    %rdi, %rsi
    0.00 :   ffffffff81b559f9:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b559fd:       rolq    $0x15, %rdi
    0.00 :   ffffffff81b55a01:       xorq    %rsi, %rdi
    0.00 :   ffffffff81b55a04:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55a07:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55a0b:       addq    %rcx, %rsi
    0.00 :   ffffffff81b55a0e:       addq    %rdi, %rdx
    0.00 :   ffffffff81b55a11:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55a15:       rolq    $0x10, %rdi
    0.00 :   ffffffff81b55a19:       xorq    %rsi, %rcx
    0.00 :   ffffffff81b55a1c:       rolq    $0x20, %rsi
    0.00 :   ffffffff81b55a20:       xorq    %rdx, %rdi
    0.00 :   ffffffff81b55a23:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55a26:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55a2a:       addq    %rdi, %rsi
    0.00 :   ffffffff81b55a2d:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55a30:       rolq    $0x15, %rdi
    0.00 :   ffffffff81b55a34:       xorq    %rsi, %rax
    0.00 :   ffffffff81b55a37:       xorq    %rsi, %rdi
    0.00 :   ffffffff81b55a3a:       movabsq $0x2000000000000000, %rsi # imm = 0x2000000000000000
    0.00 :   ffffffff81b55a44:       addq    %rcx, %rax
  100.00 :   ffffffff81b55a47:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55a4b:       xorq    %rsi, %rdi
    0.00 :   ffffffff81b55a4e:       xorq    %rax, %rcx
    0.00 :   ffffffff81b55a51:       rolq    $0x20, %rax
    0.00 :   ffffffff81b55a55:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55a59:       movq    %rax, %r8
    0.00 :   ffffffff81b55a5c:       movq    %rdi, %rax
    0.00 :   ffffffff81b55a5f:       addq    %rdi, %rdx
    0.00 :   ffffffff81b55a62:       rolq    $0x10, %rax
    0.00 :   ffffffff81b55a66:       xorq    %rdx, %rax
    0.00 :   ffffffff81b55a69:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55a6c:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55a70:       leaq    (%r8,%rax), %rdi
    0.00 :   ffffffff81b55a74:       rolq    $0x15, %rax
    0.00 :   ffffffff81b55a78:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55a7b:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55a7f:       xorq    %rdi, %rax
    0.00 :   ffffffff81b55a82:       addq    %rcx, %rdi
    0.00 :   ffffffff81b55a85:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55a89:       addq    %rax, %rdx
    0.00 :   ffffffff81b55a8c:       rolq    $0x10, %rax
    0.00 :   ffffffff81b55a90:       xorq    %rdi, %rcx
    0.00 :   ffffffff81b55a93:       xorq    %rdx, %rax
    0.00 :   ffffffff81b55a96:       rolq    $0x20, %rdi
    0.00 :   ffffffff81b55a9a:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55a9d:       addq    %rax, %rdi
    0.00 :   ffffffff81b55aa0:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55aa4:       rolq    $0x15, %rax
    0.00 :   ffffffff81b55aa8:       xorq    %rdi, %rax
    0.00 :   ffffffff81b55aab:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55aae:       xorq    %rsi, %rdi
    0.00 :   ffffffff81b55ab1:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55ab5:       leaq    (%rcx,%rdi), %rsi
    0.00 :   ffffffff81b55ab9:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55abd:       xorb    $-0x1, %dl
    0.00 :   ffffffff81b55ac0:       addq    %rax, %rdx
    0.00 :   ffffffff81b55ac3:       rolq    $0x10, %rax
    0.00 :   ffffffff81b55ac7:       xorq    %rsi, %rcx
    0.00 :   ffffffff81b55aca:       xorq    %rdx, %rax
    0.00 :   ffffffff81b55acd:       rolq    $0x20, %rsi
    0.00 :   ffffffff81b55ad1:       addq    %rax, %rsi
    0.00 :   ffffffff81b55ad4:       rolq    $0x15, %rax
    0.00 :   ffffffff81b55ad8:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55adb:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55adf:       xorq    %rsi, %rax
    0.00 :   ffffffff81b55ae2:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55ae5:       movq    %rax, %rdi
    0.00 :   ffffffff81b55ae8:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55aec:       leaq    (%rsi,%rcx), %rax
    0.00 :   ffffffff81b55af0:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55af4:       movq    %rdi, %rsi
    0.00 :   ffffffff81b55af7:       addq    %rdi, %rdx
    0.00 :   ffffffff81b55afa:       rolq    $0x10, %rsi
    0.00 :   ffffffff81b55afe:       xorq    %rax, %rcx
    0.00 :   ffffffff81b55b01:       xorq    %rdx, %rsi
    0.00 :   ffffffff81b55b04:       rolq    $0x20, %rax
    0.00 :   ffffffff81b55b08:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55b0b:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55b0f:       addq    %rsi, %rax
    0.00 :   ffffffff81b55b12:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55b15:       rolq    $0x15, %rsi
    0.00 :   ffffffff81b55b19:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55b1d:       xorq    %rax, %rsi
    0.00 :   ffffffff81b55b20:       addq    %rcx, %rax
    0.00 :   ffffffff81b55b23:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55b27:       xorq    %rax, %rcx
    0.00 :   ffffffff81b55b2a:       addq    %rsi, %rdx
    0.00 :   ffffffff81b55b2d:       rolq    $0x10, %rsi
    0.00 :   ffffffff81b55b31:       xorq    %rdx, %rsi
    0.00 :   ffffffff81b55b34:       rolq    $0x20, %rax
    0.00 :   ffffffff81b55b38:       addq    %rcx, %rdx
    0.00 :   ffffffff81b55b3b:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55b3f:       addq    %rsi, %rax
    0.00 :   ffffffff81b55b42:       rolq    $0x15, %rsi
    0.00 :   ffffffff81b55b46:       xorq    %rdx, %rcx
    0.00 :   ffffffff81b55b49:       xorq    %rax, %rsi
    0.00 :   ffffffff81b55b4c:       rolq    $0x20, %rdx
    0.00 :   ffffffff81b55b50:       addq    %rcx, %rax
    0.00 :   ffffffff81b55b53:       rolq    $0xd, %rcx
    0.00 :   ffffffff81b55b57:       addq    %rsi, %rdx
    0.00 :   ffffffff81b55b5a:       xorq    %rax, %rcx
    0.00 :   ffffffff81b55b5d:       movq    %rsi, %rax
    0.00 :   ffffffff81b55b60:       rolq    $0x10, %rax
    0.00 :   ffffffff81b55b64:       leaq    (%rcx,%rdx), %rsi
    0.00 :   ffffffff81b55b68:       rolq    $0x11, %rcx
    0.00 :   ffffffff81b55b6c:       xorq    %rdx, %rax
    0.00 :   ffffffff81b55b6f:       rolq    $0x15, %rax
    0.00 :   ffffffff81b55b73:       xorq    %rsi, %rax
    0.00 :   ffffffff81b55b76:       rolq    $0x20, %rsi
    0.00 :   ffffffff81b55b7a:       xorq    %rcx, %rax
    0.00 :   ffffffff81b55b7d:       xorq    %rsi, %rax
    0.00 :   ffffffff81b55b80:       xorl    %edx, %edx
    0.00 :   ffffffff81b55b82:       xorl    %ecx, %ecx
    0.00 :   ffffffff81b55b84:       xorl    %esi, %esi
    0.00 :   ffffffff81b55b86:       xorl    %edi, %edi
    0.00 :   ffffffff81b55b88:       xorl    %r8d, %r8d
    0.00 :   ffffffff81b55b8b:       xorl    %r9d, %r9d
    0.00 :   ffffffff81b55b8e:       xorl    %r10d, %r10d
    0.00 :   ffffffff81b55b91:       xorl    %r11d, %r11d
    0.00 :   ffffffff81b55b94:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81261ea0 <folio_test_hugetlb>:
         : 5                ; folio_test_hugetlb():
    0.00 :   ffffffff81261ea0:       pushq   %rbp
    0.00 :   ffffffff81261ea1:       movq    %rsp, %rbp
    0.00 :   ffffffff81261ea4:       movq    (%rdi), %rax
    0.00 :   ffffffff81261ea7:       shrq    $0x10, %rax
    0.00 :   ffffffff81261eab:       andl    $0x1, %eax
    0.00 :   ffffffff81261eae:       je      0xffffffff81261eb7 <folio_test_hugetlb+0x17>
    0.00 :   ffffffff81261eb0:       cmpb    $0x2, 0x50(%rdi)
    0.00 :   ffffffff81261eb4:       sete    %al
    0.00 :   ffffffff81261eb7:       popq    %rbp
    0.00 :   ffffffff81261eb8:       xorl    %edi, %edi
  100.00 :   ffffffff81261eba:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .plt.got:
         :
         : 4     00000000000223a0 <.plt.got>:
  100.00 :   223a8:          jmpq    *0x1a8c2a(%rip)         # 0x1cafd8
    0.00 :   223ae:          nop
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     000000000004e550 <parse_printf_format>:
    0.00 :   4ee00:          movl    0x20(%rdi), %eax
    0.00 :   4ee03:          testl   %eax, %eax
    0.00 :   4ee05:          je      0x4eeab <parse_printf_format+0x95b>
    0.00 :   4ee0b:          pushq   %r13
    0.00 :   4ee0d:          pushq   %r12
    0.00 :   4ee0f:          pushq   %rbp
    0.00 :   4ee10:          pushq   %rbx
    0.00 :   4ee11:          movq    %rdx, %rbp
    0.00 :   4ee14:          subq    $0x8, %rsp
    0.00 :   4ee18:          testq   %rdx, %rdx
    0.00 :   4ee1b:          je      0x4eea0 <parse_printf_format+0x950>
    0.00 :   4ee21:          movq    %rdi, %r12
    0.00 :   4ee24:          movq    %rsi, %r13
    0.00 :   4ee27:          movq    0x8(%rdi), %rdi
    0.00 :   4ee2b:          jmp     0x4ee5a <parse_printf_format+0x90a>
    0.00 :   4ee2d:          nopl    (%rax)
    0.00 :   4ee30:          subq    %rdi, %rbx
    0.00 :   4ee33:          movq    %r13, %rsi
    0.00 :   4ee36:          cmpq    %rbp, %rbx
    0.00 :   4ee39:          cmovaq  %rbp, %rbx
    0.00 :   4ee3d:          movq    %rbx, %rdx
    0.00 :   4ee40:          addq    %rbx, %r13
    0.00 :   4ee43:          callq   0x222b0 <_dl_audit_symbind_alt@plt+0x40>
    0.00 :   4ee48:          movq    0x8(%r12), %rdi
    0.00 :   4ee4d:          addq    %rbx, %rdi
    0.00 :   4ee50:          subq    %rbx, %rbp
    0.00 :   4ee53:          movq    %rdi, 0x8(%r12)
    0.00 :   4ee58:          je      0x4eea0 <parse_printf_format+0x950>
    0.00 :   4ee5a:          movq    0x10(%r12), %rbx
    0.00 :   4ee5f:          cmpq    %rdi, %rbx
    0.00 :   4ee62:          jne     0x4ee30 <parse_printf_format+0x8e0>
    0.00 :   4ee64:          movq    %r12, %rdi
    0.00 :   4ee67:          callq   0x4e960 <parse_printf_format+0x410>
    0.00 :   4ee6c:          testb   %al, %al
    0.00 :   4ee6e:          je      0x4eea0 <parse_printf_format+0x950>
    0.00 :   4ee70:          movq    0x8(%r12), %rdi
    0.00 :   4ee75:          movq    0x10(%r12), %rbx
    0.00 :   4ee7a:          cmpq    %rbx, %rdi
    0.00 :   4ee7d:          jne     0x4ee30 <parse_printf_format+0x8e0>
    0.00 :   4ee7f:          leaq    0x14782a(%rip), %rcx    # 0x1966b0 <_nl_default_dirname+0x1c0>
    0.00 :   4ee86:          movl    $0x23, %edx
    0.00 :   4ee8b:          leaq    0x13e294(%rip), %rsi    # 0x18d126 <_libc_intl_domainname+0x298>
    0.00 :   4ee92:          leaq    0x1434e7(%rip), %rdi    # 0x192380 <_itoa_lower_digits+0xbc0>
    0.00 :   4ee99:          callq   0x30e40 <__assert+0x10>
    0.00 :   4ee9e:          nop
    0.00 :   4eea0:          addq    $0x8, %rsp
    0.00 :   4eea4:          popq    %rbx
    0.00 :   4eea5:          popq    %rbp
    0.00 :   4eea6:          popq    %r12
  100.00 :   4eea8:          popq    %r13
    0.00 :   4eeaa:          retq
    0.00 :   4eeab:          retq
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810d5fd0 <psi_task_change>:
         : 5                ; psi_task_change():
    0.00 :   ffffffff810d5fd0:       pushq   %rbp
  100.00 :   ffffffff810d5fd1:       movq    %rsp, %rbp
    0.00 :   ffffffff810d5fd4:       subq    $0x28, %rsp
    0.00 :   ffffffff810d5fd8:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff810d5fdc:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff810d5fe0:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff810d5fe4:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff810d5fe8:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff810d5fec:       movl    0x2e0(%rdi), %eax
    0.00 :   ffffffff810d5ff2:       movl    0x14(%rdi), %r14d
    0.00 :   ffffffff810d5ff6:       testl   %eax, %eax
    0.00 :   ffffffff810d5ff8:       jne     0xffffffff810d6024 <psi_task_change+0x54>
    0.00 :   ffffffff810d5ffa:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff810d5ffe:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff810d6002:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff810d6006:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff810d600a:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff810d600e:       leave
    0.00 :   ffffffff810d600f:       xorl    %eax, %eax
    0.00 :   ffffffff810d6011:       xorl    %edx, %edx
    0.00 :   ffffffff810d6013:       xorl    %ecx, %ecx
    0.00 :   ffffffff810d6015:       xorl    %esi, %esi
    0.00 :   ffffffff810d6017:       xorl    %edi, %edi
    0.00 :   ffffffff810d6019:       xorl    %r8d, %r8d
    0.00 :   ffffffff810d601c:       xorl    %r9d, %r9d
    0.00 :   ffffffff810d601f:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810d6024:       movq    %rdi, %rbx
    0.00 :   ffffffff810d6027:       movl    %esi, %r12d
    0.00 :   ffffffff810d602a:       movl    %edx, %r13d
    0.00 :   ffffffff810d602d:       callq   0xffffffff810ce7a0 <psi_flags_change>
    0.00 :   ffffffff810d6032:       movl    %r14d, %edi
    0.00 :   ffffffff810d6035:       callq   0xffffffff810d0c80 <sched_clock_cpu>
    0.00 :   ffffffff810d603a:       movq    %rax, %r15
    0.00 :   ffffffff810d603d:       nop
    0.00 :   ffffffff810d603f:       movq    0x5f0(%rbx), %rax
    0.00 :   ffffffff810d6046:       movq    $-0x7ddc91c0, %rbx # imm = 0x82236E40
    0.00 :   ffffffff810d604d:       movq    0x78(%rax), %rax
    0.00 :   ffffffff810d6051:       movq    0xf8(%rax), %rdx
    0.00 :   ffffffff810d6058:       cmpq    $0x1, 0x68(%rdx)
    0.00 :   ffffffff810d605d:       je      0xffffffff810d6066 <psi_task_change+0x96>
    0.00 :   ffffffff810d605f:       movq    0x458(%rax), %rbx
    0.00 :   ffffffff810d6066:       movq    %rbx, %rdi
    0.00 :   ffffffff810d6069:       movl    $0x1, %r9d
    0.00 :   ffffffff810d606f:       movq    %r15, %r8
    0.00 :   ffffffff810d6072:       movl    %r13d, %ecx
    0.00 :   ffffffff810d6075:       movl    %r12d, %edx
    0.00 :   ffffffff810d6078:       movl    %r14d, %esi
    0.00 :   ffffffff810d607b:       callq   0xffffffff810cef00 <psi_group_change>
    0.00 :   ffffffff810d6080:       movq    (%rbx), %rbx
    0.00 :   ffffffff810d6083:       testq   %rbx, %rbx
    0.00 :   ffffffff810d6086:       jne     0xffffffff810d6066 <psi_task_change+0x96>
    0.00 :   ffffffff810d6088:       jmp     0xffffffff810d5ffa <psi_task_change+0x2a>
    0.00 :   ffffffff810d608d:       movq    $-0x7ddc91c0, %rbx # imm = 0x82236E40
    0.00 :   ffffffff810d6094:       jmp     0xffffffff810d6066 <psi_task_change+0x96>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     000000000004e550 <parse_printf_format>:
    0.00 :   4e900:          movl    0x20(%rdi), %eax
    0.00 :   4e903:          testl   %eax, %eax
    0.00 :   4e905:          je      0x4e946 <parse_printf_format+0x3f6>
    0.00 :   4e907:          movq    0x8(%rdi), %rdx
    0.00 :   4e90b:          xorl    %ecx, %ecx
    0.00 :   4e90d:          subq    (%rdi), %rdx
    0.00 :   4e910:          movq    %rdx, %rax
    0.00 :   4e913:          addq    0x18(%rdi), %rax
    0.00 :   4e917:          js      0x4e94c <parse_printf_format+0x3fc>
    0.00 :   4e919:          cmpq    %rdx, %rax
    0.00 :   4e91c:          jb      0x4e94c <parse_printf_format+0x3fc>
    0.00 :   4e91e:          movslq  %eax, %rdx
    0.00 :   4e921:          cmpq    %rdx, %rax
    0.00 :   4e924:          movl    $0x1, %edx
    0.00 :   4e929:          cmovnel %edx, %ecx
    0.00 :   4e92c:          testl   %ecx, %ecx
    0.00 :   4e92e:          jne     0x4e938 <parse_printf_format+0x3e8>
  100.00 :   4e930:          retq
    0.00 :   4e931:          nopl    (%rax)
    0.00 :   4e938:          movq    0x17c4b9(%rip), %rax    # 0x1cadf8
    0.00 :   4e93f:          movl    $0x4b, %fs:(%rax)
    0.00 :   4e946:          movl    $0xffffffff, %eax       # imm = 0xFFFFFFFF
    0.00 :   4e94b:          retq
    0.00 :   4e94c:          movl    $0x1, %ecx
    0.00 :   4e951:          jmp     0x4e91e <parse_printf_format+0x3ce>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff817c7a10 <igb_msix_ring>:
         : 5                ; igb_msix_ring():
    0.00 :   ffffffff817c7a10:       pushq   %rbp
    0.00 :   ffffffff817c7a11:       movq    %rsp, %rbp
    0.00 :   ffffffff817c7a14:       pushq   %rbx
    0.00 :   ffffffff817c7a15:       cmpb    $0x0, 0x12(%rsi)
    0.00 :   ffffffff817c7a19:       je      0xffffffff817c7a4c <igb_msix_ring+0x3c>
    0.00 :   ffffffff817c7a1b:       movzwl  0x10(%rsi), %eax
    0.00 :   ffffffff817c7a1f:       movl    $0x4, %edx
    0.00 :   ffffffff817c7a24:       movq    (%rsi), %rcx
    0.00 :   ffffffff817c7a27:       andw    $0x7ffc, %ax    # imm = 0x7FFC
    0.00 :   ffffffff817c7a2b:       cmovel  %edx, %eax
    0.00 :   ffffffff817c7a2e:       movzwl  %ax, %eax
    0.00 :   ffffffff817c7a31:       movl    %eax, %edx
    0.00 :   ffffffff817c7a33:       orl     $0x80000000, %edx # imm = 0x80000000
    0.00 :   ffffffff817c7a39:       cmpl    $0x1, 0x5ec(%rcx)
    0.00 :   ffffffff817c7a40:       je      0xffffffff817c7a73 <igb_msix_ring+0x63>
    0.00 :   ffffffff817c7a42:       movq    0x18(%rsi), %rax
    0.00 :   ffffffff817c7a46:       movl    %edx, (%rax)
    0.00 :   ffffffff817c7a48:       movb    $0x0, 0x12(%rsi)
    0.00 :   ffffffff817c7a4c:       leaq    0x50(%rsi), %rbx
    0.00 :   ffffffff817c7a50:       movq    %rbx, %rdi
    0.00 :   ffffffff817c7a53:       callq   0xffffffff81949250 <napi_schedule_prep>
    0.00 :   ffffffff817c7a58:       testb   %al, %al
    0.00 :   ffffffff817c7a5a:       jne     0xffffffff817c7a7c <igb_msix_ring+0x6c>
    0.00 :   ffffffff817c7a5c:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff817c7a60:       movl    $0x1, %eax
    0.00 :   ffffffff817c7a65:       leave
    0.00 :   ffffffff817c7a66:       xorl    %edx, %edx
    0.00 :   ffffffff817c7a68:       xorl    %ecx, %ecx
    0.00 :   ffffffff817c7a6a:       xorl    %esi, %esi
    0.00 :   ffffffff817c7a6c:       xorl    %edi, %edi
    0.00 :   ffffffff817c7a6e:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff817c7a73:       movl    %eax, %edx
    0.00 :   ffffffff817c7a75:       shll    $0x10, %edx
    0.00 :   ffffffff817c7a78:       addl    %eax, %edx
    0.00 :   ffffffff817c7a7a:       jmp     0xffffffff817c7a42 <igb_msix_ring+0x32>
    0.00 :   ffffffff817c7a7c:       movq    %rbx, %rdi
    0.00 :   ffffffff817c7a7f:       callq   0xffffffff81951150 <__napi_schedule>
    0.00 :   ffffffff817c7a84:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff817c7a88:       movl    $0x1, %eax
    0.00 :   ffffffff817c7a8d:       leave
  100.00 :   ffffffff817c7a8e:       xorl    %edx, %edx
    0.00 :   ffffffff817c7a90:       xorl    %ecx, %ecx
    0.00 :   ffffffff817c7a92:       xorl    %esi, %esi
    0.00 :   ffffffff817c7a94:       xorl    %edi, %edi
    0.00 :   ffffffff817c7a96:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810bef00 <update_sd_lb_stats.constprop.0>:
         : 5                ; update_sd_lb_stats.constprop.0():
    0.00 :   ffffffff810bef00:       pushq   %rbp
    0.00 :   ffffffff810bef01:       movq    %rsp, %rbp
    0.00 :   ffffffff810bef04:       pushq   %r15
    0.00 :   ffffffff810bef06:       movq    %rsi, %r15
    0.00 :   ffffffff810bef09:       pushq   %r14
    0.00 :   ffffffff810bef0b:       pushq   %r13
    0.00 :   ffffffff810bef0d:       movq    %rdi, %r13
    0.00 :   ffffffff810bef10:       pushq   %r12
    0.00 :   ffffffff810bef12:       pushq   %rbx
    0.00 :   ffffffff810bef13:       subq    $0xb0, %rsp
    0.00 :   ffffffff810bef1a:       movq    %gs:0x28, %rax
    0.00 :   ffffffff810bef23:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff810bef27:       xorl    %eax, %eax
    0.00 :   ffffffff810bef29:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff810bef2e:       movq    (%rdi), %rax
    0.00 :   ffffffff810bef31:       leaq    -0x80(%rbp), %rdi
    0.00 :   ffffffff810bef35:       movl    $0xa, %ecx
    0.00 :   ffffffff810bef3a:       movq    $0x22f40, %rbx  # imm = 0x22F40
    0.00 :   ffffffff810bef41:       xorl    %r14d, %r14d
    0.00 :   ffffffff810bef44:       movq    $0x0, -0xc0(%rbp)
    0.00 :   ffffffff810bef4f:       movq    0x8(%rax), %rsi
    0.00 :   ffffffff810bef53:       movq    0x10(%rax), %r8
    0.00 :   ffffffff810bef57:       leaq    0x80(%r15), %rax
    0.00 :   ffffffff810bef5e:       movq    %r15, %r10
    0.00 :   ffffffff810bef61:       movq    %rax, -0xd0(%rbp)
    0.00 :   ffffffff810bef68:       xorl    %eax, %eax
    0.00 :   ffffffff810bef6a:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff810bef6d:       movq    %rbx, %rax
    0.00 :   ffffffff810bef70:       movq    %rsi, -0xd8(%rbp)
    0.00 :   ffffffff810bef77:       movq    %r13, %rbx
    0.00 :   ffffffff810bef7a:       movq    %rax, %r13
    0.00 :   ffffffff810bef7d:       leaq    0x20(%r8), %rax
    0.00 :   ffffffff810bef81:       movq    %rax, -0x90(%rbp)
    0.00 :   ffffffff810bef88:       movl    0x14(%rbx), %eax
    0.00 :   ffffffff810bef8b:       btq     %rax, 0x20(%r8)
    0.00 :   ffffffff810bef90:       setb    -0xb1(%rbp)
    0.00 :   ffffffff810bef97:       movzbl  -0xb1(%rbp), %eax
    0.00 :   ffffffff810bef9e:       leaq    -0x80(%rbp), %r12
    0.00 :   ffffffff810befa2:       testb   %al, %al
    0.00 :   ffffffff810befa4:       je      0xffffffff810beffa <update_sd_lb_stats.constprop.0+0xfa>
    0.00 :   ffffffff810befa6:       movq    %r8, 0x8(%r10)
    0.00 :   ffffffff810befaa:       cmpl    $0x2, 0x2c(%rbx)
    0.00 :   ffffffff810befae:       jne     0xffffffff810befcc <update_sd_lb_stats.constprop.0+0xcc>
    0.00 :   ffffffff810befb0:       movq    0x10(%r8), %rax
    0.00 :   ffffffff810befb4:       movq    $0x0, -0x88(%rbp)
    0.00 :   ffffffff810befbf:       movq    0x11489fa(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810befc6:       cmpq    0x20(%rax), %rdx
    0.00 :   ffffffff810befca:       js      0xffffffff810beff3 <update_sd_lb_stats.constprop.0+0xf3>
    0.00 :   ffffffff810befcc:       movl    0x14(%rbx), %esi
    0.00 :   ffffffff810befcf:       movq    (%rbx), %rdi
    0.00 :   ffffffff810befd2:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff810befd9:       movq    %r8, -0x98(%rbp)
    0.00 :   ffffffff810befe0:       callq   0xffffffff810bed30 <update_group_capacity>
    0.00 :   ffffffff810befe5:       movq    -0xa0(%rbp), %r10
    0.00 :   ffffffff810befec:       movq    -0x98(%rbp), %r8
    0.00 :   ffffffff810beff3:       movq    -0xd0(%rbp), %r12
    0.00 :   ffffffff810beffa:       xorl    %eax, %eax
    0.00 :   ffffffff810beffc:       movl    $0xa, %ecx
    0.00 :   ffffffff810bf001:       movq    %r12, %rdi
    0.00 :   ffffffff810bf004:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff810bf007:       xorl    %r15d, %r15d
    0.00 :   ffffffff810bf00a:       movq    %r8, -0xa0(%rbp)
    0.00 :   ffffffff810bf011:       movq    %r10, -0xc8(%rbp)
    0.00 :   ffffffff810bf018:       movq    0x8(%r10), %rax
    0.00 :   ffffffff810bf01c:       movq    %rax, -0x98(%rbp)
    0.00 :   ffffffff810bf023:       movq    %r13, %rax
    0.00 :   ffffffff810bf026:       movq    %rbx, %r13
    0.00 :   ffffffff810bf029:       movq    %rax, %rbx
    0.00 :   ffffffff810bf02c:       jmp     0xffffffff810bf048 <update_sd_lb_stats.constprop.0+0x148>
    0.00 :   ffffffff810bf02e:       movq    0xa20(%rdx), %rax
    0.00 :   ffffffff810bf035:       cmpq    %rax, 0x40(%r12)
    0.00 :   ffffffff810bf03a:       jae     0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf03c:       movq    %rax, 0x40(%r12)
    0.00 :   ffffffff810bf041:       orl     $0x1, %r14d
    0.00 :   ffffffff810bf045:       incl    %r15d
    0.00 :   ffffffff810bf048:       movl    0x12a7a12(%rip), %edx # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810bf04e:       movq    0x38(%r13), %rsi
    0.00 :   ffffffff810bf052:       movslq  %r15d, %rcx
    0.00 :   ffffffff810bf055:       movq    -0x90(%rbp), %rdi
    0.00 :   ffffffff810bf05c:       callq   0xffffffff815a0960 <_find_next_and_bit>
    0.00 :   ffffffff810bf061:       cmpl    0x12a79f9(%rip), %eax # 0xffffffff82366a60 <nr_cpu_ids>
    0.00 :   ffffffff810bf067:       movq    %rax, %r15
    0.00 :   ffffffff810bf06a:       movl    %eax, %r10d
    0.00 :   ffffffff810bf06d:       jae     0xffffffff810bf1fa <update_sd_lb_stats.constprop.0+0x2fa>
    0.00 :   ffffffff810bf073:       movslq  %r15d, %rdi
    0.00 :   ffffffff810bf076:       movq    -0x7dedc720(,%rdi,8), %rdx
    0.00 :   ffffffff810bf07e:       addq    %rbx, %rdx
    0.00 :   ffffffff810bf081:       movq    0x120(%rdx), %rsi
    0.00 :   ffffffff810bf088:       addq    %rsi, 0x8(%r12)
    0.00 :   ffffffff810bf08d:       movq    -0x7dedc720(,%rdi,8), %rcx
    0.00 :   ffffffff810bf095:       leaq    (%rbx,%rcx), %rax
    0.00 :   ffffffff810bf099:       movq    0xa08(%rcx,%rbx), %rcx
    0.00 :   ffffffff810bf0a1:       movq    0x130(%rax), %r11
    0.00 :   ffffffff810bf0a8:       movl    0x138(%rax), %eax
    0.00 :   ffffffff810bf0ae:       cmpq    %r11, %rax
    0.00 :   ffffffff810bf0b1:       cmovbq  %r11, %rax
    0.00 :   ffffffff810bf0b5:       cmpq    %rcx, %rax
    0.00 :   ffffffff810bf0b8:       cmovaq  %rcx, %rax
    0.00 :   ffffffff810bf0bc:       addq    %rax, 0x18(%r12)
    0.00 :   ffffffff810bf0c1:       movq    0x128(%rdx), %rax
    0.00 :   ffffffff810bf0c8:       addq    %rax, 0x20(%r12)
    0.00 :   ffffffff810bf0cd:       movl    0x94(%rdx), %eax
    0.00 :   ffffffff810bf0d3:       addl    %eax, 0x2c(%r12)
    0.00 :   ffffffff810bf0d8:       movl    %r14d, %eax
    0.00 :   ffffffff810bf0db:       movl    0x4(%rdx), %ecx
    0.00 :   ffffffff810bf0de:       orl     $0x1, %eax
    0.00 :   ffffffff810bf0e1:       addl    %ecx, 0x28(%r12)
    0.00 :   ffffffff810bf0e6:       cmpl    $0x1, %ecx
    0.00 :   ffffffff810bf0e9:       movq    -0x7dedc720(,%rdi,8), %rdi
    0.00 :   ffffffff810bf0f1:       cmovgl  %eax, %r14d
    0.00 :   ffffffff810bf0f5:       leaq    (%rdi,%rbx), %rax
    0.00 :   ffffffff810bf0f9:       movq    0x130(%rax), %r11
    0.00 :   ffffffff810bf100:       movl    0x138(%rax), %eax
    0.00 :   ffffffff810bf106:       cmpq    %r11, %rax
    0.00 :   ffffffff810bf109:       cmovbq  %r11, %rax
    0.00 :   ffffffff810bf10d:       movq    0xa08(%rdi,%rbx), %r11
    0.00 :   ffffffff810bf115:       cmpq    %r11, %rax
    0.00 :   ffffffff810bf118:       cmovaq  %r11, %rax
    0.00 :   ffffffff810bf11c:       leaq    (%rax,%rax,4), %r11
    0.00 :   ffffffff810bf120:       movq    0xa00(%rdi,%rbx), %rax
    0.00 :   ffffffff810bf128:       movl    %r14d, %edi
    0.00 :   ffffffff810bf12b:       orl     $0x2, %edi
    0.00 :   ffffffff810bf12e:       shlq    $0x8, %r11
    0.00 :   ffffffff810bf132:       shlq    $0xa, %rax
    0.00 :   ffffffff810bf136:       cmpq    %rax, %r11
    0.00 :   ffffffff810bf139:       movl    0x8(%rdx), %eax
    0.00 :   ffffffff810bf13c:       cmovael %edi, %r14d
    0.00 :   ffffffff810bf140:       addl    %eax, 0x48(%r12)
    0.00 :   ffffffff810bf145:       movl    0xc(%rdx), %eax
    0.00 :   ffffffff810bf148:       addl    %eax, 0x4c(%r12)
    0.00 :   ffffffff810bf14d:       testl   %ecx, %ecx
    0.00 :   ffffffff810bf14f:       je      0xffffffff810bf1c4 <update_sd_lb_stats.constprop.0+0x2c4>
    0.00 :   ffffffff810bf151:       movq    -0x98(%rbp), %rcx
    0.00 :   ffffffff810bf158:       cmpq    %rcx, -0xa0(%rbp)
    0.00 :   ffffffff810bf15f:       je      0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf165:       movq    (%r13), %rax
    0.00 :   ffffffff810bf169:       testb   $0x20, 0x3c(%rax)
    0.00 :   ffffffff810bf16d:       jne     0xffffffff810bf02e <update_sd_lb_stats.constprop.0+0x12e>
    0.00 :   ffffffff810bf173:       cmpl    $0x1, 0x2c(%r13)
    0.00 :   ffffffff810bf178:       je      0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf17e:       cmpl    $0x1, 0x94(%rdx)
    0.00 :   ffffffff810bf185:       jne     0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf18b:       movl    0x2c(%rax), %eax
    0.00 :   ffffffff810bf18e:       movl    $0x64, %edi
    0.00 :   ffffffff810bf193:       imulq   0xa00(%rdx), %rax
    0.00 :   ffffffff810bf19b:       movq    0xa08(%rdx), %rdx
    0.00 :   ffffffff810bf1a2:       imulq   %rdi, %rdx
    0.00 :   ffffffff810bf1a6:       cmpq    %rdx, %rax
    0.00 :   ffffffff810bf1a9:       jae     0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf1af:       cmpq    %rsi, 0x40(%r12)
    0.00 :   ffffffff810bf1b4:       jae     0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf1ba:       movq    %rsi, 0x40(%r12)
    0.00 :   ffffffff810bf1bf:       jmp     0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf1c4:       movl    %r10d, %edi
    0.00 :   ffffffff810bf1c7:       movq    %rsi, -0xb0(%rbp)
    0.00 :   ffffffff810bf1ce:       movq    %rdx, -0xa8(%rbp)
    0.00 :   ffffffff810bf1d5:       callq   0xffffffff810acf60 <idle_cpu>
    0.00 :   ffffffff810bf1da:       testl   %eax, %eax
    0.00 :   ffffffff810bf1dc:       movq    -0xa8(%rbp), %rdx
    0.00 :   ffffffff810bf1e3:       movq    -0xb0(%rbp), %rsi
    0.00 :   ffffffff810bf1ea:       je      0xffffffff810bf151 <update_sd_lb_stats.constprop.0+0x251>
    0.00 :   ffffffff810bf1f0:       incl    0x30(%r12)
    0.00 :   ffffffff810bf1f5:       jmp     0xffffffff810bf045 <update_sd_lb_stats.constprop.0+0x145>
    0.00 :   ffffffff810bf1fa:       movq    -0xa0(%rbp), %r8
    0.00 :   ffffffff810bf201:       movq    %rbx, %rax
    0.00 :   ffffffff810bf204:       movq    %r13, %rbx
    0.00 :   ffffffff810bf207:       movq    %rax, %r13
    0.00 :   ffffffff810bf20a:       movq    -0x98(%rbp), %rsi
    0.00 :   ffffffff810bf211:       movq    -0xc8(%rbp), %r10
    0.00 :   ffffffff810bf218:       movq    0x10(%r8), %rax
    0.00 :   ffffffff810bf21c:       cmpq    %rsi, %r8
    0.00 :   ffffffff810bf21f:       movq    0x8(%rax), %rax
    0.00 :   ffffffff810bf223:       movq    %rax, 0x10(%r12)
    0.00 :   ffffffff810bf228:       movl    0xc(%r8), %eax
    0.00 :   ffffffff810bf22c:       movl    %eax, 0x34(%r12)
    0.00 :   ffffffff810bf231:       movq    (%rbx), %rdx
    0.00 :   ffffffff810bf234:       je      0xffffffff810bf24f <update_sd_lb_stats.constprop.0+0x34f>
    0.00 :   ffffffff810bf236:       testb   $0x4, 0x3d(%rdx)
    0.00 :   ffffffff810bf23a:       je      0xffffffff810bf24f <update_sd_lb_stats.constprop.0+0x34f>
    0.00 :   ffffffff810bf23c:       cmpl    $0x1, 0x2c(%rbx)
    0.00 :   ffffffff810bf240:       je      0xffffffff810bf24f <update_sd_lb_stats.constprop.0+0x34f>
    0.00 :   ffffffff810bf242:       movl    0x2c(%r12), %ecx
    0.00 :   ffffffff810bf247:       testl   %ecx, %ecx
    0.00 :   ffffffff810bf249:       jne     0xffffffff810bf5b2 <update_sd_lb_stats.constprop.0+0x6b2>
    0.00 :   ffffffff810bf24f:       movl    0x28(%r12), %edi
    0.00 :   ffffffff810bf254:       movl    0x2c(%rdx), %edx
    0.00 :   ffffffff810bf257:       cmpl    %edi, %eax
    0.00 :   ffffffff810bf259:       jae     0xffffffff810bf29d <update_sd_lb_stats.constprop.0+0x39d>
    0.00 :   ffffffff810bf25b:       movq    0x10(%r12), %rsi
    0.00 :   ffffffff810bf260:       movl    $0x64, %r11d
    0.00 :   ffffffff810bf266:       movl    %edx, %ecx
    0.00 :   ffffffff810bf268:       movq    %rsi, %r9
    0.00 :   ffffffff810bf26b:       imulq   %r11, %r9
    0.00 :   ffffffff810bf26f:       movq    0x18(%r12), %r11
    0.00 :   ffffffff810bf274:       imulq   %rcx, %r11
    0.00 :   ffffffff810bf278:       cmpq    %r11, %r9
    0.00 :   ffffffff810bf27b:       jb      0xffffffff810bf546 <update_sd_lb_stats.constprop.0+0x646>
    0.00 :   ffffffff810bf281:       imulq   %rsi, %rcx
    0.00 :   ffffffff810bf285:       movq    0x20(%r12), %r11
    0.00 :   ffffffff810bf28a:       movl    $0x64, %r15d
    0.00 :   ffffffff810bf290:       imulq   %r15, %r11
    0.00 :   ffffffff810bf294:       cmpq    %r11, %rcx
    0.00 :   ffffffff810bf297:       jb      0xffffffff810bf546 <update_sd_lb_stats.constprop.0+0x646>
    0.00 :   ffffffff810bf29d:       movq    0x10(%r8), %rcx
    0.00 :   ffffffff810bf2a1:       movl    0x28(%rcx), %r11d
    0.00 :   ffffffff810bf2a5:       testl   %r11d, %r11d
    0.00 :   ffffffff810bf2a8:       jne     0xffffffff810bf579 <update_sd_lb_stats.constprop.0+0x679>
    0.00 :   ffffffff810bf2ae:       movl    0x3c(%r12), %ecx
    0.00 :   ffffffff810bf2b3:       testl   %ecx, %ecx
    0.00 :   ffffffff810bf2b5:       jne     0xffffffff810bf58c <update_sd_lb_stats.constprop.0+0x68c>
    0.00 :   ffffffff810bf2bb:       cmpq    $0x0, 0x40(%r12)
    0.00 :   ffffffff810bf2c1:       jne     0xffffffff810bf59f <update_sd_lb_stats.constprop.0+0x69f>
    0.00 :   ffffffff810bf2c7:       cmpl    %eax, %edi
    0.00 :   ffffffff810bf2c9:       jb      0xffffffff810bf56b <update_sd_lb_stats.constprop.0+0x66b>
    0.00 :   ffffffff810bf2cf:       movq    0x10(%r12), %rax
    0.00 :   ffffffff810bf2d4:       movq    0x20(%r12), %rsi
    0.00 :   ffffffff810bf2d9:       movl    $0x64, %r9d
    0.00 :   ffffffff810bf2df:       imulq   %r9, %rsi
    0.00 :   ffffffff810bf2e3:       movq    %rax, %r11
    0.00 :   ffffffff810bf2e6:       imulq   %rdx, %r11
    0.00 :   ffffffff810bf2ea:       cmpq    %rsi, %r11
    0.00 :   ffffffff810bf2ed:       jb      0xffffffff810bf308 <update_sd_lb_stats.constprop.0+0x408>
    0.00 :   ffffffff810bf2ef:       imulq   0x18(%r12), %rdx
    0.00 :   ffffffff810bf2f5:       movl    $0x64, %r15d
    0.00 :   ffffffff810bf2fb:       imulq   %r15, %rax
    0.00 :   ffffffff810bf2ff:       cmpq    %rax, %rdx
    0.00 :   ffffffff810bf302:       jb      0xffffffff810bf56b <update_sd_lb_stats.constprop.0+0x66b>
    0.00 :   ffffffff810bf308:       movl    $0x1, 0x38(%r12)
    0.00 :   ffffffff810bf311:       movl    $0x1, %ecx
    0.00 :   ffffffff810bf316:       cmpb    $0x0, -0xb1(%rbp)
    0.00 :   ffffffff810bf31d:       jne     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf31f:       movl    0x2c(%r12), %r11d
    0.00 :   ffffffff810bf324:       testl   %r11d, %r11d
    0.00 :   ffffffff810bf327:       je      0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf329:       movq    (%rbx), %rax
    0.00 :   ffffffff810bf32c:       movl    0x3c(%rax), %eax
    0.00 :   ffffffff810bf32f:       andl    $0x20, %eax
    0.00 :   ffffffff810bf332:       cmpl    $0x2, %ecx
    0.00 :   ffffffff810bf335:       movl    %eax, %edx
    0.00 :   ffffffff810bf337:       jne     0xffffffff810bf341 <update_sd_lb_stats.constprop.0+0x441>
    0.00 :   ffffffff810bf339:       testl   %eax, %eax
    0.00 :   ffffffff810bf33b:       jne     0xffffffff810bf672 <update_sd_lb_stats.constprop.0+0x772>
    0.00 :   ffffffff810bf341:       movl    0x68(%r10), %eax
    0.00 :   ffffffff810bf345:       cmpl    %ecx, %eax
    0.00 :   ffffffff810bf347:       jb      0xffffffff810bf37a <update_sd_lb_stats.constprop.0+0x47a>
    0.00 :   ffffffff810bf349:       cmpl    %eax, %ecx
    0.00 :   ffffffff810bf34b:       jb      0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf34d:       cmpl    $0x3, %ecx
    0.00 :   ffffffff810bf350:       je      0xffffffff810bf745 <update_sd_lb_stats.constprop.0+0x845>
    0.00 :   ffffffff810bf356:       ja      0xffffffff810bf4df <update_sd_lb_stats.constprop.0+0x5df>
    0.00 :   ffffffff810bf35c:       cmpl    $0x1, %ecx
    0.00 :   ffffffff810bf35f:       nop
    0.00 :   ffffffff810bf360:       je      0xffffffff810bf4e8 <update_sd_lb_stats.constprop.0+0x5e8>
    0.00 :   ffffffff810bf366:       cmpl    $0x2, %ecx
    0.00 :   ffffffff810bf369:       jne     0xffffffff810bf701 <update_sd_lb_stats.constprop.0+0x801>
    0.00 :   ffffffff810bf36f:       movq    0x70(%r10), %rax
    0.00 :   ffffffff810bf373:       cmpq    %rax, 0x40(%r12)
    0.00 :   ffffffff810bf378:       jb      0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf37a:       leaq    0x30(%r10), %rdi
    0.00 :   ffffffff810bf37e:       movq    %r8, (%r10)
    0.00 :   ffffffff810bf381:       movl    $0xa, %ecx
    0.00 :   ffffffff810bf386:       movq    %r12, %rsi
    0.00 :   ffffffff810bf389:       rep             movsq   (%rsi), %es:(%rdi)
    0.00 :   ffffffff810bf38c:       movq    0x8(%r12), %rax
    0.00 :   ffffffff810bf391:       addq    %rax, 0x10(%r10)
    0.00 :   ffffffff810bf395:       movq    0x10(%r12), %rax
    0.00 :   ffffffff810bf39a:       addq    %rax, 0x18(%r10)
    0.00 :   ffffffff810bf39e:       movq    (%rbx), %rdx
    0.00 :   ffffffff810bf3a1:       movq    -0xc0(%rbp), %rax
    0.00 :   ffffffff810bf3a8:       movq    (%r8), %r8
    0.00 :   ffffffff810bf3ab:       addq    0x18(%r12), %rax
    0.00 :   ffffffff810bf3b0:       cmpq    0x10(%rdx), %r8
    0.00 :   ffffffff810bf3b4:       movq    %rax, -0xc0(%rbp)
    0.00 :   ffffffff810bf3bb:       jne     0xffffffff810bef7d <update_sd_lb_stats.constprop.0+0x7d>
    0.00 :   ffffffff810bf3c1:       movq    -0xd8(%rbp), %rsi
    0.00 :   ffffffff810bf3c8:       xorl    %edx, %edx
    0.00 :   ffffffff810bf3ca:       movq    %rbx, %r13
    0.00 :   ffffffff810bf3cd:       movq    %r10, %r15
    0.00 :   ffffffff810bf3d0:       testq   %rsi, %rsi
    0.00 :   ffffffff810bf3d3:       je      0xffffffff810bf3de <update_sd_lb_stats.constprop.0+0x4de>
    0.00 :   ffffffff810bf3d5:       movl    0x3c(%rsi), %edx
    0.00 :   ffffffff810bf3d8:       shrl    $0xb, %edx
    0.00 :   ffffffff810bf3db:       andl    $0x1, %edx
    0.00 :   ffffffff810bf3de:       movl    %edx, 0x28(%r15)
    0.00 :   ffffffff810bf3e2:       movq    (%r13), %rcx
    0.00 :   ffffffff810bf3e6:       testb   $0x20, 0x3d(%rcx)
    0.00 :   ffffffff810bf3ea:       je      0xffffffff810bf405 <update_sd_lb_stats.constprop.0+0x505>
    0.00 :   ffffffff810bf3ec:       movl    0x5c(%r15), %esi
    0.00 :   ffffffff810bf3f0:       xorl    %edx, %edx
    0.00 :   ffffffff810bf3f2:       cmpl    %esi, 0x78(%r15)
    0.00 :   ffffffff810bf3f6:       jb      0xffffffff810bf401 <update_sd_lb_stats.constprop.0+0x501>
    0.00 :   ffffffff810bf3f8:       cmpl    %esi, 0x7c(%r15)
    0.00 :   ffffffff810bf3fc:       sbbl    %edx, %edx
    0.00 :   ffffffff810bf3fe:       addl    $0x2, %edx
    0.00 :   ffffffff810bf401:       movl    %edx, 0x50(%r13)
    0.00 :   ffffffff810bf405:       movl    %r14d, %edx
    0.00 :   ffffffff810bf408:       andl    $0x2, %edx
    0.00 :   ffffffff810bf40b:       cmpq    $0x0, (%rcx)
    0.00 :   ffffffff810bf40f:       je      0xffffffff810bf6e2 <update_sd_lb_stats.constprop.0+0x7e2>
    0.00 :   ffffffff810bf415:       testl   %edx, %edx
    0.00 :   ffffffff810bf417:       jne     0xffffffff810bf5e9 <update_sd_lb_stats.constprop.0+0x6e9>
    0.00 :   ffffffff810bf41d:       cmpl    $0x2, 0x2c(%r13)
    0.00 :   ffffffff810bf422:       je      0xffffffff810bf4a0 <update_sd_lb_stats.constprop.0+0x5a0>
    0.00 :   ffffffff810bf424:       movslq  0x14(%r13), %rsi
    0.00 :   ffffffff810bf428:       movq    $0x1b2b4, %rdx  # imm = 0x1B2B4
    0.00 :   ffffffff810bf42f:       movq    -0x7dedc720(,%rsi,8), %rdi
    0.00 :   ffffffff810bf437:       movl    (%rdx,%rdi), %esi
    0.00 :   ffffffff810bf43a:       cmpl    %esi, 0x88(%rcx)
    0.00 :   ffffffff810bf440:       jne     0xffffffff810bf4a0 <update_sd_lb_stats.constprop.0+0x5a0>
    0.00 :   ffffffff810bf442:       movq    $0x1b2a8, %rdx  # imm = 0x1B2A8
    0.00 :   ffffffff810bf449:       addq    %rdx, %rdi
    0.00 :   ffffffff810bf44c:       movq    (%rdi), %rdi
    0.00 :   ffffffff810bf44f:       testq   %rdi, %rdi
    0.00 :   ffffffff810bf452:       je      0xffffffff810bf4a0 <update_sd_lb_stats.constprop.0+0x5a0>
    0.00 :   ffffffff810bf454:       xorl    %edx, %edx
    0.00 :   ffffffff810bf456:       movl    %esi, %r8d
    0.00 :   ffffffff810bf459:       divq    %r8
    0.00 :   ffffffff810bf45c:       movslq  0x2c(%rcx), %rdx
    0.00 :   ffffffff810bf460:       movl    $0x400, %ecx    # imm = 0x400
    0.00 :   ffffffff810bf465:       imulq   %rdx, %rax
    0.00 :   ffffffff810bf469:       movabsq $0x346dc5d63886594b, %rdx # imm = 0x346DC5D63886594B
    0.00 :   ffffffff810bf473:       imulq   %rax, %rax
    0.00 :   ffffffff810bf477:       mulq    %rdx
    0.00 :   ffffffff810bf47a:       movl    $0x400, %eax    # imm = 0x400
    0.00 :   ffffffff810bf47f:       shrq    $0x15, %rdx
    0.00 :   ffffffff810bf483:       cmpq    %rax, %rdx
    0.00 :   ffffffff810bf486:       cmovgq  %rax, %rdx
    0.00 :   ffffffff810bf48a:       movslq  %esi, %rax
    0.00 :   ffffffff810bf48d:       subq    %rdx, %rcx
    0.00 :   ffffffff810bf490:       imulq   %rcx, %rax
    0.00 :   ffffffff810bf494:       shrq    $0xa, %rax
    0.00 :   ffffffff810bf498:       cmpl    0xc(%rdi), %eax
    0.00 :   ffffffff810bf49b:       je      0xffffffff810bf4a0 <update_sd_lb_stats.constprop.0+0x5a0>
    0.00 :   ffffffff810bf49d:       movl    %eax, 0xc(%rdi)
    0.00 :   ffffffff810bf4a0:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff810bf4a4:       subq    %gs:0x28, %rax
    0.00 :   ffffffff810bf4ad:       jne     0xffffffff810bf7a5 <update_sd_lb_stats.constprop.0+0x8a5>
    0.00 :   ffffffff810bf4b3:       addq    $0xb0, %rsp
    0.00 :   ffffffff810bf4ba:       popq    %rbx
    0.00 :   ffffffff810bf4bb:       popq    %r12
    0.00 :   ffffffff810bf4bd:       popq    %r13
    0.00 :   ffffffff810bf4bf:       popq    %r14
    0.00 :   ffffffff810bf4c1:       popq    %r15
    0.00 :   ffffffff810bf4c3:       popq    %rbp
  100.00 :   ffffffff810bf4c4:       xorl    %eax, %eax
    0.00 :   ffffffff810bf4c6:       xorl    %edx, %edx
    0.00 :   ffffffff810bf4c8:       xorl    %ecx, %ecx
    0.00 :   ffffffff810bf4ca:       xorl    %esi, %esi
    0.00 :   ffffffff810bf4cc:       xorl    %edi, %edi
    0.00 :   ffffffff810bf4ce:       xorl    %r8d, %r8d
    0.00 :   ffffffff810bf4d1:       xorl    %r9d, %r9d
    0.00 :   ffffffff810bf4d4:       xorl    %r10d, %r10d
    0.00 :   ffffffff810bf4d7:       xorl    %r11d, %r11d
    0.00 :   ffffffff810bf4da:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810bf4df:       cmpl    $0x4, %ecx
    0.00 :   ffffffff810bf4e2:       je      0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf4e8:       movq    (%r12), %rax
    0.00 :   ffffffff810bf4ec:       cmpq    %rax, 0x30(%r10)
    0.00 :   ffffffff810bf4f0:       jae     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf4f6:       testl   %edx, %edx
    0.00 :   ffffffff810bf4f8:       je      0xffffffff810bf37a <update_sd_lb_stats.constprop.0+0x47a>
    0.00 :   ffffffff810bf4fe:       cmpl    $0x1, 0x38(%r12)
    0.00 :   ffffffff810bf504:       ja      0xffffffff810bf37a <update_sd_lb_stats.constprop.0+0x47a>
    0.00 :   ffffffff810bf50a:       movslq  0x14(%rbx), %rcx
    0.00 :   ffffffff810bf50e:       movq    0x10(%r8), %rax
    0.00 :   ffffffff810bf512:       movq    $0x22f40, %rdx  # imm = 0x22F40
    0.00 :   ffffffff810bf519:       movq    0x10(%rax), %rax
    0.00 :   ffffffff810bf51d:       movq    -0x7dedc720(,%rcx,8), %rcx
    0.00 :   ffffffff810bf525:       shlq    $0xa, %rax
    0.00 :   ffffffff810bf529:       movq    0xa00(%rdx,%rcx), %rsi
    0.00 :   ffffffff810bf531:       imulq   $0x436, %rsi, %rdx # imm = 0x436
    0.00 :   ffffffff810bf538:       cmpq    %rax, %rdx
    0.00 :   ffffffff810bf53b:       jae     0xffffffff810bf37a <update_sd_lb_stats.constprop.0+0x47a>
    0.00 :   ffffffff810bf541:       jmp     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf546:       movq    0x8(%r12), %rax
    0.00 :   ffffffff810bf54b:       xorl    %edx, %edx
    0.00 :   ffffffff810bf54d:       movl    $0x5, 0x38(%r12)
    0.00 :   ffffffff810bf556:       movl    $0x5, %ecx
    0.00 :   ffffffff810bf55b:       shlq    $0xa, %rax
    0.00 :   ffffffff810bf55f:       divq    %rsi
    0.00 :   ffffffff810bf562:       movq    %rax, (%r12)
    0.00 :   ffffffff810bf566:       jmp     0xffffffff810bf316 <update_sd_lb_stats.constprop.0+0x416>
    0.00 :   ffffffff810bf56b:       movl    $0x0, 0x38(%r12)
    0.00 :   ffffffff810bf574:       jmp     0xffffffff810bf316 <update_sd_lb_stats.constprop.0+0x416>
    0.00 :   ffffffff810bf579:       movl    $0x4, 0x38(%r12)
    0.00 :   ffffffff810bf582:       movl    $0x4, %ecx
    0.00 :   ffffffff810bf587:       jmp     0xffffffff810bf316 <update_sd_lb_stats.constprop.0+0x416>
    0.00 :   ffffffff810bf58c:       movl    $0x3, 0x38(%r12)
    0.00 :   ffffffff810bf595:       movl    $0x3, %ecx
    0.00 :   ffffffff810bf59a:       jmp     0xffffffff810bf316 <update_sd_lb_stats.constprop.0+0x416>
    0.00 :   ffffffff810bf59f:       movl    $0x2, 0x38(%r12)
    0.00 :   ffffffff810bf5a8:       movl    $0x2, %ecx
    0.00 :   ffffffff810bf5ad:       jmp     0xffffffff810bf316 <update_sd_lb_stats.constprop.0+0x416>
    0.00 :   ffffffff810bf5b2:       movq    0x8(%r10), %rsi
    0.00 :   ffffffff810bf5b6:       movl    0x1c(%r8), %ecx
    0.00 :   ffffffff810bf5ba:       movl    0x14(%rbx), %edi
    0.00 :   ffffffff810bf5bd:       andl    $0x80, %ecx
    0.00 :   ffffffff810bf5c3:       testb   $-0x80, 0x1c(%rsi)
    0.00 :   ffffffff810bf5c7:       jne     0xffffffff810bf604 <update_sd_lb_stats.constprop.0+0x704>
    0.00 :   ffffffff810bf5c9:       testl   %ecx, %ecx
    0.00 :   ffffffff810bf5cb:       je      0xffffffff810bf621 <update_sd_lb_stats.constprop.0+0x721>
    0.00 :   ffffffff810bf5cd:       movl    %eax, %edx
    0.00 :   ffffffff810bf5cf:       subl    0x30(%r12), %edx
    0.00 :   ffffffff810bf5d4:       decl    %edx
    0.00 :   ffffffff810bf5d6:       jle     0xffffffff810bf621 <update_sd_lb_stats.constprop.0+0x721>
    0.00 :   ffffffff810bf5d8:       movl    $0x1, 0x3c(%r12)
    0.00 :   ffffffff810bf5e1:       movq    (%rbx), %rdx
    0.00 :   ffffffff810bf5e4:       jmp     0xffffffff810bf24f <update_sd_lb_stats.constprop.0+0x34f>
    0.00 :   ffffffff810bf5e9:       movq    0x18(%r13), %rdx
    0.00 :   ffffffff810bf5ed:       movq    0x9f0(%rdx), %rdx
    0.00 :   ffffffff810bf5f4:       movl    $0x2, 0x3c(%rdx)
    0.00 :   ffffffff810bf5fb:       movq    (%r13), %rcx
    0.00 :   ffffffff810bf5ff:       jmp     0xffffffff810bf41d <update_sd_lb_stats.constprop.0+0x51d>
    0.00 :   ffffffff810bf604:       testl   %ecx, %ecx
    0.00 :   ffffffff810bf606:       movl    0x30(%r12), %r11d
    0.00 :   ffffffff810bf60b:       jne     0xffffffff810bf729 <update_sd_lb_stats.constprop.0+0x829>
    0.00 :   ffffffff810bf611:       movl    0xa8(%r10), %r15d
    0.00 :   ffffffff810bf618:       testl   %r15d, %r15d
    0.00 :   ffffffff810bf61b:       jne     0xffffffff810bf24f <update_sd_lb_stats.constprop.0+0x34f>
    0.00 :   ffffffff810bf621:       movl    0x18(%r8), %eax
    0.00 :   ffffffff810bf625:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff810bf62c:       movq    %r8, -0x98(%rbp)
    0.00 :   ffffffff810bf633:       movl    %eax, -0x90(%rbp)
    0.00 :   ffffffff810bf639:       callq   0xffffffff810bc2f0 <arch_asym_cpu_priority>
    0.00 :   ffffffff810bf63e:       movl    -0x90(%rbp), %edi
    0.00 :   ffffffff810bf644:       movl    %eax, %r15d
    0.00 :   ffffffff810bf647:       callq   0xffffffff810bc2f0 <arch_asym_cpu_priority>
    0.00 :   ffffffff810bf64c:       cmpl    %eax, %r15d
    0.00 :   ffffffff810bf64f:       movq    -0x98(%rbp), %r8
    0.00 :   ffffffff810bf656:       movq    -0xa0(%rbp), %r10
    0.00 :   ffffffff810bf65d:       setg    %dl
    0.00 :   ffffffff810bf660:       movl    0x34(%r12), %eax
    0.00 :   ffffffff810bf665:       testb   %dl, %dl
    0.00 :   ffffffff810bf667:       je      0xffffffff810bf5e1 <update_sd_lb_stats.constprop.0+0x6e1>
    0.00 :   ffffffff810bf66d:       jmp     0xffffffff810bf5d8 <update_sd_lb_stats.constprop.0+0x6d8>
    0.00 :   ffffffff810bf672:       movslq  0x14(%rbx), %rdx
    0.00 :   ffffffff810bf676:       movq    $0x22f40, %rax  # imm = 0x22F40
    0.00 :   ffffffff810bf67d:       movq    -0x7dedc720(,%rdx,8), %rdx
    0.00 :   ffffffff810bf685:       movq    0xa00(%rdx,%rax), %rax
    0.00 :   ffffffff810bf68d:       movq    0x10(%r8), %rdx
    0.00 :   ffffffff810bf691:       movq    0x18(%rdx), %r9
    0.00 :   ffffffff810bf695:       shlq    $0xa, %rax
    0.00 :   ffffffff810bf699:       imulq   $0x436, %r9, %rdx # imm = 0x436
    0.00 :   ffffffff810bf6a0:       cmpq    %rax, %rdx
    0.00 :   ffffffff810bf6a3:       jae     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf6a9:       movl    0xb8(%r10), %edi
    0.00 :   ffffffff810bf6b0:       testl   %edi, %edi
    0.00 :   ffffffff810bf6b2:       jne     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf6b8:       movl    0x68(%r10), %eax
    0.00 :   ffffffff810bf6bc:       cmpl    $0x1, %eax
    0.00 :   ffffffff810bf6bf:       jbe     0xffffffff810bf37a <update_sd_lb_stats.constprop.0+0x47a>
    0.00 :   ffffffff810bf6c5:       cmpl    $0x2, %eax
    0.00 :   ffffffff810bf6c8:       jne     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf6ce:       movq    0x70(%r10), %rax
    0.00 :   ffffffff810bf6d2:       cmpq    %rax, 0x40(%r12)
    0.00 :   ffffffff810bf6d7:       jae     0xffffffff810bf4fe <update_sd_lb_stats.constprop.0+0x5fe>
    0.00 :   ffffffff810bf6dd:       jmp     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf6e2:       movq    0x18(%r13), %rcx
    0.00 :   ffffffff810bf6e6:       andl    $0x1, %r14d
    0.00 :   ffffffff810bf6ea:       movq    0x9f0(%rcx), %rcx
    0.00 :   ffffffff810bf6f1:       movl    %r14d, 0x38(%rcx)
    0.00 :   ffffffff810bf6f5:       movl    %edx, 0x3c(%rcx)
    0.00 :   ffffffff810bf6f8:       movq    (%r13), %rcx
    0.00 :   ffffffff810bf6fc:       jmp     0xffffffff810bf41d <update_sd_lb_stats.constprop.0+0x51d>
    0.00 :   ffffffff810bf701:       movl    0x30(%r12), %ecx
    0.00 :   ffffffff810bf706:       movl    0x60(%r10), %eax
    0.00 :   ffffffff810bf70a:       cmpl    %ecx, %eax
    0.00 :   ffffffff810bf70c:       jb      0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf712:       cmpl    %eax, %ecx
    0.00 :   ffffffff810bf714:       jne     0xffffffff810bf4f6 <update_sd_lb_stats.constprop.0+0x5f6>
    0.00 :   ffffffff810bf71a:       cmpl    %edi, 0x58(%r10)
    0.00 :   ffffffff810bf71e:       jb      0xffffffff810bf4f6 <update_sd_lb_stats.constprop.0+0x5f6>
    0.00 :   ffffffff810bf724:       jmp     0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf729:       movl    %eax, %ecx
    0.00 :   ffffffff810bf72b:       subl    %r11d, %ecx
    0.00 :   ffffffff810bf72e:       subl    0xc(%rsi), %ecx
    0.00 :   ffffffff810bf731:       addl    0xb0(%r10), %ecx
    0.00 :   ffffffff810bf738:       decl    %ecx
    0.00 :   ffffffff810bf73a:       jne     0xffffffff810bf24f <update_sd_lb_stats.constprop.0+0x34f>
    0.00 :   ffffffff810bf740:       jmp     0xffffffff810bf621 <update_sd_lb_stats.constprop.0+0x721>
    0.00 :   ffffffff810bf745:       movq    (%r10), %rax
    0.00 :   ffffffff810bf748:       movl    0x18(%r8), %edi
    0.00 :   ffffffff810bf74c:       movq    %r10, -0xa0(%rbp)
    0.00 :   ffffffff810bf753:       movq    %r8, -0x98(%rbp)
    0.00 :   ffffffff810bf75a:       movl    0x18(%rax), %eax
    0.00 :   ffffffff810bf75d:       movl    %eax, -0x90(%rbp)
    0.00 :   ffffffff810bf763:       callq   0xffffffff810bc2f0 <arch_asym_cpu_priority>
    0.00 :   ffffffff810bf768:       movl    -0x90(%rbp), %edi
    0.00 :   ffffffff810bf76e:       movl    %eax, %r15d
    0.00 :   ffffffff810bf771:       callq   0xffffffff810bc2f0 <arch_asym_cpu_priority>
    0.00 :   ffffffff810bf776:       cmpl    %eax, %r15d
    0.00 :   ffffffff810bf779:       movq    -0x98(%rbp), %r8
    0.00 :   ffffffff810bf780:       movq    -0xa0(%rbp), %r10
    0.00 :   ffffffff810bf787:       jg      0xffffffff810bf38c <update_sd_lb_stats.constprop.0+0x48c>
    0.00 :   ffffffff810bf78d:       movq    (%rbx), %rax
    0.00 :   ffffffff810bf790:       movl    0x3c(%rax), %eax
    0.00 :   ffffffff810bf793:       andl    $0x20, %eax
    0.00 :   ffffffff810bf796:       movl    %eax, %edx
    0.00 :   ffffffff810bf798:       testl   %edx, %edx
    0.00 :   ffffffff810bf79a:       jne     0xffffffff810bf4fe <update_sd_lb_stats.constprop.0+0x5fe>
    0.00 :   ffffffff810bf7a0:       jmp     0xffffffff810bf37a <update_sd_lb_stats.constprop.0+0x47a>
    0.00 :   ffffffff810bf7a5:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff815e7af0 <percpu_counter_add_batch>:
         : 5                ; percpu_counter_add_batch():
    0.00 :   ffffffff815e7af0:       pushq   %rbp
    0.00 :   ffffffff815e7af1:       movq    %rsp, %rbp
    0.00 :   ffffffff815e7af4:       subq    $0x20, %rsp
    0.00 :   ffffffff815e7af8:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff815e7afc:       movq    %r13, -0x10(%rbp)
    0.00 :   ffffffff815e7b00:       movq    %r14, -0x8(%rbp)
    0.00 :   ffffffff815e7b04:       pushfq
    0.00 :   ffffffff815e7b05:       popq    %r14
    0.00 :   ffffffff815e7b07:       cli
    0.00 :   ffffffff815e7b08:       movq    0x20(%rdi), %rcx
    0.00 :   ffffffff815e7b0c:       movslq  %edx, %rdx
    0.00 :   ffffffff815e7b0f:       movl    %gs:(%rcx), %r13d
    0.00 :   ffffffff815e7b13:       movslq  %r13d, %rbx
    0.00 :   ffffffff815e7b16:       addq    %rsi, %rbx
    0.00 :   ffffffff815e7b19:       movq    %rbx, %rax
    0.00 :   ffffffff815e7b1c:       negq    %rax
    0.00 :   ffffffff815e7b1f:       cmovsq  %rbx, %rax
    0.00 :   ffffffff815e7b23:       cmpq    %rax, %rdx
    0.00 :   ffffffff815e7b26:       jle     0xffffffff815e7b51 <percpu_counter_add_batch+0x61>
    0.00 :   ffffffff815e7b28:       addl    %esi, %gs:(%rcx)
  100.00 :   ffffffff815e7b2b:       testl   $0x200, %r14d   # imm = 0x200
    0.00 :   ffffffff815e7b32:       je      0xffffffff815e7b35 <percpu_counter_add_batch+0x45>
    0.00 :   ffffffff815e7b34:       sti
    0.00 :   ffffffff815e7b35:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff815e7b39:       movq    -0x10(%rbp), %r13
    0.00 :   ffffffff815e7b3d:       movq    -0x8(%rbp), %r14
    0.00 :   ffffffff815e7b41:       leave
    0.00 :   ffffffff815e7b42:       xorl    %eax, %eax
    0.00 :   ffffffff815e7b44:       xorl    %edx, %edx
    0.00 :   ffffffff815e7b46:       xorl    %ecx, %ecx
    0.00 :   ffffffff815e7b48:       xorl    %esi, %esi
    0.00 :   ffffffff815e7b4a:       xorl    %edi, %edi
    0.00 :   ffffffff815e7b4c:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff815e7b51:       movq    %rdi, -0x20(%rbp)
    0.00 :   ffffffff815e7b55:       negl    %r13d
    0.00 :   ffffffff815e7b58:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff815e7b5d:       movq    -0x20(%rbp), %rdi
    0.00 :   ffffffff815e7b61:       addq    %rbx, 0x8(%rdi)
    0.00 :   ffffffff815e7b65:       movq    0x20(%rdi), %rax
    0.00 :   ffffffff815e7b69:       addl    %r13d, %gs:(%rax)
    0.00 :   ffffffff815e7b6d:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff815e7b72:       jmp     0xffffffff815e7b2b <percpu_counter_add_batch+0x3b>
 Percent |	Source code & Disassembly of lab2_list for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2    Disassembly of section .init:
         :
         : 4    0000000000001000 <_init>:
         : 5    ; _init():
  100.00 :   1000:           subq    $0x8, %rsp
    0.00 :   1004:           movq    0x4fc5(%rip), %rax      # 0x5fd0 <time@GLIBC_2.2.5+0x5fd0>
    0.00 :   100b:           testq   %rax, %rax
    0.00 :   100e:           je      0x1012 <_init+0x12>
    0.00 :   1010:           callq   *%rax
    0.00 :   1012:           addq    $0x8, %rsp
    0.00 :   1016:           retq
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b7db0 <task_tick_fair>:
         : 5                ; task_tick_fair():
  100.00 :   ffffffff810b7db0:       pushq   %rbp
    0.00 :   ffffffff810b7db1:       movq    %rsp, %rbp
    0.00 :   ffffffff810b7db4:       pushq   %r15
    0.00 :   ffffffff810b7db6:       movq    %rdi, %r15
    0.00 :   ffffffff810b7db9:       pushq   %r14
    0.00 :   ffffffff810b7dbb:       movq    %rsi, %r14
    0.00 :   ffffffff810b7dbe:       pushq   %r13
    0.00 :   ffffffff810b7dc0:       pushq   %r12
    0.00 :   ffffffff810b7dc2:       pushq   %rbx
    0.00 :   ffffffff810b7dc3:       subq    $0x10, %rsp
    0.00 :   ffffffff810b7dc7:       leaq    0x400(%rsi), %rax
    0.00 :   ffffffff810b7dce:       movl    %edx, %r13d
    0.00 :   ffffffff810b7dd1:       testq   %rax, %rax
    0.00 :   ffffffff810b7dd4:       movq    %rax, -0x38(%rbp)
    0.00 :   ffffffff810b7dd8:       movq    %rax, %rbx
    0.00 :   ffffffff810b7ddb:       jne     0xffffffff810b7e0c <task_tick_fair+0x5c>
    0.00 :   ffffffff810b7ddd:       jmp     0xffffffff810b7e4b <task_tick_fair+0x9b>
    0.00 :   ffffffff810b7ddf:       movq    0x130(%r12), %rax
    0.00 :   ffffffff810b7de7:       leaq    0xb60(%rax), %rdi
    0.00 :   ffffffff810b7dee:       callq   0xffffffff81112730 <hrtimer_active>
    0.00 :   ffffffff810b7df3:       testb   %al, %al
    0.00 :   ffffffff810b7df5:       jne     0xffffffff810b7e03 <task_tick_fair+0x53>
    0.00 :   ffffffff810b7df7:       cmpl    $0x1, 0x10(%r12)
    0.00 :   ffffffff810b7dfd:       ja      0xffffffff810b7ea5 <task_tick_fair+0xf5>
    0.00 :   ffffffff810b7e03:       movq    0x70(%rbx), %rbx
    0.00 :   ffffffff810b7e07:       testq   %rbx, %rbx
    0.00 :   ffffffff810b7e0a:       je      0xffffffff810b7e4b <task_tick_fair+0x9b>
    0.00 :   ffffffff810b7e0c:       movq    0x78(%rbx), %r12
    0.00 :   ffffffff810b7e10:       movq    %r12, %rdi
    0.00 :   ffffffff810b7e13:       callq   0xffffffff810b3cf0 <update_curr>
    0.00 :   ffffffff810b7e18:       movl    $0x1, %edx
    0.00 :   ffffffff810b7e1d:       movq    %rbx, %rsi
    0.00 :   ffffffff810b7e20:       movq    %r12, %rdi
    0.00 :   ffffffff810b7e23:       callq   0xffffffff810b69c0 <update_load_avg>
    0.00 :   ffffffff810b7e28:       movq    %rbx, %rdi
    0.00 :   ffffffff810b7e2b:       callq   0xffffffff810b48f0 <update_cfs_group>
    0.00 :   ffffffff810b7e30:       testl   %r13d, %r13d
    0.00 :   ffffffff810b7e33:       je      0xffffffff810b7ddf <task_tick_fair+0x2f>
    0.00 :   ffffffff810b7e35:       movq    0x130(%r12), %rdi
    0.00 :   ffffffff810b7e3d:       callq   0xffffffff810a99e0 <resched_curr>
    0.00 :   ffffffff810b7e42:       movq    0x70(%rbx), %rbx
    0.00 :   ffffffff810b7e46:       testq   %rbx, %rbx
    0.00 :   ffffffff810b7e49:       jne     0xffffffff810b7e0c <task_tick_fair+0x5c>
    0.00 :   ffffffff810b7e4b:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b7e50:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b7e55:       movq    $0x22f40, %rbx  # imm = 0x22F40
    0.00 :   ffffffff810b7e5c:       movl    0x14(%r14), %edx
    0.00 :   ffffffff810b7e60:       movq    %rbx, %rax
    0.00 :   ffffffff810b7e63:       movq    -0x7dedc720(,%rdx,8), %rcx
    0.00 :   ffffffff810b7e6b:       addq    %rax, %rcx
    0.00 :   ffffffff810b7e6e:       movq    %rcx, %rdx
    0.00 :   ffffffff810b7e71:       movq    0x9f0(%rcx), %rcx
    0.00 :   ffffffff810b7e78:       movl    0x3c(%rcx), %esi
    0.00 :   ffffffff810b7e7b:       testl   %esi, %esi
    0.00 :   ffffffff810b7e7d:       je      0xffffffff810b80b7 <task_tick_fair+0x307>
    0.00 :   ffffffff810b7e83:       nopl    (%rax,%rax)
    0.00 :   ffffffff810b7e88:       addq    $0x10, %rsp
    0.00 :   ffffffff810b7e8c:       popq    %rbx
    0.00 :   ffffffff810b7e8d:       popq    %r12
    0.00 :   ffffffff810b7e8f:       popq    %r13
    0.00 :   ffffffff810b7e91:       popq    %r14
    0.00 :   ffffffff810b7e93:       popq    %r15
    0.00 :   ffffffff810b7e95:       popq    %rbp
    0.00 :   ffffffff810b7e96:       xorl    %eax, %eax
    0.00 :   ffffffff810b7e98:       xorl    %edx, %edx
    0.00 :   ffffffff810b7e9a:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b7e9c:       xorl    %esi, %esi
    0.00 :   ffffffff810b7e9e:       xorl    %edi, %edi
    0.00 :   ffffffff810b7ea0:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b7ea5:       movq    %rbx, %rsi
    0.00 :   ffffffff810b7ea8:       movq    %r12, %rdi
    0.00 :   ffffffff810b7eab:       callq   0xffffffff810b3530 <sched_slice>
    0.00 :   ffffffff810b7eb0:       movq    %rax, %rdx
    0.00 :   ffffffff810b7eb3:       movl    0x117ecff(%rip), %eax # 0xffffffff82236bb8 <sysctl_sched_latency>
    0.00 :   ffffffff810b7eb9:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b7ebc:       cmovaq  %rdx, %rax
    0.00 :   ffffffff810b7ec0:       movq    0x48(%rbx), %rdx
    0.00 :   ffffffff810b7ec4:       subq    0x58(%rbx), %rdx
    0.00 :   ffffffff810b7ec8:       cmpq    %rdx, %rax
    0.00 :   ffffffff810b7ecb:       jb      0xffffffff810b8116 <task_tick_fair+0x366>
    0.00 :   ffffffff810b7ed1:       movl    0x117ecd9(%rip), %ecx # 0xffffffff82236bb0 <sysctl_sched_min_granularity>
    0.00 :   ffffffff810b7ed7:       cmpq    %rcx, %rdx
    0.00 :   ffffffff810b7eda:       jb      0xffffffff810b7e03 <task_tick_fair+0x53>
    0.00 :   ffffffff810b7ee0:       movq    0x48(%r12), %rdx
    0.00 :   ffffffff810b7ee5:       leaq    -0x10(%rdx), %rcx
    0.00 :   ffffffff810b7ee9:       testq   %rdx, %rdx
    0.00 :   ffffffff810b7eec:       cmovneq %rcx, %rdx
    0.00 :   ffffffff810b7ef0:       movq    0x50(%rbx), %rcx
    0.00 :   ffffffff810b7ef4:       subq    0x50(%rdx), %rcx
    0.00 :   ffffffff810b7ef8:       cmpq    %rcx, %rax
    0.00 :   ffffffff810b7efb:       jae     0xffffffff810b7e03 <task_tick_fair+0x53>
    0.00 :   ffffffff810b7f01:       testq   %rcx, %rcx
    0.00 :   ffffffff810b7f04:       js      0xffffffff810b7e03 <task_tick_fair+0x53>
    0.00 :   ffffffff810b7f0a:       movq    0x130(%r12), %rdi
    0.00 :   ffffffff810b7f12:       callq   0xffffffff810a99e0 <resched_curr>
    0.00 :   ffffffff810b7f17:       jmp     0xffffffff810b7e42 <task_tick_fair+0x92>
    0.00 :   ffffffff810b7f1c:       movq    0x3d8(%r14), %rax
    0.00 :   ffffffff810b7f23:       testq   %rax, %rax
    0.00 :   ffffffff810b7f26:       je      0xffffffff810b7e50 <task_tick_fair+0xa0>
    0.00 :   ffffffff810b7f2c:       testl   $0x200004, 0x354(%r14) # imm = 0x200004
    0.00 :   ffffffff810b7f37:       jne     0xffffffff810b7e50 <task_tick_fair+0xa0>
    0.00 :   ffffffff810b7f3d:       leaq    0x7f8(%r14), %r12
    0.00 :   ffffffff810b7f44:       cmpq    0x7f8(%r14), %r12
    0.00 :   ffffffff810b7f4b:       jne     0xffffffff810b7e50 <task_tick_fair+0xa0>
    0.00 :   ffffffff810b7f51:       movl    0xac(%r14), %ebx
    0.00 :   ffffffff810b7f58:       movq    0x320(%r14), %rdx
    0.00 :   ffffffff810b7f5f:       imulq   $0xf4240, %rbx, %rbx # imm = 0xF4240
    0.00 :   ffffffff810b7f66:       addq    %rdx, %rbx
    0.00 :   ffffffff810b7f69:       cmpq    0x448(%r14), %rbx
    0.00 :   ffffffff810b7f70:       jae     0xffffffff810b7e50 <task_tick_fair+0xa0>
    0.00 :   ffffffff810b7f76:       testq   %rdx, %rdx
    0.00 :   ffffffff810b7f79:       je      0xffffffff810b814a <task_tick_fair+0x39a>
    0.00 :   ffffffff810b7f7f:       movq    %rbx, 0x320(%r14)
    0.00 :   ffffffff810b7f86:       movq    $0x0, -0x30(%rbp)
    0.00 :   ffffffff810b7f8e:       movq    0x114fa2b(%rip), %rdx # 0xffffffff822079c0 <jiffies_64>
    0.00 :   ffffffff810b7f95:       cmpq    0x3f0(%rax), %rdx
    0.00 :   ffffffff810b7f9c:       js      0xffffffff810b7e50 <task_tick_fair+0xa0>
    0.00 :   ffffffff810b7fa2:       movl    $0x1, %edx
    0.00 :   ffffffff810b7fa7:       movq    %r12, %rsi
    0.00 :   ffffffff810b7faa:       movq    %r14, %rdi
    0.00 :   ffffffff810b7fad:       callq   0xffffffff81094920 <task_work_add>
    0.00 :   ffffffff810b7fb2:       jmp     0xffffffff810b7e50 <task_tick_fair+0xa0>
    0.00 :   ffffffff810b7fb7:       movl    0xbf8(%r15), %edx
    0.00 :   ffffffff810b7fbe:       testl   %edx, %edx
    0.00 :   ffffffff810b7fc0:       je      0xffffffff810b7e88 <task_tick_fair+0xd8>
    0.00 :   ffffffff810b7fc6:       movq    0xbe8(%r15), %rax
    0.00 :   ffffffff810b7fcd:       movl    0xc18(%rax), %eax
    0.00 :   ffffffff810b7fd3:       testl   %eax, %eax
    0.00 :   ffffffff810b7fd5:       je      0xffffffff810b7e88 <task_tick_fair+0xd8>
    0.00 :   ffffffff810b7fdb:       cmpl    $0x1, 0x90(%r15)
    0.00 :   ffffffff810b7fe3:       jne     0xffffffff810b7e88 <task_tick_fair+0xd8>
    0.00 :   ffffffff810b7fe9:       movq    0x478(%r14), %rdi
    0.00 :   ffffffff810b7ff0:       movq    -0x38(%rbp), %rsi
    0.00 :   ffffffff810b7ff4:       callq   0xffffffff810b3530 <sched_slice>
    0.00 :   ffffffff810b7ff9:       movq    %rax, %rdx
    0.00 :   ffffffff810b7ffc:       movq    0x448(%r14), %rax
    0.00 :   ffffffff810b8003:       subq    0x458(%r14), %rax
    0.00 :   ffffffff810b800a:       addq    %rax, %rax
    0.00 :   ffffffff810b800d:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b8010:       jae     0xffffffff810b7e88 <task_tick_fair+0xd8>
    0.00 :   ffffffff810b8016:       movq    %r15, %rdi
    0.00 :   ffffffff810b8019:       callq   0xffffffff810a99e0 <resched_curr>
    0.00 :   ffffffff810b801e:       jmp     0xffffffff810b7e88 <task_tick_fair+0xd8>
    0.00 :   ffffffff810b8023:       testq   %r14, %r14
    0.00 :   ffffffff810b8026:       je      0xffffffff810b8133 <task_tick_fair+0x383>
    0.00 :   ffffffff810b802c:       cmpl    $0x1, 0x6d8(%r14)
    0.00 :   ffffffff810b8034:       je      0xffffffff810b8133 <task_tick_fair+0x383>
    0.00 :   ffffffff810b803a:       movq    0x4f0(%r14), %rsi
    0.00 :   ffffffff810b8041:       movq    0x4f8(%r14), %rdx
    0.00 :   ffffffff810b8048:       movq    $0x22f40, %rbx  # imm = 0x22F40
    0.00 :   ffffffff810b804f:       movq    %rbx, %rcx
    0.00 :   ffffffff810b8052:       movl    %edx, %eax
    0.00 :   ffffffff810b8054:       shrq    $0x20, %rdx
    0.00 :   ffffffff810b8058:       andl    $0x7fffffff, %eax # imm = 0x7FFFFFFF
    0.00 :   ffffffff810b805d:       cmpl    %edx, %eax
    0.00 :   ffffffff810b805f:       cmovbl  %edx, %eax
    0.00 :   ffffffff810b8062:       movl    %eax, %eax
    0.00 :   ffffffff810b8064:       cmpq    %rsi, %rax
    0.00 :   ffffffff810b8067:       cmovbq  %rsi, %rax
    0.00 :   ffffffff810b806b:       leaq    (%rax,%rax,4), %rdx
    0.00 :   ffffffff810b806f:       movslq  0xa60(%r15), %rax
    0.00 :   ffffffff810b8076:       shlq    $0x8, %rdx
    0.00 :   ffffffff810b807a:       movq    -0x7dedc720(,%rax,8), %rax
    0.00 :   ffffffff810b8082:       movq    0xa00(%rax,%rcx), %rax
    0.00 :   ffffffff810b808a:       shlq    $0xa, %rax
    0.00 :   ffffffff810b808e:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b8091:       jb      0xffffffff810b813a <task_tick_fair+0x38a>
    0.00 :   ffffffff810b8097:       movq    %r14, %rdi
    0.00 :   ffffffff810b809a:       callq   0xffffffff810b31a0 <task_h_load>
    0.00 :   ffffffff810b809f:       movl    $0x1, %edx
    0.00 :   ffffffff810b80a4:       testq   %rax, %rax
    0.00 :   ffffffff810b80a7:       cmoveq  %rdx, %rax
    0.00 :   ffffffff810b80ab:       movq    %rax, 0xa20(%r15)
    0.00 :   ffffffff810b80b2:       jmp     0xffffffff810b7e5c <task_tick_fair+0xac>
    0.00 :   ffffffff810b80b7:       movslq  0xa60(%rdx), %rdx
    0.00 :   ffffffff810b80be:       movq    -0x7dedc720(,%rdx,8), %rsi
    0.00 :   ffffffff810b80c6:       leaq    (%rsi,%rax), %rdx
    0.00 :   ffffffff810b80ca:       movq    0x130(%rdx), %rdi
    0.00 :   ffffffff810b80d1:       movl    0x138(%rdx), %edx
    0.00 :   ffffffff810b80d7:       cmpq    %rdi, %rdx
    0.00 :   ffffffff810b80da:       cmovbq  %rdi, %rdx
    0.00 :   ffffffff810b80de:       movq    0xa08(%rsi,%rax), %rdi
    0.00 :   ffffffff810b80e6:       movq    0xa00(%rsi,%rax), %rax
    0.00 :   ffffffff810b80ee:       cmpq    %rdi, %rdx
    0.00 :   ffffffff810b80f1:       cmovaq  %rdi, %rdx
    0.00 :   ffffffff810b80f5:       shlq    $0xa, %rax
    0.00 :   ffffffff810b80f9:       leaq    (%rdx,%rdx,4), %rdx
    0.00 :   ffffffff810b80fd:       shlq    $0x8, %rdx
    0.00 :   ffffffff810b8101:       cmpq    %rax, %rdx
    0.00 :   ffffffff810b8104:       jb      0xffffffff810b7e83 <task_tick_fair+0xd3>
    0.00 :   ffffffff810b810a:       movl    $0x2, 0x3c(%rcx)
    0.00 :   ffffffff810b8111:       jmp     0xffffffff810b7e83 <task_tick_fair+0xd3>
    0.00 :   ffffffff810b8116:       movq    0x130(%r12), %rdi
    0.00 :   ffffffff810b811e:       callq   0xffffffff810a99e0 <resched_curr>
    0.00 :   ffffffff810b8123:       movq    %rbx, %rsi
    0.00 :   ffffffff810b8126:       movq    %r12, %rdi
    0.00 :   ffffffff810b8129:       callq   0xffffffff810b30a0 <clear_buddies>
    0.00 :   ffffffff810b812e:       jmp     0xffffffff810b7e03 <task_tick_fair+0x53>
    0.00 :   ffffffff810b8133:       movq    $0x22f40, %rbx  # imm = 0x22F40
    0.00 :   ffffffff810b813a:       movq    $0x0, 0xa20(%r15)
    0.00 :   ffffffff810b8145:       jmp     0xffffffff810b7e5c <task_tick_fair+0xac>
    0.00 :   ffffffff810b814a:       movq    %r14, %rdi
    0.00 :   ffffffff810b814d:       callq   0xffffffff810b4390 <task_scan_start>
    0.00 :   ffffffff810b8152:       addq    0x320(%r14), %rbx
    0.00 :   ffffffff810b8159:       movl    %eax, 0xac(%r14)
    0.00 :   ffffffff810b8160:       movq    0x3d8(%r14), %rax
    0.00 :   ffffffff810b8167:       jmp     0xffffffff810b7f7f <task_tick_fair+0x1cf>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81112ae0 <__hrtimer_next_event_base>:
         : 5                ; __hrtimer_next_event_base():
    0.00 :   ffffffff81112ae0:       pushq   %rbp
    0.00 :   ffffffff81112ae1:       movq    %rsp, %rbp
    0.00 :   ffffffff81112ae4:       pushq   %r15
    0.00 :   ffffffff81112ae6:       movq    %rcx, %r15
    0.00 :   ffffffff81112ae9:       pushq   %r14
    0.00 :   ffffffff81112aeb:       pushq   %r13
    0.00 :   ffffffff81112aed:       pushq   %r12
    0.00 :   ffffffff81112aef:       pushq   %rbx
    0.00 :   ffffffff81112af0:       testl   %edx, %edx
    0.00 :   ffffffff81112af2:       je      0xffffffff81112b86 <__hrtimer_next_event_base+0xa6>
    0.00 :   ffffffff81112af8:       movl    %edx, %r12d
    0.00 :   ffffffff81112afb:       movl    %edx, %ebx
    0.00 :   ffffffff81112afd:       movq    %rdi, %r13
    0.00 :   ffffffff81112b00:       tzcntq  %rbx, %rbx
    0.00 :   ffffffff81112b05:       btrl    %ebx, %r12d
    0.00 :   ffffffff81112b09:       movl    %ebx, %ebx
    0.00 :   ffffffff81112b0b:       incq    %rbx
    0.00 :   ffffffff81112b0e:       shlq    $0x6, %rbx
    0.00 :   ffffffff81112b12:       addq    %rdi, %rbx
    0.00 :   ffffffff81112b15:       je      0xffffffff81112b86 <__hrtimer_next_event_base+0xa6>
    0.00 :   ffffffff81112b17:       movq    %rsi, %r14
    0.00 :   ffffffff81112b1a:       movl    $0x1, %edx
    0.00 :   ffffffff81112b1f:       jmp     0xffffffff81112b48 <__hrtimer_next_event_base+0x68>
    0.00 :   ffffffff81112b21:       movq    %rcx, %r15
    0.00 :   ffffffff81112b24:       testl   %r12d, %r12d
    0.00 :   ffffffff81112b27:       je      0xffffffff81112b86 <__hrtimer_next_event_base+0xa6>
    0.00 :   ffffffff81112b29:       movl    %r12d, %ecx
    0.00 :   ffffffff81112b2c:       movl    %edx, %eax
    0.00 :   ffffffff81112b2e:       tzcntq  %rcx, %rcx
    0.00 :   ffffffff81112b33:       movl    %ecx, %ebx
    0.00 :   ffffffff81112b35:       shll    %cl, %eax
    0.00 :   ffffffff81112b37:       incq    %rbx
    0.00 :   ffffffff81112b3a:       notl    %eax
    0.00 :   ffffffff81112b3c:       shlq    $0x6, %rbx
    0.00 :   ffffffff81112b40:       andl    %eax, %r12d
    0.00 :   ffffffff81112b43:       addq    %r13, %rbx
    0.00 :   ffffffff81112b46:       je      0xffffffff81112b86 <__hrtimer_next_event_base+0xa6>
    0.00 :   ffffffff81112b48:       movq    0x28(%rbx), %rax
  100.00 :   ffffffff81112b4c:       cmpq    %rax, %r14
    0.00 :   ffffffff81112b4f:       je      0xffffffff81112b6f <__hrtimer_next_event_base+0x8f>
    0.00 :   ffffffff81112b51:       movq    0x18(%rax), %rcx
    0.00 :   ffffffff81112b55:       subq    0x38(%rbx), %rcx
    0.00 :   ffffffff81112b59:       cmpq    %r15, %rcx
    0.00 :   ffffffff81112b5c:       jge     0xffffffff81112b24 <__hrtimer_next_event_base+0x44>
    0.00 :   ffffffff81112b5e:       testq   %r14, %r14
    0.00 :   ffffffff81112b61:       jne     0xffffffff81112b21 <__hrtimer_next_event_base+0x41>
    0.00 :   ffffffff81112b63:       cmpb    $0x0, 0x3a(%rax)
    0.00 :   ffffffff81112b67:       je      0xffffffff81112ba6 <__hrtimer_next_event_base+0xc6>
    0.00 :   ffffffff81112b69:       movq    %rax, 0x38(%r13)
    0.00 :   ffffffff81112b6d:       jmp     0xffffffff81112b21 <__hrtimer_next_event_base+0x41>
    0.00 :   ffffffff81112b6f:       movq    %r14, %rdi
    0.00 :   ffffffff81112b72:       callq   0xffffffff81b57650 <timerqueue_iterate_next>
    0.00 :   ffffffff81112b77:       testq   %rax, %rax
    0.00 :   ffffffff81112b7a:       movl    $0x1, %edx
    0.00 :   ffffffff81112b7f:       jne     0xffffffff81112b51 <__hrtimer_next_event_base+0x71>
    0.00 :   ffffffff81112b81:       testl   %r12d, %r12d
    0.00 :   ffffffff81112b84:       jne     0xffffffff81112b29 <__hrtimer_next_event_base+0x49>
    0.00 :   ffffffff81112b86:       popq    %rbx
    0.00 :   ffffffff81112b87:       xorl    %eax, %eax
    0.00 :   ffffffff81112b89:       testq   %r15, %r15
    0.00 :   ffffffff81112b8c:       cmovnsq %r15, %rax
    0.00 :   ffffffff81112b90:       popq    %r12
    0.00 :   ffffffff81112b92:       popq    %r13
    0.00 :   ffffffff81112b94:       popq    %r14
    0.00 :   ffffffff81112b96:       popq    %r15
    0.00 :   ffffffff81112b98:       popq    %rbp
    0.00 :   ffffffff81112b99:       xorl    %edx, %edx
    0.00 :   ffffffff81112b9b:       xorl    %ecx, %ecx
    0.00 :   ffffffff81112b9d:       xorl    %esi, %esi
    0.00 :   ffffffff81112b9f:       xorl    %edi, %edi
    0.00 :   ffffffff81112ba1:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81112ba6:       movq    %rax, 0x28(%r13)
    0.00 :   ffffffff81112baa:       jmp     0xffffffff81112b21 <__hrtimer_next_event_base+0x41>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811d1c30 <perf_ctx_disable>:
         : 5                ; perf_ctx_disable():
    0.00 :   ffffffff811d1c30:       pushq   %rbp
    0.00 :   ffffffff811d1c31:       movq    %rsp, %rbp
  100.00 :   ffffffff811d1c34:       pushq   %r12
    0.00 :   ffffffff811d1c36:       pushq   %rbx
    0.00 :   ffffffff811d1c37:       movq    0x28(%rdi), %rax
    0.00 :   ffffffff811d1c3b:       leaq    0x28(%rdi), %r12
    0.00 :   ffffffff811d1c3f:       cmpq    %rax, %r12
    0.00 :   ffffffff811d1c42:       je      0xffffffff811d1c78 <perf_ctx_disable+0x48>
    0.00 :   ffffffff811d1c44:       leaq    -0x10(%rax), %rbx
    0.00 :   ffffffff811d1c48:       movq    (%rbx), %rdi
    0.00 :   ffffffff811d1c4b:       movq    0x40(%rdi), %rax
    0.00 :   ffffffff811d1c4f:       addq    %gs:0x7ee43dd9(%rip), %rax
    0.00 :   ffffffff811d1c57:       movl    (%rax), %edx
    0.00 :   ffffffff811d1c59:       leal    0x1(%rdx), %ecx
    0.00 :   ffffffff811d1c5c:       testl   %edx, %edx
    0.00 :   ffffffff811d1c5e:       movl    %ecx, (%rax)
    0.00 :   ffffffff811d1c60:       jne     0xffffffff811d1c6b <perf_ctx_disable+0x3b>
    0.00 :   ffffffff811d1c62:       movq    0x68(%rdi), %rax
    0.00 :   ffffffff811d1c66:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811d1c6b:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff811d1c6f:       cmpq    %rax, %r12
    0.00 :   ffffffff811d1c72:       leaq    -0x10(%rax), %rbx
    0.00 :   ffffffff811d1c76:       jne     0xffffffff811d1c48 <perf_ctx_disable+0x18>
    0.00 :   ffffffff811d1c78:       popq    %rbx
    0.00 :   ffffffff811d1c79:       popq    %r12
    0.00 :   ffffffff811d1c7b:       popq    %rbp
    0.00 :   ffffffff811d1c7c:       xorl    %eax, %eax
    0.00 :   ffffffff811d1c7e:       xorl    %edx, %edx
    0.00 :   ffffffff811d1c80:       xorl    %ecx, %ecx
    0.00 :   ffffffff811d1c82:       xorl    %edi, %edi
    0.00 :   ffffffff811d1c84:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81113ac0 <hrtimer_interrupt>:
         : 5                ; hrtimer_interrupt():
    0.00 :   ffffffff81113ac0:       pushq   %rbp
    0.00 :   ffffffff81113ac1:       movq    %rsp, %rbp
    0.00 :   ffffffff81113ac4:       pushq   %r15
    0.00 :   ffffffff81113ac6:       pushq   %r14
    0.00 :   ffffffff81113ac8:       pushq   %r13
    0.00 :   ffffffff81113aca:       pushq   %r12
    0.00 :   ffffffff81113acc:       pushq   %rbx
    0.00 :   ffffffff81113acd:       subq    $0x28, %rsp
    0.00 :   ffffffff81113ad1:       movq    $0x1e000, %r14  # imm = 0x1E000
    0.00 :   ffffffff81113ad8:       addq    %gs:0x7ef01f50(%rip), %r14
    0.00 :   ffffffff81113ae0:       testb   $0x1, 0x10(%r14)
    0.00 :   ffffffff81113ae5:       je      0xffffffff81113ccf <hrtimer_interrupt+0x20f>
    0.00 :   ffffffff81113aeb:       incl    0x14(%r14)
    0.00 :   ffffffff81113aef:       movabsq $0x7fffffffffffffff, %r13 # imm = 0x7FFFFFFFFFFFFFFF
    0.00 :   ffffffff81113af9:       movl    $0x3, %r12d
    0.00 :   ffffffff81113aff:       movq    %r13, 0x18(%rdi)
    0.00 :   ffffffff81113b03:       movq    %r14, %rdi
    0.00 :   ffffffff81113b06:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff81113b0b:       movq    %rax, %rbx
    0.00 :   ffffffff81113b0e:       leaq    0xc(%r14), %rax
    0.00 :   ffffffff81113b12:       leaq    0xb8(%r14), %rsi
    0.00 :   ffffffff81113b19:       leaq    0xf8(%r14), %rdx
    0.00 :   ffffffff81113b20:       leaq    0x138(%r14), %rcx
    0.00 :   ffffffff81113b27:       movq    %rax, %rdi
    0.00 :   ffffffff81113b2a:       movq    %rsi, -0x30(%rbp)
    0.00 :   ffffffff81113b2e:       movq    %rax, -0x48(%rbp)
    0.00 :   ffffffff81113b32:       movq    %rdx, -0x38(%rbp)
    0.00 :   ffffffff81113b36:       movq    %rcx, -0x40(%rbp)
    0.00 :   ffffffff81113b3a:       callq   0xffffffff81117270 <ktime_get_update_offsets_now>
  100.00 :   ffffffff81113b3f:       movq    %rax, %r15
    0.00 :   ffffffff81113b42:       movq    %rax, -0x50(%rbp)
    0.00 :   ffffffff81113b46:       movq    0xb8(%r14), %rax
    0.00 :   ffffffff81113b4d:       movq    %rax, 0x1b8(%r14)
    0.00 :   ffffffff81113b54:       movq    0xf8(%r14), %rax
    0.00 :   ffffffff81113b5b:       movq    %rax, 0x1f8(%r14)
    0.00 :   ffffffff81113b62:       movq    0x138(%r14), %rax
    0.00 :   ffffffff81113b69:       movq    %rax, 0x238(%r14)
    0.00 :   ffffffff81113b70:       movzbl  0x10(%r14), %edx
    0.00 :   ffffffff81113b75:       movq    %r13, 0x20(%r14)
    0.00 :   ffffffff81113b79:       movl    %edx, %ecx
    0.00 :   ffffffff81113b7b:       orl     $0x2, %ecx
    0.00 :   ffffffff81113b7e:       cmpq    %r15, 0x30(%r14)
    0.00 :   ffffffff81113b82:       movb    %cl, 0x10(%r14)
    0.00 :   ffffffff81113b86:       jg      0xffffffff81113b9d <hrtimer_interrupt+0xdd>
    0.00 :   ffffffff81113b88:       orl     $0xa, %edx
    0.00 :   ffffffff81113b8b:       movq    %r13, 0x30(%r14)
    0.00 :   ffffffff81113b8f:       movl    $0x8, %edi
    0.00 :   ffffffff81113b94:       movb    %dl, 0x10(%r14)
    0.00 :   ffffffff81113b98:       callq   0xffffffff810713b0 <raise_softirq_irqoff>
    0.00 :   ffffffff81113b9d:       movl    $0xf, %ecx
    0.00 :   ffffffff81113ba2:       movq    %rbx, %rdx
    0.00 :   ffffffff81113ba5:       movq    %r15, %rsi
    0.00 :   ffffffff81113ba8:       movq    %r14, %rdi
    0.00 :   ffffffff81113bab:       callq   0xffffffff81112bc0 <__hrtimer_run_queues>
    0.00 :   ffffffff81113bb0:       movq    %r14, %rdi
    0.00 :   ffffffff81113bb3:       callq   0xffffffff81112e60 <hrtimer_update_next_event>
    0.00 :   ffffffff81113bb8:       andb    $-0x3, 0x10(%r14)
    0.00 :   ffffffff81113bbd:       movq    %rax, %r15
    0.00 :   ffffffff81113bc0:       movq    %rax, 0x20(%r14)
    0.00 :   ffffffff81113bc4:       movq    %rbx, %rsi
    0.00 :   ffffffff81113bc7:       movq    %r14, %rdi
    0.00 :   ffffffff81113bca:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff81113bcf:       xorl    %esi, %esi
    0.00 :   ffffffff81113bd1:       movq    %r15, %rdi
    0.00 :   ffffffff81113bd4:       callq   0xffffffff811278a0 <tick_program_event>
    0.00 :   ffffffff81113bd9:       testl   %eax, %eax
    0.00 :   ffffffff81113bdb:       je      0xffffffff81113cad <hrtimer_interrupt+0x1ed>
    0.00 :   ffffffff81113be1:       movq    %r14, %rdi
    0.00 :   ffffffff81113be4:       callq   0xffffffff81b77600 <_raw_spin_lock_irqsave>
    0.00 :   ffffffff81113be9:       movq    -0x38(%rbp), %rdx
    0.00 :   ffffffff81113bed:       movq    -0x40(%rbp), %rcx
    0.00 :   ffffffff81113bf1:       movq    %rax, %rbx
    0.00 :   ffffffff81113bf4:       movq    -0x30(%rbp), %rsi
    0.00 :   ffffffff81113bf8:       movq    -0x48(%rbp), %rdi
    0.00 :   ffffffff81113bfc:       callq   0xffffffff81117270 <ktime_get_update_offsets_now>
    0.00 :   ffffffff81113c01:       movq    0xb8(%r14), %rdx
    0.00 :   ffffffff81113c08:       incw    0x18(%r14)
    0.00 :   ffffffff81113c0d:       decl    %r12d
    0.00 :   ffffffff81113c10:       movq    %rax, %r15
    0.00 :   ffffffff81113c13:       movq    %rdx, 0x1b8(%r14)
    0.00 :   ffffffff81113c1a:       movq    0xf8(%r14), %rdx
    0.00 :   ffffffff81113c21:       movq    %rdx, 0x1f8(%r14)
    0.00 :   ffffffff81113c28:       movq    0x138(%r14), %rdx
    0.00 :   ffffffff81113c2f:       movq    %rdx, 0x238(%r14)
    0.00 :   ffffffff81113c36:       jne     0xffffffff81113b70 <hrtimer_interrupt+0xb0>
    0.00 :   ffffffff81113c3c:       incw    0x1a(%r14)
    0.00 :   ffffffff81113c41:       orb     $0x4, 0x10(%r14)
    0.00 :   ffffffff81113c46:       movq    %rbx, %rsi
    0.00 :   ffffffff81113c49:       movq    %r14, %rdi
    0.00 :   ffffffff81113c4c:       movq    %r15, %rbx
    0.00 :   ffffffff81113c4f:       callq   0xffffffff81b77420 <_raw_spin_unlock_irqrestore>
    0.00 :   ffffffff81113c54:       movq    -0x50(%rbp), %rax
    0.00 :   ffffffff81113c58:       subq    %rax, %rbx
    0.00 :   ffffffff81113c5b:       cmpl    %ebx, 0x1c(%r14)
    0.00 :   ffffffff81113c5f:       jb      0xffffffff81113ca7 <hrtimer_interrupt+0x1e7>
    0.00 :   ffffffff81113c61:       leaq    0x5f5e100(%r15), %rdx
    0.00 :   ffffffff81113c68:       leaq    (%rbx,%r15), %rdi
    0.00 :   ffffffff81113c6c:       cmpq    $0x5f5e101, %rbx # imm = 0x5F5E101
    0.00 :   ffffffff81113c73:       movl    $0x1, %esi
    0.00 :   ffffffff81113c78:       cmovgeq %rdx, %rdi
    0.00 :   ffffffff81113c7c:       callq   0xffffffff811278a0 <tick_program_event>
    0.00 :   ffffffff81113c81:       cmpb    $0x0, 0x124ffe5(%rip) # 0xffffffff82363c6d <__already_done.0>
    0.00 :   ffffffff81113c88:       je      0xffffffff81113cd1 <hrtimer_interrupt+0x211>
    0.00 :   ffffffff81113c8a:       addq    $0x28, %rsp
    0.00 :   ffffffff81113c8e:       popq    %rbx
    0.00 :   ffffffff81113c8f:       popq    %r12
    0.00 :   ffffffff81113c91:       popq    %r13
    0.00 :   ffffffff81113c93:       popq    %r14
    0.00 :   ffffffff81113c95:       popq    %r15
    0.00 :   ffffffff81113c97:       popq    %rbp
    0.00 :   ffffffff81113c98:       xorl    %eax, %eax
    0.00 :   ffffffff81113c9a:       xorl    %edx, %edx
    0.00 :   ffffffff81113c9c:       xorl    %ecx, %ecx
    0.00 :   ffffffff81113c9e:       xorl    %esi, %esi
    0.00 :   ffffffff81113ca0:       xorl    %edi, %edi
    0.00 :   ffffffff81113ca2:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81113ca7:       movl    %ebx, 0x1c(%r14)
    0.00 :   ffffffff81113cab:       jmp     0xffffffff81113c61 <hrtimer_interrupt+0x1a1>
    0.00 :   ffffffff81113cad:       andb    $-0x5, 0x10(%r14)
    0.00 :   ffffffff81113cb2:       addq    $0x28, %rsp
    0.00 :   ffffffff81113cb6:       popq    %rbx
    0.00 :   ffffffff81113cb7:       popq    %r12
    0.00 :   ffffffff81113cb9:       popq    %r13
    0.00 :   ffffffff81113cbb:       popq    %r14
    0.00 :   ffffffff81113cbd:       popq    %r15
    0.00 :   ffffffff81113cbf:       popq    %rbp
    0.00 :   ffffffff81113cc0:       xorl    %eax, %eax
    0.00 :   ffffffff81113cc2:       xorl    %edx, %edx
    0.00 :   ffffffff81113cc4:       xorl    %ecx, %ecx
    0.00 :   ffffffff81113cc6:       xorl    %esi, %esi
    0.00 :   ffffffff81113cc8:       xorl    %edi, %edi
    0.00 :   ffffffff81113cca:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81113ccf:       ud2
    0.00 :   ffffffff81113cd1:       movq    %rbx, %rsi
    0.00 :   ffffffff81113cd4:       movq    $-0x7df77e38, %rdi # imm = 0x820881C8
    0.00 :   ffffffff81113cdb:       movb    $0x1, 0x124ff8b(%rip) # 0xffffffff82363c6d <__already_done.0>
    0.00 :   ffffffff81113ce2:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81113ce7:       jmp     0xffffffff81113c8a <hrtimer_interrupt+0x1ca>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810cb630 <account_user_time>:
         : 5                ; account_user_time():
    0.00 :   ffffffff810cb630:       pushq   %rbp
    0.00 :   ffffffff810cb631:       movq    %rsp, %rbp
    0.00 :   ffffffff810cb634:       subq    $0x18, %rsp
    0.00 :   ffffffff810cb638:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff810cb63c:       movq    %r12, -0x10(%rbp)
    0.00 :   ffffffff810cb640:       movq    %rdi, %rbx
    0.00 :   ffffffff810cb643:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff810cb647:       movq    %rsi, %r12
    0.00 :   ffffffff810cb64a:       movq    0x8f8(%rdi), %rax
    0.00 :   ffffffff810cb651:       addq    %rsi, 0x3a8(%rdi)
    0.00 :   ffffffff810cb658:       movl    0x258(%rax), %edx
    0.00 :   ffffffff810cb65e:       testl   %edx, %edx
    0.00 :   ffffffff810cb660:       je      0xffffffff810cb680 <account_user_time+0x50>
    0.00 :   ffffffff810cb662:       cmpq    $0x0, 0x2f0(%rdi)
    0.00 :   ffffffff810cb66a:       je      0xffffffff810cb680 <account_user_time+0x50>
    0.00 :   ffffffff810cb66c:       leaq    0x150(%rax), %rcx
    0.00 :   ffffffff810cb673:       testq   %rcx, %rcx
    0.00 :   ffffffff810cb676:       je      0xffffffff810cb680 <account_user_time+0x50>
    0.00 :   ffffffff810cb678:       lock
    0.00 :   ffffffff810cb679:       addq    %rsi, 0x150(%rax)
    0.00 :   ffffffff810cb680:       movl    0x148(%rbx), %eax
    0.00 :   ffffffff810cb686:       movq    %rbx, %rdi
    0.00 :   ffffffff810cb689:       movq    %r12, %rdx
    0.00 :   ffffffff810cb68c:       subl    $0x78, %eax
    0.00 :   ffffffff810cb68f:       testl   %eax, %eax
    0.00 :   ffffffff810cb691:       setg    %r13b
    0.00 :   ffffffff810cb695:       setg    %al
    0.00 :   ffffffff810cb698:       movzbl  %r13b, %r13d
    0.00 :   ffffffff810cb69c:       movzbl  %al, %eax
  100.00 :   ffffffff810cb69f:       movl    %r13d, %esi
    0.00 :   ffffffff810cb6a2:       addq    %r12, %gs:0x1b0e0(,%rax,8)
    0.00 :   ffffffff810cb6ab:       callq   0xffffffff810d1ec0 <cpuacct_account_field>
    0.00 :   ffffffff810cb6b0:       movq    0x5f0(%rbx), %rax
    0.00 :   ffffffff810cb6b7:       movq    0x78(%rax), %rdi
    0.00 :   ffffffff810cb6bb:       cmpq    $0x0, 0xc0(%rdi)
    0.00 :   ffffffff810cb6c3:       je      0xffffffff810cb6d0 <account_user_time+0xa0>
    0.00 :   ffffffff810cb6c5:       movq    %r12, %rdx
    0.00 :   ffffffff810cb6c8:       movl    %r13d, %esi
    0.00 :   ffffffff810cb6cb:       callq   0xffffffff81140970 <__cgroup_account_cputime_field>
    0.00 :   ffffffff810cb6d0:       movq    %rbx, %rdi
    0.00 :   ffffffff810cb6d3:       callq   0xffffffff81165980 <acct_account_cputime>
    0.00 :   ffffffff810cb6d8:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff810cb6dc:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff810cb6e0:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff810cb6e4:       leave
    0.00 :   ffffffff810cb6e5:       xorl    %eax, %eax
    0.00 :   ffffffff810cb6e7:       xorl    %edx, %edx
    0.00 :   ffffffff810cb6e9:       xorl    %ecx, %ecx
    0.00 :   ffffffff810cb6eb:       xorl    %esi, %esi
    0.00 :   ffffffff810cb6ed:       xorl    %edi, %edi
    0.00 :   ffffffff810cb6ef:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81049d10 <lapic_next_event>:
         : 5                ; lapic_next_event():
    0.00 :   ffffffff81049d10:       pushq   %rbp
  100.00 :   ffffffff81049d11:       movq    %rdi, %rsi
    0.00 :   ffffffff81049d14:       movq    %rsp, %rbp
    0.00 :   ffffffff81049d17:       movq    0x10da162(%rip), %rax # 0xffffffff82123e80 <apic>
    0.00 :   ffffffff81049d1e:       movl    $0x380, %edi    # imm = 0x380
    0.00 :   ffffffff81049d23:       movq    0x10(%rax), %rax
    0.00 :   ffffffff81049d27:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81049d2c:       xorl    %eax, %eax
    0.00 :   ffffffff81049d2e:       popq    %rbp
    0.00 :   ffffffff81049d2f:       xorl    %esi, %esi
    0.00 :   ffffffff81049d31:       xorl    %edi, %edi
    0.00 :   ffffffff81049d33:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811da150 <__perf_event_task_sched_out>:
         : 5                ; __perf_event_task_sched_out():
    0.00 :   ffffffff811da150:       pushq   %rbp
    0.00 :   ffffffff811da151:       movq    %rsp, %rbp
    0.00 :   ffffffff811da154:       subq    $0x68, %rsp
    0.00 :   ffffffff811da158:       movq    %rbx, -0x28(%rbp)
    0.00 :   ffffffff811da15c:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff811da160:       movq    %rdi, %rbx
    0.00 :   ffffffff811da163:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff811da167:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff811da16b:       movq    %rsi, %r13
    0.00 :   ffffffff811da16e:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff811da172:       movq    %gs:0x28, %rax
    0.00 :   ffffffff811da17b:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff811da17f:       xorl    %eax, %eax
  100.00 :   ffffffff811da181:       movl    %gs:0x7ee45804(%rip), %eax
    0.00 :   ffffffff811da188:       testl   %eax, %eax
    0.00 :   ffffffff811da18a:       jne     0xffffffff811da1ec <__perf_event_task_sched_out+0x9c>
    0.00 :   ffffffff811da18c:       movl    0x118c92e(%rip), %eax # 0xffffffff82366ac0 <nr_switch_events>
    0.00 :   ffffffff811da192:       testl   %eax, %eax
    0.00 :   ffffffff811da194:       jne     0xffffffff811da21f <__perf_event_task_sched_out+0xcf>
    0.00 :   ffffffff811da19a:       movq    0x898(%rbx), %r12
    0.00 :   ffffffff811da1a1:       testq   %r12, %r12
    0.00 :   ffffffff811da1a4:       jne     0xffffffff811da26e <__perf_event_task_sched_out+0x11e>
    0.00 :   ffffffff811da1aa:       movq    %r13, %rdi
    0.00 :   ffffffff811da1ad:       callq   0xffffffff811da010 <perf_cgroup_switch>
    0.00 :   ffffffff811da1b2:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff811da1b6:       subq    %gs:0x28, %rax
    0.00 :   ffffffff811da1bf:       jne     0xffffffff811da606 <__perf_event_task_sched_out+0x4b6>
    0.00 :   ffffffff811da1c5:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff811da1c9:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff811da1cd:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff811da1d1:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff811da1d5:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff811da1d9:       leave
    0.00 :   ffffffff811da1da:       xorl    %eax, %eax
    0.00 :   ffffffff811da1dc:       xorl    %edx, %edx
    0.00 :   ffffffff811da1de:       xorl    %ecx, %ecx
    0.00 :   ffffffff811da1e0:       xorl    %esi, %esi
    0.00 :   ffffffff811da1e2:       xorl    %edi, %edi
    0.00 :   ffffffff811da1e4:       xorl    %r8d, %r8d
    0.00 :   ffffffff811da1e7:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff811da1ec:       movq    $0x1f9e0, %rax  # imm = 0x1F9E0
    0.00 :   ffffffff811da1f3:       addq    %gs:0x7ee3b835(%rip), %rax
    0.00 :   ffffffff811da1fb:       cmpq    %rsi, %rdi
    0.00 :   ffffffff811da1fe:       je      0xffffffff811da18c <__perf_event_task_sched_out+0x3c>
    0.00 :   ffffffff811da200:       cmpq    $0x0, 0xe0(%rax)
    0.00 :   ffffffff811da208:       jne     0xffffffff811da18c <__perf_event_task_sched_out+0x3c>
    0.00 :   ffffffff811da20a:       xorl    %edi, %edi
    0.00 :   ffffffff811da20c:       callq   0xffffffff811d2200 <perf_pmu_sched_task.part.0>
    0.00 :   ffffffff811da211:       movl    0x118c8a9(%rip), %eax # 0xffffffff82366ac0 <nr_switch_events>
    0.00 :   ffffffff811da217:       testl   %eax, %eax
    0.00 :   ffffffff811da219:       je      0xffffffff811da19a <__perf_event_task_sched_out+0x4a>
    0.00 :   ffffffff811da21f:       cmpl    $0x1, 0xdc(%rbx)
    0.00 :   ffffffff811da226:       leaq    -0x50(%rbp), %rsi
    0.00 :   ffffffff811da22a:       movq    $-0x7ee28750, %rdi # imm = 0x811D78B0
    0.00 :   ffffffff811da231:       movq    $0x0, -0x40(%rbp)
    0.00 :   ffffffff811da239:       movq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff811da241:       movq    %rbx, -0x50(%rbp)
    0.00 :   ffffffff811da245:       movq    %r13, -0x48(%rbp)
    0.00 :   ffffffff811da249:       sbbl    %eax, %eax
    0.00 :   ffffffff811da24b:       xorl    %edx, %edx
    0.00 :   ffffffff811da24d:       andw    $0xc000, %ax    # imm = 0xC000
    0.00 :   ffffffff811da251:       addw    $0x6000, %ax    # imm = 0x6000
    0.00 :   ffffffff811da255:       movw    %ax, -0x3c(%rbp)
    0.00 :   ffffffff811da259:       callq   0xffffffff811d0f70 <perf_iterate_sb>
    0.00 :   ffffffff811da25e:       movq    0x898(%rbx), %r12
    0.00 :   ffffffff811da265:       testq   %r12, %r12
    0.00 :   ffffffff811da268:       je      0xffffffff811da1aa <__perf_event_task_sched_out+0x5a>
    0.00 :   ffffffff811da26e:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff811da273:       movq    0x898(%r13), %r14
    0.00 :   ffffffff811da27a:       testq   %r14, %r14
    0.00 :   ffffffff811da27d:       je      0xffffffff811da317 <__perf_event_task_sched_out+0x1c7>
    0.00 :   ffffffff811da283:       movq    0xa8(%r12), %rax
    0.00 :   ffffffff811da28b:       movq    0xa8(%r14), %rcx
    0.00 :   ffffffff811da292:       movq    %rax, %rdx
    0.00 :   ffffffff811da295:       orq     %rcx, %rdx
    0.00 :   ffffffff811da298:       je      0xffffffff811da317 <__perf_event_task_sched_out+0x1c7>
    0.00 :   ffffffff811da29a:       cmpq    %rax, %r14
    0.00 :   ffffffff811da29d:       sete    %sil
    0.00 :   ffffffff811da2a1:       cmpq    %rcx, %rax
    0.00 :   ffffffff811da2a4:       sete    %al
    0.00 :   ffffffff811da2a7:       orb     %al, %sil
    0.00 :   ffffffff811da2aa:       jne     0xffffffff811da2b1 <__perf_event_task_sched_out+0x161>
    0.00 :   ffffffff811da2ac:       cmpq    %rcx, %r12
    0.00 :   ffffffff811da2af:       jne     0xffffffff811da317 <__perf_event_task_sched_out+0x1c7>
    0.00 :   ffffffff811da2b1:       movq    %r12, %rdi
    0.00 :   ffffffff811da2b4:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff811da2b9:       movq    %r14, %rdi
    0.00 :   ffffffff811da2bc:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff811da2c1:       movl    0xc0(%r12), %esi
    0.00 :   ffffffff811da2c9:       testl   %esi, %esi
    0.00 :   ffffffff811da2cb:       jne     0xffffffff811da307 <__perf_event_task_sched_out+0x1b7>
    0.00 :   ffffffff811da2cd:       movl    0xc0(%r14), %ecx
    0.00 :   ffffffff811da2d4:       testl   %ecx, %ecx
    0.00 :   ffffffff811da2d6:       jne     0xffffffff811da307 <__perf_event_task_sched_out+0x1b7>
    0.00 :   ffffffff811da2d8:       movq    0xa8(%r14), %rcx
    0.00 :   ffffffff811da2df:       cmpq    %rcx, %r12
    0.00 :   ffffffff811da2e2:       je      0xffffffff811da37c <__perf_event_task_sched_out+0x22c>
    0.00 :   ffffffff811da2e8:       movq    0xa8(%r12), %rax
    0.00 :   ffffffff811da2f0:       cmpq    %rax, %r14
    0.00 :   ffffffff811da2f3:       je      0xffffffff811da5cb <__perf_event_task_sched_out+0x47b>
    0.00 :   ffffffff811da2f9:       testq   %rax, %rax
    0.00 :   ffffffff811da2fc:       je      0xffffffff811da307 <__perf_event_task_sched_out+0x1b7>
    0.00 :   ffffffff811da2fe:       cmpq    %rax, %rcx
    0.00 :   ffffffff811da301:       je      0xffffffff811da5ec <__perf_event_task_sched_out+0x49c>
    0.00 :   ffffffff811da307:       movq    %r14, %rdi
    0.00 :   ffffffff811da30a:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff811da30f:       movq    %r12, %rdi
    0.00 :   ffffffff811da312:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff811da317:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff811da31c:       movq    %r12, %rdi
    0.00 :   ffffffff811da31f:       callq   0xffffffff81b77b20 <_raw_spin_lock>
    0.00 :   ffffffff811da324:       movq    %r12, %rdi
    0.00 :   ffffffff811da327:       callq   0xffffffff811d1c30 <perf_ctx_disable>
    0.00 :   ffffffff811da32c:       xorl    %esi, %esi
    0.00 :   ffffffff811da32e:       movq    %r12, %rdi
    0.00 :   ffffffff811da331:       callq   0xffffffff811cd530 <perf_ctx_sched_task_cb>
    0.00 :   ffffffff811da336:       movq    $0x1f9e0, %rax  # imm = 0x1F9E0
    0.00 :   ffffffff811da33d:       addq    %gs:0x7ee3b6eb(%rip), %rax
    0.00 :   ffffffff811da345:       movq    0xe0(%rax), %rax
    0.00 :   ffffffff811da34c:       testq   %rax, %rax
    0.00 :   ffffffff811da34f:       je      0xffffffff811da363 <__perf_event_task_sched_out+0x213>
    0.00 :   ffffffff811da351:       cmpq    %rax, %r12
    0.00 :   ffffffff811da354:       jne     0xffffffff811da378 <__perf_event_task_sched_out+0x228>
    0.00 :   ffffffff811da356:       movl    $0x3, %esi
    0.00 :   ffffffff811da35b:       movq    %r12, %rdi
    0.00 :   ffffffff811da35e:       callq   0xffffffff811d45a0 <ctx_sched_out>
    0.00 :   ffffffff811da363:       movq    %r12, %rdi
    0.00 :   ffffffff811da366:       callq   0xffffffff811d1ca0 <perf_ctx_enable>
    0.00 :   ffffffff811da36b:       movq    %r12, %rdi
    0.00 :   ffffffff811da36e:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff811da373:       jmp     0xffffffff811da1aa <__perf_event_task_sched_out+0x5a>
    0.00 :   ffffffff811da378:       ud2
    0.00 :   ffffffff811da37a:       jmp     0xffffffff811da363 <__perf_event_task_sched_out+0x213>
    0.00 :   ffffffff811da37c:       movq    0xb0(%r14), %rax
    0.00 :   ffffffff811da383:       cmpq    %rax, 0xb8(%r12)
    0.00 :   ffffffff811da38b:       jne     0xffffffff811da2e8 <__perf_event_task_sched_out+0x198>
    0.00 :   ffffffff811da391:       movq    %r12, %rdi
    0.00 :   ffffffff811da394:       callq   0xffffffff811d1c30 <perf_ctx_disable>
    0.00 :   ffffffff811da399:       movq    0xd8(%r12), %rax
    0.00 :   ffffffff811da3a1:       testq   %rax, %rax
    0.00 :   ffffffff811da3a4:       jne     0xffffffff811da468 <__perf_event_task_sched_out+0x318>
    0.00 :   ffffffff811da3aa:       movq    0xd8(%r14), %rax
    0.00 :   ffffffff811da3b1:       testq   %rax, %rax
    0.00 :   ffffffff811da3b4:       jne     0xffffffff811da468 <__perf_event_task_sched_out+0x318>
    0.00 :   ffffffff811da3ba:       movq    %r13, 0x88(%r12)
    0.00 :   ffffffff811da3c2:       xorl    %esi, %esi
    0.00 :   ffffffff811da3c4:       movq    %rbx, 0x88(%r14)
    0.00 :   ffffffff811da3cb:       movq    %r12, %rdi
    0.00 :   ffffffff811da3ce:       callq   0xffffffff811cd530 <perf_ctx_sched_task_cb>
    0.00 :   ffffffff811da3d3:       movl    0x74(%r12), %edx
    0.00 :   ffffffff811da3d8:       testl   %edx, %edx
    0.00 :   ffffffff811da3da:       je      0xffffffff811da47a <__perf_event_task_sched_out+0x32a>
    0.00 :   ffffffff811da3e0:       movq    0x28(%r12), %rdi
    0.00 :   ffffffff811da3e5:       leaq    0x28(%r12), %rax
    0.00 :   ffffffff811da3ea:       movq    0x28(%r14), %rsi
    0.00 :   ffffffff811da3ee:       movq    %rax, -0x60(%rbp)
    0.00 :   ffffffff811da3f2:       cmpq    %rdi, %rax
    0.00 :   ffffffff811da3f5:       leaq    -0x10(%rdi), %r15
    0.00 :   ffffffff811da3f9:       leaq    -0x10(%rsi), %rcx
    0.00 :   ffffffff811da3fd:       je      0xffffffff811da47a <__perf_event_task_sched_out+0x32a>
    0.00 :   ffffffff811da3ff:       leaq    0x28(%r14), %rax
    0.00 :   ffffffff811da403:       cmpq    %rsi, %rax
    0.00 :   ffffffff811da406:       movq    %rax, -0x68(%rbp)
    0.00 :   ffffffff811da40a:       jne     0xffffffff811da43e <__perf_event_task_sched_out+0x2ee>
    0.00 :   ffffffff811da40c:       jmp     0xffffffff811da47a <__perf_event_task_sched_out+0x32a>
    0.00 :   ffffffff811da40e:       movq    %rcx, %rsi
    0.00 :   ffffffff811da411:       movq    %rcx, -0x58(%rbp)
    0.00 :   ffffffff811da415:       movq    %r15, %rdi
    0.00 :   ffffffff811da418:       callq   0xffffffff81b78280 <__x86_indirect_thunk_r8>
    0.00 :   ffffffff811da41e:       movq    -0x58(%rbp), %rcx
    0.00 :   ffffffff811da422:       movq    0x10(%r15), %rsi
    0.00 :   ffffffff811da426:       cmpq    %rsi, -0x60(%rbp)
    0.00 :   ffffffff811da42a:       movq    0x10(%rcx), %rdi
    0.00 :   ffffffff811da42e:       leaq    -0x10(%rsi), %r15
    0.00 :   ffffffff811da432:       leaq    -0x10(%rdi), %rcx
    0.00 :   ffffffff811da436:       je      0xffffffff811da47a <__perf_event_task_sched_out+0x32a>
    0.00 :   ffffffff811da438:       cmpq    %rdi, -0x68(%rbp)
    0.00 :   ffffffff811da43c:       je      0xffffffff811da47a <__perf_event_task_sched_out+0x32a>
    0.00 :   ffffffff811da43e:       movq    (%r15), %rsi
    0.00 :   ffffffff811da441:       cmpq    (%rcx), %rsi
    0.00 :   ffffffff811da444:       jne     0xffffffff811da5e5 <__perf_event_task_sched_out+0x495>
    0.00 :   ffffffff811da44a:       movq    0xe0(%rsi), %r8
    0.00 :   ffffffff811da451:       testq   %r8, %r8
    0.00 :   ffffffff811da454:       jne     0xffffffff811da40e <__perf_event_task_sched_out+0x2be>
    0.00 :   ffffffff811da456:       movq    0x60(%r15), %rsi
    0.00 :   ffffffff811da45a:       movq    0x60(%rcx), %rdi
    0.00 :   ffffffff811da45e:       movq    %rdi, 0x60(%r15)
    0.00 :   ffffffff811da462:       movq    %rsi, 0x60(%rcx)
    0.00 :   ffffffff811da466:       jmp     0xffffffff811da422 <__perf_event_task_sched_out+0x2d2>
    0.00 :   ffffffff811da468:       movq    %r14, %rdi
    0.00 :   ffffffff811da46b:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff811da470:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff811da475:       jmp     0xffffffff811da32c <__perf_event_task_sched_out+0x1dc>
    0.00 :   ffffffff811da47a:       movq    %r12, %rdi
    0.00 :   ffffffff811da47d:       nopl    (%rax)
    0.00 :   ffffffff811da480:       callq   0xffffffff811d1ca0 <perf_ctx_enable>
    0.00 :   ffffffff811da485:       movq    %r14, 0x898(%rbx)
    0.00 :   ffffffff811da48c:       movq    %r12, 0x898(%r13)
    0.00 :   ffffffff811da493:       movl    0x78(%r12), %eax
    0.00 :   ffffffff811da498:       testl   %eax, %eax
    0.00 :   ffffffff811da49a:       je      0xffffffff811da5b1 <__perf_event_task_sched_out+0x461>
    0.00 :   ffffffff811da4a0:       callq   0xffffffff81b6af70 <local_clock>
    0.00 :   ffffffff811da4a5:       movq    0x90(%r12), %rcx
    0.00 :   ffffffff811da4ad:       subq    0x98(%r12), %rcx
    0.00 :   ffffffff811da4b5:       movq    0x58(%r12), %r15
    0.00 :   ffffffff811da4ba:       movq    %rax, 0x98(%r12)
    0.00 :   ffffffff811da4c2:       leaq    (%rcx,%rax), %rsi
    0.00 :   ffffffff811da4c6:       leaq    0x58(%r12), %rax
    0.00 :   ffffffff811da4cb:       movq    %rcx, 0xa0(%r12)
    0.00 :   ffffffff811da4d3:       cmpq    %rax, %r15
    0.00 :   ffffffff811da4d6:       movq    %rsi, 0x90(%r12)
    0.00 :   ffffffff811da4de:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff811da4e2:       movq    0x58(%r14), %rbx
    0.00 :   ffffffff811da4e6:       je      0xffffffff811da5b1 <__perf_event_task_sched_out+0x461>
    0.00 :   ffffffff811da4ec:       leaq    0x58(%r14), %rax
    0.00 :   ffffffff811da4f0:       cmpq    %rax, %rbx
    0.00 :   ffffffff811da4f3:       movq    %rax, -0x60(%rbp)
    0.00 :   ffffffff811da4f7:       jne     0xffffffff811da50b <__perf_event_task_sched_out+0x3bb>
    0.00 :   ffffffff811da4f9:       jmp     0xffffffff811da5b1 <__perf_event_task_sched_out+0x461>
    0.00 :   ffffffff811da4fe:       movq    -0x60(%rbp), %rax
    0.00 :   ffffffff811da502:       cmpq    %rax, %rbx
    0.00 :   ffffffff811da505:       je      0xffffffff811da5b1 <__perf_event_task_sched_out+0x461>
    0.00 :   ffffffff811da50b:       testb   $0x8, 0x101(%r15)
    0.00 :   ffffffff811da513:       je      0xffffffff811da59e <__perf_event_task_sched_out+0x44e>
    0.00 :   ffffffff811da519:       cmpl    $0x1, 0xa8(%r15)
    0.00 :   ffffffff811da521:       jne     0xffffffff811da539 <__perf_event_task_sched_out+0x3e9>
    0.00 :   ffffffff811da523:       movq    0x98(%r15), %rcx
    0.00 :   ffffffff811da52a:       movq    %r15, %rdi
    0.00 :   ffffffff811da52d:       movq    0xa8(%rcx), %rcx
    0.00 :   ffffffff811da534:       callq   0xffffffff81b781a0 <__x86_indirect_thunk_rcx>
    0.00 :   ffffffff811da539:       movq    %r15, %rdi
    0.00 :   ffffffff811da53c:       callq   0xffffffff811cf8e0 <perf_event_update_time>
    0.00 :   ffffffff811da541:       movq    0xb0(%rbx), %rcx
    0.00 :   ffffffff811da548:       xchgq   %rcx, 0xb0(%r15)
    0.00 :   ffffffff811da54f:       movq    0xc0(%rbx), %rsi
    0.00 :   ffffffff811da556:       movq    %rcx, 0xb0(%rbx)
    0.00 :   ffffffff811da55d:       movq    %r15, %rdi
    0.00 :   ffffffff811da560:       movq    0xc0(%r15), %rcx
    0.00 :   ffffffff811da567:       movq    %rsi, 0xc0(%r15)
    0.00 :   ffffffff811da56e:       movq    0xc8(%rbx), %rsi
    0.00 :   ffffffff811da575:       movq    %rcx, 0xc0(%rbx)
    0.00 :   ffffffff811da57c:       movq    0xc8(%r15), %rcx
    0.00 :   ffffffff811da583:       movq    %rsi, 0xc8(%r15)
    0.00 :   ffffffff811da58a:       movq    %rcx, 0xc8(%rbx)
    0.00 :   ffffffff811da591:       callq   0xffffffff811d89e0 <perf_event_update_userpage>
    0.00 :   ffffffff811da596:       movq    %rbx, %rdi
    0.00 :   ffffffff811da599:       callq   0xffffffff811d89e0 <perf_event_update_userpage>
    0.00 :   ffffffff811da59e:       movq    (%r15), %r15
    0.00 :   ffffffff811da5a1:       movq    -0x58(%rbp), %rax
    0.00 :   ffffffff811da5a5:       movq    (%rbx), %rbx
    0.00 :   ffffffff811da5a8:       cmpq    %rax, %r15
    0.00 :   ffffffff811da5ab:       jne     0xffffffff811da4fe <__perf_event_task_sched_out+0x3ae>
    0.00 :   ffffffff811da5b1:       movq    %r14, %rdi
    0.00 :   ffffffff811da5b4:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff811da5b9:       movq    %r12, %rdi
    0.00 :   ffffffff811da5bc:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff811da5c1:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff811da5c6:       jmp     0xffffffff811da1aa <__perf_event_task_sched_out+0x5a>
    0.00 :   ffffffff811da5cb:       movq    0xb8(%r14), %rdx
    0.00 :   ffffffff811da5d2:       cmpq    %rdx, 0xb0(%r12)
    0.00 :   ffffffff811da5da:       jne     0xffffffff811da2fe <__perf_event_task_sched_out+0x1ae>
    0.00 :   ffffffff811da5e0:       jmp     0xffffffff811da391 <__perf_event_task_sched_out+0x241>
    0.00 :   ffffffff811da5e5:       ud2
    0.00 :   ffffffff811da5e7:       jmp     0xffffffff811da422 <__perf_event_task_sched_out+0x2d2>
    0.00 :   ffffffff811da5ec:       movq    0xb0(%r14), %rax
    0.00 :   ffffffff811da5f3:       cmpq    %rax, 0xb0(%r12)
    0.00 :   ffffffff811da5fb:       jne     0xffffffff811da307 <__perf_event_task_sched_out+0x1b7>
    0.00 :   ffffffff811da601:       jmp     0xffffffff811da391 <__perf_event_task_sched_out+0x241>
    0.00 :   ffffffff811da606:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     0000000000044b40 <strtoq>:
         : 5     ; strtoimax():
  100.00 :   44b40:          movq    0x186411(%rip), %rax    # 0x1caf58
    0.00 :   44b47:          xorl    %ecx, %ecx
    0.00 :   44b49:          movq    %fs:(%rax), %r8
    0.00 :   44b4d:          jmp     0x44b60 <strtoq+0x20>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81295df0 <get_mem_cgroup_from_mm>:
         : 5                ; get_mem_cgroup_from_mm():
    0.00 :   ffffffff81295df0:       pushq   %rbp
    0.00 :   ffffffff81295df1:       movq    %rsp, %rbp
    0.00 :   ffffffff81295df4:       pushq   %r12
    0.00 :   ffffffff81295df6:       pushq   %rbx
    0.00 :   ffffffff81295df7:       nop
    0.00 :   ffffffff81295df9:       testq   %rdi, %rdi
    0.00 :   ffffffff81295dfc:       movq    %rdi, %r12
    0.00 :   ffffffff81295dff:       je      0xffffffff81295ea5 <get_mem_cgroup_from_mm+0xb5>
    0.00 :   ffffffff81295e05:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff81295e0a:       movq    0x260(%r12), %rax
    0.00 :   ffffffff81295e12:       testq   %rax, %rax
    0.00 :   ffffffff81295e15:       je      0xffffffff81295e5c <get_mem_cgroup_from_mm+0x6c>
    0.00 :   ffffffff81295e17:       movq    0x5f0(%rax), %rax
    0.00 :   ffffffff81295e1e:       movq    0x20(%rax), %rbx
    0.00 :   ffffffff81295e22:       testq   %rbx, %rbx
    0.00 :   ffffffff81295e25:       je      0xffffffff81295e5c <get_mem_cgroup_from_mm+0x6c>
    0.00 :   ffffffff81295e27:       testb   $0x1, 0x54(%rbx)
    0.00 :   ffffffff81295e2b:       je      0xffffffff81295e44 <get_mem_cgroup_from_mm+0x54>
    0.00 :   ffffffff81295e2d:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff81295e32:       movq    %rbx, %rax
    0.00 :   ffffffff81295e35:       popq    %rbx
    0.00 :   ffffffff81295e36:       popq    %r12
    0.00 :   ffffffff81295e38:       popq    %rbp
    0.00 :   ffffffff81295e39:       xorl    %edx, %edx
    0.00 :   ffffffff81295e3b:       xorl    %ecx, %ecx
    0.00 :   ffffffff81295e3d:       xorl    %edi, %edi
    0.00 :   ffffffff81295e3f:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
  100.00 :   ffffffff81295e44:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff81295e49:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff81295e4d:       testb   $0x3, %al
    0.00 :   ffffffff81295e4f:       jne     0xffffffff81295e79 <get_mem_cgroup_from_mm+0x89>
    0.00 :   ffffffff81295e51:       incq    %gs:(%rax)
    0.00 :   ffffffff81295e55:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff81295e5a:       jmp     0xffffffff81295e2d <get_mem_cgroup_from_mm+0x3d>
    0.00 :   ffffffff81295e5c:       movq    0x10d331d(%rip), %rbx # 0xffffffff82369180 <root_mem_cgroup>
    0.00 :   ffffffff81295e63:       jmp     0xffffffff81295e27 <get_mem_cgroup_from_mm+0x37>
    0.00 :   ffffffff81295e65:       xorl    %ebx, %ebx
    0.00 :   ffffffff81295e67:       movq    %rbx, %rax
    0.00 :   ffffffff81295e6a:       popq    %rbx
    0.00 :   ffffffff81295e6b:       popq    %r12
    0.00 :   ffffffff81295e6d:       popq    %rbp
    0.00 :   ffffffff81295e6e:       xorl    %edx, %edx
    0.00 :   ffffffff81295e70:       xorl    %ecx, %ecx
    0.00 :   ffffffff81295e72:       xorl    %edi, %edi
    0.00 :   ffffffff81295e74:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81295e79:       movq    0x18(%rbx), %rdx
    0.00 :   ffffffff81295e7d:       movq    (%rdx), %rax
    0.00 :   ffffffff81295e80:       testq   %rax, %rax
    0.00 :   ffffffff81295e83:       je      0xffffffff81295e97 <get_mem_cgroup_from_mm+0xa7>
    0.00 :   ffffffff81295e85:       leaq    0x1(%rax), %rcx
    0.00 :   ffffffff81295e89:       lock
    0.00 :   ffffffff81295e8a:       cmpxchgq        %rcx, (%rdx)
    0.00 :   ffffffff81295e8e:       jne     0xffffffff81295e80 <get_mem_cgroup_from_mm+0x90>
    0.00 :   ffffffff81295e90:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff81295e95:       jmp     0xffffffff81295e2d <get_mem_cgroup_from_mm+0x3d>
    0.00 :   ffffffff81295e97:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff81295e9c:       nopl    (%rax)
    0.00 :   ffffffff81295ea0:       jmp     0xffffffff81295e0a <get_mem_cgroup_from_mm+0x1a>
    0.00 :   ffffffff81295ea5:       movl    %gs:0x7ed8c85c(%rip), %eax
    0.00 :   ffffffff81295eac:       testl   $0xff0100, %eax # imm = 0xFF0100
    0.00 :   ffffffff81295eb1:       jne     0xffffffff81295eed <get_mem_cgroup_from_mm+0xfd>
    0.00 :   ffffffff81295eb3:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81295ebc:       movq    0xb88(%rax), %rbx
    0.00 :   ffffffff81295ec3:       testq   %rbx, %rbx
    0.00 :   ffffffff81295ec6:       jne     0xffffffff81295ef7 <get_mem_cgroup_from_mm+0x107>
    0.00 :   ffffffff81295ec8:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81295ed1:       movq    0x3d8(%rax), %r12
    0.00 :   ffffffff81295ed8:       movq    0x10d32a1(%rip), %rbx # 0xffffffff82369180 <root_mem_cgroup>
    0.00 :   ffffffff81295edf:       testq   %r12, %r12
    0.00 :   ffffffff81295ee2:       jne     0xffffffff81295e05 <get_mem_cgroup_from_mm+0x15>
    0.00 :   ffffffff81295ee8:       jmp     0xffffffff81295e32 <get_mem_cgroup_from_mm+0x42>
    0.00 :   ffffffff81295eed:       movq    %gs:0x7ed8aaeb(%rip), %rbx
    0.00 :   ffffffff81295ef5:       jmp     0xffffffff81295ec3 <get_mem_cgroup_from_mm+0xd3>
    0.00 :   ffffffff81295ef7:       testb   $0x1, 0x54(%rbx)
    0.00 :   ffffffff81295efb:       nopl    (%rax,%rax)
    0.00 :   ffffffff81295f00:       jne     0xffffffff81295e32 <get_mem_cgroup_from_mm+0x42>
    0.00 :   ffffffff81295f06:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff81295f0b:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff81295f0f:       testb   $0x3, %al
    0.00 :   ffffffff81295f11:       jne     0xffffffff81295f1c <get_mem_cgroup_from_mm+0x12c>
    0.00 :   ffffffff81295f13:       incq    %gs:(%rax)
    0.00 :   ffffffff81295f17:       jmp     0xffffffff81295e2d <get_mem_cgroup_from_mm+0x3d>
    0.00 :   ffffffff81295f1c:       movq    0x18(%rbx), %rax
    0.00 :   ffffffff81295f20:       lock
    0.00 :   ffffffff81295f21:       addq    $0x1, (%rax)
    0.00 :   ffffffff81295f25:       jmp     0xffffffff81295e2d <get_mem_cgroup_from_mm+0x3d>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8122b220 <lock_mm_and_find_vma>:
         : 5                ; lock_mm_and_find_vma():
    0.00 :   ffffffff8122b220:       pushq   %rbp
    0.00 :   ffffffff8122b221:       movq    %rsp, %rbp
    0.00 :   ffffffff8122b224:       subq    $0x28, %rsp
    0.00 :   ffffffff8122b228:       movq    %r12, -0x20(%rbp)
    0.00 :   ffffffff8122b22c:       movq    %r13, -0x18(%rbp)
    0.00 :   ffffffff8122b230:       movq    %rdi, %r12
    0.00 :   ffffffff8122b233:       movq    %r14, -0x10(%rbp)
    0.00 :   ffffffff8122b237:       movq    %rbx, -0x28(%rbp)
  100.00 :   ffffffff8122b23b:       movq    %rsi, %r13
    0.00 :   ffffffff8122b23e:       movq    %r15, -0x8(%rbp)
    0.00 :   ffffffff8122b242:       movq    %rdx, %r14
    0.00 :   ffffffff8122b245:       leaq    0x28(%rdi), %r15
    0.00 :   ffffffff8122b249:       movq    %r15, %rdi
    0.00 :   ffffffff8122b24c:       callq   0xffffffff810d7b10 <down_read_trylock>
    0.00 :   ffffffff8122b251:       testl   %eax, %eax
    0.00 :   ffffffff8122b253:       je      0xffffffff8122b30e <lock_mm_and_find_vma+0xee>
    0.00 :   ffffffff8122b259:       callq   0xffffffff81b789b8 <__SCT__might_resched>
    0.00 :   ffffffff8122b25e:       movq    %r13, %rsi
    0.00 :   ffffffff8122b261:       movq    %r12, %rdi
    0.00 :   ffffffff8122b264:       callq   0xffffffff812333b0 <find_vma>
    0.00 :   ffffffff8122b269:       testq   %rax, %rax
    0.00 :   ffffffff8122b26c:       movq    %rax, %rbx
    0.00 :   ffffffff8122b26f:       je      0xffffffff8122b350 <lock_mm_and_find_vma+0x130>
    0.00 :   ffffffff8122b275:       cmpq    0x60(%rax), %r13
    0.00 :   ffffffff8122b279:       jb      0xffffffff8122b29e <lock_mm_and_find_vma+0x7e>
    0.00 :   ffffffff8122b27b:       movq    %rbx, %rax
    0.00 :   ffffffff8122b27e:       movq    -0x20(%rbp), %r12
    0.00 :   ffffffff8122b282:       movq    -0x28(%rbp), %rbx
    0.00 :   ffffffff8122b286:       movq    -0x18(%rbp), %r13
    0.00 :   ffffffff8122b28a:       movq    -0x10(%rbp), %r14
    0.00 :   ffffffff8122b28e:       movq    -0x8(%rbp), %r15
    0.00 :   ffffffff8122b292:       leave
    0.00 :   ffffffff8122b293:       xorl    %edx, %edx
    0.00 :   ffffffff8122b295:       xorl    %esi, %esi
    0.00 :   ffffffff8122b297:       xorl    %edi, %edi
    0.00 :   ffffffff8122b299:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8122b29e:       testb   $0x1, 0x11(%rax)
    0.00 :   ffffffff8122b2a2:       je      0xffffffff8122b350 <lock_mm_and_find_vma+0x130>
    0.00 :   ffffffff8122b2a8:       movq    %r15, %rdi
    0.00 :   ffffffff8122b2ab:       callq   0xffffffff810d80b0 <up_read>
    0.00 :   ffffffff8122b2b0:       testq   %r14, %r14
    0.00 :   ffffffff8122b2b3:       je      0xffffffff8122b2bf <lock_mm_and_find_vma+0x9f>
    0.00 :   ffffffff8122b2b5:       testb   $0x3, 0x88(%r14)
    0.00 :   ffffffff8122b2bd:       je      0xffffffff8122b334 <lock_mm_and_find_vma+0x114>
    0.00 :   ffffffff8122b2bf:       movq    %r15, %rdi
    0.00 :   ffffffff8122b2c2:       callq   0xffffffff81b740d0 <down_write_killable>
    0.00 :   ffffffff8122b2c7:       testl   %eax, %eax
    0.00 :   ffffffff8122b2c9:       jne     0xffffffff8122b32d <lock_mm_and_find_vma+0x10d>
    0.00 :   ffffffff8122b2cb:       movq    %r13, %rsi
    0.00 :   ffffffff8122b2ce:       movq    %r12, %rdi
    0.00 :   ffffffff8122b2d1:       callq   0xffffffff812333b0 <find_vma>
    0.00 :   ffffffff8122b2d6:       testq   %rax, %rax
    0.00 :   ffffffff8122b2d9:       movq    %rax, %rbx
    0.00 :   ffffffff8122b2dc:       je      0xffffffff8122b377 <lock_mm_and_find_vma+0x157>
    0.00 :   ffffffff8122b2e2:       cmpq    0x60(%rax), %r13
    0.00 :   ffffffff8122b2e6:       jae     0xffffffff8122b301 <lock_mm_and_find_vma+0xe1>
    0.00 :   ffffffff8122b2e8:       testb   $0x1, 0x11(%rax)
    0.00 :   ffffffff8122b2ec:       je      0xffffffff8122b377 <lock_mm_and_find_vma+0x157>
    0.00 :   ffffffff8122b2f2:       movq    %r13, %rsi
    0.00 :   ffffffff8122b2f5:       movq    %rax, %rdi
    0.00 :   ffffffff8122b2f8:       callq   0xffffffff81237d40 <expand_stack_locked>
    0.00 :   ffffffff8122b2fd:       testl   %eax, %eax
    0.00 :   ffffffff8122b2ff:       jne     0xffffffff8122b377 <lock_mm_and_find_vma+0x157>
    0.00 :   ffffffff8122b301:       movq    %r15, %rdi
    0.00 :   ffffffff8122b304:       callq   0xffffffff810d7e70 <downgrade_write>
    0.00 :   ffffffff8122b309:       jmp     0xffffffff8122b27b <lock_mm_and_find_vma+0x5b>
    0.00 :   ffffffff8122b30e:       testq   %r14, %r14
    0.00 :   ffffffff8122b311:       je      0xffffffff8122b31d <lock_mm_and_find_vma+0xfd>
    0.00 :   ffffffff8122b313:       testb   $0x3, 0x88(%r14)
    0.00 :   ffffffff8122b31b:       je      0xffffffff8122b35f <lock_mm_and_find_vma+0x13f>
    0.00 :   ffffffff8122b31d:       movq    %r15, %rdi
    0.00 :   ffffffff8122b320:       callq   0xffffffff81b74240 <down_read_killable>
    0.00 :   ffffffff8122b325:       testl   %eax, %eax
    0.00 :   ffffffff8122b327:       je      0xffffffff8122b25e <lock_mm_and_find_vma+0x3e>
    0.00 :   ffffffff8122b32d:       xorl    %ebx, %ebx
    0.00 :   ffffffff8122b32f:       jmp     0xffffffff8122b27b <lock_mm_and_find_vma+0x5b>
    0.00 :   ffffffff8122b334:       movq    0x80(%r14), %rdi
    0.00 :   ffffffff8122b33b:       callq   0xffffffff81094c80 <search_exception_tables>
    0.00 :   ffffffff8122b340:       testq   %rax, %rax
    0.00 :   ffffffff8122b343:       jne     0xffffffff8122b2bf <lock_mm_and_find_vma+0x9f>
    0.00 :   ffffffff8122b349:       xorl    %ebx, %ebx
    0.00 :   ffffffff8122b34b:       jmp     0xffffffff8122b27b <lock_mm_and_find_vma+0x5b>
    0.00 :   ffffffff8122b350:       movq    %r15, %rdi
    0.00 :   ffffffff8122b353:       xorl    %ebx, %ebx
    0.00 :   ffffffff8122b355:       callq   0xffffffff810d80b0 <up_read>
    0.00 :   ffffffff8122b35a:       jmp     0xffffffff8122b27b <lock_mm_and_find_vma+0x5b>
    0.00 :   ffffffff8122b35f:       movq    0x80(%r14), %rdi
    0.00 :   ffffffff8122b366:       callq   0xffffffff81094c80 <search_exception_tables>
    0.00 :   ffffffff8122b36b:       testq   %rax, %rax
    0.00 :   ffffffff8122b36e:       jne     0xffffffff8122b31d <lock_mm_and_find_vma+0xfd>
    0.00 :   ffffffff8122b370:       xorl    %ebx, %ebx
    0.00 :   ffffffff8122b372:       jmp     0xffffffff8122b27b <lock_mm_and_find_vma+0x5b>
    0.00 :   ffffffff8122b377:       movq    %r15, %rdi
    0.00 :   ffffffff8122b37a:       xorl    %ebx, %ebx
    0.00 :   ffffffff8122b37c:       callq   0xffffffff810d8050 <up_write>
    0.00 :   ffffffff8122b381:       jmp     0xffffffff8122b27b <lock_mm_and_find_vma+0x5b>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8107ad00 <sigprocmask>:
         : 5                ; sigprocmask():
  100.00 :   ffffffff8107ad00:       pushq   %rbp
    0.00 :   ffffffff8107ad01:       movq    %rsp, %rbp
    0.00 :   ffffffff8107ad04:       subq    $0x18, %rsp
    0.00 :   ffffffff8107ad08:       movq    %rbx, -0x8(%rbp)
    0.00 :   ffffffff8107ad0c:       movq    %gs:0x28, %rax
    0.00 :   ffffffff8107ad15:       movq    %rax, -0x10(%rbp)
    0.00 :   ffffffff8107ad19:       xorl    %eax, %eax
    0.00 :   ffffffff8107ad1b:       movq    %gs:0x22700, %rcx
    0.00 :   ffffffff8107ad24:       testq   %rdx, %rdx
    0.00 :   ffffffff8107ad27:       je      0xffffffff8107ad33 <sigprocmask+0x33>
    0.00 :   ffffffff8107ad29:       movq    0x548(%rcx), %rax
    0.00 :   ffffffff8107ad30:       movq    %rax, (%rdx)
    0.00 :   ffffffff8107ad33:       cmpl    $0x1, %edi
    0.00 :   ffffffff8107ad36:       je      0xffffffff8107ad6b <sigprocmask+0x6b>
    0.00 :   ffffffff8107ad38:       cmpl    $0x2, %edi
    0.00 :   ffffffff8107ad3b:       je      0xffffffff8107adc6 <sigprocmask+0xc6>
    0.00 :   ffffffff8107ad41:       testl   %edi, %edi
    0.00 :   ffffffff8107ad43:       movl    $0xffffffea, %eax # imm = 0xFFFFFFEA
    0.00 :   ffffffff8107ad48:       je      0xffffffff8107adb6 <sigprocmask+0xb6>
    0.00 :   ffffffff8107ad4a:       movq    -0x10(%rbp), %rdx
    0.00 :   ffffffff8107ad4e:       subq    %gs:0x28, %rdx
    0.00 :   ffffffff8107ad57:       jne     0xffffffff8107adcf <sigprocmask+0xcf>
    0.00 :   ffffffff8107ad59:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff8107ad5d:       leave
    0.00 :   ffffffff8107ad5e:       xorl    %edx, %edx
    0.00 :   ffffffff8107ad60:       xorl    %ecx, %ecx
    0.00 :   ffffffff8107ad62:       xorl    %esi, %esi
    0.00 :   ffffffff8107ad64:       xorl    %edi, %edi
    0.00 :   ffffffff8107ad66:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8107ad6b:       movq    (%rsi), %rax
    0.00 :   ffffffff8107ad6e:       notq    %rax
    0.00 :   ffffffff8107ad71:       andq    0x548(%rcx), %rax
    0.00 :   ffffffff8107ad78:       movq    %rax, -0x18(%rbp)
    0.00 :   ffffffff8107ad7c:       movq    %gs:0x22700, %rbx
    0.00 :   ffffffff8107ad85:       cmpq    0x548(%rbx), %rax
    0.00 :   ffffffff8107ad8c:       je      0xffffffff8107adb2 <sigprocmask+0xb2>
    0.00 :   ffffffff8107ad8e:       movq    0x2f0(%rbx), %rdi
    0.00 :   ffffffff8107ad95:       callq   0xffffffff81b77bc0 <_raw_spin_lock_irq>
    0.00 :   ffffffff8107ad9a:       leaq    -0x18(%rbp), %rsi
    0.00 :   ffffffff8107ad9e:       movq    %rbx, %rdi
    0.00 :   ffffffff8107ada1:       callq   0xffffffff8107a6e0 <__set_task_blocked>
    0.00 :   ffffffff8107ada6:       movq    0x2f0(%rbx), %rdi
    0.00 :   ffffffff8107adad:       callq   0xffffffff81b77800 <_raw_spin_unlock_irq>
    0.00 :   ffffffff8107adb2:       xorl    %eax, %eax
    0.00 :   ffffffff8107adb4:       jmp     0xffffffff8107ad4a <sigprocmask+0x4a>
    0.00 :   ffffffff8107adb6:       movq    0x548(%rcx), %rax
    0.00 :   ffffffff8107adbd:       orq     (%rsi), %rax
    0.00 :   ffffffff8107adc0:       movq    %rax, -0x18(%rbp)
    0.00 :   ffffffff8107adc4:       jmp     0xffffffff8107ad7c <sigprocmask+0x7c>
    0.00 :   ffffffff8107adc6:       movq    (%rsi), %rax
    0.00 :   ffffffff8107adc9:       movq    %rax, -0x18(%rbp)
    0.00 :   ffffffff8107adcd:       jmp     0xffffffff8107ad7c <sigprocmask+0x7c>
    0.00 :   ffffffff8107adcf:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81251f70 <__alloc_pages>:
         : 5                ; __alloc_pages():
    0.00 :   ffffffff81251f70:       pushq   %rbp
    0.00 :   ffffffff81251f71:       movq    %rsp, %rbp
    0.00 :   ffffffff81251f74:       pushq   %r15
    0.00 :   ffffffff81251f76:       pushq   %r14
    0.00 :   ffffffff81251f78:       pushq   %r13
    0.00 :   ffffffff81251f7a:       movq    %rcx, %r13
    0.00 :   ffffffff81251f7d:       pushq   %r12
    0.00 :   ffffffff81251f7f:       movl    %esi, %r12d
    0.00 :   ffffffff81251f82:       movl    %edx, %esi
    0.00 :   ffffffff81251f84:       pushq   %rbx
    0.00 :   ffffffff81251f85:       movl    %edi, %ebx
    0.00 :   ffffffff81251f87:       subq    $0x30, %rsp
    0.00 :   ffffffff81251f8b:       movq    %gs:0x28, %rax
    0.00 :   ffffffff81251f94:       movq    %rax, -0x30(%rbp)
    0.00 :   ffffffff81251f98:       xorl    %eax, %eax
    0.00 :   ffffffff81251f9a:       testb   $0x20, %bh
    0.00 :   ffffffff81251f9d:       movq    $0x0, -0x58(%rbp)
    0.00 :   ffffffff81251fa5:       movq    $0x0, -0x50(%rbp)
    0.00 :   ffffffff81251fad:       movq    $0x0, -0x48(%rbp)
    0.00 :   ffffffff81251fb5:       movq    $0x0, -0x40(%rbp)
    0.00 :   ffffffff81251fbd:       movq    $0x0, -0x38(%rbp)
    0.00 :   ffffffff81251fc5:       je      0xffffffff812521c0 <__alloc_pages+0x250>
    0.00 :   ffffffff81251fcb:       cmpl    $0xa, %r12d
    0.00 :   ffffffff81251fcf:       ja      0xffffffff81252072 <__alloc_pages+0x102>
    0.00 :   ffffffff81251fd5:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff81251fde:       movl    0x354(%rax), %edx
    0.00 :   ffffffff81251fe4:       andl    0x1114b86(%rip), %ebx # 0xffffffff82366b70 <gfp_allowed_mask>
    0.00 :   ffffffff81251fea:       testl   $0x100c0000, %edx # imm = 0x100C0000
    0.00 :   ffffffff81251ff0:       jne     0xffffffff812521ec <__alloc_pages+0x27c>
    0.00 :   ffffffff81251ff6:       movl    %ebx, %ecx
    0.00 :   ffffffff81251ff8:       movl    $0x1320122, %eax # imm = 0x1320122
    0.00 :   ffffffff81251ffd:       movl    %ebx, %edx
    0.00 :   ffffffff81251fff:       andl    $0xf, %ecx
    0.00 :   ffffffff81252002:       shrl    $0x15, %edx
    0.00 :   ffffffff81252005:       movq    %r13, -0x50(%rbp)
    0.00 :   ffffffff81252009:       addl    %ecx, %ecx
    0.00 :   ffffffff8125200b:       andl    $0x1, %edx
    0.00 :   ffffffff8125200e:       sarl    %cl, %eax
    0.00 :   ffffffff81252010:       andl    $0x3, %eax
    0.00 :   ffffffff81252013:       movl    %eax, -0x3c(%rbp)
    0.00 :   ffffffff81252016:       movslq  %esi, %rax
    0.00 :   ffffffff81252019:       movq    -0x7dc999e0(,%rax,8), %rcx
    0.00 :   ffffffff81252021:       movq    %rdx, %rax
    0.00 :   ffffffff81252024:       shlq    $0x8, %rax
    0.00 :   ffffffff81252028:       addq    %rdx, %rax
    0.00 :   ffffffff8125202b:       shlq    $0x4, %rax
    0.00 :   ffffffff8125202f:       leaq    0x1300(%rcx,%rax), %rax
    0.00 :   ffffffff81252037:       movq    %rax, -0x58(%rbp)
    0.00 :   ffffffff8125203b:       movl    0x1114b1f(%rip), %eax # 0xffffffff82366b60 <page_group_by_mobility_disabled>
    0.00 :   ffffffff81252041:       testl   %eax, %eax
    0.00 :   ffffffff81252043:       jne     0xffffffff812521e5 <__alloc_pages+0x275>
    0.00 :   ffffffff81252049:       movl    %ebx, %eax
    0.00 :   ffffffff8125204b:       shrl    $0x3, %eax
    0.00 :   ffffffff8125204e:       andl    $0x3, %eax
    0.00 :   ffffffff81252051:       movl    %eax, -0x40(%rbp)
    0.00 :   ffffffff81252054:       nop
    0.00 :   ffffffff81252056:       movl    %ebx, %r14d
    0.00 :   ffffffff81252059:       movl    $0x1, %r15d
    0.00 :   ffffffff8125205f:       testb   $0x4, %bh
    0.00 :   ffffffff81252062:       jne     0xffffffff812520d2 <__alloc_pages+0x162>
    0.00 :   ffffffff81252064:       movl    %r12d, %esi
    0.00 :   ffffffff81252067:       movl    %ebx, %edi
    0.00 :   ffffffff81252069:       callq   0xffffffff8124fbb0 <should_fail_alloc_page>
    0.00 :   ffffffff8125206e:       testb   %al, %al
    0.00 :   ffffffff81252070:       je      0xffffffff812520e5 <__alloc_pages+0x175>
    0.00 :   ffffffff81252072:       xorl    %r14d, %r14d
    0.00 :   ffffffff81252075:       movq    -0x30(%rbp), %rax
    0.00 :   ffffffff81252079:       subq    %gs:0x28, %rax
    0.00 :   ffffffff81252082:       jne     0xffffffff81252244 <__alloc_pages+0x2d4>
    0.00 :   ffffffff81252088:       addq    $0x30, %rsp
    0.00 :   ffffffff8125208c:       movq    %r14, %rax
    0.00 :   ffffffff8125208f:       popq    %rbx
    0.00 :   ffffffff81252090:       popq    %r12
    0.00 :   ffffffff81252092:       popq    %r13
    0.00 :   ffffffff81252094:       popq    %r14
    0.00 :   ffffffff81252096:       popq    %r15
    0.00 :   ffffffff81252098:       popq    %rbp
    0.00 :   ffffffff81252099:       xorl    %edx, %edx
    0.00 :   ffffffff8125209b:       xorl    %ecx, %ecx
    0.00 :   ffffffff8125209d:       xorl    %esi, %esi
    0.00 :   ffffffff8125209f:       xorl    %edi, %edi
    0.00 :   ffffffff812520a1:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff812520a6:       movl    %ebx, %r14d
    0.00 :   ffffffff812520a9:       orl     $0x100000, %r14d # imm = 0x100000
    0.00 :   ffffffff812520b0:       movl    %gs:0x7edd0651(%rip), %eax
    0.00 :   ffffffff812520b7:       testl   $0xff0100, %eax # imm = 0xFF0100
    0.00 :   ffffffff812520bc:       jne     0xffffffff812520c7 <__alloc_pages+0x157>
    0.00 :   ffffffff812520be:       testq   %r13, %r13
    0.00 :   ffffffff812520c1:       je      0xffffffff812521a4 <__alloc_pages+0x234>
    0.00 :   ffffffff812520c7:       testb   $0x4, %bh
    0.00 :   ffffffff812520ca:       movl    $0x41, %r15d
    0.00 :   ffffffff812520d0:       je      0xffffffff81252064 <__alloc_pages+0xf4>
    0.00 :   ffffffff812520d2:       callq   0xffffffff81b789b8 <__SCT__might_resched>
    0.00 :   ffffffff812520d7:       movl    %r12d, %esi
    0.00 :   ffffffff812520da:       movl    %ebx, %edi
    0.00 :   ffffffff812520dc:       callq   0xffffffff8124fbb0 <should_fail_alloc_page>
    0.00 :   ffffffff812520e1:       testb   %al, %al
    0.00 :   ffffffff812520e3:       jne     0xffffffff81252072 <__alloc_pages+0x102>
    0.00 :   ffffffff812520e5:       movq    -0x50(%rbp), %rdx
    0.00 :   ffffffff812520e9:       movl    %ebx, %eax
    0.00 :   ffffffff812520eb:       movl    -0x3c(%rbp), %esi
    0.00 :   ffffffff812520ee:       shrl    $0xc, %eax
    0.00 :   ffffffff812520f1:       movq    -0x58(%rbp), %rdi
    0.00 :   ffffffff812520f5:       andl    $0x1, %eax
    0.00 :   ffffffff812520f8:       testq   %rdx, %rdx
    0.00 :   ffffffff812520fb:       movb    %al, -0x38(%rbp)
    0.00 :   ffffffff812520fe:       jne     0xffffffff81252214 <__alloc_pages+0x2a4>
    0.00 :   ffffffff81252104:       cmpl    0x8(%rdi), %esi
    0.00 :   ffffffff81252107:       jb      0xffffffff81252214 <__alloc_pages+0x2a4>
    0.00 :   ffffffff8125210d:       movq    %rdi, -0x48(%rbp)
    0.00 :   ffffffff81252111:       movq    (%rdi), %rax
    0.00 :   ffffffff81252114:       movl    %ebx, %edx
    0.00 :   ffffffff81252116:       andl    $0x800, %edx    # imm = 0x800
    0.00 :   ffffffff8125211c:       testq   %rax, %rax
    0.00 :   ffffffff8125211f:       je      0xffffffff81252147 <__alloc_pages+0x1d7>
    0.00 :   ffffffff81252121:       movq    %rax, %rcx
    0.00 :   ffffffff81252124:       subq    0x58(%rax), %rcx
    0.00 :   ffffffff81252128:       cmpq    $0x980, %rcx    # imm = 0x980
    0.00 :   ffffffff8125212f:       jne     0xffffffff81252147 <__alloc_pages+0x1d7>
    0.00 :   ffffffff81252131:       cmpl    $0x1, 0x1114a2c(%rip) # 0xffffffff82366b64 <nr_online_nodes>
    0.00 :   ffffffff81252138:       jbe     0xffffffff81252144 <__alloc_pages+0x1d4>
    0.00 :   ffffffff8125213a:       cmpq    $0x0, -0x430(%rax)
    0.00 :   ffffffff81252142:       je      0xffffffff81252147 <__alloc_pages+0x1d7>
    0.00 :   ffffffff81252144:       orb     $0x1, %dh
    0.00 :   ffffffff81252147:       leaq    -0x58(%rbp), %rcx
    0.00 :   ffffffff8125214b:       orl     %r15d, %edx
  100.00 :   ffffffff8125214e:       movl    %r14d, %edi
    0.00 :   ffffffff81252151:       movl    %r12d, %esi
    0.00 :   ffffffff81252154:       callq   0xffffffff8124fd40 <get_page_from_freelist>
    0.00 :   ffffffff81252159:       testq   %rax, %rax
    0.00 :   ffffffff8125215c:       movq    %rax, %r14
    0.00 :   ffffffff8125215f:       je      0xffffffff81252221 <__alloc_pages+0x2b1>
    0.00 :   ffffffff81252165:       jmp     0xffffffff81252075 <__alloc_pages+0x105>
    0.00 :   ffffffff8125216a:       testl   $0x400000, %ebx # imm = 0x400000
    0.00 :   ffffffff81252170:       je      0xffffffff81252075 <__alloc_pages+0x105>
    0.00 :   ffffffff81252176:       testq   %r14, %r14
    0.00 :   ffffffff81252179:       je      0xffffffff81252072 <__alloc_pages+0x102>
    0.00 :   ffffffff8125217f:       movl    %r12d, %edx
    0.00 :   ffffffff81252182:       movl    %ebx, %esi
    0.00 :   ffffffff81252184:       movq    %r14, %rdi
    0.00 :   ffffffff81252187:       callq   0xffffffff8129cc50 <__memcg_kmem_charge_page>
    0.00 :   ffffffff8125218c:       testl   %eax, %eax
    0.00 :   ffffffff8125218e:       je      0xffffffff81252075 <__alloc_pages+0x105>
    0.00 :   ffffffff81252194:       movl    %r12d, %esi
    0.00 :   ffffffff81252197:       movq    %r14, %rdi
    0.00 :   ffffffff8125219a:       callq   0xffffffff8124f040 <__free_pages>
    0.00 :   ffffffff8125219f:       jmp     0xffffffff81252072 <__alloc_pages+0x102>
    0.00 :   ffffffff812521a4:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff812521ad:       addq    $0x78, %rax
    0.00 :   ffffffff812521b1:       movl    $0x1, %r15d
    0.00 :   ffffffff812521b7:       movq    %rax, -0x50(%rbp)
    0.00 :   ffffffff812521bb:       jmp     0xffffffff8125205f <__alloc_pages+0xef>
    0.00 :   ffffffff812521c0:       cmpl    $0xa, %r12d
    0.00 :   ffffffff812521c4:       jbe     0xffffffff81251fd5 <__alloc_pages+0x65>
    0.00 :   ffffffff812521ca:       cmpb    $0x0, 0x1111ad3(%rip) # 0xffffffff82363ca4 <__warned.9>
    0.00 :   ffffffff812521d1:       jne     0xffffffff81252072 <__alloc_pages+0x102>
    0.00 :   ffffffff812521d7:       movb    $0x1, 0x1111ac6(%rip) # 0xffffffff82363ca4 <__warned.9>
    0.00 :   ffffffff812521de:       ud2
    0.00 :   ffffffff812521e0:       jmp     0xffffffff81252072 <__alloc_pages+0x102>
    0.00 :   ffffffff812521e5:       xorl    %eax, %eax
    0.00 :   ffffffff812521e7:       jmp     0xffffffff81252051 <__alloc_pages+0xe1>
    0.00 :   ffffffff812521ec:       testl   $0x80000, %edx  # imm = 0x80000
    0.00 :   ffffffff812521f2:       jne     0xffffffff8125223f <__alloc_pages+0x2cf>
    0.00 :   ffffffff812521f4:       movl    %ebx, %eax
    0.00 :   ffffffff812521f6:       andb    $0x7f, %al
    0.00 :   ffffffff812521f8:       testl   $0x40000, %edx  # imm = 0x40000
    0.00 :   ffffffff812521fe:       cmovnel %eax, %ebx
    0.00 :   ffffffff81252201:       movl    %ebx, %eax
    0.00 :   ffffffff81252203:       andl    $-0x9, %eax
    0.00 :   ffffffff81252206:       andl    $0x10000000, %edx # imm = 0x10000000
    0.00 :   ffffffff8125220c:       cmovnel %eax, %ebx
    0.00 :   ffffffff8125220f:       jmp     0xffffffff81251ff6 <__alloc_pages+0x86>
    0.00 :   ffffffff81252214:       callq   0xffffffff8120dec0 <__next_zones_zonelist>
    0.00 :   ffffffff81252219:       movq    %rax, %rdi
    0.00 :   ffffffff8125221c:       jmp     0xffffffff8125210d <__alloc_pages+0x19d>
    0.00 :   ffffffff81252221:       leaq    -0x58(%rbp), %rdx
    0.00 :   ffffffff81252225:       movl    %r12d, %esi
    0.00 :   ffffffff81252228:       movl    %ebx, %edi
    0.00 :   ffffffff8125222a:       movb    $0x0, -0x38(%rbp)
    0.00 :   ffffffff8125222e:       movq    %r13, -0x50(%rbp)
    0.00 :   ffffffff81252232:       callq   0xffffffff81251290 <__alloc_pages_slowpath.constprop.0>
    0.00 :   ffffffff81252237:       movq    %rax, %r14
    0.00 :   ffffffff8125223a:       jmp     0xffffffff81252165 <__alloc_pages+0x1f5>
    0.00 :   ffffffff8125223f:       andb    $0x3f, %bl
    0.00 :   ffffffff81252242:       jmp     0xffffffff81252201 <__alloc_pages+0x291>
    0.00 :   ffffffff81252244:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810b9620 <put_prev_entity>:
         : 5                ; put_prev_entity():
    0.00 :   ffffffff810b9620:       pushq   %rbp
    0.00 :   ffffffff810b9621:       movq    %rsp, %rbp
    0.00 :   ffffffff810b9624:       pushq   %r12
    0.00 :   ffffffff810b9626:       movq    %rdi, %r12
    0.00 :   ffffffff810b9629:       pushq   %rbx
    0.00 :   ffffffff810b962a:       movq    %rsi, %rbx
    0.00 :   ffffffff810b962d:       movl    0x38(%rsi), %edx
    0.00 :   ffffffff810b9630:       testl   %edx, %edx
    0.00 :   ffffffff810b9632:       jne     0xffffffff810b9665 <put_prev_entity+0x45>
    0.00 :   ffffffff810b9634:       movq    %r12, %rdi
    0.00 :   ffffffff810b9637:       callq   0xffffffff810b95b0 <check_cfs_rq_runtime>
    0.00 :   ffffffff810b963c:       movl    0x38(%rbx), %eax
    0.00 :   ffffffff810b963f:       testl   %eax, %eax
    0.00 :   ffffffff810b9641:       jne     0xffffffff810b9679 <put_prev_entity+0x59>
    0.00 :   ffffffff810b9643:       movq    $0x0, 0x50(%r12)
    0.00 :   ffffffff810b964c:       popq    %rbx
    0.00 :   ffffffff810b964d:       popq    %r12
    0.00 :   ffffffff810b964f:       popq    %rbp
    0.00 :   ffffffff810b9650:       xorl    %eax, %eax
    0.00 :   ffffffff810b9652:       xorl    %edx, %edx
    0.00 :   ffffffff810b9654:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b9656:       xorl    %esi, %esi
    0.00 :   ffffffff810b9658:       xorl    %edi, %edi
    0.00 :   ffffffff810b965a:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b965d:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b9660:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b9665:       callq   0xffffffff810b3cf0 <update_curr>
    0.00 :   ffffffff810b966a:       movq    %r12, %rdi
    0.00 :   ffffffff810b966d:       callq   0xffffffff810b95b0 <check_cfs_rq_runtime>
    0.00 :   ffffffff810b9672:       movl    0x38(%rbx), %eax
    0.00 :   ffffffff810b9675:       testl   %eax, %eax
    0.00 :   ffffffff810b9677:       je      0xffffffff810b9643 <put_prev_entity+0x23>
    0.00 :   ffffffff810b9679:       movq    0x40(%r12), %rax
    0.00 :   ffffffff810b967e:       leaq    0x40(%r12), %r9
    0.00 :   ffffffff810b9683:       leaq    0x10(%rbx), %r8
    0.00 :   ffffffff810b9687:       testq   %rax, %rax
    0.00 :   ffffffff810b968a:       je      0xffffffff810b9708 <put_prev_entity+0xe8>
    0.00 :   ffffffff810b968c:       movq    0x50(%rbx), %rsi
    0.00 :   ffffffff810b9690:       movl    $0x1, %edi
    0.00 :   ffffffff810b9695:       jmp     0xffffffff810b969a <put_prev_entity+0x7a>
    0.00 :   ffffffff810b9697:       movq    %rdx, %rax
    0.00 :   ffffffff810b969a:       cmpq    0x40(%rax), %rsi
    0.00 :   ffffffff810b969e:       leaq    0x10(%rax), %rcx
    0.00 :   ffffffff810b96a2:       js      0xffffffff810b96aa <put_prev_entity+0x8a>
    0.00 :   ffffffff810b96a4:       leaq    0x8(%rax), %rcx
    0.00 :   ffffffff810b96a8:       xorl    %edi, %edi
    0.00 :   ffffffff810b96aa:       movq    (%rcx), %rdx
    0.00 :   ffffffff810b96ad:       testq   %rdx, %rdx
    0.00 :   ffffffff810b96b0:       jne     0xffffffff810b9697 <put_prev_entity+0x77>
    0.00 :   ffffffff810b96b2:       testb   %dil, %dil
    0.00 :   ffffffff810b96b5:       movq    %rax, 0x10(%rbx)
    0.00 :   ffffffff810b96b9:       movq    $0x0, 0x18(%rbx)
    0.00 :   ffffffff810b96c1:       movq    $0x0, 0x20(%rbx)
    0.00 :   ffffffff810b96c9:       movq    %r8, (%rcx)
    0.00 :   ffffffff810b96cc:       jne     0xffffffff810b9725 <put_prev_entity+0x105>
    0.00 :   ffffffff810b96ce:       movq    %r9, %rsi
    0.00 :   ffffffff810b96d1:       movq    %r8, %rdi
    0.00 :   ffffffff810b96d4:       callq   0xffffffff81b53fc0 <rb_insert_color>
    0.00 :   ffffffff810b96d9:       movq    %rbx, %rsi
  100.00 :   ffffffff810b96dc:       movq    %r12, %rdi
    0.00 :   ffffffff810b96df:       xorl    %edx, %edx
    0.00 :   ffffffff810b96e1:       callq   0xffffffff810b69c0 <update_load_avg>
    0.00 :   ffffffff810b96e6:       movq    $0x0, 0x50(%r12)
    0.00 :   ffffffff810b96ef:       popq    %rbx
    0.00 :   ffffffff810b96f0:       popq    %r12
    0.00 :   ffffffff810b96f2:       popq    %rbp
    0.00 :   ffffffff810b96f3:       xorl    %eax, %eax
    0.00 :   ffffffff810b96f5:       xorl    %edx, %edx
    0.00 :   ffffffff810b96f7:       xorl    %ecx, %ecx
    0.00 :   ffffffff810b96f9:       xorl    %esi, %esi
    0.00 :   ffffffff810b96fb:       xorl    %edi, %edi
    0.00 :   ffffffff810b96fd:       xorl    %r8d, %r8d
    0.00 :   ffffffff810b9700:       xorl    %r9d, %r9d
    0.00 :   ffffffff810b9703:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810b9708:       movq    $0x0, 0x10(%rbx)
    0.00 :   ffffffff810b9710:       movq    $0x0, 0x18(%rbx)
    0.00 :   ffffffff810b9718:       movq    $0x0, 0x20(%rbx)
    0.00 :   ffffffff810b9720:       movq    %r8, 0x40(%r12)
    0.00 :   ffffffff810b9725:       movq    %r8, 0x48(%r12)
    0.00 :   ffffffff810b972a:       jmp     0xffffffff810b96ce <put_prev_entity+0xae>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8107c290 <flush_signal_handlers>:
         : 5                ; flush_signal_handlers():
    0.00 :   ffffffff8107c290:       pushq   %rbp
    0.00 :   ffffffff8107c291:       movq    %rsp, %rbp
    0.00 :   ffffffff8107c294:       movq    0x2f0(%rdi), %rdx
    0.00 :   ffffffff8107c29b:       leaq    0x20(%rdx), %rax
    0.00 :   ffffffff8107c29f:       addq    $0x820, %rdx    # imm = 0x820
  100.00 :   ffffffff8107c2a6:       testl   %esi, %esi
    0.00 :   ffffffff8107c2a8:       jne     0xffffffff8107c2b0 <flush_signal_handlers+0x20>
    0.00 :   ffffffff8107c2aa:       cmpq    $0x1, (%rax)
    0.00 :   ffffffff8107c2ae:       je      0xffffffff8107c2b7 <flush_signal_handlers+0x27>
    0.00 :   ffffffff8107c2b0:       movq    $0x0, (%rax)
    0.00 :   ffffffff8107c2b7:       movq    $0x0, 0x8(%rax)
    0.00 :   ffffffff8107c2bf:       movq    $0x0, 0x10(%rax)
    0.00 :   ffffffff8107c2c7:       addq    $0x20, %rax
    0.00 :   ffffffff8107c2cb:       movq    $0x0, -0x8(%rax)
    0.00 :   ffffffff8107c2d3:       cmpq    %rax, %rdx
    0.00 :   ffffffff8107c2d6:       jne     0xffffffff8107c2a6 <flush_signal_handlers+0x16>
    0.00 :   ffffffff8107c2d8:       popq    %rbp
    0.00 :   ffffffff8107c2d9:       xorl    %eax, %eax
    0.00 :   ffffffff8107c2db:       xorl    %edx, %edx
    0.00 :   ffffffff8107c2dd:       xorl    %esi, %esi
    0.00 :   ffffffff8107c2df:       xorl    %edi, %edi
    0.00 :   ffffffff8107c2e1:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of libc.so.6 for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         : 2     Disassembly of section .text:
         :
         : 4     00000000000829e0 <pthread_condattr_setpshared>:
    0.00 :   82be8:          pushq   %r12
    0.00 :   82bea:          pushq   %rbp
    0.00 :   82beb:          pushq   %rbx
    0.00 :   82bec:          addq    $-0x80, %rsp
    0.00 :   82bf0:          movq    %rdi, 0x8(%rsp)
    0.00 :   82bf5:          movq    %fs:0x28, %rax
    0.00 :   82bfe:          movq    %rax, 0x78(%rsp)
    0.00 :   82c03:          xorl    %eax, %eax
    0.00 :   82c05:          cmpb    $0x0, 0x613(%rdi)
    0.00 :   82c0c:          je      0x82c49 <pthread_condattr_setpshared+0x269>
    0.00 :   82c0e:          movq    0x8(%rsp), %rax
    0.00 :   82c13:          movl    $0x1, %edx
    0.00 :   82c18:          leaq    0x618(%rax), %rbx
    0.00 :   82c1f:          xorl    %eax, %eax
    0.00 :   82c21:          lock
    0.00 :   82c22:          cmpxchgl        %edx, (%rbx)
    0.00 :   82c25:          jne     0x82e85 <pthread_condattr_setpshared+0x4a5>
    0.00 :   82c2b:          movq    0x8(%rsp), %rax
    0.00 :   82c30:          cmpl    $0x1, 0x614(%rax)
    0.00 :   82c37:          je      0x82ea9 <pthread_condattr_setpshared+0x4c9>
    0.00 :   82c3d:          xorl    %eax, %eax
    0.00 :   82c3f:          xchgl   %eax, (%rbx)
    0.00 :   82c41:          decl    %eax
    0.00 :   82c43:          jg      0x82ed8 <pthread_condattr_setpshared+0x4f8>
    0.00 :   82c49:          movq    0x8(%rsp), %rax
    0.00 :   82c4e:          leaq    0x6b8(%rax), %rdx
    0.00 :   82c55:          movq    0x148374(%rip), %rax    # 0x1cafd0
    0.00 :   82c5c:          movq    %rdx, %fs:(%rax)
    0.00 :   82c60:          callq   0x31488 <__ctype_init>
    0.00 :   82c65:          movl    %fs:0x30c, %eax
    0.00 :   82c6d:          testb   $-0x80, %al
    0.00 :   82c6f:          jne     0x82e42 <pthread_condattr_setpshared+0x462>
    0.00 :   82c75:          movl    $0xfffffffe, %fs:0x924  # imm = 0xFFFFFFFE
    0.00 :   82c81:          movq    0x8(%rsp), %rax
    0.00 :   82c86:          movl    $0x18, %esi
    0.00 :   82c8b:          leaq    0x2e0(%rax), %rdi
    0.00 :   82c92:          movl    $0x111, %eax            # imm = 0x111
    0.00 :   82c97:          syscall
    0.00 :   82c99:          leaq    0x10(%rsp), %rdi
    0.00 :   82c9e:          callq   0x37e80 <_setjmp>
    0.00 :   82ca3:          movl    %eax, %r8d
    0.00 :   82ca6:          movq    0x8(%rsp), %rax
    0.00 :   82cab:          xorl    %ecx, %ecx
    0.00 :   82cad:          movq    %rcx, 0x58(%rsp)
    0.00 :   82cb2:          movq    %rcx, 0x60(%rsp)
    0.00 :   82cb7:          leaq    0x61c(%rax), %rbx
    0.00 :   82cbe:          xorl    %eax, %eax
    0.00 :   82cc0:          xchgl   %eax, (%rbx)
    0.00 :   82cc2:          cmpl    $-0x2, %eax
    0.00 :   82cc5:          je      0x82f2e <pthread_condattr_setpshared+0x54e>
    0.00 :   82ccb:          testl   %r8d, %r8d
    0.00 :   82cce:          jne     0x82d25 <pthread_condattr_setpshared+0x345>
    0.00 :   82cd0:          leaq    0x10(%rsp), %rax
    0.00 :   82cd5:          movq    %rax, %fs:0x300
    0.00 :   82cde:          movq    0x8(%rsp), %r9
    0.00 :   82ce3:          movl    $0x8, %r10d
    0.00 :   82ce9:          xorl    %edx, %edx
    0.00 :   82ceb:          movl    $0x2, %edi
    0.00 :   82cf0:          movl    $0xe, %eax
    0.00 :   82cf5:          leaq    0x8f0(%r9), %rsi
    0.00 :   82cfc:          syscall
    0.00 :   82cfe:          cmpb    $0x0, 0x900(%r9)
    0.00 :   82d06:          je      0x82e92 <pthread_condattr_setpshared+0x4b2>
    0.00 :   82d0c:          movq    0x640(%r9), %rdi
    0.00 :   82d13:          callq   *0x638(%r9)
    0.00 :   82d1a:          cltq
    0.00 :   82d1c:          movq    %rax, %fs:0x628
    0.00 :   82d25:          callq   0x3a250 <__call_tls_dtors>
    0.00 :   82d2a:          callq   0x80100 <__pthread_get_minstack+0x40>
    0.00 :   82d2f:          callq   0x94800 <__libc_alloc_buffer_create_failure+0x40>
    0.00 :   82d34:          movq    0x8(%rsp), %rax
    0.00 :   82d39:          cmpb    $0x0, 0x611(%rax)
    0.00 :   82d40:          jne     0x82f6b <pthread_condattr_setpshared+0x58b>
    0.00 :   82d46:          movq    0x8(%rsp), %rax
    0.00 :   82d4b:          lock
    0.00 :   82d4c:          orl     $0x10, 0x308(%rax)
    0.00 :   82d53:          lock
    0.00 :   82d54:          decl    0x14854e(%rip)          # 0x1cb2a8 <__nptl_nthreads>
    0.00 :   82d5a:          je      0x82f27 <pthread_condattr_setpshared+0x547>
    0.00 :   82d60:          movq    0x8(%rsp), %r8
    0.00 :   82d65:          movabsq $-0x100000001, %rax     # imm = 0xFFFFFFFEFFFFFFFF
    0.00 :   82d6f:          movl    $0x8, %r10d
    0.00 :   82d75:          xorl    %edx, %edx
    0.00 :   82d77:          xorl    %edi, %edi
    0.00 :   82d79:          movq    %rax, 0x8f0(%r8)
    0.00 :   82d80:          leaq    0x8f0(%r8), %rsi
    0.00 :   82d87:          movl    $0xe, %eax
    0.00 :   82d8c:          syscall
    0.00 :   82d8e:          xorl    %eax, %eax
    0.00 :   82d90:          leaq    0x904(%r8), %rbp
    0.00 :   82d97:          movl    $0x1, %edx
    0.00 :   82d9c:          lock
    0.00 :   82d9d:          cmpxchgl        %edx, (%rbp)
    0.00 :   82da1:          jne     0x82fcc <pthread_condattr_setpshared+0x5ec>
    0.00 :   82da7:          movq    0x8(%rsp), %rax
    0.00 :   82dac:          movb    $0x1, 0x901(%rax)
    0.00 :   82db3:          xorl    %eax, %eax
    0.00 :   82db5:          xchgl   %eax, (%rbp)
    0.00 :   82db8:          decl    %eax
    0.00 :   82dba:          jg      0x82fbf <pthread_condattr_setpshared+0x5df>
    0.00 :   82dc0:          movq    0x8(%rsp), %rax
    0.00 :   82dc5:          cmpb    $0x0, 0x612(%rax)
    0.00 :   82dcc:          jne     0x82e0b <pthread_condattr_setpshared+0x42b>
    0.00 :   82dce:          movq    0x8(%rsp), %rax
    0.00 :   82dd3:          movq    0x698(%rax), %rbp
    0.00 :   82dda:          movq    0x690(%rax), %r12
    0.00 :   82de1:          callq   0xf6f20 <getpagesize>
    0.00 :   82de6:          movl    %eax, %edx
    0.00 :   82de8:          negl    %edx
    0.00 :   82dea:          movq    %rsp, %rax
    0.00 :   82ded:          subq    %r12, %rax
    0.00 :   82df0:          movslq  %edx, %rdx
    0.00 :   82df3:          andq    %rdx, %rax
    0.00 :   82df6:          cmpq    %rbp, %rax
    0.00 :   82df9:          jae     0x82fd9 <pthread_condattr_setpshared+0x5f9>
    0.00 :   82dff:          cmpq    $0x4000, %rax           # imm = 0x4000
    0.00 :   82e05:          ja      0x82f99 <pthread_condattr_setpshared+0x5b9>
    0.00 :   82e0b:          movq    0x8(%rsp), %rax
    0.00 :   82e10:          movl    $0xca, %r8d
    0.00 :   82e16:          testb   $0x40, 0x308(%rax)
    0.00 :   82e1d:          jne     0x82ef7 <pthread_condattr_setpshared+0x517>
    0.00 :   82e23:          movq    0x8(%rsp), %rax
    0.00 :   82e28:          cmpq    %rax, 0x620(%rax)
    0.00 :   82e2f:          jne     0x82ec3 <pthread_condattr_setpshared+0x4e3>
    0.00 :   82e35:          movq    %rax, %rdi
    0.00 :   82e38:          callq   0x80250 <__pthread_get_minstack+0x190>
    0.00 :   82e3d:          jmp     0x82ec3 <pthread_condattr_setpshared+0x4e3>
    0.00 :   82e42:          movq    0x8(%rsp), %rax
    0.00 :   82e47:          movl    $0x53053053, %r10d      # imm = 0x53053053
    0.00 :   82e4d:          xorl    %edx, %edx
    0.00 :   82e4f:          movl    $0x20, %esi
    0.00 :   82e54:          leaq    0x920(%rax), %rdi
    0.00 :   82e5b:          movl    $0x14e, %eax            # imm = 0x14E
  100.00 :   82e60:          syscall
    0.00 :   82e62:          cmpl    $0xfffff000, %eax       # imm = 0xFFFFF000
    0.00 :   82e67:          jbe     0x82c81 <pthread_condattr_setpshared+0x2a1>
    0.00 :   82e6d:          movl    $0xfffffffe, %fs:0x924  # imm = 0xFFFFFFFE
    0.00 :   82e79:          leaq    0x10fdc0(%rip), %rdi    # 0x192c40 <_itoa_lower_digits+0x1480>
    0.00 :   82e80:          callq   0x78e40 <__libc_fatal>
    0.00 :   82e85:          movq    %rbx, %rdi
    0.00 :   82e88:          callq   0x7fd90 <__lll_lock_wait_private>
    0.00 :   82e8d:          jmp     0x82c2b <pthread_condattr_setpshared+0x24b>
    0.00 :   82e92:          movq    0x8(%rsp), %rax
    0.00 :   82e97:          movq    0x640(%rax), %rdi
    0.00 :   82e9e:          callq   *0x638(%rax)
    0.00 :   82ea4:          jmp     0x82d1c <pthread_condattr_setpshared+0x33c>
    0.00 :   82ea9:          movq    0x8(%rsp), %rax
    0.00 :   82eae:          xorl    %esi, %esi
    0.00 :   82eb0:          movq    %rsi, 0x620(%rax)
    0.00 :   82eb7:          xorl    %eax, %eax
    0.00 :   82eb9:          xchgl   %eax, (%rbx)
    0.00 :   82ebb:          decl    %eax
    0.00 :   82ebd:          jg      0x82f5e <pthread_condattr_setpshared+0x57e>
    0.00 :   82ec3:          movl    $0x3c, %edx
    0.00 :   82ec8:          nopl    (%rax,%rax)
    0.00 :   82ed0:          xorl    %edi, %edi
    0.00 :   82ed2:          movl    %edx, %eax
    0.00 :   82ed4:          syscall
    0.00 :   82ed6:          jmp     0x82ed0 <pthread_condattr_setpshared+0x4f0>
    0.00 :   82ed8:          movq    %rbx, %rdi
    0.00 :   82edb:          callq   0x7fe38 <__lll_lock_wake_private>
    0.00 :   82ee0:          jmp     0x82c49 <pthread_condattr_setpshared+0x269>
    0.00 :   82ee5:          movq    0x8(%rsp), %rax
    0.00 :   82eea:          testb   $0x40, 0x308(%rax)
    0.00 :   82ef1:          je      0x82fb2 <pthread_condattr_setpshared+0x5d2>
    0.00 :   82ef7:          xorl    %r10d, %r10d
    0.00 :   82efa:          xorl    %edx, %edx
    0.00 :   82efc:          movl    $0x80, %esi
    0.00 :   82f01:          movq    %rbx, %rdi
    0.00 :   82f04:          movl    %r8d, %eax
    0.00 :   82f07:          syscall
    0.00 :   82f09:          cmpq    $-0x1000, %rax          # imm = 0xF000
    0.00 :   82f0f:          jbe     0x82ee5 <pthread_condattr_setpshared+0x505>
    0.00 :   82f11:          cmpl    $-0xb, %eax
    0.00 :   82f14:          je      0x82ee5 <pthread_condattr_setpshared+0x505>
    0.00 :   82f16:          cmpl    $-0x4, %eax
    0.00 :   82f19:          je      0x82ee5 <pthread_condattr_setpshared+0x505>
    0.00 :   82f1b:          leaq    0x10fca6(%rip), %rdi    # 0x192bc8 <_itoa_lower_digits+0x1408>
    0.00 :   82f22:          callq   0x78e40 <__libc_fatal>
    0.00 :   82f27:          xorl    %edi, %edi
    0.00 :   82f29:          callq   0x3a6c0 <exit>
    0.00 :   82f2e:          xorl    %r10d, %r10d
    0.00 :   82f31:          movl    $0x1, %edx
    0.00 :   82f36:          movl    $0x81, %esi
    0.00 :   82f3b:          movq    %rbx, %rdi
    0.00 :   82f3e:          movl    $0xca, %eax
    0.00 :   82f43:          syscall
    0.00 :   82f45:          cmpq    $-0x1000, %rax          # imm = 0xF000
    0.00 :   82f4b:          jbe     0x82ccb <pthread_condattr_setpshared+0x2eb>
    0.00 :   82f51:          addl    $0x16, %eax
    0.00 :   82f54:          andl    $-0x9, %eax
    0.00 :   82f57:          jne     0x82f1b <pthread_condattr_setpshared+0x53b>
    0.00 :   82f59:          jmp     0x82ccb <pthread_condattr_setpshared+0x2eb>
    0.00 :   82f5e:          movq    %rbx, %rdi
    0.00 :   82f61:          callq   0x7fe38 <__lll_lock_wake_private>
    0.00 :   82f66:          jmp     0x82ec3 <pthread_condattr_setpshared+0x4e3>
    0.00 :   82f6b:          movq    0x8(%rsp), %rcx
    0.00 :   82f70:          movl    0x14ab0a(%rip), %eax    # 0x1cda80 <__nptl_threads_events>
    0.00 :   82f76:          orl     0x648(%rcx), %eax
    0.00 :   82f7c:          testb   $0x1, %ah
    0.00 :   82f7f:          je      0x82d46 <pthread_condattr_setpshared+0x366>
    0.00 :   82f85:          cmpq    $0x0, 0x660(%rcx)
    0.00 :   82f8d:          je      0x82ff8 <pthread_condattr_setpshared+0x618>
    0.00 :   82f8f:          callq   0x7fb18 <__nptl_death_event>
    0.00 :   82f94:          jmp     0x82d46 <pthread_condattr_setpshared+0x366>
    0.00 :   82f99:          leaq    -0x4000(%rax), %rsi
    0.00 :   82fa0:          movl    $0x4, %edx
    0.00 :   82fa5:          movq    %r12, %rdi
    0.00 :   82fa8:          callq   0xfa300 <madvise>
    0.00 :   82fad:          jmp     0x82e0b <pthread_condattr_setpshared+0x42b>
    0.00 :   82fb2:          xorl    %edx, %edx
    0.00 :   82fb4:          movl    %edx, 0x61c(%rax)
    0.00 :   82fba:          jmp     0x82e23 <pthread_condattr_setpshared+0x443>
    0.00 :   82fbf:          movq    %rbp, %rdi
    0.00 :   82fc2:          callq   0x7fe38 <__lll_lock_wake_private>
    0.00 :   82fc7:          jmp     0x82dc0 <pthread_condattr_setpshared+0x3e0>
    0.00 :   82fcc:          movq    %rbp, %rdi
    0.00 :   82fcf:          callq   0x7fd90 <__lll_lock_wait_private>
    0.00 :   82fd4:          jmp     0x82da7 <pthread_condattr_setpshared+0x3c7>
    0.00 :   82fd9:          leaq    0x113900(%rip), %rcx    # 0x1968e0 <_nl_default_dirname+0x3f0>
    0.00 :   82fe0:          movl    $0xc0, %edx
    0.00 :   82fe5:          leaq    0x10afaf(%rip), %rsi    # 0x18df9b <_libc_intl_domainname+0x110d>
    0.00 :   82fec:          leaq    0x10afb8(%rip), %rdi    # 0x18dfab <_libc_intl_domainname+0x111d>
    0.00 :   82ff3:          callq   0x30e40 <__assert+0x10>
    0.00 :   82ff8:          movl    $0x9, 0x650(%rcx)
    0.00 :   83002:          movq    %rcx, 0x658(%rcx)
    0.00 :   83009:          movq    0x14aa68(%rip), %rax    # 0x1cda78 <__nptl_last_event>
    0.00 :   83010:          movq    0x8(%rsp), %rcx
    0.00 :   83015:          movq    %rax, 0x660(%rcx)
    0.00 :   8301c:          lock
    0.00 :   8301d:          cmpxchgq        %rcx, 0x14aa53(%rip)    # 0x1cda78 <__nptl_last_event>
    0.00 :   83025:          je      0x82f8f <pthread_condattr_setpshared+0x5af>
    0.00 :   8302b:          jmp     0x83009 <pthread_condattr_setpshared+0x629>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8102ca40 <restore_fpregs_from_fpstate>:
         : 5                ; restore_fpregs_from_fpstate():
    0.00 :   ffffffff8102ca40:       pushq   %rbp
    0.00 :   ffffffff8102ca41:       movq    %rsp, %rbp
    0.00 :   ffffffff8102ca44:       subq    $0x8, %rsp
    0.00 :   ffffffff8102ca48:       movq    %rdi, -0x8(%rbp)
    0.00 :   ffffffff8102ca4c:       jmp     0xffffffff8241e527 <init_per_cpu__gdt_page+0x8c527>
   19.16 :   ffffffff8102ca51:       fnclex
    0.00 :   ffffffff8102ca53:       emms
    0.00 :   ffffffff8102ca55:       fildl   -0x8(%rbp)
    0.00 :   ffffffff8102ca58:       jmp     0xffffffff8241e539 <init_per_cpu__gdt_page+0x8c539>
    0.00 :   ffffffff8102ca5d:       movq    -0x8(%rbp), %rcx
    0.00 :   ffffffff8102ca61:       nop
    0.00 :   ffffffff8102ca63:       andq    0x10f69be(%rip), %rsi # 0xffffffff82123428 <fpu_kernel_cfg+0x8>
    0.00 :   ffffffff8102ca6a:       leaq    0x40(%rcx), %rdi
    0.00 :   ffffffff8102ca6e:       movq    %rsi, %rdx
    0.00 :   ffffffff8102ca71:       movl    %esi, %eax
    0.00 :   ffffffff8102ca73:       shrq    $0x20, %rdx
   80.84 :   ffffffff8102ca77:       xrstor64        (%rdi)
    0.00 :   ffffffff8102ca7b:       leave
    0.00 :   ffffffff8102ca7c:       xorl    %eax, %eax
    0.00 :   ffffffff8102ca7e:       xorl    %edx, %edx
    0.00 :   ffffffff8102ca80:       xorl    %ecx, %ecx
    0.00 :   ffffffff8102ca82:       xorl    %esi, %esi
    0.00 :   ffffffff8102ca84:       xorl    %edi, %edi
    0.00 :   ffffffff8102ca86:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8102ca8b:       movq    -0x8(%rbp), %rax
    0.00 :   ffffffff8102ca8f:       fxrstor64       0x40(%rax)
    0.00 :   ffffffff8102ca94:       leave
    0.00 :   ffffffff8102ca95:       xorl    %eax, %eax
    0.00 :   ffffffff8102ca97:       xorl    %edx, %edx
    0.00 :   ffffffff8102ca99:       xorl    %ecx, %ecx
    0.00 :   ffffffff8102ca9b:       xorl    %esi, %esi
    0.00 :   ffffffff8102ca9d:       xorl    %edi, %edi
    0.00 :   ffffffff8102ca9f:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8102caa4:       movq    0x18(%rcx), %rax
    0.00 :   ffffffff8102caa8:       movq    %gs:0x7efee130(%rip), %rdx
    0.00 :   ffffffff8102cab0:       cmpq    %rdx, %rax
    0.00 :   ffffffff8102cab3:       je      0xffffffff8102ca63 <restore_fpregs_from_fpstate+0x23>
    0.00 :   ffffffff8102cab5:       movq    %rax, %rdx
    0.00 :   ffffffff8102cab8:       movl    $0x1c4, %ecx    # imm = 0x1C4
    0.00 :   ffffffff8102cabd:       shrq    $0x20, %rdx
    0.00 :   ffffffff8102cac1:       wrmsr
    0.00 :   ffffffff8102cac3:       movq    -0x8(%rbp), %rcx
    0.00 :   ffffffff8102cac7:       movq    %rax, %gs:0x7efee111(%rip)
    0.00 :   ffffffff8102cacf:       jmp     0xffffffff8102ca63 <restore_fpregs_from_fpstate+0x23>
 Percent |	Source code & Disassembly of elf for cycles (2 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81c015e6 <nmi_restore>:
         : 5                ; nmi_restore():
    0.00 :   ffffffff81c015e6:       popq    %r15
    0.00 :   ffffffff81c015e8:       popq    %r14
    0.00 :   ffffffff81c015ea:       popq    %r13
    0.00 :   ffffffff81c015ec:       popq    %r12
    0.00 :   ffffffff81c015ee:       popq    %rbp
    0.00 :   ffffffff81c015ef:       popq    %rbx
    0.00 :   ffffffff81c015f0:       popq    %r11
    0.00 :   ffffffff81c015f2:       popq    %r10
    0.00 :   ffffffff81c015f4:       popq    %r9
    0.00 :   ffffffff81c015f6:       popq    %r8
    0.00 :   ffffffff81c015f8:       popq    %rax
    0.00 :   ffffffff81c015f9:       popq    %rcx
    0.00 :   ffffffff81c015fa:       popq    %rdx
    0.00 :   ffffffff81c015fb:       popq    %rsi
    0.00 :   ffffffff81c015fc:       popq    %rdi
    0.00 :   ffffffff81c015fd:       addq    $0x30, %rsp
    0.00 :   ffffffff81c01601:       std
    0.00 :   ffffffff81c01602:       movq    $0x0, 0x28(%rsp)
  100.00 :   ffffffff81c0160b:       iretq
    0.00 :   ffffffff81c0160d:       int3
    0.00 :   ffffffff81c0160e:       int3
    0.00 :   ffffffff81c0160f:       int3
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8107be00 <calculate_sigpending>:
         : 5                ; calculate_sigpending():
  100.00 :   ffffffff8107be00:       pushq   %rbp
    0.00 :   ffffffff8107be01:       movq    %rsp, %rbp
    0.00 :   ffffffff8107be04:       pushq   %rbx
    0.00 :   ffffffff8107be05:       movq    %gs:0x22700, %rbx
    0.00 :   ffffffff8107be0e:       movq    0x2f0(%rbx), %rdi
    0.00 :   ffffffff8107be15:       callq   0xffffffff81b77bc0 <_raw_spin_lock_irq>
    0.00 :   ffffffff8107be1a:       lock
    0.00 :   ffffffff8107be1b:       orb     $0x4, (%rbx)
    0.00 :   ffffffff8107be1e:       callq   0xffffffff8107a550 <recalc_sigpending>
    0.00 :   ffffffff8107be23:       movq    0x2f0(%rbx), %rdi
    0.00 :   ffffffff8107be2a:       callq   0xffffffff81b77800 <_raw_spin_unlock_irq>
    0.00 :   ffffffff8107be2f:       movq    -0x8(%rbp), %rbx
    0.00 :   ffffffff8107be33:       leave
    0.00 :   ffffffff8107be34:       xorl    %edi, %edi
    0.00 :   ffffffff8107be36:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff810a86b0 <finish_task_switch.isra.0>:
         : 5                ; finish_task_switch.isra.0():
    0.00 :   ffffffff810a86b0:       pushq   %rbp
    0.00 :   ffffffff810a86b1:       movq    %rsp, %rbp
    0.00 :   ffffffff810a86b4:       pushq   %r15
    0.00 :   ffffffff810a86b6:       pushq   %r14
    0.00 :   ffffffff810a86b8:       pushq   %r13
    0.00 :   ffffffff810a86ba:       movq    %rdi, %r13
    0.00 :   ffffffff810a86bd:       pushq   %r12
    0.00 :   ffffffff810a86bf:       pushq   %rbx
    0.00 :   ffffffff810a86c0:       movl    %gs:0x7ef7a041(%rip), %ecx
    0.00 :   ffffffff810a86c7:       andl    $0x7fffffff, %ecx # imm = 0x7FFFFFFF
    0.00 :   ffffffff810a86cd:       movq    $0x22f40, %r12  # imm = 0x22F40
    0.00 :   ffffffff810a86d4:       addq    %gs:0x7ef6d354(%rip), %r12
    0.00 :   ffffffff810a86dc:       cmpl    $0x2, %ecx
    0.00 :   ffffffff810a86df:       movq    0x990(%r12), %r14
    0.00 :   ffffffff810a86e7:       jne     0xffffffff810a888f <finish_task_switch.isra.0+0x1df>
    0.00 :   ffffffff810a86ed:       movq    $0x0, 0x990(%r12)
    0.00 :   ffffffff810a86f9:       movl    0x18(%r13), %r15d
    0.00 :   ffffffff810a86fd:       movq    %gs:0x22700, %rbx
    0.00 :   ffffffff810a8706:       nopl    (%rax,%rax)
    0.00 :   ffffffff810a870b:       nopl    (%rax,%rax)
    0.00 :   ffffffff810a8710:       movl    $0x0, 0x844(%r13)
    0.00 :   ffffffff810a871b:       movq    0xa10(%r12), %rbx
    0.00 :   ffffffff810a8723:       testq   %rbx, %rbx
    0.00 :   ffffffff810a8726:       jne     0xffffffff810a88e8 <finish_task_switch.isra.0+0x238>
    0.00 :   ffffffff810a872c:       movq    %r12, %rdi
    0.00 :   ffffffff810a872f:       callq   0xffffffff810a84a0 <raw_spin_rq_unlock>
    0.00 :   ffffffff810a8734:       sti
    0.00 :   ffffffff810a8735:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810a873e:       nop
  100.00 :   ffffffff810a8740:       testq   %r14, %r14
    0.00 :   ffffffff810a8743:       je      0xffffffff810a8769 <finish_task_switch.isra.0+0xb9>
    0.00 :   ffffffff810a8745:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810a874e:       cmpq    0x3d8(%rax), %r14
    0.00 :   ffffffff810a8755:       je      0xffffffff810a8829 <finish_task_switch.isra.0+0x179>
    0.00 :   ffffffff810a875b:       lock
    0.00 :   ffffffff810a875c:       decl    0x298(%r14)
    0.00 :   ffffffff810a8763:       je      0xffffffff810a883e <finish_task_switch.isra.0+0x18e>
    0.00 :   ffffffff810a8769:       addl    $-0x80, %r15d
    0.00 :   ffffffff810a876d:       je      0xffffffff810a884b <finish_task_switch.isra.0+0x19b>
    0.00 :   ffffffff810a8773:       popq    %rbx
    0.00 :   ffffffff810a8774:       popq    %r12
    0.00 :   ffffffff810a8776:       popq    %r13
    0.00 :   ffffffff810a8778:       popq    %r14
    0.00 :   ffffffff810a877a:       popq    %r15
    0.00 :   ffffffff810a877c:       popq    %rbp
    0.00 :   ffffffff810a877d:       xorl    %eax, %eax
    0.00 :   ffffffff810a877f:       xorl    %edx, %edx
    0.00 :   ffffffff810a8781:       xorl    %ecx, %ecx
    0.00 :   ffffffff810a8783:       xorl    %esi, %esi
    0.00 :   ffffffff810a8785:       xorl    %edi, %edi
    0.00 :   ffffffff810a8787:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810a878c:       movq    0x9d8(%rax), %rbx
    0.00 :   ffffffff810a8793:       testq   %rbx, %rbx
    0.00 :   ffffffff810a8796:       je      0xffffffff810a8740 <finish_task_switch.isra.0+0x90>
    0.00 :   ffffffff810a8798:       movl    %gs:0x7ef79f6d(%rip), %esi
    0.00 :   ffffffff810a879f:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff810a87a3:       movq    %rbx, %rdi
    0.00 :   ffffffff810a87a6:       movq    (%rax), %rax
    0.00 :   ffffffff810a87a9:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff810a87ae:       movq    (%rbx), %rbx
    0.00 :   ffffffff810a87b1:       testq   %rbx, %rbx
    0.00 :   ffffffff810a87b4:       jne     0xffffffff810a8798 <finish_task_switch.isra.0+0xe8>
    0.00 :   ffffffff810a87b6:       jmp     0xffffffff810a8740 <finish_task_switch.isra.0+0x90>
    0.00 :   ffffffff810a87b8:       testb   $0x4, 0x290(%rbx)
    0.00 :   ffffffff810a87bf:       je      0xffffffff810a8710 <finish_task_switch.isra.0+0x60>
    0.00 :   ffffffff810a87c5:       movq    0x8(%rbp), %rax
    0.00 :   ffffffff810a87c9:       movq    $0x1fb00, %rdx  # imm = 0x1FB00
    0.00 :   ffffffff810a87d0:       xorl    %ecx, %ecx
    0.00 :   ffffffff810a87d2:       addq    %gs:0x7ef6d256(%rip), %rdx
    0.00 :   ffffffff810a87da:       movl    $0x1, %esi
    0.00 :   ffffffff810a87df:       movq    %rbp, 0x98(%rdx)
    0.00 :   ffffffff810a87e6:       movq    $0x10, 0x88(%rdx)
    0.00 :   ffffffff810a87f1:       movq    %rax, 0x80(%rdx)
    0.00 :   ffffffff810a87f8:       movq    $0x0, 0x90(%rdx)
    0.00 :   ffffffff810a8803:       movl    $0x4, %edi
    0.00 :   ffffffff810a8808:       callq   0xffffffff811e1950 <___perf_sw_event>
    0.00 :   ffffffff810a880d:       andb    $-0x5, 0x290(%rbx)
    0.00 :   ffffffff810a8814:       jmp     0xffffffff810a8710 <finish_task_switch.isra.0+0x60>
    0.00 :   ffffffff810a8819:       movq    %rbx, %rsi
    0.00 :   ffffffff810a881c:       movq    %r13, %rdi
    0.00 :   ffffffff810a881f:       callq   0xffffffff811d9e00 <__perf_event_task_sched_in>
    0.00 :   ffffffff810a8824:       jmp     0xffffffff810a870b <finish_task_switch.isra.0+0x5b>
    0.00 :   ffffffff810a8829:       movl    (%r14), %eax
    0.00 :   ffffffff810a882c:       testb   $0x20, %al
    0.00 :   ffffffff810a882e:       je      0xffffffff810a875b <finish_task_switch.isra.0+0xab>
    0.00 :   ffffffff810a8834:       jmp     0xffffffff8241ee6f <init_per_cpu__gdt_page+0x8ce6f>
    0.00 :   ffffffff810a8839:       jmp     0xffffffff810a875b <finish_task_switch.isra.0+0xab>
    0.00 :   ffffffff810a883e:       movq    %r14, %rdi
    0.00 :   ffffffff810a8841:       callq   0xffffffff810655e0 <__mmdrop>
    0.00 :   ffffffff810a8846:       jmp     0xffffffff810a8769 <finish_task_switch.isra.0+0xb9>
    0.00 :   ffffffff810a884b:       movq    0xd0(%r13), %rax
    0.00 :   ffffffff810a8852:       movq    0xa0(%rax), %rax
    0.00 :   ffffffff810a8859:       testq   %rax, %rax
    0.00 :   ffffffff810a885c:       je      0xffffffff810a8866 <finish_task_switch.isra.0+0x1b6>
    0.00 :   ffffffff810a885e:       movq    %r13, %rdi
    0.00 :   ffffffff810a8861:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff810a8866:       movq    %r13, %rdi
    0.00 :   ffffffff810a8869:       callq   0xffffffff810663a0 <put_task_stack>
    0.00 :   ffffffff810a886e:       movq    %r13, %rdi
    0.00 :   ffffffff810a8871:       callq   0xffffffff8106d960 <put_task_struct_rcu_user>
    0.00 :   ffffffff810a8876:       popq    %rbx
    0.00 :   ffffffff810a8877:       popq    %r12
    0.00 :   ffffffff810a8879:       popq    %r13
    0.00 :   ffffffff810a887b:       popq    %r14
    0.00 :   ffffffff810a887d:       popq    %r15
    0.00 :   ffffffff810a887f:       popq    %rbp
    0.00 :   ffffffff810a8880:       xorl    %eax, %eax
    0.00 :   ffffffff810a8882:       xorl    %edx, %edx
    0.00 :   ffffffff810a8884:       xorl    %ecx, %ecx
    0.00 :   ffffffff810a8886:       xorl    %esi, %esi
    0.00 :   ffffffff810a8888:       xorl    %edi, %edi
    0.00 :   ffffffff810a888a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff810a888f:       cmpb    $0x0, 0x12bb3b2(%rip) # 0xffffffff82363c48 <__already_done.4>
    0.00 :   ffffffff810a8896:       jne     0xffffffff810a88c3 <finish_task_switch.isra.0+0x213>
    0.00 :   ffffffff810a8898:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff810a88a1:       movl    0x2e0(%rax), %edx
    0.00 :   ffffffff810a88a7:       leaq    0x296(%rax), %rsi
    0.00 :   ffffffff810a88ae:       movq    $-0x7df7d8c0, %rdi # imm = 0x82082740
    0.00 :   ffffffff810a88b5:       movb    $0x1, 0x12bb38c(%rip) # 0xffffffff82363c48 <__already_done.4>
    0.00 :   ffffffff810a88bc:       callq   0xffffffff81069e90 <__warn_printk>
    0.00 :   ffffffff810a88c1:       ud2
    0.00 :   ffffffff810a88c3:       movl    %gs:0x7ef79e3e(%rip), %ecx
    0.00 :   ffffffff810a88ca:       movl    %ecx, %edx
    0.00 :   ffffffff810a88cc:       movl    %ecx, %eax
    0.00 :   ffffffff810a88ce:       andl    $0x80000000, %edx # imm = 0x80000000
    0.00 :   ffffffff810a88d4:       orl     $0x2, %edx
    0.00 :   ffffffff810a88d7:       cmpxchgl        %edx, %gs:0x7ef79e29(%rip)
    0.00 :   ffffffff810a88df:       cmpl    %eax, %ecx
    0.00 :   ffffffff810a88e1:       jne     0xffffffff810a88c3 <finish_task_switch.isra.0+0x213>
    0.00 :   ffffffff810a88e3:       jmp     0xffffffff810a86ed <finish_task_switch.isra.0+0x3d>
    0.00 :   ffffffff810a88e8:       movq    $0x0, 0xa10(%r12)
    0.00 :   ffffffff810a88f4:       movq    0x8(%rbx), %rax
    0.00 :   ffffffff810a88f8:       movq    %rbx, %rdx
    0.00 :   ffffffff810a88fb:       movq    (%rbx), %rbx
    0.00 :   ffffffff810a88fe:       movq    %r12, %rdi
    0.00 :   ffffffff810a8901:       movq    $0x0, (%rdx)
    0.00 :   ffffffff810a8908:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff810a890d:       testq   %rbx, %rbx
    0.00 :   ffffffff810a8910:       jne     0xffffffff810a88f4 <finish_task_switch.isra.0+0x244>
    0.00 :   ffffffff810a8912:       jmp     0xffffffff810a872c <finish_task_switch.isra.0+0x7c>
    0.00 :   ffffffff810a8917:       jmp     0xffffffff8241ee81 <init_per_cpu__gdt_page+0x8ce81>
    0.00 :   ffffffff810a891c:       serialize
    0.00 :   ffffffff810a891f:       nop
    0.00 :   ffffffff810a8920:       jmp     0xffffffff810a875b <finish_task_switch.isra.0+0xab>
    0.00 :   ffffffff810a8925:       movl    %ss, %eax
    0.00 :   ffffffff810a8927:       pushq   %rax
    0.00 :   ffffffff810a8928:       pushq   %rsp
    0.00 :   ffffffff810a8929:       addq    $0x8, (%rsp)
    0.00 :   ffffffff810a892e:       pushfq
    0.00 :   ffffffff810a892f:       movl    %cs, %eax
    0.00 :   ffffffff810a8931:       pushq   %rax
    0.00 :   ffffffff810a8932:       pushq   $-0x7ef576c7    # imm = 0x810A8939
    0.00 :   ffffffff810a8937:       iretq
    0.00 :   ffffffff810a8939:       nopl    (%rax)
    0.00 :   ffffffff810a8940:       jmp     0xffffffff810a875b <finish_task_switch.isra.0+0xab>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff811cd530 <perf_ctx_sched_task_cb>:
         : 5                ; perf_ctx_sched_task_cb():
    0.00 :   ffffffff811cd530:       pushq   %rbp
  100.00 :   ffffffff811cd531:       movq    %rsp, %rbp
    0.00 :   ffffffff811cd534:       pushq   %r13
    0.00 :   ffffffff811cd536:       pushq   %r12
    0.00 :   ffffffff811cd538:       pushq   %rbx
    0.00 :   ffffffff811cd539:       movq    0x28(%rdi), %rax
    0.00 :   ffffffff811cd53d:       leaq    0x28(%rdi), %r13
    0.00 :   ffffffff811cd541:       cmpq    %rax, %r13
    0.00 :   ffffffff811cd544:       je      0xffffffff811cd58b <perf_ctx_sched_task_cb+0x5b>
    0.00 :   ffffffff811cd546:       leaq    -0x10(%rax), %rbx
    0.00 :   ffffffff811cd54a:       movzbl  %sil, %r12d
    0.00 :   ffffffff811cd54e:       movq    (%rbx), %rdx
    0.00 :   ffffffff811cd551:       movq    0x48(%rdx), %rax
    0.00 :   ffffffff811cd555:       addq    %gs:0x7ee484d3(%rip), %rax
    0.00 :   ffffffff811cd55d:       movl    0x88(%rax), %eax
    0.00 :   ffffffff811cd563:       testl   %eax, %eax
    0.00 :   ffffffff811cd565:       je      0xffffffff811cd57e <perf_ctx_sched_task_cb+0x4e>
    0.00 :   ffffffff811cd567:       movq    0xd0(%rdx), %rax
    0.00 :   ffffffff811cd56e:       testq   %rax, %rax
    0.00 :   ffffffff811cd571:       je      0xffffffff811cd57e <perf_ctx_sched_task_cb+0x4e>
    0.00 :   ffffffff811cd573:       movl    %r12d, %esi
    0.00 :   ffffffff811cd576:       movq    %rbx, %rdi
    0.00 :   ffffffff811cd579:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff811cd57e:       movq    0x10(%rbx), %rax
    0.00 :   ffffffff811cd582:       cmpq    %rax, %r13
    0.00 :   ffffffff811cd585:       leaq    -0x10(%rax), %rbx
    0.00 :   ffffffff811cd589:       jne     0xffffffff811cd54e <perf_ctx_sched_task_cb+0x1e>
    0.00 :   ffffffff811cd58b:       popq    %rbx
    0.00 :   ffffffff811cd58c:       popq    %r12
    0.00 :   ffffffff811cd58e:       popq    %r13
    0.00 :   ffffffff811cd590:       popq    %rbp
    0.00 :   ffffffff811cd591:       xorl    %eax, %eax
    0.00 :   ffffffff811cd593:       xorl    %edx, %edx
    0.00 :   ffffffff811cd595:       xorl    %esi, %esi
    0.00 :   ffffffff811cd597:       xorl    %edi, %edi
    0.00 :   ffffffff811cd599:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (48 samples, percent: local period)
-----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8100a1c0 <perf_ibs_handle_irq>:
         : 5                ; perf_ibs_handle_irq():
    0.00 :   ffffffff8100a1c0:       pushq   %rbp
    0.00 :   ffffffff8100a1c1:       movq    %rsp, %rbp
    0.00 :   ffffffff8100a1c4:       pushq   %r15
    0.00 :   ffffffff8100a1c6:       pushq   %r14
    0.00 :   ffffffff8100a1c8:       pushq   %r13
    0.00 :   ffffffff8100a1ca:       pushq   %r12
    0.00 :   ffffffff8100a1cc:       pushq   %rbx
    0.00 :   ffffffff8100a1cd:       movq    %rdi, %rbx
    0.00 :   ffffffff8100a1d0:       andq    $-0x40, %rsp
    0.00 :   ffffffff8100a1d4:       subq    $0x2c0, %rsp    # imm = 0x2C0
    0.00 :   ffffffff8100a1db:       movq    %rsi, 0x58(%rsp)
    0.00 :   ffffffff8100a1e0:       movq    %gs:0x28, %rax
    0.00 :   ffffffff8100a1e9:       movq    %rax, 0x2b8(%rsp)
    0.00 :   ffffffff8100a1f1:       xorl    %eax, %eax
    0.00 :   ffffffff8100a1f3:       callq   0xffffffff81b6b6c0 <stackleak_track_stack>
    0.00 :   ffffffff8100a1f8:       movq    0x168(%rdi), %rsi
    0.00 :   ffffffff8100a1ff:       leaq    0x140(%rsp), %rdi
    0.00 :   ffffffff8100a207:       movl    $0x20, %ecx
    0.00 :   ffffffff8100a20c:       addq    %gs:0x7f00b81c(%rip), %rsi
    0.00 :   ffffffff8100a214:       leaq    0x270(%rsp), %rdx
    0.00 :   ffffffff8100a21c:       movq    (%rsi), %r10
    0.00 :   ffffffff8100a21f:       movq    $0x0, 0x78(%rsp)
    0.00 :   ffffffff8100a228:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff8100a22b:       leaq    0x98(%rsp), %rdi
    0.00 :   ffffffff8100a233:       movl    $0x15, %ecx
    0.00 :   ffffffff8100a238:       movq    $0x0, 0x80(%rsp)
    0.00 :   ffffffff8100a244:       movq    $0x0, 0x88(%rsp)
    0.00 :   ffffffff8100a250:       movq    $0x0, 0x90(%rsp)
    0.00 :   ffffffff8100a25c:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff8100a25f:       movl    $0x9, %ecx
    0.00 :   ffffffff8100a264:       movq    %rdx, %rdi
    0.00 :   ffffffff8100a267:       rep             stosq   %rax, %es:(%rdi)
    0.00 :   ffffffff8100a26a:       movq    0x8(%rsi), %rax
    0.00 :   ffffffff8100a26e:       testb   $0x2, %al
    0.00 :   ffffffff8100a270:       je      0xffffffff8100a394 <perf_ibs_handle_irq+0x1d4>
    0.00 :   ffffffff8100a276:       testq   %r10, %r10
    0.00 :   ffffffff8100a279:       je      0xffffffff8100a392 <perf_ibs_handle_irq+0x1d2>
    0.00 :   ffffffff8100a27f:       movq    0x178(%r10), %rcx
    0.00 :   ffffffff8100a286:       movl    %ecx, %r12d
    0.00 :   ffffffff8100a289:       rdmsr
    0.00 :   ffffffff8100a28b:       shlq    $0x20, %rdx
    0.00 :   ffffffff8100a28f:       orq     %rdx, %rax
    0.00 :   ffffffff8100a292:       movq    %rax, 0x278(%rsp)
    0.00 :   ffffffff8100a29a:       andq    0x148(%rbx), %rax
    0.00 :   ffffffff8100a2a1:       je      0xffffffff8100a394 <perf_ibs_handle_irq+0x1d4>
    0.00 :   ffffffff8100a2a7:       leaq    0x278(%rsp), %rdx
    0.00 :   ffffffff8100a2af:       movq    %r10, %rsi
    0.00 :   ffffffff8100a2b2:       movq    %rbx, %rdi
    0.00 :   ffffffff8100a2b5:       movq    %r10, 0x70(%rsp)
    0.00 :   ffffffff8100a2ba:       callq   0xffffffff81009f30 <perf_ibs_event_update>
    0.00 :   ffffffff8100a2bf:       movq    0x70(%rsp), %r10
    0.00 :   ffffffff8100a2c4:       movq    0x150(%rbx), %rdx
    0.00 :   ffffffff8100a2cb:       movq    $0x100, 0x140(%rsp) # imm = 0x100
    0.00 :   ffffffff8100a2d7:       movq    $0x0, 0x150(%rsp)
    0.00 :   ffffffff8100a2e3:       movq    0x1f8(%r10), %rax
    0.00 :   ffffffff8100a2ea:       movq    0x200(%r10), %r11
    0.00 :   ffffffff8100a2f1:       movq    %rax, 0x148(%rsp)
    0.00 :   ffffffff8100a2f9:       movq    0x1f0(%r10), %rax
    0.00 :   ffffffff8100a300:       movq    %rax, 0x50(%rsp)
    0.00 :   ffffffff8100a305:       negq    %rax
    0.00 :   ffffffff8100a308:       cmpq    %rax, %r11
    0.00 :   ffffffff8100a30b:       jle     0xffffffff8100a4a0 <perf_ibs_handle_irq+0x2e0>
    0.00 :   ffffffff8100a311:       cmpq    $0xf, %r11
    0.00 :   ffffffff8100a315:       jle     0xffffffff8100a7f6 <perf_ibs_handle_irq+0x636>
    0.00 :   ffffffff8100a31b:       cmpq    %r11, %rdx
    0.00 :   ffffffff8100a31e:       movq    %r11, 0x50(%rsp)
    0.00 :   ffffffff8100a323:       jb      0xffffffff8100a3df <perf_ibs_handle_irq+0x21f>
    0.00 :   ffffffff8100a329:       movq    $0x0, 0x1e8(%r10)
    0.00 :   ffffffff8100a334:       movzbl  0x164(%rbx), %ecx
    0.00 :   ffffffff8100a33b:       xorl    %eax, %eax
    0.00 :   ffffffff8100a33d:       cmpq    $-0x7ddf25a0, %rbx # imm = 0x8220DA60
    0.00 :   ffffffff8100a344:       je      0xffffffff8100a43c <perf_ibs_handle_irq+0x27c>
    0.00 :   ffffffff8100a34a:       orq     0x168(%r10), %rax
    0.00 :   ffffffff8100a351:       movq    0x50(%rsp), %rdx
    0.00 :   ffffffff8100a356:       shrq    $0x4, %rdx
    0.00 :   ffffffff8100a35a:       orq     %rdx, %rax
    0.00 :   ffffffff8100a35d:       andl    $0x1, %ecx
    0.00 :   ffffffff8100a360:       movq    %rax, %rsi
    0.00 :   ffffffff8100a363:       jne     0xffffffff8100a41a <perf_ibs_handle_irq+0x25a>
    0.00 :   ffffffff8100a369:       movq    0x140(%rbx), %rax
    0.00 :   ffffffff8100a370:       movq    0x178(%r10), %rcx
    0.00 :   ffffffff8100a377:       orq     %rsi, %rax
    0.00 :   ffffffff8100a37a:       movq    %rax, %rdx
    0.00 :   ffffffff8100a37d:       shrq    $0x20, %rdx
  100.00 :   ffffffff8100a381:       wrmsr
    0.00 :   ffffffff8100a383:       movq    %r10, %rdi
    0.00 :   ffffffff8100a386:       callq   0xffffffff811d89e0 <perf_event_update_userpage>
    0.00 :   ffffffff8100a38b:       movl    $0x1, %eax
    0.00 :   ffffffff8100a390:       jmp     0xffffffff8100a3a1 <perf_ibs_handle_irq+0x1e1>
    0.00 :   ffffffff8100a392:       ud2
    0.00 :   ffffffff8100a394:       lock
    0.00 :   ffffffff8100a395:       btrq    $0x3, 0x8(%rsi)
    0.00 :   ffffffff8100a39b:       setb    %al
    0.00 :   ffffffff8100a39e:       movzbl  %al, %eax
    0.00 :   ffffffff8100a3a1:       movq    0x2b8(%rsp), %rdx
    0.00 :   ffffffff8100a3a9:       subq    %gs:0x28, %rdx
    0.00 :   ffffffff8100a3b2:       jne     0xffffffff8100acab <perf_ibs_handle_irq+0xaeb>
    0.00 :   ffffffff8100a3b8:       leaq    -0x28(%rbp), %rsp
    0.00 :   ffffffff8100a3bc:       popq    %rbx
    0.00 :   ffffffff8100a3bd:       popq    %r12
    0.00 :   ffffffff8100a3bf:       popq    %r13
    0.00 :   ffffffff8100a3c1:       popq    %r14
    0.00 :   ffffffff8100a3c3:       popq    %r15
    0.00 :   ffffffff8100a3c5:       popq    %rbp
    0.00 :   ffffffff8100a3c6:       xorl    %edx, %edx
    0.00 :   ffffffff8100a3c8:       xorl    %ecx, %ecx
    0.00 :   ffffffff8100a3ca:       xorl    %esi, %esi
    0.00 :   ffffffff8100a3cc:       xorl    %edi, %edi
    0.00 :   ffffffff8100a3ce:       xorl    %r8d, %r8d
    0.00 :   ffffffff8100a3d1:       xorl    %r9d, %r9d
    0.00 :   ffffffff8100a3d4:       xorl    %r10d, %r10d
    0.00 :   ffffffff8100a3d7:       xorl    %r11d, %r11d
    0.00 :   ffffffff8100a3da:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8100a3df:       movq    %r11, %rax
    0.00 :   ffffffff8100a3e2:       subq    %rdx, %rax
    0.00 :   ffffffff8100a3e5:       cmpq    %rax, %rdx
    0.00 :   ffffffff8100a3e8:       jb      0xffffffff8100a48d <perf_ibs_handle_irq+0x2cd>
    0.00 :   ffffffff8100a3ee:       cmpq    $0xf, %rax
    0.00 :   ffffffff8100a3f2:       jbe     0xffffffff8100abad <perf_ibs_handle_irq+0x9ed>
    0.00 :   ffffffff8100a3f8:       movq    %rax, %r11
    0.00 :   ffffffff8100a3fb:       movq    $0x0, 0x1e8(%r10)
    0.00 :   ffffffff8100a406:       movq    %rax, %rdx
    0.00 :   ffffffff8100a409:       movzbl  0x164(%rbx), %ecx
    0.00 :   ffffffff8100a410:       movq    %rdx, 0x50(%rsp)
    0.00 :   ffffffff8100a415:       jmp     0xffffffff8100a33b <perf_ibs_handle_irq+0x17b>
    0.00 :   ffffffff8100a41a:       movq    0x140(%rbx), %rax
    0.00 :   ffffffff8100a421:       movq    0x178(%r10), %rcx
    0.00 :   ffffffff8100a428:       notq    %rax
    0.00 :   ffffffff8100a42b:       andq    %rsi, %rax
    0.00 :   ffffffff8100a42e:       movq    %rax, %rdx
    0.00 :   ffffffff8100a431:       shrq    $0x20, %rdx
    0.00 :   ffffffff8100a435:       wrmsr
    0.00 :   ffffffff8100a437:       jmp     0xffffffff8100a369 <perf_ibs_handle_irq+0x1a9>
    0.00 :   ffffffff8100a43c:       movl    0x15acd5e(%rip), %edx # 0xffffffff825b71a0 <ibs_caps>
    0.00 :   ffffffff8100a442:       testb   $0x40, %dl
    0.00 :   ffffffff8100a445:       je      0xffffffff8100a45b <perf_ibs_handle_irq+0x29b>
    0.00 :   ffffffff8100a447:       movq    %r11, %rax
    0.00 :   ffffffff8100a44a:       andq    $-0x7f00001, %r11 # imm = 0xF80FFFFF
    0.00 :   ffffffff8100a451:       andl    $0x7f00000, %eax # imm = 0x7F00000
    0.00 :   ffffffff8100a456:       movq    %r11, 0x50(%rsp)
    0.00 :   ffffffff8100a45b:       andl    $0x8, %edx
    0.00 :   ffffffff8100a45e:       je      0xffffffff8100a34a <perf_ibs_handle_irq+0x18a>
    0.00 :   ffffffff8100a464:       movq    0x278(%rsp), %rdx
    0.00 :   ffffffff8100a46c:       testl   $0x80000, %edx  # imm = 0x80000
    0.00 :   ffffffff8100a472:       je      0xffffffff8100a34a <perf_ibs_handle_irq+0x18a>
    0.00 :   ffffffff8100a478:       movabsq $0x7f00000000, %rsi # imm = 0x7F00000000
    0.00 :   ffffffff8100a482:       andq    %rsi, %rdx
    0.00 :   ffffffff8100a485:       orq     %rdx, %rax
    0.00 :   ffffffff8100a488:       jmp     0xffffffff8100a34a <perf_ibs_handle_irq+0x18a>
    0.00 :   ffffffff8100a48d:       movq    %rdx, %r11
    0.00 :   ffffffff8100a490:       movq    $0x0, 0x1e8(%r10)
    0.00 :   ffffffff8100a49b:       jmp     0xffffffff8100a409 <perf_ibs_handle_irq+0x249>
    0.00 :   ffffffff8100a4a0:       movq    0x50(%rsp), %r11
    0.00 :   ffffffff8100a4a5:       cmpq    $0xf, %r11
    0.00 :   ffffffff8100a4a9:       movq    %r11, 0x200(%r10)
    0.00 :   ffffffff8100a4b0:       movq    %r11, 0x1f8(%r10)
    0.00 :   ffffffff8100a4b7:       jle     0xffffffff8100a7f1 <perf_ibs_handle_irq+0x631>
    0.00 :   ffffffff8100a4bd:       cmpq    %r11, %rdx
    0.00 :   ffffffff8100a4c0:       jae     0xffffffff8100a836 <perf_ibs_handle_irq+0x676>
    0.00 :   ffffffff8100a4c6:       subq    %rdx, 0x50(%rsp)
    0.00 :   ffffffff8100a4cb:       movq    0x50(%rsp), %rax
    0.00 :   ffffffff8100a4d0:       cmpq    %rax, %rdx
    0.00 :   ffffffff8100a4d3:       jb      0xffffffff8100a973 <perf_ibs_handle_irq+0x7b3>
    0.00 :   ffffffff8100a4d9:       cmpq    $0xf, 0x50(%rsp)
    0.00 :   ffffffff8100a4df:       ja      0xffffffff8100ae31 <perf_ibs_handle_irq+0xc71>
    0.00 :   ffffffff8100a4e5:       movq    $0x0, 0x1e8(%r10)
    0.00 :   ffffffff8100a4f0:       movl    $0x10, %r11d
    0.00 :   ffffffff8100a4f6:       movq    $0x10, 0x50(%rsp)
    0.00 :   ffffffff8100a4ff:       movl    0x15acc9b(%rip), %edx # 0xffffffff825b71a0 <ibs_caps>
    0.00 :   ffffffff8100a505:       cmpq    $-0x7ddf25a0, %rbx # imm = 0x8220DA60
    0.00 :   ffffffff8100a50c:       movq    0xf0(%r10), %rax
    0.00 :   ffffffff8100a513:       movl    %edx, 0x274(%rsp)
    0.00 :   ffffffff8100a51a:       je      0xffffffff8100a6fb <perf_ibs_handle_irq+0x53b>
    0.00 :   ffffffff8100a520:       testb   $0x4, %ah
    0.00 :   ffffffff8100a523:       jne     0xffffffff8100a6ec <perf_ibs_handle_irq+0x52c>
    0.00 :   ffffffff8100a529:       xorl    %r8d, %r8d
    0.00 :   ffffffff8100a52c:       movl    $0x1, %r15d
    0.00 :   ffffffff8100a532:       leaq    0x158(%rbx), %rax
    0.00 :   ffffffff8100a539:       leaq    0x280(%rsp), %r13
    0.00 :   ffffffff8100a541:       movl    $0x1, %r14d
    0.00 :   ffffffff8100a547:       movl    $0x1, %esi
    0.00 :   ffffffff8100a54c:       movq    %r10, 0x48(%rsp)
    0.00 :   ffffffff8100a551:       movq    %r11, 0x40(%rsp)
    0.00 :   ffffffff8100a556:       movq    %rax, 0x70(%rsp)
    0.00 :   ffffffff8100a55b:       movq    %r13, %rax
    0.00 :   ffffffff8100a55e:       movl    %r8d, 0x3c(%rsp)
    0.00 :   ffffffff8100a563:       movl    %r14d, %r13d
    0.00 :   ffffffff8100a566:       movq    %rax, %r14
    0.00 :   ffffffff8100a569:       movq    %r14, 0x60(%rsp)
    0.00 :   ffffffff8100a56e:       leal    (%rsi,%r12), %ecx
    0.00 :   ffffffff8100a572:       addq    $0x8, %r14
    0.00 :   ffffffff8100a576:       rdmsr
    0.00 :   ffffffff8100a578:       shlq    $0x20, %rdx
    0.00 :   ffffffff8100a57c:       movq    0x70(%rsp), %rdi
    0.00 :   ffffffff8100a581:       movl    %r13d, 0x68(%rsp)
    0.00 :   ffffffff8100a586:       orq     %rax, %rdx
    0.00 :   ffffffff8100a589:       incl    %r13d
    0.00 :   ffffffff8100a58c:       movq    %rdx, -0x8(%r14)
    0.00 :   ffffffff8100a590:       leal    0x1(%rsi), %edx
    0.00 :   ffffffff8100a593:       movslq  0x160(%rbx), %rsi
    0.00 :   ffffffff8100a59a:       movslq  %edx, %rdx
    0.00 :   ffffffff8100a59d:       callq   0xffffffff815a08d0 <_find_next_bit>
    0.00 :   ffffffff8100a5a2:       cmpl    %r15d, %eax
    0.00 :   ffffffff8100a5a5:       movl    %eax, %esi
    0.00 :   ffffffff8100a5a7:       jl      0xffffffff8100a569 <perf_ibs_handle_irq+0x3a9>
    0.00 :   ffffffff8100a5a9:       movq    0x48(%rsp), %r10
    0.00 :   ffffffff8100a5ae:       movq    %r14, %rax
    0.00 :   ffffffff8100a5b1:       movq    0x40(%rsp), %r11
    0.00 :   ffffffff8100a5b6:       movl    %r13d, %r14d
    0.00 :   ffffffff8100a5b9:       movl    0x3c(%rsp), %r8d
    0.00 :   ffffffff8100a5be:       movq    %rax, %r13
    0.00 :   ffffffff8100a5c1:       testb   $0x4, 0xf1(%r10)
    0.00 :   ffffffff8100a5c9:       je      0xffffffff8100a5e5 <perf_ibs_handle_irq+0x425>
    0.00 :   ffffffff8100a5cb:       cmpq    $-0x7ddf25a0, %rbx # imm = 0x8220DA60
    0.00 :   ffffffff8100a5d2:       je      0xffffffff8100a941 <perf_ibs_handle_irq+0x781>
    0.00 :   ffffffff8100a5d8:       cmpq    $-0x7ddf2420, %rbx # imm = 0x8220DBE0
    0.00 :   ffffffff8100a5df:       je      0xffffffff8100a914 <perf_ibs_handle_irq+0x754>
    0.00 :   ffffffff8100a5e5:       leal    (,%r14,8), %r9d
    0.00 :   ffffffff8100a5ed:       testl   %r8d, %r8d
    0.00 :   ffffffff8100a5f0:       movq    0x58(%rsp), %rsi
    0.00 :   ffffffff8100a5f5:       leaq    0x98(%rsp), %rdi
    0.00 :   ffffffff8100a5fd:       movl    $0x15, %ecx
    0.00 :   ffffffff8100a602:       movl    %r9d, 0x270(%rsp)
    0.00 :   ffffffff8100a60a:       rep             movsq   (%rsi), %es:(%rdi)
    0.00 :   ffffffff8100a60d:       je      0xffffffff8100a696 <perf_ibs_handle_irq+0x4d6>
    0.00 :   ffffffff8100a613:       testb   $0x40, 0x28c(%rsp)
    0.00 :   ffffffff8100a61b:       je      0xffffffff8100a696 <perf_ibs_handle_irq+0x4d6>
    0.00 :   ffffffff8100a61d:       movq    0x128(%rsp), %rax
    0.00 :   ffffffff8100a625:       andq    $-0x9, %rax
    0.00 :   ffffffff8100a629:       movq    %rax, 0x128(%rsp)
    0.00 :   ffffffff8100a631:       movq    0xf0(%r10), %rax
    0.00 :   ffffffff8100a638:       testb   $0x4, %ah
    0.00 :   ffffffff8100a63b:       jne     0xffffffff8100a738 <perf_ibs_handle_irq+0x578>
    0.00 :   ffffffff8100a641:       cmpq    $-0x7ddf25a0, %rbx # imm = 0x8220DA60
    0.00 :   ffffffff8100a648:       je      0xffffffff8100a846 <perf_ibs_handle_irq+0x686>
    0.00 :   ffffffff8100a64e:       testb   $0x20, %al
    0.00 :   ffffffff8100a650:       jne     0xffffffff8100a7a7 <perf_ibs_handle_irq+0x5e7>
    0.00 :   ffffffff8100a656:       leaq    0x98(%rsp), %rdx
    0.00 :   ffffffff8100a65e:       leaq    0x140(%rsp), %rsi
    0.00 :   ffffffff8100a666:       movq    %r10, %rdi
    0.00 :   ffffffff8100a669:       movq    %r10, 0x70(%rsp)
    0.00 :   ffffffff8100a66e:       movq    %r11, 0x68(%rsp)
    0.00 :   ffffffff8100a673:       callq   0xffffffff811e1850 <perf_event_overflow>
    0.00 :   ffffffff8100a678:       testl   %eax, %eax
    0.00 :   ffffffff8100a67a:       movq    0x70(%rsp), %r10
    0.00 :   ffffffff8100a67f:       jne     0xffffffff8100a71f <perf_ibs_handle_irq+0x55f>
    0.00 :   ffffffff8100a685:       movzbl  0x164(%rbx), %ecx
    0.00 :   ffffffff8100a68c:       movq    0x68(%rsp), %r11
    0.00 :   ffffffff8100a691:       jmp     0xffffffff8100a33b <perf_ibs_handle_irq+0x17b>
    0.00 :   ffffffff8100a696:       movzbl  0x164(%rbx), %ecx
    0.00 :   ffffffff8100a69d:       movq    0x280(%rsp), %rdx
    0.00 :   ffffffff8100a6a5:       testb   $0x2, %cl
    0.00 :   ffffffff8100a6a8:       je      0xffffffff8100a6b3 <perf_ibs_handle_irq+0x4f3>
    0.00 :   ffffffff8100a6aa:       testq   %rdx, %rdx
    0.00 :   ffffffff8100a6ad:       je      0xffffffff8100a33b <perf_ibs_handle_irq+0x17b>
    0.00 :   ffffffff8100a6b3:       movq    %rdx, %rax
    0.00 :   ffffffff8100a6b6:       movq    %rdx, 0x118(%rsp)
    0.00 :   ffffffff8100a6be:       sarq    $0x3f, %rax
    0.00 :   ffffffff8100a6c2:       andq    $-0x23, %rax
    0.00 :   ffffffff8100a6c6:       addq    $0x33, %rax
    0.00 :   ffffffff8100a6ca:       movq    %rax, 0x120(%rsp)
    0.00 :   ffffffff8100a6d2:       movq    0x128(%rsp), %rax
    0.00 :   ffffffff8100a6da:       orq     $0x8, %rax
    0.00 :   ffffffff8100a6de:       jmp     0xffffffff8100a629 <perf_ibs_handle_irq+0x469>
    0.00 :   ffffffff8100a6e3:       testq   %rax, %rax
    0.00 :   ffffffff8100a6e6:       je      0xffffffff8100a529 <perf_ibs_handle_irq+0x369>
    0.00 :   ffffffff8100a6ec:       xorl    %r8d, %r8d
    0.00 :   ffffffff8100a6ef:       movl    0x160(%rbx), %r15d
    0.00 :   ffffffff8100a6f6:       jmp     0xffffffff8100a532 <perf_ibs_handle_irq+0x372>
    0.00 :   ffffffff8100a6fb:       andl    $0x108c408, %eax # imm = 0x108C408
    0.00 :   ffffffff8100a700:       andl    $0x80, %edx
    0.00 :   ffffffff8100a706:       je      0xffffffff8100a6e3 <perf_ibs_handle_irq+0x523>
    0.00 :   ffffffff8100a708:       testq   %rax, %rax
    0.00 :   ffffffff8100a70b:       movl    $0x1, %r8d
    0.00 :   ffffffff8100a711:       movl    $0x3, %r15d
    0.00 :   ffffffff8100a717:       je      0xffffffff8100a532 <perf_ibs_handle_irq+0x372>
    0.00 :   ffffffff8100a71d:       jmp     0xffffffff8100a6ef <perf_ibs_handle_irq+0x52f>
    0.00 :   ffffffff8100a71f:       movq    %r10, %rdi
    0.00 :   ffffffff8100a722:       xorl    %esi, %esi
    0.00 :   ffffffff8100a724:       movq    %r10, 0x70(%rsp)
    0.00 :   ffffffff8100a729:       callq   0xffffffff8100a000 <perf_ibs_stop>
    0.00 :   ffffffff8100a72e:       movq    0x70(%rsp), %r10
    0.00 :   ffffffff8100a733:       jmp     0xffffffff8100a383 <perf_ibs_handle_irq+0x1c3>
    0.00 :   ffffffff8100a738:       leal    0x4(%r9), %ecx
    0.00 :   ffffffff8100a73c:       leaq    0x274(%rsp), %rdx
    0.00 :   ffffffff8100a744:       addl    $0x7, %r9d
    0.00 :   ffffffff8100a748:       orl     $0x7, %r9d
    0.00 :   ffffffff8100a74c:       orq     $0x400, 0x140(%rsp) # imm = 0x400
    0.00 :   ffffffff8100a758:       movq    $0x0, 0x80(%rsp)
    0.00 :   ffffffff8100a764:       movq    %rdx, 0x88(%rsp)
    0.00 :   ffffffff8100a76c:       leal    -0x3(%r9), %edx
    0.00 :   ffffffff8100a770:       incl    %r9d
    0.00 :   ffffffff8100a773:       movslq  %r9d, %r9
    0.00 :   ffffffff8100a776:       movl    %ecx, 0x90(%rsp)
    0.00 :   ffffffff8100a77d:       addq    %r9, 0x150(%rsp)
    0.00 :   ffffffff8100a785:       movl    %edx, 0x94(%rsp)
    0.00 :   ffffffff8100a78c:       subl    %ecx, %edx
    0.00 :   ffffffff8100a78e:       movl    %edx, %edi
    0.00 :   ffffffff8100a790:       movq    %rdi, 0x78(%rsp)
    0.00 :   ffffffff8100a795:       leaq    0x78(%rsp), %rdi
    0.00 :   ffffffff8100a79a:       movq    %rdi, 0x190(%rsp)
    0.00 :   ffffffff8100a7a2:       jmp     0xffffffff8100a641 <perf_ibs_handle_irq+0x481>
    0.00 :   ffffffff8100a7a7:       movq    0x58(%rsp), %rsi
    0.00 :   ffffffff8100a7ac:       movq    %r10, %rdi
    0.00 :   ffffffff8100a7af:       movq    %r11, 0x68(%rsp)
    0.00 :   ffffffff8100a7b4:       movq    %r10, 0x70(%rsp)
    0.00 :   ffffffff8100a7b9:       callq   0xffffffff811df960 <perf_callchain>
    0.00 :   ffffffff8100a7be:       movq    %rax, 0x188(%rsp)
    0.00 :   ffffffff8100a7c6:       movq    (%rax), %rax
    0.00 :   ffffffff8100a7c9:       movq    0x68(%rsp), %r11
    0.00 :   ffffffff8100a7ce:       orq     $0x20, 0x140(%rsp)
    0.00 :   ffffffff8100a7d7:       movq    0x70(%rsp), %r10
    0.00 :   ffffffff8100a7dc:       incl    %eax
    0.00 :   ffffffff8100a7de:       cltq
    0.00 :   ffffffff8100a7e0:       shlq    $0x3, %rax
    0.00 :   ffffffff8100a7e4:       addq    %rax, 0x150(%rsp)
    0.00 :   ffffffff8100a7ec:       jmp     0xffffffff8100a656 <perf_ibs_handle_irq+0x496>
    0.00 :   ffffffff8100a7f1:       movq    0x50(%rsp), %r11
    0.00 :   ffffffff8100a7f6:       movq    0x50(%rsp), %rax
    0.00 :   ffffffff8100a7fb:       addq    %rax, %r11
    0.00 :   ffffffff8100a7fe:       movq    %rax, 0x1f8(%r10)
    0.00 :   ffffffff8100a805:       cmpq    %r11, %rdx
    0.00 :   ffffffff8100a808:       movq    %r11, 0x200(%r10)
    0.00 :   ffffffff8100a80f:       movq    %r11, 0x50(%rsp)
    0.00 :   ffffffff8100a814:       jae     0xffffffff8100a836 <perf_ibs_handle_irq+0x676>
    0.00 :   ffffffff8100a816:       subq    %rdx, %r11
    0.00 :   ffffffff8100a819:       cmpq    %r11, %rdx
    0.00 :   ffffffff8100a81c:       movq    %r11, 0x50(%rsp)
    0.00 :   ffffffff8100a821:       jb      0xffffffff8100a973 <perf_ibs_handle_irq+0x7b3>
    0.00 :   ffffffff8100a827:       movq    0x50(%rsp), %r11
    0.00 :   ffffffff8100a82c:       cmpq    $0xf, %r11
    0.00 :   ffffffff8100a830:       jbe     0xffffffff8100a4e5 <perf_ibs_handle_irq+0x325>
    0.00 :   ffffffff8100a836:       movq    $0x0, 0x1e8(%r10)
    0.00 :   ffffffff8100a841:       jmp     0xffffffff8100a4ff <perf_ibs_handle_irq+0x33f>
    0.00 :   ffffffff8100a846:       movq    0x298(%rsp), %rdx
    0.00 :   ffffffff8100a84e:       movq    $0x5080021, 0x1a8(%rsp) # imm = 0x5080021
    0.00 :   ffffffff8100a85a:       movl    $0x2, %esi
    0.00 :   ffffffff8100a85f:       testb   $0x1, %dl
    0.00 :   ffffffff8100a862:       jne     0xffffffff8100a872 <perf_ibs_handle_irq+0x6b2>
    0.00 :   ffffffff8100a864:       testb   $0x2, %dl
    0.00 :   ffffffff8100a867:       je      0xffffffff8100a64e <perf_ibs_handle_irq+0x48e>
    0.00 :   ffffffff8100a86d:       movl    $0x4, %esi
    0.00 :   ffffffff8100a872:       movzbl  0x1a8(%rsp), %ecx
    0.00 :   ffffffff8100a87a:       movzbl  0x135b7c1(%rip), %edi # 0xffffffff82366042 <boot_cpu_data+0x22>
    0.00 :   ffffffff8100a881:       movq    0x290(%rsp), %r8
    0.00 :   ffffffff8100a889:       andl    $-0x20, %ecx
    0.00 :   ffffffff8100a88c:       orl     %esi, %ecx
    0.00 :   ffffffff8100a88e:       cmpb    $0x19, %dil
    0.00 :   ffffffff8100a892:       movb    %cl, 0x1a8(%rsp)
    0.00 :   ffffffff8100a899:       je      0xffffffff8100a9b4 <perf_ibs_handle_irq+0x7f4>
    0.00 :   ffffffff8100a89f:       testb   $-0x80, %ah
    0.00 :   ffffffff8100a8a2:       jne     0xffffffff8100a9d9 <perf_ibs_handle_irq+0x819>
    0.00 :   ffffffff8100a8a8:       testl   $0x1004000, %eax # imm = 0x1004000
    0.00 :   ffffffff8100a8ad:       je      0xffffffff8100a8b7 <perf_ibs_handle_irq+0x6f7>
    0.00 :   ffffffff8100a8af:       testb   %dl, %dl
    0.00 :   ffffffff8100a8b1:       js      0xffffffff8100ab58 <perf_ibs_handle_irq+0x998>
    0.00 :   ffffffff8100a8b7:       testb   $0x8, %al
    0.00 :   ffffffff8100a8b9:       je      0xffffffff8100a8dc <perf_ibs_handle_irq+0x71c>
    0.00 :   ffffffff8100a8bb:       testl   $0x20000, %edx  # imm = 0x20000
    0.00 :   ffffffff8100a8c1:       je      0xffffffff8100a8dc <perf_ibs_handle_irq+0x71c>
    0.00 :   ffffffff8100a8c3:       movq    0x2a0(%rsp), %rcx
    0.00 :   ffffffff8100a8cb:       orq     $0x8, 0x140(%rsp)
    0.00 :   ffffffff8100a8d4:       movq    %rcx, 0x1f0(%rsp)
    0.00 :   ffffffff8100a8dc:       testl   $0x80000, %eax  # imm = 0x80000
    0.00 :   ffffffff8100a8e1:       je      0xffffffff8100a64e <perf_ibs_handle_irq+0x48e>
    0.00 :   ffffffff8100a8e7:       testl   $0x40000, %edx  # imm = 0x40000
    0.00 :   ffffffff8100a8ed:       je      0xffffffff8100a64e <perf_ibs_handle_irq+0x48e>
    0.00 :   ffffffff8100a8f3:       movq    0x2a8(%rsp), %rdx
    0.00 :   ffffffff8100a8fb:       orq     $0x80000, 0x140(%rsp) # imm = 0x80000
    0.00 :   ffffffff8100a907:       movq    %rdx, 0x1f8(%rsp)
    0.00 :   ffffffff8100a90f:       jmp     0xffffffff8100a64e <perf_ibs_handle_irq+0x48e>
    0.00 :   ffffffff8100a914:       testb   $0x2, 0x15ac886(%rip) # 0xffffffff825b71a1 <ibs_caps+0x1>
    0.00 :   ffffffff8100a91b:       je      0xffffffff8100a5e5 <perf_ibs_handle_irq+0x425>
    0.00 :   ffffffff8100a921:       movl    $0xc001103c, %ecx # imm = 0xC001103C
    0.00 :   ffffffff8100a926:       rdmsr
    0.00 :   ffffffff8100a928:       movl    0x68(%rsp), %r14d
    0.00 :   ffffffff8100a92d:       shlq    $0x20, %rdx
    0.00 :   ffffffff8100a931:       orq     %rax, %rdx
    0.00 :   ffffffff8100a934:       movq    %rdx, (%r13)
    0.00 :   ffffffff8100a938:       addl    $0x2, %r14d
    0.00 :   ffffffff8100a93c:       jmp     0xffffffff8100a5e5 <perf_ibs_handle_irq+0x425>
    0.00 :   ffffffff8100a941:       movl    0x15ac859(%rip), %esi # 0xffffffff825b71a0 <ibs_caps>
    0.00 :   ffffffff8100a947:       testb   $0x20, %sil
    0.00 :   ffffffff8100a94b:       jne     0xffffffff8100a98b <perf_ibs_handle_irq+0x7cb>
    0.00 :   ffffffff8100a94d:       andl    $0x400, %esi    # imm = 0x400
    0.00 :   ffffffff8100a953:       je      0xffffffff8100a5e5 <perf_ibs_handle_irq+0x425>
    0.00 :   ffffffff8100a959:       movl    $0xc001103d, %ecx # imm = 0xC001103D
    0.00 :   ffffffff8100a95e:       rdmsr
    0.00 :   ffffffff8100a960:       shlq    $0x20, %rdx
    0.00 :   ffffffff8100a964:       incl    %r14d
    0.00 :   ffffffff8100a967:       orq     %rax, %rdx
    0.00 :   ffffffff8100a96a:       movq    %rdx, (%r13)
    0.00 :   ffffffff8100a96e:       jmp     0xffffffff8100a5e5 <perf_ibs_handle_irq+0x425>
    0.00 :   ffffffff8100a973:       movq    $0x0, 0x1e8(%r10)
    0.00 :   ffffffff8100a97e:       movq    %rdx, %r11
    0.00 :   ffffffff8100a981:       movq    %rdx, 0x50(%rsp)
    0.00 :   ffffffff8100a986:       jmp     0xffffffff8100a4ff <perf_ibs_handle_irq+0x33f>
    0.00 :   ffffffff8100a98b:       movq    0x60(%rsp), %rdi
    0.00 :   ffffffff8100a990:       movl    $0xc001103b, %ecx # imm = 0xC001103B
    0.00 :   ffffffff8100a995:       addq    $0x10, %rdi
    0.00 :   ffffffff8100a999:       rdmsr
    0.00 :   ffffffff8100a99b:       movl    0x68(%rsp), %r14d
    0.00 :   ffffffff8100a9a0:       shlq    $0x20, %rdx
    0.00 :   ffffffff8100a9a4:       orq     %rax, %rdx
    0.00 :   ffffffff8100a9a7:       movq    %rdx, (%r13)
    0.00 :   ffffffff8100a9ab:       movq    %rdi, %r13
    0.00 :   ffffffff8100a9ae:       addl    $0x2, %r14d
    0.00 :   ffffffff8100a9b2:       jmp     0xffffffff8100a94d <perf_ibs_handle_irq+0x78d>
    0.00 :   ffffffff8100a9b4:       cmpb    $0xf, 0x135b665(%rip) # 0xffffffff82366020 <boot_cpu_data>
    0.00 :   ffffffff8100a9bb:       ja      0xffffffff8100a89f <perf_ibs_handle_irq+0x6df>
    0.00 :   ffffffff8100a9c1:       movq    %rdx, %rcx
    0.00 :   ffffffff8100a9c4:       shrq    $0x10, %rcx
    0.00 :   ffffffff8100a9c8:       andl    $0x21, %ecx
    0.00 :   ffffffff8100a9cb:       movl    $0x0, %ecx
    0.00 :   ffffffff8100a9d0:       cmovneq %rcx, %r8
    0.00 :   ffffffff8100a9d4:       jmp     0xffffffff8100a89f <perf_ibs_handle_irq+0x6df>
    0.00 :   ffffffff8100a9d9:       movl    0x15ac7c0(%rip), %r14d # 0xffffffff825b71a0 <ibs_caps>
    0.00 :   ffffffff8100a9e0:       movl    %r8d, %ecx
    0.00 :   ffffffff8100a9e3:       andl    $0x7, %ecx
    0.00 :   ffffffff8100a9e6:       movb    %cl, 0x70(%rsp)
    0.00 :   ffffffff8100a9ea:       andl    $0x800, %r14d   # imm = 0x800
    0.00 :   ffffffff8100a9f1:       je      0xffffffff8100aa02 <perf_ibs_handle_irq+0x842>
    0.00 :   ffffffff8100a9f3:       movl    %r8d, %esi
    0.00 :   ffffffff8100a9f6:       shrb    $0x6, %sil
    0.00 :   ffffffff8100a9fa:       shll    $0x3, %esi
    0.00 :   ffffffff8100a9fd:       orb     %sil, 0x70(%rsp)
    0.00 :   ffffffff8100aa02:       movl    0x1a8(%rsp), %esi
    0.00 :   ffffffff8100aa09:       movq    %rdx, %r13
    0.00 :   ffffffff8100aa0c:       movzbl  %dh, %ecx
    0.00 :   ffffffff8100aa0f:       shrq    $0x10, %r13
    0.00 :   ffffffff8100aa13:       movq    %rcx, %r12
    0.00 :   ffffffff8100aa16:       andl    $0xfff8001f, %esi # imm = 0xFFF8001F
    0.00 :   ffffffff8100aa1c:       testb   $0x40, %dh
    0.00 :   ffffffff8100aa1f:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100aa26:       movl    0x15ac763(%rip), %r15d # 0xffffffff825b7190 <cache_hit_st_valid.0>
    0.00 :   ffffffff8100aa2d:       je      0xffffffff8100aa3a <perf_ibs_handle_irq+0x87a>
    0.00 :   ffffffff8100aa2f:       cmpb    $0x7, 0x70(%rsp)
    0.00 :   ffffffff8100aa34:       jne     0xffffffff8100abda <perf_ibs_handle_irq+0xa1a>
    0.00 :   ffffffff8100aa3a:       testb   %dl, %dl
    0.00 :   ffffffff8100aa3c:       jns     0xffffffff8100abc8 <perf_ibs_handle_irq+0xa08>
    0.00 :   ffffffff8100aa42:       testb   $0x10, %r13b
    0.00 :   ffffffff8100aa46:       jne     0xffffffff8100aa69 <perf_ibs_handle_irq+0x8a9>
    0.00 :   ffffffff8100aa48:       cmpb    $0x19, %dil
    0.00 :   ffffffff8100aa4c:       jne     0xffffffff8100ac35 <perf_ibs_handle_irq+0xa75>
    0.00 :   ffffffff8100aa52:       cmpb    $0xf, 0x135b5c7(%rip) # 0xffffffff82366020 <boot_cpu_data>
    0.00 :   ffffffff8100aa59:       ja      0xffffffff8100ada1 <perf_ibs_handle_irq+0xbe1>
    0.00 :   ffffffff8100aa5f:       testb   $0x21, %r13b
    0.00 :   ffffffff8100aa63:       je      0xffffffff8100adbc <perf_ibs_handle_irq+0xbfc>
    0.00 :   ffffffff8100aa69:       movzbl  0x1a8(%rsp), %r9d
    0.00 :   ffffffff8100aa72:       andl    $0x1f, %r9d
    0.00 :   ffffffff8100aa76:       cmpb    $0x2, %r9b
    0.00 :   ffffffff8100aa7a:       jne     0xffffffff8100ac00 <perf_ibs_handle_irq+0xa40>
    0.00 :   ffffffff8100aa80:       testl   %r14d, %r14d
    0.00 :   ffffffff8100aa83:       je      0xffffffff8100acdf <perf_ibs_handle_irq+0xb1f>
    0.00 :   ffffffff8100aa89:       cmpb    $0x1, 0x70(%rsp)
    0.00 :   ffffffff8100aa8e:       je      0xffffffff8100add7 <perf_ibs_handle_irq+0xc17>
    0.00 :   ffffffff8100aa94:       cmpb    $0x2, 0x70(%rsp)
    0.00 :   ffffffff8100aa99:       jne     0xffffffff8100ad5c <perf_ibs_handle_irq+0xb9c>
    0.00 :   ffffffff8100aa9f:       orl     $0x8040, %esi   # imm = 0x8040
    0.00 :   ffffffff8100aaa5:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100aaac:       testl   %r15d, %r15d
    0.00 :   ffffffff8100aaaf:       je      0xffffffff8100acb0 <perf_ibs_handle_irq+0xaf0>
    0.00 :   ffffffff8100aab5:       decl    %r15d
    0.00 :   ffffffff8100aab8:       jne     0xffffffff8100aaf4 <perf_ibs_handle_irq+0x934>
    0.00 :   ffffffff8100aaba:       movzbl  0x1a8(%rsp), %esi
    0.00 :   ffffffff8100aac2:       andl    $0x1f, %esi
    0.00 :   ffffffff8100aac5:       cmpb    $0x2, %sil
    0.00 :   ffffffff8100aac9:       jne     0xffffffff8100aaf4 <perf_ibs_handle_irq+0x934>
    0.00 :   ffffffff8100aacb:       movl    0x1a8(%rsp), %esi
    0.00 :   ffffffff8100aad2:       shrl    $0x5, %esi
    0.00 :   ffffffff8100aad5:       andl    $0x28, %esi
    0.00 :   ffffffff8100aad8:       jne     0xffffffff8100aaf4 <perf_ibs_handle_irq+0x934>
    0.00 :   ffffffff8100aada:       andl    $0x20, %r8d
    0.00 :   ffffffff8100aade:       jne     0xffffffff8100aaf4 <perf_ibs_handle_irq+0x934>
    0.00 :   ffffffff8100aae0:       testl   %r14d, %r14d
    0.00 :   ffffffff8100aae3:       jne     0xffffffff8100ac7a <perf_ibs_handle_irq+0xaba>
    0.00 :   ffffffff8100aae9:       cmpb    $0x2, 0x70(%rsp)
    0.00 :   ffffffff8100aaee:       je      0xffffffff8100ac91 <perf_ibs_handle_irq+0xad1>
    0.00 :   ffffffff8100aaf4:       andl    $0x2, %r13d
    0.00 :   ffffffff8100aaf8:       je      0xffffffff8100ab2d <perf_ibs_handle_irq+0x96d>
    0.00 :   ffffffff8100aafa:       movabsq $-0x1fc000001, %rcx # imm = 0xFFFFFFFE03FFFFFF
    0.00 :   ffffffff8100ab04:       andq    0x1a8(%rsp), %rcx
    0.00 :   ffffffff8100ab0c:       testb   $0x4, %dl
    0.00 :   ffffffff8100ab0f:       je      0xffffffff8100abec <perf_ibs_handle_irq+0xa2c>
    0.00 :   ffffffff8100ab15:       testb   $0x8, %dl
    0.00 :   ffffffff8100ab18:       je      0xffffffff8100ac21 <perf_ibs_handle_irq+0xa61>
    0.00 :   ffffffff8100ab1e:       orq     $0x50000000, %rcx # imm = 0x50000000
    0.00 :   ffffffff8100ab25:       movq    %rcx, 0x1a8(%rsp)
    0.00 :   ffffffff8100ab2d:       testb   %r12b, %r12b
    0.00 :   ffffffff8100ab30:       jns     0xffffffff8100ab47 <perf_ibs_handle_irq+0x987>
    0.00 :   ffffffff8100ab32:       movzbl  0x1ab(%rsp), %ecx
    0.00 :   ffffffff8100ab3a:       andl    $-0x4, %ecx
    0.00 :   ffffffff8100ab3d:       orl     $0x2, %ecx
    0.00 :   ffffffff8100ab40:       movb    %cl, 0x1ab(%rsp)
    0.00 :   ffffffff8100ab47:       orq     $0x8000, 0x140(%rsp) # imm = 0x8000
    0.00 :   ffffffff8100ab53:       jmp     0xffffffff8100a8a8 <perf_ibs_handle_irq+0x6e8>
    0.00 :   ffffffff8100ab58:       movzbl  0x1a8(%rsp), %ecx
    0.00 :   ffffffff8100ab60:       andl    $0x1f, %ecx
    0.00 :   ffffffff8100ab63:       cmpb    $0x2, %cl
    0.00 :   ffffffff8100ab66:       jne     0xffffffff8100a8b7 <perf_ibs_handle_irq+0x6f7>
    0.00 :   ffffffff8100ab6c:       testl   $0x1000000, %eax # imm = 0x1000000
    0.00 :   ffffffff8100ab71:       movq    0x288(%rsp), %rcx
    0.00 :   ffffffff8100ab79:       je      0xffffffff8100ac5a <perf_ibs_handle_irq+0xa9a>
    0.00 :   ffffffff8100ab7f:       movq    %rdx, %rsi
    0.00 :   ffffffff8100ab82:       shrq    $0x10, %rcx
    0.00 :   ffffffff8100ab86:       shrq    $0x20, %rsi
    0.00 :   ffffffff8100ab8a:       movw    %cx, 0x1a4(%rsp)
    0.00 :   ffffffff8100ab92:       movzwl  %si, %esi
    0.00 :   ffffffff8100ab95:       movl    %esi, 0x1a0(%rsp)
    0.00 :   ffffffff8100ab9c:       orq     $0x1004000, 0x140(%rsp) # imm = 0x1004000
    0.00 :   ffffffff8100aba8:       jmp     0xffffffff8100a8b7 <perf_ibs_handle_irq+0x6f7>
    0.00 :   ffffffff8100abad:       movq    $0x0, 0x1e8(%r10)
    0.00 :   ffffffff8100abb8:       movl    $0x10, %r11d
    0.00 :   ffffffff8100abbe:       movl    $0x10, %edx
    0.00 :   ffffffff8100abc3:       jmp     0xffffffff8100a409 <perf_ibs_handle_irq+0x249>
    0.00 :   ffffffff8100abc8:       orl     $0x140, %esi    # imm = 0x140
    0.00 :   ffffffff8100abce:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100abd5:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100abda:       orl     $0x40040, %esi  # imm = 0x40040
    0.00 :   ffffffff8100abe0:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100abe7:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100abec:       orq     $0x28000000, %rcx # imm = 0x28000000
    0.00 :   ffffffff8100abf3:       movq    %rcx, 0x1a8(%rsp)
    0.00 :   ffffffff8100abfb:       jmp     0xffffffff8100ab2d <perf_ibs_handle_irq+0x96d>
    0.00 :   ffffffff8100ac00:       movl    %esi, %r9d
    0.00 :   ffffffff8100ac03:       orl     $0x240, %esi    # imm = 0x240
    0.00 :   ffffffff8100ac09:       orl     $0x20, %r9d
    0.00 :   ffffffff8100ac0d:       testb   $0x1, %r13b
    0.00 :   ffffffff8100ac11:       cmovel  %r9d, %esi
    0.00 :   ffffffff8100ac15:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100ac1c:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ac21:       orq     $0x48000000, %rcx # imm = 0x48000000
    0.00 :   ffffffff8100ac28:       movq    %rcx, 0x1a8(%rsp)
    0.00 :   ffffffff8100ac30:       jmp     0xffffffff8100ab2d <perf_ibs_handle_irq+0x96d>
    0.00 :   ffffffff8100ac35:       orl     $0x440, %esi    # imm = 0x440
    0.00 :   ffffffff8100ac3b:       testl   %r15d, %r15d
    0.00 :   ffffffff8100ac3e:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100ac45:       jne     0xffffffff8100aab5 <perf_ibs_handle_irq+0x8f5>
    0.00 :   ffffffff8100ac4b:       movl    $0x1, 0x15ac53b(%rip) # 0xffffffff825b7190 <cache_hit_st_valid.0>
    0.00 :   ffffffff8100ac55:       jmp     0xffffffff8100aaba <perf_ibs_handle_irq+0x8fa>
    0.00 :   ffffffff8100ac5a:       testb   $0x40, %ah
    0.00 :   ffffffff8100ac5d:       je      0xffffffff8100ab9c <perf_ibs_handle_irq+0x9dc>
    0.00 :   ffffffff8100ac63:       movq    %rdx, %rcx
    0.00 :   ffffffff8100ac66:       shrq    $0x20, %rcx
    0.00 :   ffffffff8100ac6a:       movzwl  %cx, %ecx
    0.00 :   ffffffff8100ac6d:       movq    %rcx, 0x1a0(%rsp)
    0.00 :   ffffffff8100ac75:       jmp     0xffffffff8100ab9c <perf_ibs_handle_irq+0x9dc>
    0.00 :   ffffffff8100ac7a:       movzbl  0x70(%rsp), %ecx
    0.00 :   ffffffff8100ac7f:       movl    $0x26, %esi
    0.00 :   ffffffff8100ac84:       shrq    %cl, %rsi
    0.00 :   ffffffff8100ac87:       andb    $0x1, %sil
    0.00 :   ffffffff8100ac8b:       je      0xffffffff8100aaf4 <perf_ibs_handle_irq+0x934>
    0.00 :   ffffffff8100ac91:       movzbl  0x1aa(%rsp), %ecx
    0.00 :   ffffffff8100ac99:       andl    $0x7, %ecx
    0.00 :   ffffffff8100ac9c:       orl     $-0x80, %ecx
    0.00 :   ffffffff8100ac9f:       movb    %cl, 0x1aa(%rsp)
    0.00 :   ffffffff8100aca6:       jmp     0xffffffff8100aaf4 <perf_ibs_handle_irq+0x934>
    0.00 :   ffffffff8100acab:       callq   0xffffffff81b6af40 <__stack_chk_fail>
    0.00 :   ffffffff8100acb0:       cmpb    $0x19, %dil
    0.00 :   ffffffff8100acb4:       jne     0xffffffff8100ac4b <perf_ibs_handle_irq+0xa8b>
    0.00 :   ffffffff8100acb6:       movzbl  0x135b363(%rip), %esi # 0xffffffff82366020 <boot_cpu_data>
    0.00 :   ffffffff8100acbd:       leal    -0x20(%rsi), %edi
    0.00 :   ffffffff8100acc0:       cmpb    $0x3f, %dil
    0.00 :   ffffffff8100acc4:       jbe     0xffffffff8100acd0 <perf_ibs_handle_irq+0xb10>
    0.00 :   ffffffff8100acc6:       cmpb    $0xf, %sil
    0.00 :   ffffffff8100acca:       ja      0xffffffff8100ac4b <perf_ibs_handle_irq+0xa8b>
    0.00 :   ffffffff8100acd0:       movl    $0xffffffff, 0x15ac4b6(%rip) # imm = 0xFFFFFFFF
         : 573              # 0xffffffff825b7190 <cache_hit_st_valid.0>
    0.00 :   ffffffff8100acda:       jmp     0xffffffff8100aaf4 <perf_ibs_handle_irq+0x934>
    0.00 :   ffffffff8100acdf:       cmpb    $0x2, 0x70(%rsp)
    0.00 :   ffffffff8100ace4:       je      0xffffffff8100ae1f <perf_ibs_handle_irq+0xc5f>
    0.00 :   ffffffff8100acea:       movzbl  0x70(%rsp), %ecx
    0.00 :   ffffffff8100acef:       cmpb    $0x4, %cl
    0.00 :   ffffffff8100acf2:       je      0xffffffff8100ae0d <perf_ibs_handle_irq+0xc4d>
    0.00 :   ffffffff8100acf8:       cmpb    $0x3, %cl
    0.00 :   ffffffff8100acfb:       je      0xffffffff8100ade9 <perf_ibs_handle_irq+0xc29>
    0.00 :   ffffffff8100ad01:       cmpb    $0x7, 0x70(%rsp)
    0.00 :   ffffffff8100ad06:       jne     0xffffffff8100ac00 <perf_ibs_handle_irq+0xa40>
    0.00 :   ffffffff8100ad0c:       movabsq $-0x1e0007ffe1, %rsi # imm = 0xFFFFFFE1FFF8001F
    0.00 :   ffffffff8100ad16:       andq    0x1a8(%rsp), %rsi
    0.00 :   ffffffff8100ad1e:       movabsq $0x1400020000, %r9 # imm = 0x1400020000
    0.00 :   ffffffff8100ad28:       orq     %r9, %rsi
    0.00 :   ffffffff8100ad2b:       testb   $0x10, %r8b
    0.00 :   ffffffff8100ad2f:       movq    %rsi, 0x1a8(%rsp)
    0.00 :   ffffffff8100ad37:       je      0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ad3d:       movzwl  0x1ac(%rsp), %esi
    0.00 :   ffffffff8100ad45:       andw    $0xc7df, %si    # imm = 0xC7DF
    0.00 :   ffffffff8100ad4a:       orw     $0x1020, %si    # imm = 0x1020
    0.00 :   ffffffff8100ad4f:       movw    %si, 0x1ac(%rsp)
    0.00 :   ffffffff8100ad57:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ad5c:       cmpb    $0x5, 0x70(%rsp)
    0.00 :   ffffffff8100ad61:       je      0xffffffff8100ae0d <perf_ibs_handle_irq+0xc4d>
    0.00 :   ffffffff8100ad67:       cmpb    $0x3, 0x70(%rsp)
    0.00 :   ffffffff8100ad6c:       je      0xffffffff8100ade9 <perf_ibs_handle_irq+0xc29>
    0.00 :   ffffffff8100ad6e:       cmpb    $0x6, 0x70(%rsp)
    0.00 :   ffffffff8100ad73:       je      0xffffffff8100ae3b <perf_ibs_handle_irq+0xc7b>
    0.00 :   ffffffff8100ad79:       cmpb    $0x8, 0x70(%rsp)
    0.00 :   ffffffff8100ad7e:       jne     0xffffffff8100ad01 <perf_ibs_handle_irq+0xb41>
    0.00 :   ffffffff8100ad80:       movzbl  0x1ac(%rsp), %esi
    0.00 :   ffffffff8100ad88:       andl    $-0x1f, %esi
    0.00 :   ffffffff8100ad8b:       orl     $0x12, %esi
    0.00 :   ffffffff8100ad8e:       testb   $0x10, %r8b
    0.00 :   ffffffff8100ad92:       movb    %sil, 0x1ac(%rsp)
    0.00 :   ffffffff8100ad9a:       jne     0xffffffff8100ad3d <perf_ibs_handle_irq+0xb7d>
    0.00 :   ffffffff8100ad9c:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ada1:       orl     $0x440, %esi    # imm = 0x440
    0.00 :   ffffffff8100ada7:       testl   %r15d, %r15d
    0.00 :   ffffffff8100adaa:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100adb1:       jne     0xffffffff8100aab5 <perf_ibs_handle_irq+0x8f5>
    0.00 :   ffffffff8100adb7:       jmp     0xffffffff8100acb6 <perf_ibs_handle_irq+0xaf6>
    0.00 :   ffffffff8100adbc:       orl     $0x440, %esi    # imm = 0x440
    0.00 :   ffffffff8100adc2:       testl   %r15d, %r15d
    0.00 :   ffffffff8100adc5:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100adcc:       jne     0xffffffff8100aab5 <perf_ibs_handle_irq+0x8f5>
    0.00 :   ffffffff8100add2:       jmp     0xffffffff8100acd0 <perf_ibs_handle_irq+0xb10>
    0.00 :   ffffffff8100add7:       orl     $0x840, %esi    # imm = 0x840
    0.00 :   ffffffff8100addd:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100ade4:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ade9:       movl    %esi, %r9d
    0.00 :   ffffffff8100adec:       orl     $0x1040, %esi   # imm = 0x1040
    0.00 :   ffffffff8100adf2:       orl     $0x2040, %r9d   # imm = 0x2040
    0.00 :   ffffffff8100adf9:       testb   $0x10, %r8b
    0.00 :   ffffffff8100adfd:       cmovnel %r9d, %esi
    0.00 :   ffffffff8100ae01:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100ae08:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ae0d:       orl     $0x10040, %esi  # imm = 0x10040
    0.00 :   ffffffff8100ae13:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100ae1a:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ae1f:       orl     $0x8840, %esi   # imm = 0x8840
    0.00 :   ffffffff8100ae25:       movl    %esi, 0x1a8(%rsp)
    0.00 :   ffffffff8100ae2c:       jmp     0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ae31:       movq    0x50(%rsp), %r11
    0.00 :   ffffffff8100ae36:       jmp     0xffffffff8100a836 <perf_ibs_handle_irq+0x676>
    0.00 :   ffffffff8100ae3b:       movzbl  0x1ac(%rsp), %esi
    0.00 :   ffffffff8100ae43:       andl    $-0x1f, %esi
    0.00 :   ffffffff8100ae46:       orl     $0x1c, %esi
    0.00 :   ffffffff8100ae49:       testb   $0x10, %r8b
    0.00 :   ffffffff8100ae4d:       movb    %sil, 0x1ac(%rsp)
    0.00 :   ffffffff8100ae55:       je      0xffffffff8100aaac <perf_ibs_handle_irq+0x8ec>
    0.00 :   ffffffff8100ae5b:       jmp     0xffffffff8100ad3d <perf_ibs_handle_irq+0xb7d>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8107a550 <recalc_sigpending>:
         : 5                ; recalc_sigpending():
    0.00 :   ffffffff8107a550:       pushq   %rbp
  100.00 :   ffffffff8107a551:       movq    %rsp, %rbp
    0.00 :   ffffffff8107a554:       movq    %gs:0x22700, %rdi
    0.00 :   ffffffff8107a55d:       testq   $0x9a0000, 0x938(%rdi) # imm = 0x9A0000
    0.00 :   ffffffff8107a568:       jne     0xffffffff8107a5b4 <recalc_sigpending+0x64>
    0.00 :   ffffffff8107a56a:       movq    0x548(%rdi), %rax
    0.00 :   ffffffff8107a571:       notq    %rax
    0.00 :   ffffffff8107a574:       movq    %rax, %rdx
    0.00 :   ffffffff8107a577:       andq    0x370(%rdi), %rdx
    0.00 :   ffffffff8107a57e:       jne     0xffffffff8107a5b4 <recalc_sigpending+0x64>
    0.00 :   ffffffff8107a580:       movq    0x8f8(%rdi), %rdx
    0.00 :   ffffffff8107a587:       andq    0x3a8(%rdx), %rax
    0.00 :   ffffffff8107a58e:       jne     0xffffffff8107a5b4 <recalc_sigpending+0x64>
    0.00 :   ffffffff8107a590:       testb   $0x40, 0x294(%rdi)
    0.00 :   ffffffff8107a597:       jne     0xffffffff8107a5b4 <recalc_sigpending+0x64>
    0.00 :   ffffffff8107a599:       nop
    0.00 :   ffffffff8107a59b:       movq    %gs:0x22700, %rax
    0.00 :   ffffffff8107a5a4:       lock
    0.00 :   ffffffff8107a5a5:       andb    $-0x5, (%rax)
    0.00 :   ffffffff8107a5a8:       popq    %rbp
    0.00 :   ffffffff8107a5a9:       xorl    %eax, %eax
    0.00 :   ffffffff8107a5ab:       xorl    %edx, %edx
    0.00 :   ffffffff8107a5ad:       xorl    %edi, %edi
    0.00 :   ffffffff8107a5af:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8107a5b4:       lock
    0.00 :   ffffffff8107a5b5:       orb     $0x4, (%rdi)
    0.00 :   ffffffff8107a5b8:       popq    %rbp
    0.00 :   ffffffff8107a5b9:       xorl    %eax, %eax
    0.00 :   ffffffff8107a5bb:       xorl    %edx, %edx
    0.00 :   ffffffff8107a5bd:       xorl    %edi, %edi
    0.00 :   ffffffff8107a5bf:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8107a5c4:       callq   0xffffffff8110d580 <freezing_slow_path>
    0.00 :   ffffffff8107a5c9:       testb   %al, %al
    0.00 :   ffffffff8107a5cb:       je      0xffffffff8107a59b <recalc_sigpending+0x4b>
    0.00 :   ffffffff8107a5cd:       popq    %rbp
    0.00 :   ffffffff8107a5ce:       xorl    %eax, %eax
    0.00 :   ffffffff8107a5d0:       xorl    %edx, %edx
    0.00 :   ffffffff8107a5d2:       xorl    %edi, %edi
    0.00 :   ffffffff8107a5d4:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81b68270 <default_do_nmi>:
         : 5                ; default_do_nmi():
    0.00 :   ffffffff81b68270:       pushq   %rbp
    0.00 :   ffffffff81b68271:       movq    %gs:0x7e4b1e7f(%rip), %rax
    0.00 :   ffffffff81b68279:       movq    %rsp, %rbp
    0.00 :   ffffffff81b6827c:       pushq   %r14
    0.00 :   ffffffff81b6827e:       pushq   %r13
    0.00 :   ffffffff81b68280:       pushq   %r12
    0.00 :   ffffffff81b68282:       movl    $0x1, %r12d
    0.00 :   ffffffff81b68288:       pushq   %rbx
    0.00 :   ffffffff81b68289:       cmpq    %rax, 0x80(%rdi)
    0.00 :   ffffffff81b68290:       movq    %rdi, %rbx
    0.00 :   ffffffff81b68293:       je      0xffffffff81b682a7 <default_do_nmi+0x37>
    0.00 :   ffffffff81b68295:       movq    0x80(%rdi), %rax
    0.00 :   ffffffff81b6829c:       xorl    %r12d, %r12d
    0.00 :   ffffffff81b6829f:       movb    $0x0, %gs:0x7e4b1e59(%rip)
    0.00 :   ffffffff81b682a7:       xorl    %edi, %edi
    0.00 :   ffffffff81b682a9:       movq    %rbx, %rsi
    0.00 :   ffffffff81b682ac:       movq    %rax, %gs:0x7e4b1e44(%rip)
    0.00 :   ffffffff81b682b4:       callq   0xffffffff81020bb0 <nmi_handle>
    0.00 :   ffffffff81b682b9:       addl    %eax, %gs:0x7e4b1e60(%rip)
  100.00 :   ffffffff81b682c0:       testl   %eax, %eax
    0.00 :   ffffffff81b682c2:       je      0xffffffff81b682d7 <default_do_nmi+0x67>
    0.00 :   ffffffff81b682c4:       jmp     0xffffffff81b683e9 <default_do_nmi+0x179>
    0.00 :   ffffffff81b682c9:       movq    %rbx, %rdi
    0.00 :   ffffffff81b682cc:       nopl    (%rax)
    0.00 :   ffffffff81b682d0:       callq   0xffffffff81046590 <run_crash_ipi_callback>
    0.00 :   ffffffff81b682d5:       pause
    0.00 :   ffffffff81b682d7:       movq    $-0x7da478d0, %rdi # imm = 0x825B8730
    0.00 :   ffffffff81b682de:       callq   0xffffffff81b77350 <_raw_spin_trylock>
    0.00 :   ffffffff81b682e3:       testl   %eax, %eax
    0.00 :   ffffffff81b682e5:       je      0xffffffff81b682c9 <default_do_nmi+0x59>
    0.00 :   ffffffff81b682e7:       movq    0x5b9faa(%rip), %rax # 0xffffffff82122298 <x86_platform+0x38>
    0.00 :   ffffffff81b682ee:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81b682f3:       movzbl  %al, %r14d
    0.00 :   ffffffff81b682f7:       cmpb    $0x3f, %r14b
    0.00 :   ffffffff81b682fb:       movl    %r14d, %r13d
    0.00 :   ffffffff81b682fe:       jbe     0xffffffff81b68397 <default_do_nmi+0x127>
    0.00 :   ffffffff81b68304:       testb   %r14b, %r14b
    0.00 :   ffffffff81b68307:       movq    %rbx, %rsi
    0.00 :   ffffffff81b6830a:       js      0xffffffff81b6840f <default_do_nmi+0x19f>
    0.00 :   ffffffff81b68310:       movl    $0x3, %edi
    0.00 :   ffffffff81b68315:       callq   0xffffffff81020bb0 <nmi_handle>
    0.00 :   ffffffff81b6831a:       testl   %eax, %eax
    0.00 :   ffffffff81b6831c:       jne     0xffffffff81b6836f <default_do_nmi+0xff>
    0.00 :   ffffffff81b6831e:       movl    %r14d, %esi
    0.00 :   ffffffff81b68321:       movq    $-0x7df8eb08, %rdi # imm = 0x820714F8
    0.00 :   ffffffff81b68328:       movl    %gs:0x7e4ba3dd(%rip), %edx
    0.00 :   ffffffff81b6832f:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81b68334:       movq    %rbx, %rdi
    0.00 :   ffffffff81b68337:       callq   0xffffffff810206a0 <show_regs>
    0.00 :   ffffffff81b6833c:       movl    0xa5031e(%rip), %eax # 0xffffffff825b8660 <panic_on_io_nmi>
    0.00 :   ffffffff81b68342:       testl   %eax, %eax
    0.00 :   ffffffff81b68344:       jne     0xffffffff81b684cc <default_do_nmi+0x25c>
    0.00 :   ffffffff81b6834a:       andl    $0x7, %r13d
    0.00 :   ffffffff81b6834e:       movl    %r13d, %eax
    0.00 :   ffffffff81b68351:       orl     $0x8, %eax
    0.00 :   ffffffff81b68354:       outb    %al, $0x61
    0.00 :   ffffffff81b68356:       movl    $0x4e1f, %ebx   # imm = 0x4E1F
    0.00 :   ffffffff81b6835b:       movl    $0x68dbc, %edi  # imm = 0x68DBC
    0.00 :   ffffffff81b68360:       callq   0xffffffff81b63330 <__const_udelay>
    0.00 :   ffffffff81b68365:       decq    %rbx
    0.00 :   ffffffff81b68368:       jne     0xffffffff81b6835b <default_do_nmi+0xeb>
    0.00 :   ffffffff81b6836a:       movl    %r13d, %eax
    0.00 :   ffffffff81b6836d:       outb    %al, $0x61
    0.00 :   ffffffff81b6836f:       movq    $-0x7da478d0, %rdi # imm = 0x825B8730
    0.00 :   ffffffff81b68376:       incl    %gs:0x7e4b1dab(%rip)
    0.00 :   ffffffff81b6837d:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff81b68382:       popq    %rbx
    0.00 :   ffffffff81b68383:       popq    %r12
    0.00 :   ffffffff81b68385:       popq    %r13
    0.00 :   ffffffff81b68387:       popq    %r14
    0.00 :   ffffffff81b68389:       popq    %rbp
    0.00 :   ffffffff81b6838a:       xorl    %eax, %eax
    0.00 :   ffffffff81b6838c:       xorl    %edx, %edx
    0.00 :   ffffffff81b6838e:       xorl    %esi, %esi
    0.00 :   ffffffff81b68390:       xorl    %edi, %edi
    0.00 :   ffffffff81b68392:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b68397:       movq    $-0x7da478d0, %rdi # imm = 0x825B8730
    0.00 :   ffffffff81b6839e:       callq   0xffffffff81b773a0 <_raw_spin_unlock>
    0.00 :   ffffffff81b683a3:       testb   %r12b, %r12b
    0.00 :   ffffffff81b683a6:       je      0xffffffff81b683cf <default_do_nmi+0x15f>
    0.00 :   ffffffff81b683a8:       movb    %gs:0x7e4b1d51(%rip), %al
    0.00 :   ffffffff81b683af:       testb   %al, %al
    0.00 :   ffffffff81b683b1:       je      0xffffffff81b683cf <default_do_nmi+0x15f>
    0.00 :   ffffffff81b683b3:       popq    %rbx
    0.00 :   ffffffff81b683b4:       incl    %gs:0x7e4b1d71(%rip)
    0.00 :   ffffffff81b683bb:       popq    %r12
    0.00 :   ffffffff81b683bd:       popq    %r13
    0.00 :   ffffffff81b683bf:       popq    %r14
    0.00 :   ffffffff81b683c1:       popq    %rbp
    0.00 :   ffffffff81b683c2:       xorl    %eax, %eax
    0.00 :   ffffffff81b683c4:       xorl    %edx, %edx
    0.00 :   ffffffff81b683c6:       xorl    %esi, %esi
    0.00 :   ffffffff81b683c8:       xorl    %edi, %edi
    0.00 :   ffffffff81b683ca:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b683cf:       movq    %rbx, %rsi
    0.00 :   ffffffff81b683d2:       movl    $0x1, %edi
    0.00 :   ffffffff81b683d7:       callq   0xffffffff81020bb0 <nmi_handle>
    0.00 :   ffffffff81b683dc:       testl   %eax, %eax
    0.00 :   ffffffff81b683de:       je      0xffffffff81b6845d <default_do_nmi+0x1ed>
    0.00 :   ffffffff81b683e0:       addl    %eax, %gs:0x7e4b1d3d(%rip)
    0.00 :   ffffffff81b683e7:       jmp     0xffffffff81b683fa <default_do_nmi+0x18a>
    0.00 :   ffffffff81b683e9:       decl    %eax
    0.00 :   ffffffff81b683eb:       nopl    (%rax,%rax)
    0.00 :   ffffffff81b683f0:       jle     0xffffffff81b683fa <default_do_nmi+0x18a>
    0.00 :   ffffffff81b683f2:       movb    $0x1, %gs:0x7e4b1d06(%rip)
    0.00 :   ffffffff81b683fa:       popq    %rbx
    0.00 :   ffffffff81b683fb:       popq    %r12
    0.00 :   ffffffff81b683fd:       popq    %r13
    0.00 :   ffffffff81b683ff:       popq    %r14
    0.00 :   ffffffff81b68401:       popq    %rbp
    0.00 :   ffffffff81b68402:       xorl    %eax, %eax
    0.00 :   ffffffff81b68404:       xorl    %edx, %edx
    0.00 :   ffffffff81b68406:       xorl    %esi, %esi
    0.00 :   ffffffff81b68408:       xorl    %edi, %edi
    0.00 :   ffffffff81b6840a:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b6840f:       movl    $0x2, %edi
    0.00 :   ffffffff81b68414:       callq   0xffffffff81020bb0 <nmi_handle>
    0.00 :   ffffffff81b68419:       testl   %eax, %eax
    0.00 :   ffffffff81b6841b:       jne     0xffffffff81b6836f <default_do_nmi+0xff>
    0.00 :   ffffffff81b68421:       movl    %r14d, %esi
    0.00 :   ffffffff81b68424:       movq    $-0x7df8eb78, %rdi # imm = 0x82071488
    0.00 :   ffffffff81b6842b:       movl    %gs:0x7e4ba2da(%rip), %edx
    0.00 :   ffffffff81b68432:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81b68437:       movl    0xa50227(%rip), %edx # 0xffffffff825b8664 <panic_on_unrecovered_nmi>
    0.00 :   ffffffff81b6843d:       testl   %edx, %edx
    0.00 :   ffffffff81b6843f:       jne     0xffffffff81b684b8 <default_do_nmi+0x248>
    0.00 :   ffffffff81b68441:       movq    $-0x7df8eb38, %rdi # imm = 0x820714C8
    0.00 :   ffffffff81b68448:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81b6844d:       movl    %r13d, %eax
    0.00 :   ffffffff81b68450:       andl    $0xb, %eax
    0.00 :   ffffffff81b68453:       orl     $0x4, %eax
    0.00 :   ffffffff81b68456:       outb    %al, $0x61
    0.00 :   ffffffff81b68458:       jmp     0xffffffff81b6836f <default_do_nmi+0xff>
    0.00 :   ffffffff81b6845d:       movl    %r14d, %esi
    0.00 :   ffffffff81b68460:       movq    $-0x7df8eaa0, %rdi # imm = 0x82071560
    0.00 :   ffffffff81b68467:       incl    %gs:0x7e4b1cb6(%rip)
    0.00 :   ffffffff81b6846e:       movl    %gs:0x7e4ba297(%rip), %edx
    0.00 :   ffffffff81b68475:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81b6847a:       movl    0xa502ac(%rip), %eax # 0xffffffff825b872c <unknown_nmi_panic>
    0.00 :   ffffffff81b68480:       orl     0xa501de(%rip), %eax # 0xffffffff825b8664 <panic_on_unrecovered_nmi>
    0.00 :   ffffffff81b68486:       je      0xffffffff81b68497 <default_do_nmi+0x227>
    0.00 :   ffffffff81b68488:       movq    $-0x7df8ec0a, %rsi # imm = 0x820713F6
    0.00 :   ffffffff81b6848f:       movq    %rbx, %rdi
    0.00 :   ffffffff81b68492:       callq   0xffffffff8106a5a0 <nmi_panic>
    0.00 :   ffffffff81b68497:       movq    $-0x7df8eb38, %rdi # imm = 0x820714C8
    0.00 :   ffffffff81b6849e:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81b684a3:       popq    %rbx
    0.00 :   ffffffff81b684a4:       popq    %r12
    0.00 :   ffffffff81b684a6:       popq    %r13
    0.00 :   ffffffff81b684a8:       popq    %r14
    0.00 :   ffffffff81b684aa:       popq    %rbp
    0.00 :   ffffffff81b684ab:       xorl    %eax, %eax
    0.00 :   ffffffff81b684ad:       xorl    %edx, %edx
    0.00 :   ffffffff81b684af:       xorl    %esi, %esi
    0.00 :   ffffffff81b684b1:       xorl    %edi, %edi
    0.00 :   ffffffff81b684b3:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81b684b8:       movq    $-0x7df8ec0a, %rsi # imm = 0x820713F6
    0.00 :   ffffffff81b684bf:       movq    %rbx, %rdi
    0.00 :   ffffffff81b684c2:       callq   0xffffffff8106a5a0 <nmi_panic>
    0.00 :   ffffffff81b684c7:       jmp     0xffffffff81b68441 <default_do_nmi+0x1d1>
    0.00 :   ffffffff81b684cc:       movq    $-0x7df8eac0, %rsi # imm = 0x82071540
    0.00 :   ffffffff81b684d3:       movq    %rbx, %rdi
    0.00 :   ffffffff81b684d6:       callq   0xffffffff8106a5a0 <nmi_panic>
    0.00 :   ffffffff81b684db:       jmp     0xffffffff81b6836f <default_do_nmi+0xff>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81020bb0 <nmi_handle>:
         : 5                ; nmi_handle():
    0.00 :   ffffffff81020bb0:       pushq   %rbp
    0.00 :   ffffffff81020bb1:       movq    %rsp, %rbp
    0.00 :   ffffffff81020bb4:       pushq   %r15
    0.00 :   ffffffff81020bb6:       pushq   %r14
    0.00 :   ffffffff81020bb8:       pushq   %r13
    0.00 :   ffffffff81020bba:       pushq   %r12
    0.00 :   ffffffff81020bbc:       pushq   %rbx
    0.00 :   ffffffff81020bbd:       movl    %edi, %ebx
    0.00 :   ffffffff81020bbf:       subq    $0x10, %rsp
    0.00 :   ffffffff81020bc3:       movl    %edi, -0x2c(%rbp)
    0.00 :   ffffffff81020bc6:       movq    %rsi, -0x38(%rbp)
    0.00 :   ffffffff81020bca:       callq   0xffffffff810f5f20 <__rcu_read_lock>
    0.00 :   ffffffff81020bcf:       movl    %ebx, %eax
    0.00 :   ffffffff81020bd1:       xorl    %r12d, %r12d
    0.00 :   ffffffff81020bd4:       leaq    (%rax,%rax,2), %r13
    0.00 :   ffffffff81020bd8:       shlq    $0x3, %r13
    0.00 :   ffffffff81020bdc:       movq    -0x7dde2e98(%r13), %r15
    0.00 :   ffffffff81020be3:       addq    $-0x7dde2e98, %r13 # imm = 0x8221D168
    0.00 :   ffffffff81020bea:       cmpq    %r13, %r15
    0.00 :   ffffffff81020bed:       je      0xffffffff81020c47 <nmi_handle+0x97>
    0.00 :   ffffffff81020bef:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff81020bf4:       movq    %rax, %r14
    0.00 :   ffffffff81020bf7:       movq    -0x38(%rbp), %rsi
    0.00 :   ffffffff81020bfb:       movl    -0x2c(%rbp), %edi
    0.00 :   ffffffff81020bfe:       movq    0x10(%r15), %rax
    0.00 :   ffffffff81020c02:       callq   0xffffffff81b78180 <__x86_indirect_thunk_rax>
    0.00 :   ffffffff81020c07:       addl    %eax, %r12d
    0.00 :   ffffffff81020c0a:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff81020c0f:       subq    %r14, %rax
    0.00 :   ffffffff81020c12:       cmpq    0x11fc52f(%rip), %rax # 0xffffffff8221d148 <nmi_longest_ns>
    0.00 :   ffffffff81020c19:       movq    %rax, %rbx
    0.00 :   ffffffff81020c1c:       jb      0xffffffff81020c3f <nmi_handle+0x8f>
    0.00 :   ffffffff81020c1e:       cmpq    0x18(%r15), %rax
    0.00 :   ffffffff81020c22:       jb      0xffffffff81020c3f <nmi_handle+0x8f>
    0.00 :   ffffffff81020c24:       movq    %rax, 0x18(%r15)
    0.00 :   ffffffff81020c28:       movq    $-0x7e1fd420, %rsi # imm = 0x81E02BE0
    0.00 :   ffffffff81020c2f:       movq    $-0x7dde2ee0, %rdi # imm = 0x8221D120
    0.00 :   ffffffff81020c36:       callq   0xffffffff81b53530 <___ratelimit>
    0.00 :   ffffffff81020c3b:       testl   %eax, %eax
    0.00 :   ffffffff81020c3d:       jne     0xffffffff81020c6a <nmi_handle+0xba>
    0.00 :   ffffffff81020c3f:       movq    (%r15), %r15
    0.00 :   ffffffff81020c42:       cmpq    %r13, %r15
    0.00 :   ffffffff81020c45:       jne     0xffffffff81020bef <nmi_handle+0x3f>
  100.00 :   ffffffff81020c47:       callq   0xffffffff810fb830 <__rcu_read_unlock>
    0.00 :   ffffffff81020c4c:       addq    $0x10, %rsp
    0.00 :   ffffffff81020c50:       movl    %r12d, %eax
    0.00 :   ffffffff81020c53:       popq    %rbx
    0.00 :   ffffffff81020c54:       popq    %r12
    0.00 :   ffffffff81020c56:       popq    %r13
    0.00 :   ffffffff81020c58:       popq    %r14
    0.00 :   ffffffff81020c5a:       popq    %r15
    0.00 :   ffffffff81020c5c:       popq    %rbp
    0.00 :   ffffffff81020c5d:       xorl    %edx, %edx
    0.00 :   ffffffff81020c5f:       xorl    %ecx, %ecx
    0.00 :   ffffffff81020c61:       xorl    %esi, %esi
    0.00 :   ffffffff81020c63:       xorl    %edi, %edi
    0.00 :   ffffffff81020c65:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff81020c6a:       movabsq $0x431bde82d7b634db, %rax # imm = 0x431BDE82D7B634DB
    0.00 :   ffffffff81020c74:       movq    0x10(%r15), %rsi
    0.00 :   ffffffff81020c78:       movq    $-0x7df8ebc0, %rdi # imm = 0x82071440
    0.00 :   ffffffff81020c7f:       mulq    %rbx
    0.00 :   ffffffff81020c82:       shrq    $0x12, %rdx
    0.00 :   ffffffff81020c86:       imulq   $0xf4240, %rdx, %rax # imm = 0xF4240
    0.00 :   ffffffff81020c8d:       subl    %eax, %ebx
    0.00 :   ffffffff81020c8f:       imulq   $0x10624dd3, %rbx, %rcx # imm = 0x10624DD3
    0.00 :   ffffffff81020c96:       shrq    $0x26, %rcx
    0.00 :   ffffffff81020c9a:       callq   0xffffffff810da920 <_printk>
    0.00 :   ffffffff81020c9f:       jmp     0xffffffff81020c3f <nmi_handle+0x8f>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff81006870 <arch_perf_update_userpage>:
         : 5                ; arch_perf_update_userpage():
    0.00 :   ffffffff81006870:       pushq   %rbp
    0.00 :   ffffffff81006871:       movq    %rsp, %rbp
    0.00 :   ffffffff81006874:       subq    $0x30, %rsp
    0.00 :   ffffffff81006878:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff8100687c:       movq    %r12, -0x10(%rbp)
    0.00 :   ffffffff81006880:       movq    %rsi, %rbx
    0.00 :   ffffffff81006883:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff81006887:       movq    %rdi, %r12
    0.00 :   ffffffff8100688a:       movq    %rdx, %r13
    0.00 :   ffffffff8100688d:       movq    %gs:0x28, %rax
    0.00 :   ffffffff81006896:       movq    %rax, -0x20(%rbp)
    0.00 :   ffffffff8100689a:       xorl    %eax, %eax
    0.00 :   ffffffff8100689c:       movzbl  0x28(%rsi), %eax
    0.00 :   ffffffff810068a0:       movq    $0x0, -0x30(%rbp)
    0.00 :   ffffffff810068a8:       movq    $0x0, -0x28(%rbp)
    0.00 :   ffffffff810068b0:       movl    %eax, %edx
    0.00 :   ffffffff810068b2:       andl    $-0x1d, %eax
    0.00 :   ffffffff810068b5:       andl    $-0x19, %edx
    0.00 :   ffffffff810068b8:       movb    %dl, 0x28(%rsi)
    0.00 :   ffffffff810068bb:       movl    0x194(%rdi), %ecx
    0.00 :   ffffffff810068c1:       shrl    $0x1f, %ecx
    0.00 :   ffffffff810068c4:       movl    %ecx, %edx
    0.00 :   ffffffff810068c6:       shll    $0x2, %edx
    0.00 :   ffffffff810068c9:       orl     %edx, %eax
    0.00 :   ffffffff810068cb:       movb    %al, 0x28(%rsi)
    0.00 :   ffffffff810068ce:       movl    0x135d970(%rip), %eax # 0xffffffff82364244 <x86_pmu+0xa4>
    0.00 :   ffffffff810068d4:       movw    %ax, 0x30(%rsi)
    0.00 :   ffffffff810068d8:       callq   0xffffffff8102a120 <using_native_sched_clock>
    0.00 :   ffffffff810068dd:       testb   %al, %al
    0.00 :   ffffffff810068df:       jne     0xffffffff8100690c <arch_perf_update_userpage+0x9c>
    0.00 :   ffffffff810068e1:       movq    -0x20(%rbp), %rax
    0.00 :   ffffffff810068e5:       subq    %gs:0x28, %rax
    0.00 :   ffffffff810068ee:       jne     0xffffffff8100696b <arch_perf_update_userpage+0xfb>
    0.00 :   ffffffff810068f0:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff810068f4:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff810068f8:       movq    -0x8(%rbp), %r13
    0.00 :   ffffffff810068fc:       leave
    0.00 :   ffffffff810068fd:       xorl    %eax, %eax
  100.00 :   ffffffff810068ff:       xorl    %edx, %edx
    0.00 :   ffffffff81006901:       xorl    %ecx, %ecx
    0.00 :   ffffffff81006903:       xorl    %esi, %esi
    0.00 :   ffffffff81006905:       xorl    %edi, %edi
    0.00 :   ffffffff81006907:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
    0.00 :   ffffffff8100690c:       callq   0xffffffff810d1c10 <sched_clock_stable>
    0.00 :   ffffffff81006911:       testl   %eax, %eax
    0.00 :   ffffffff81006913:       je      0xffffffff810068e1 <arch_perf_update_userpage+0x71>
    0.00 :   ffffffff81006915:       leaq    -0x30(%rbp), %rdi
    0.00 :   ffffffff81006919:       callq   0xffffffff81029fe0 <cyc2ns_read_begin>
    0.00 :   ffffffff8100691e:       movzbl  0x28(%rbx), %edx
    0.00 :   ffffffff81006922:       movq    0x135ffdf(%rip), %rax # 0xffffffff82366908 <__sched_clock_offset>
    0.00 :   ffffffff81006929:       addq    -0x28(%rbp), %rax
    0.00 :   ffffffff8100692d:       movl    %edx, %ecx
    0.00 :   ffffffff8100692f:       orl     $0x8, %ecx
    0.00 :   ffffffff81006932:       movb    %cl, 0x28(%rbx)
    0.00 :   ffffffff81006935:       movl    -0x30(%rbp), %ecx
    0.00 :   ffffffff81006938:       movl    %ecx, 0x34(%rbx)
    0.00 :   ffffffff8100693b:       movl    -0x2c(%rbp), %ecx
    0.00 :   ffffffff8100693e:       movw    %cx, 0x32(%rbx)
    0.00 :   ffffffff81006942:       movq    %rax, %rcx
    0.00 :   ffffffff81006945:       subq    %r13, %rcx
    0.00 :   ffffffff81006948:       movq    %rcx, 0x38(%rbx)
    0.00 :   ffffffff8100694c:       testb   $0x2, 0x103(%r12)
    0.00 :   ffffffff81006955:       jne     0xffffffff81006961 <arch_perf_update_userpage+0xf1>
    0.00 :   ffffffff81006957:       orl     $0x18, %edx
    0.00 :   ffffffff8100695a:       movq    %rax, 0x40(%rbx)
    0.00 :   ffffffff8100695e:       movb    %dl, 0x28(%rbx)
    0.00 :   ffffffff81006961:       callq   0xffffffff8102a050 <cyc2ns_read_end>
    0.00 :   ffffffff81006966:       jmp     0xffffffff810068e1 <arch_perf_update_userpage+0x71>
    0.00 :   ffffffff8100696b:       callq   0xffffffff81b6af40 <__stack_chk_fail>
 Percent |	Source code & Disassembly of elf for cycles (1 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         : 2                Disassembly of section .text:
         :
         : 4                ffffffff8100ae70 <perf_ibs_nmi_handler>:
         : 5                ; perf_ibs_nmi_handler():
    0.00 :   ffffffff8100ae70:       pushq   %rbp
    0.00 :   ffffffff8100ae71:       movq    %rsp, %rbp
    0.00 :   ffffffff8100ae74:       subq    $0x18, %rsp
    0.00 :   ffffffff8100ae78:       movq    %r12, -0x10(%rbp)
    0.00 :   ffffffff8100ae7c:       movq    %rbx, -0x18(%rbp)
    0.00 :   ffffffff8100ae80:       movq    %rsi, %r12
    0.00 :   ffffffff8100ae83:       movq    %r13, -0x8(%rbp)
    0.00 :   ffffffff8100ae87:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff8100ae8c:       movq    %r12, %rsi
    0.00 :   ffffffff8100ae8f:       movq    $-0x7ddf2420, %rdi # imm = 0x8220DBE0
    0.00 :   ffffffff8100ae96:       movq    %rax, %r13
    0.00 :   ffffffff8100ae99:       callq   0xffffffff8100a1c0 <perf_ibs_handle_irq>
    0.00 :   ffffffff8100ae9e:       movq    %r12, %rsi
    0.00 :   ffffffff8100aea1:       movl    %eax, %ebx
    0.00 :   ffffffff8100aea3:       movq    $-0x7ddf25a0, %rdi # imm = 0x8220DA60
    0.00 :   ffffffff8100aeaa:       callq   0xffffffff8100a1c0 <perf_ibs_handle_irq>
    0.00 :   ffffffff8100aeaf:       addl    %eax, %ebx
    0.00 :   ffffffff8100aeb1:       je      0xffffffff8100aeba <perf_ibs_nmi_handler+0x4a>
    0.00 :   ffffffff8100aeb3:       incl    %gs:0x7f0177e6(%rip)
    0.00 :   ffffffff8100aeba:       callq   0xffffffff81b68930 <sched_clock>
    0.00 :   ffffffff8100aebf:       subq    %r13, %rax
    0.00 :   ffffffff8100aec2:       movq    %rax, %rdi
    0.00 :   ffffffff8100aec5:       callq   0xffffffff811d81e0 <perf_sample_event_took>
    0.00 :   ffffffff8100aeca:       movl    %ebx, %eax
    0.00 :   ffffffff8100aecc:       movq    -0x10(%rbp), %r12
    0.00 :   ffffffff8100aed0:       movq    -0x18(%rbp), %rbx
    0.00 :   ffffffff8100aed4:       movq    -0x8(%rbp), %r13
  100.00 :   ffffffff8100aed8:       leave
    0.00 :   ffffffff8100aed9:       xorl    %esi, %esi
    0.00 :   ffffffff8100aedb:       xorl    %edi, %edi
    0.00 :   ffffffff8100aedd:       jmp     0xffffffff81b787c0 <__x86_return_thunk>
